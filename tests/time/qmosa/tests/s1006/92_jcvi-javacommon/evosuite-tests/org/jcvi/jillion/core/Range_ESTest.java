/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:34:24 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.487288813219218
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1635L), 65535L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of((-1635L), 65535L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7784140191676774
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1577L, 1577L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1554L;
      Range range1 = Range.of(1554L);
      range0.toString(range_CoordinateSystem1);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1554L);
      range0.getEnd(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(1577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.8754218090563066
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 4234L;
      Range range0 = Range.of(4234L);
      Long long1 = new Long(4234L);
      Long.compare(1412L, 4234L);
      Long.getLong("*'n");
      range0.split((long) long1);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 1L);
      range2.getEnd();
      range2.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.478966619376239
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of((-214L), 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.of((-97L), 127L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8654527562357526
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(2090L, 2090L);
      Iterator<Long> iterator0 = range1.iterator();
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(2090L);
      range3.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.equals(iterator0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.948936240629482
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of(2090L, 4294967295L);
      range0.iterator();
      Range range2 = range0.intersection(range1);
      range1.equals(range2);
      range1.split(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.build();
      range_Builder1.build();
      range_Builder1.expandEnd(0L);
      range_Builder0.expandBegin((-1664L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("3sKkYp{9VJ,K|Eg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.3sKkYp{9VJ,K|Eg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8937968714057947
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(2487L);
      Range range1 = Range.of(9L, 2487L);
      range0.iterator();
      Range range2 = range1.intersection(range0);
      long long0 = (-2908L);
      Range.of((-2908L), 9L);
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-120L), (-269L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.9729286550724097
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(9L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9L);
      Long.getLong("(d+)s*,s*(d+)");
      List<Range> list0 = range1.split(9L);
      range1.equals(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      List<Range> list1 = range1.complement(range0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.equals((Object)list0));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.ofLength(127L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.953422196716173
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      Iterator<Long> iterator0 = range1.iterator();
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(iterator0);
      range0.forEach(consumer0);
      range2.equals(range0);
      Range.ofLength(2227L);
      Range.ofLength(4294967297L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.436325908793707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range1.equals("[ -1 .. -1 ]/RB");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*..s*(d+)", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*..s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4466090698487544
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("X>x)_m~!9`c(CGH<", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse X>x)_m~!9`c(CGH< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.042493433419848
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(9L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(9L);
      Long.compare(9L, 255L);
      Range range2 = Range.of(255L);
      Long.getLong("(d+)s*,s*(d+)");
      List<Range> list0 = range1.split(1580L);
      boolean boolean0 = range2.equals("");
      Range range3 = Range.of(1580L, 1758L);
      List<Range> list1 = range0.complement(range3);
      boolean boolean1 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean1);
      
      List<Range> list2 = range2.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.equals((Object)list1));
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
      
      boolean boolean2 = range1.endsBefore(range2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3023285892104326
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(4234L);
      Long long0 = new Long(4234L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8291440230417244
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of(123L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3942L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3942 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.934647594021947
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(9L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9L);
      Range range2 = Range.of(range_CoordinateSystem0, (-951L), 2180L);
      range1.intersects(range0);
      range2.isSubRangeOf(range1);
      Range range3 = Range.ofLength(9L);
      range3.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 9 .. 9 ]/0B", range_CoordinateSystem1);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-950L), 1579L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-528L);
      Range range0 = Range.of((-528L), (-528L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.132927998820705
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(9L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9L);
      range0.iterator();
      range0.intersection(range1);
      Range.of(9L, 9L);
      Range range2 = Range.of(9L);
      Range range3 = Range.parseRange("[ 9 .. 9 ]/0B");
      range2.equals(range3);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      Range range4 = Range.of(1669L);
      Range range5 = Range.of((-967L), (-967L));
      range4.equals(range5);
      // Undeclared exception!
      try { 
        Range.ofLength((-967L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.141127680645662
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(2416L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2417 .. 2417 ]/RB", string0);
      
      Range range2 = Range.ofLength(2416L);
      Long.compare(4294967293L, 0L);
      Long.getLong("[ 2417 .. 2417 ]/RB");
      List<Range> list0 = range2.split(4294967295L);
      List<Range> list1 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 2416 .. 2416 ]/0B", range_CoordinateSystem1);
      List<Range> list2 = range0.complementFrom(list0);
      range3.complementFrom(list2);
      assertSame(range3, range1);
      
      List<Range> list3 = range1.complementFrom(list2);
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7695721678595584
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = 2195L;
      Range range1 = Range.of(2195L, 2195L);
      Range range2 = Range.of(2195L);
      range1.equals(range2);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.011132030838007
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1452L, 1452L);
      range0.spliterator();
      Range range1 = Range.ofLength(1582L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.endsBefore(range1);
      range1.toString();
      range0.isSubRangeOf(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.getLength();
      range0.toString();
      range1.split(1452L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("b4 08SxFCh0y9\"", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b4 08SxFCh0y9\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.243220592448141
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 4234L;
      Range range0 = Range.of(4234L);
      Long long1 = new Long(4234L);
      Long.compare(1412L, 4234L);
      Long.getLong("*'n");
      range0.split((long) long1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.428378533117496
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(9L);
      long long0 = (-1337L);
      Range.Builder range_Builder0 = new Range.Builder((-1337L), (-1337L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-4902L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.071630417248919
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      Iterator<Long> iterator0 = range1.iterator();
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(iterator0);
      range2.forEach(consumer0);
      range2.equals(range2);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(2227L);
      Range range4 = Range.ofLength(4294967297L);
      Range.Comparators.values();
      List<Range> list0 = range4.complement(range3);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range4));
      assertFalse(range3.equals((Object)range4));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.082548286422015
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1926L), 4294967295L);
      Range range1 = Range.ofLength(1L);
      Long.compare(9223372036854773717L, (-1926L));
      Long.getLong("");
      List<Range> list0 = range1.split(9223372036854775807L);
      List<Range> list1 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      
      List<Range> list2 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list2.isEmpty());
      
      range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list0.equals((Object)list2));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8845502900411577
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(2195L, 2195L);
      Range range1 = Range.of(65535L);
      range0.equals(range1);
      Range range2 = Range.ofLength(2147483647L);
      Range.ofLength(2191L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2195L, 9223372036854775807L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.381559389050448
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.07255484432993
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      Long.getLong("");
      range0.split(9223372036854771566L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      assertFalse(list2.contains(range0));
      assertEquals(1, list0.size());
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8375073314121018
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(4234L);
      Long long0 = new Long(4234L);
      Long.getLong("*'n");
      List<Range> list0 = range0.split((long) long0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      List<Range> list1 = range0.complement(range0);
      List<Range> list2 = range0.complementFrom(list1);
      List<Range> list3 = range0.complementFrom(list2);
      //  // Unstable assertion: assertEquals(4, list3.size());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range1 = Range.of(1412L);
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9709134761830787
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      long long0 = (-2639L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range3 = Range.of((-1L));
      range2.startsBefore(range3);
      range3.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2982L, (-2639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.663525849547293
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.of((-32768L));
      Range range0 = Range.of(2195L, 2195L);
      long long0 = 65535L;
      Range range1 = Range.of(65535L);
      range0.equals(range1);
      String string0 = "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.8552954825202677
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.isEmpty());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      boolean boolean0 = range0.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      range_Builder0.expandEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.355499338715244
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 3552L;
      Range.of(3552L, 3552L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 3552L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6374646962791073
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.split(4282L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(4282L);
      range_Builder2.expandBegin((-2608L));
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.032485637859786
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      long long1 = (-2639L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range2.equals(range3);
      Range range4 = Range.ofLength(2147483647L);
      range4.iterator();
      range4.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4675825537773846
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(4242L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3687L);
      long long1 = 1L;
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O( ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O( 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.067505194559071
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      long long0 = new Long(65535L);
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range1);
      long long1 = 1024L;
      range1.split(1024L);
      Range.of(1024L, 1024L);
      range0.complementFrom(list0);
      Range.of((-2221L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("8]G2NF3gaKp", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8]G2NF3gaKp into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.909413316053647
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem0);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      range1.complement(range0);
      range_CoordinateSystem0.toString();
      List<Range> list0 = range1.split(4294967295L);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Space Based", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Space Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.539551713238859
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Long long0 = new Long((-1502L));
      Long.compare((-1502L), 4294967295L);
      Long.getLong("*'n");
      range0.split(65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("=c,|z*<E{?z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse =c,|z*<E{?z into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3778379642763916
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1621L), 8L);
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9745613527781254
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      Iterator<Long> iterator0 = range1.iterator();
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(iterator0);
      range2.forEach(consumer0);
      range2.equals(range2);
      Range.ofLength(2227L);
      Range range3 = Range.ofLength(4294967275L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.9763672837643407
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.ofLength(2242L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.startsBefore(range0);
      range3.forEach(consumer0);
      range2.equals(range3);
      Range.ofLength(2242L);
      Range.ofLength(4294967297L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.320612711093232
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$RangeIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$RangeIterator
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6550867119507604
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      range0.equals("(d+)s*..s*(d+)");
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      long long1 = 15L;
      // Undeclared exception!
      try { 
        Range.of(15L, (-931L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.762076413777825
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(9L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.of(9L, 32767L);
      Range range1 = Range.of((-32L), 32767L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.792645160660982
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range2.isEmpty();
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.547632259291891
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4093L, 4294967296L);
      range0.isEmpty();
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5879720968163364
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 4093L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-32768L), (-800L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3618457035672997
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      int int0 = 891;
      range0.getBegin();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-627L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-627L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3354344115016032
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.ofLength(4294967296L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4093L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4093L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7185604050844288
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.intersects(range0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(4093L);
      range1.intersects(range0);
      Range.of(4294967296L, 4294967296L);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 4294967296L, 4294967296L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.613706617098093
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(3100L);
      Range range0 = Range.of(1L, 246L);
      range0.getBegin();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.301615576732714
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = 1L;
      Range.of(1L, 9223372036854771716L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1175L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.7350826247569664
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1926L), 4294967295L);
      Range.ofLength(1L);
      Object object0 = new Object();
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split((-1926L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6445712487539295
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967288L);
      range0.equals("(d+)s*..s*(d+)");
      long long0 = 9223372032559808513L;
      Range.of(19L, 9223372032559808513L);
      long long1 = 0L;
      Range.of((-1801L), 0L);
      try { 
        Long.valueOf("(d+)s*..s*(d+)", 2800);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2800 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7459518676367067
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(4234L);
      Long long0 = new Long(4234L);
      Long.compare(1412L, 4234L);
      Range range1 = Range.of(1412L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(938L);
      Object object0 = new Object();
      range1.equals(object0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = Range.ofLength(938L);
      range4.equals(range2);
      Range.ofLength(4234L);
      Range.ofLength(4234L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.209605773232386
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 8589934589L, 8589934589L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      String string0 = "";
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.contractBegin((-1L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.394796552427148
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 4234L;
      Range.of(4234L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1701L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.082584939799028
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(65535L);
      Range range3 = range_Builder0.build();
      List<Range> list1 = range2.complement(range3);
      List<Range> list2 = range2.complementFrom(list1);
      assertEquals(0, list2.size());
      
      List<Range> list3 = range0.complementFrom(list0);
      assertTrue(list3.equals((Object)list2));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5397558573646117
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of((-1654L), (-1654L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, (-1653L), (-924L));
      // Undeclared exception!
      try { 
        range1.split((-747L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.190234418685823
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.getLength();
      Range range1 = Range.of(1765L);
      List<Range> list0 = range0.complement(range1);
      long long0 = 1024L;
      range1.split(1024L);
      Range.of(1024L, 1024L);
      range0.complementFrom(list0);
      Range.of((-2221L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("8]G2NF3gaKp", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 8]G2NF3gaKp into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.025533720648465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(65535L);
      range_Builder0.build();
      Range range3 = range_Builder0.build();
      range3.startsBefore(range0);
      range_Builder0.contractEnd(65535L);
      range2.intersects(range1);
      List<Range> list0 = range2.split(65535L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2769981309902945
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = 4294967295L;
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-3208L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-3208L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2937460519804915
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      long long0 = (-3687L);
      // Undeclared exception!
      try { 
        range0.split((-3687L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.279099447743794
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.of((-9223372036854775808L));
      LinkedList<Range> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<Range>((Collection<? extends Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5315639635683764
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.443167986390981
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.ofLength(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      range_Builder0.expandEnd((-1828L));
      range_Builder0.expandBegin((-2460L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.4134055285327434
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = 1L;
      Range.of((-214L), 1L);
      Range.of((-214L), (-214L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.413529000566328
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of((-214L), 1L);
      Range.of((-214L), (-214L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.compare(799L, (-501L));
      String string0 = "<j)M7Z]~_E$uq";
      Long.getLong("<j)M7Z]~_E$uq");
      // Undeclared exception!
      try { 
        range0.split((-4646L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6270011508271214
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.of((-32772L), (-32772L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.split(4282L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder((-32772L), (-32772L));
      range_Builder2.expandBegin((-2608L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long long0 = 4294967293L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(4093L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.802271853464309
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      range1.endsBefore(range0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1583L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1583L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5857557609818
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-2065L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3972432569282556
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2448L, 2147483647L);
      Range range1 = range0.intersection(range0);
      boolean boolean0 = range1.intersects(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4863140404228057
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.8251784304984096
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(0L);
      range2.startsBefore(range0);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7191256246259194
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range range0 = Range.of((-2401L));
      range0.split(2372L);
      Range range1 = Range.of(1712L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(range2.isEmpty());
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.9837673217664453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(65535L);
      Range range3 = range_Builder0.build();
      range3.startsBefore(range0);
      assertFalse(range3.isEmpty());
      
      range_Builder0.contractEnd(65535L);
      boolean boolean0 = range3.intersects(range2);
      assertFalse(boolean0);
      assertSame(range3, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5436368974996504
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of(2464L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.357718378762424
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2277L), 9L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(10L, long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3947965524271475
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.of(4234L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      range_Builder0.expandEnd(4234L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2608L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Long long0 = new Long(4234L);
      Long.compare(1412L, 4234L);
      Long.getLong("*'n");
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1941L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.3582217310091407
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2400L), 4294967297L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.432361554251186
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      long long0 = (-214L);
      Range.of(1L, 1L);
      Range.of(4093L, 4093L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
