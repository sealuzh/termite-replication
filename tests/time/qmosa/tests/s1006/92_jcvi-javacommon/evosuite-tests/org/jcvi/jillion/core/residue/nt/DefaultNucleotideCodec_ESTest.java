/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:55:01 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3401510199615556
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)74;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4438);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(0L, long0);
      
      int int1 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 3243);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.241462535298864
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 8;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 8);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 512L, 2147483647L);
      range0.isSubRangeOf(range1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byte byte0 = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      int int1 = 15;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(nucleotide0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1297L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.438691852729659
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 8);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 2677);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      nucleotide2.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Purine;
      defaultNucleotideCodec5.encode(nucleotide3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byte byte1 = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)14;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-82));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte)14);
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      String string0 = "kr~@+z%>{";
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("kr~@+z%>{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.kr~@+z%>{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.796864803835904
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)10;
      Range range0 = Range.ofLength(6L);
      range0.iterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode(14, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      nucleotide0.getBasesFor();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 65536);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.967772556711847
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 520225023);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)12;
      Range range0 = Range.ofLength(0);
      range0.iterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0);
      defaultNucleotideCodec1.encode((int) (byte)0, iterator0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 65);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8934363289822964
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 3121);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, 3121);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(nucleotide0);
      Range range0 = Range.ofLength((byte)0);
      defaultNucleotideCodec1.iterator(byteArray1, range0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.207092007046387
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)74;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray2, 2045222521);
      assertEquals(1, int0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(1, int1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3004234639077303
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2126634291));
      Nucleotide nucleotide1 = Nucleotide.Gap;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode(nucleotide1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)1;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(8, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1283038607224984
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.550138469885403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)85;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)85);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9519412249124244
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)127;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)127;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 1432);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1465021848890036
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1717986918);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      nucleotide1.getBasesFor();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483647L;
      Range.of(range_CoordinateSystem0, 462L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange(".OR1+CC0RG@St+'=K'E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .OR1+CC0RG@St+'=K'E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.04823494143235
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1533));
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      nucleotide1.getBasesFor();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483647L;
      Range.of(range_CoordinateSystem0, 471L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange(".OR1+CC0RG@St+'=K'E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .OR1+CC0RG@St+'=K'E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)76);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3504157424482464
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      defaultNucleotideCodec0.decode(byteArray0, 2L);
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 2);
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray2, (-1180L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1180
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3644547484764233
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 2);
      assertEquals(0, int0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(7L, long0);
      
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray2, 0);
      long long1 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals(3L, long1);
      
      byte[] byteArray3 = defaultNucleotideCodec0.encode(0, iterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.211521513275406
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.isEmpty());
      
      byte[] byteArray1 = defaultNucleotideCodec1.encode((-1), iterator0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-48)}, byteArray0);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      int int0 = new Byte((byte)0);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1903290944, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 65535L);
      range0.isSubRangeOf(range1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-46);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.885797234748777
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)93;
      defaultNucleotideCodec0.decode(byteArray0, (byte)7);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.of((-2344L), (-2344L));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)9;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 2L);
      assertEquals(Nucleotide.NotGuanine, nucleotide0);
      
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)9);
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1998534797907348
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)51;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-1));
      assertEquals((-1), int0);
      
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)69;
      byteArray1[6] = (byte) (-81);
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray1);
      assertEquals((-13434880L), long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.iterator(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.094918093365318
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2263));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-102L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -102
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-434));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getAllPossibleAmbiguities();
      int int0 = 8;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 1908874353);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.403835153836796
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5287985193076428
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1775098072741557
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 2);
      assertEquals(0, int0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("ACG", string0);
      
      int int1 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-7), (byte)104, (byte)67, (byte)80}, byteArray0);
      assertEquals(7, int1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5257538231683174
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-110);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 2);
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.toString(byteArray1);
      int int1 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-46));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.isSubRangeOf(range0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator((byte[]) null, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3504157424482464
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      defaultNucleotideCodec0.decode(byteArray0, 2L);
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 2);
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray2, (-1180L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1180
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 127 corresponds to encodedIndex 67  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.182686458399501
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 8);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      Integer integer0 = new Integer(8);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray2);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0435971829106325
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (byte)74);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7597704746469693
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)12;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-4218));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-17);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 3121);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      Range range1 = Range.ofLength(975L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -1 .. -1 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-113);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Predicate<Nucleotide> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Nucleotide> predicate1 = predicate0.negate();
      Nucleotide nucleotide0 = Nucleotide.Weak;
      defaultNucleotideCodec0.encode(nucleotide0);
      Predicate<Nucleotide> predicate2 = predicate1.or(predicate0);
      predicate1.or(predicate0);
      Predicate<Object> predicate3 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Nucleotide nucleotide1 = Nucleotide.Keto;
      predicate1.test(nucleotide1);
      Predicate<Nucleotide> predicate4 = predicate2.and(predicate3);
      predicate4.or(predicate0);
      linkedList0.removeIf(predicate4);
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(5, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.029163318248925
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)85;
      byte byte0 = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-16);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)85);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, (-102L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -102
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (long) (byte) (-46), 1L);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7862943611198907
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      Range.of(1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      Range range1 = Range.of(range_CoordinateSystem1, (long) (byte) (-46), 1L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
