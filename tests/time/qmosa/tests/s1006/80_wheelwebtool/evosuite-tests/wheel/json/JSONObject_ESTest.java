/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:38:00 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7303668903271294
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double(11.8296444);
      Integer integer0 = Integer.getInteger("2KZ.6ffir$+8,nT}6+", 83);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Short short0 = new Short((short)1636);
      JSONObject jSONObject1 = jSONObject0.put("18&r", (Object) short0);
      String string0 = jSONObject0.toString(83, (int) (short)1636);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("yWp@t2[c,wm_", (Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      stringWriter1.append((CharSequence) string0);
      JSONTokener jSONTokener0 = new JSONTokener("G-4_Uu~<! ~ c.i~B");
      jSONTokener0.syntaxError("18&r");
      jSONObject2.getDouble("18&r");
      jSONObject0.opt("G-4_Uu~<! ~ c.i~B");
      String string1 = "\\u";
      try { 
        jSONObject2.getString(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.898677105254486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Byte byte0 = new Byte((byte)37);
      StringWriter stringWriter0 = new StringWriter((byte)81);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONObject.valueToString(writer0);
      jSONObject0.put("true", (-14530064));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      String string0 = "0";
      jSONObject1.optInt("J;E\"d");
      jSONObject1.accumulate("0", "IqkkmS|.L[wg2*}");
      // Undeclared exception!
      jSONObject1.toString(8448);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4037521914704665
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(76);
      jSONObject0.opt("{}");
      String string0 = hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = null;
      stringArray0[2] = "getsum";
      Double.sum(0.0, 76);
      jSONObject0.toString();
      String string1 = JSONObject.quote("{\"java.lang.String@0000000002\":java.lang.Short@0000000003}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.764752513202966
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((-62164681));
      jSONObject0.opt("");
      Short short0 = new Short((short)9);
      jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (Object) hashMap1);
      jSONObject0.opt("toH");
      Double double0 = new Double((-1.0));
      Object object0 = new Object();
      jSONObject0.keys();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.accumulate("", "/!>h5FUALigb*M");
      JSONObject.valueToString(hashMap0);
      JSONObject.valueToString(short0, (short)9, 61);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Short@000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Short@000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.605925871659283
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.toString(44);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject0.keys();
      jSONObject0.names();
      jSONObject0.optDouble("] is not a JSONObject.", 0.0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-786));
      StringWriter stringWriter1 = stringWriter0.append('');
      stringWriter1.append((CharSequence) "{\"java.lang.String@0000000002\": {}}");
      JSONTokener jSONTokener0 = new JSONTokener("Il|X;RW07xoMo\"!");
      String string0 = "Unterminated string";
      jSONTokener0.syntaxError("Unterminated string");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.589831861864038
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.toString(44);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject0.put("] is not a JSONObject.", (Collection) linkedList1);
      jSONObject0.toString(44, 44);
      Float float0 = new Float((-1330.7032));
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      Object object0 = new Object();
      long long0 = jSONObject0.optLong("] is not a JSONObject.");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2583887239948495
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "";
      Short short0 = new Short((short)9);
      Short short1 = new Short((short)1636);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("18&r", object0);
      jSONObject0.toString(44, 3);
      try { 
        jSONObject1.getInt("{\"java.lang.String@0000000002\": null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": null}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7811479035423403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      String string0 = jSONObject0.toString(76);
      assertEquals("{}", string0);
      
      jSONObject0.opt("{}");
      hashMap0.put("", "517.6220");
      Short short0 = new Short((short)9);
      jSONObject0.optLong("istoHexString");
      jSONObject0.put("istoHexString", (long) 76);
      JSONObject jSONObject1 = new JSONObject();
      long long0 = jSONObject1.optLong("!<~$2rB%xE6uJ%#");
      assertEquals(0L, long0);
      
      JSONObject jSONObject2 = jSONObject1.put("JSONArray[", (double) 0L);
      boolean boolean0 = jSONObject2.optBoolean("");
      assertFalse(boolean0);
      
      int int0 = jSONObject0.optInt("!/$");
      assertEquals(0, int0);
      
      Object object0 = jSONObject2.get("JSONArray[");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalAnd(false, false);
      hashMap0.put((Object) null, boolean0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.669834449450485
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.put("", (-2104.0));
      jSONObject1.keys();
      String string1 = "n";
      JSONObject jSONObject2 = jSONObject0.put("n", (-2104.0));
      try { 
        jSONObject2.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.88405119852157
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.toString(44);
      Object object0 = new Object();
      Double.sum(44, 44);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      jSONObject0.optJSONObject("wheel.json.JSONObject");
      boolean boolean0 = jSONObject0.isNull("{\"java.lang.String@0000000002\":{}}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.036736578414717
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 62;
      jSONObject0.toString(62, 62);
      jSONObject0.optLong("{}", (-1L));
      JSONObject.getNames(jSONObject0);
      String string0 = "ToCOEJ8wrw]nu@";
      jSONObject0.optDouble("ToCOEJ8wrw]nu@", (double) 62);
      String string1 = "bo";
      try { 
        jSONObject0.getJSONArray("bo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3682082135274403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.names();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getJSONObject("2N+EhXA!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2N+EhXA!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5578297890659862
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("pH#mN", "");
      jSONObject0.toString((-293));
      jSONObject0.opt("eq");
      String string1 = null;
      hashMap0.put((String) null, (String) null);
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("hwTS/8Jq", (Object) "hwTS/8Jq");
      Object object0 = new Object();
      Double.sum((short)9, 76);
      jSONObject0.toString();
      jSONObject1.optInt("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4162133547648987
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float.min(0.0F, 0.0F);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("~-03a", (Object) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      JSONObject.valueToString("!b\u0001}(YfX[Ui", 21, 21);
      jSONObject0.toJSONArray((JSONArray) null);
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5705991060382574
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float float0 = new Float(0.0F);
      Byte byte0 = new Byte((byte)35);
      StringWriter stringWriter0 = new StringWriter(5);
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.963118887610865
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)47);
      hashMap0.put(jSONArray0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("<FcZ/~].");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong("<FcZ/~].", (-1L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1L), long0);
      
      String string0 = JSONObject.doubleToString(0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5800753406953993
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)47);
      Byte byte1 = new Byte((byte)47);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("<FcZ/~].");
      assertEquals(0, int0);
      
      double double0 = jSONObject0.optDouble("", (double) (byte)47);
      assertEquals(47.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.11285303678132
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      jSONObject0.has("jO");
      jSONObject0.put("jO", 0L);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      jSONObject1.remove("");
      boolean boolean1 = jSONObject1.has("getlongBitsToDouble");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4135968925507933
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      Short short0 = new Short((short) (-30895));
      String[] stringArray0 = new String[14];
      stringArray0[0] = "";
      Integer integer0 = Integer.getInteger("", 0);
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      Short short1 = new Short((short) (-30895));
      String string1 = "ieX\\p+HE<.}.H}e^%";
      JSONObject jSONObject2 = jSONObject1.put("ieXp+HE<.}.H}e^%", (Object) hashMap0);
      jSONObject2.toString(1, (int) (short)1636);
      Integer integer1 = new Integer(70);
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5288440707986646
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float.min(0.0F, 0.0F);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      Long long0 = new Long(1L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long((-1061L));
      linkedList0.add(long1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put(" )gEHkY", (Collection) linkedList0);
      boolean boolean1 = jSONObject0.optBoolean("a'6H%aP R", true);
      jSONObject0.optJSONObject("PaA~");
      boolean boolean2 = jSONObject0.isNull("G%;2j`cHSq");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9017832074119507
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      String string0 = jSONObject0.toString(76);
      jSONObject0.opt("{}");
      hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) short0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = null;
      stringArray0[2] = "getsum";
      Double.sum(0.0, 76);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
      
      jSONObject0.optInt("");
      jSONObject1.optJSONObject("*Q\"-LQ$LkW763\";q{e");
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1552970806874874
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "ismax");
      jSONObject0.put("ar%S,@TPW>i^KnY`0H", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("ismax", (Object) "ismax");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject2.optLong((String) null, (-157L));
      jSONObject2.optDouble("ismax", 140.173214253978);
      jSONObject2.put("nu;['Do?..W", 891);
      jSONObject0.optString("nu;['Do?..W");
      Long long0 = new Long(891);
      JSONObject.valueToString(long0, (-4296), 125);
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.putOpt("ismax", object0);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0513670666544037
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.529403535395866
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2246);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("<z/Q+dO", stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("m]T]SC8Dz2,Sx)#j,", 0L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put("do", (Collection) linkedList0);
      jSONObject2.optDouble("m]T]SC8Dz2,Sx)#j,");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalXor(false, false);
      JSONObject jSONObject3 = new JSONObject((Object) "do");
      jSONObject2.optBoolean("lo", false);
      JSONObject.quote("sC]I");
      try { 
        jSONObject3.getDouble("fkV`!pYuG:_N DBe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fkV`!pYuG:_N DBe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.884171431471527
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Long.compare(346L, 346L);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(47);
      jSONObject0.optString("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (String) null);
      Short short0 = new Short((short)39);
      JSONObject.valueToString(short0);
      jSONObject0.optJSONArray("8U~?o`YX\"M]jw7&hM");
      jSONObject0.optDouble("' and instead saw '", (-11.422287));
      jSONObject0.optLong((String) null, (long) 47);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7448370968936078
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.toString(44);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList1);
      jSONObject0.toString(44, 44);
      jSONObject1.put("] is not a JSONObject.", (Collection) linkedList1);
      int int0 = jSONObject1.optInt("] is not a JSONObject.");
      assertEquals(0, int0);
      
      jSONObject0.optJSONObject("{\n                                                                                        \"java.lang.String@0000000002\": {},\n                                                                                        \"java.lang.String@0000000007\": []\n                                            }");
      boolean boolean0 = jSONObject1.isNull("*Q\"-LQ$LkW763\";q{e");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.819478975752692
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      jSONObject1.keys();
      JSONObject jSONObject3 = jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject4 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      jSONObject2.keys();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject5 = jSONObject4.accumulate("n", object0);
      JSONObject.valueToString(jSONObject3);
      JSONObject.valueToString(jSONArray0, 1064, 8192);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray2 = jSONObject5.names();
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.534088008112886
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = hashMap0.put("", "");
      jSONObject0.toString(76);
      jSONObject0.opt("{}");
      hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      jSONObject0.put("", (Object) short0);
      String string1 = "getsum";
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = null;
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put(string0, (-949.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Float float0 = new Float(901.1F);
      JSONObject.testValidity(float0);
      String string0 = " ZO,A4F~]";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(" ZO,A4F~]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of  ZO,A4F~]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7414788478148155
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.826889285830594
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Long.compare(346L, 346L);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(47);
      jSONObject0.optString("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (String) null);
      Short short0 = new Short((short)39);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long(0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.add((Long) null);
      jSONArray0.put((Collection) linkedList1);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Collection) linkedList0);
      jSONObject1.optBoolean((String) null, true);
      jSONObject2.optJSONObject((String) null);
      jSONObject1.isNull("BJu#xt");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0410978161269138
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((-62164681));
      jSONObject0.opt("");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (Object) hashMap1);
      jSONObject0.opt("toH");
      Double double0 = new Double((-1.0));
      Object object0 = new Object();
      hashMap1.put(double0, object0);
      hashMap2.put("/!>h5FUALigb*M", (String) null);
      jSONObject1.toString();
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject0.put("true", (-14530064));
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      jSONObject3.optInt("0");
      JSONObject jSONObject4 = jSONObject2.accumulate("_G$!o6", (Object) null);
      String string0 = jSONObject4.toString(1058);
      try { 
        jSONObject3.getDouble(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000010\\\": java.lang.Integer@0000000011,\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\",\\njava.lang.String@0000000004\\\": {\\\"java.lang.Double@0000000007\\\": \\\"java.lang.Object@0000000008\\\"}\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2391129084049135
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      String string1 = "|JH\\";
      double double0 = (-2104.0);
      JSONObject jSONObject2 = jSONObject0.put("", (-2104.0));
      JSONObject.quote("|JH");
      jSONObject1.keys();
      jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)74);
      try { 
        jSONObject2.append("", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = new Long(1L);
      JSONObject.doubleToString(1L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Double double0 = new Double(517.622);
      Double.min(517.622, 0.0);
      Double double1 = new Double(2301.76);
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.947667789594058
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = hashMap0.put("", "");
      jSONObject0.toString(76);
      jSONObject0.opt("{}");
      hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) short0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{}";
      stringArray0[1] = null;
      stringArray0[2] = "getsum";
      Double.sum(0.0, 76);
      jSONObject0.toString();
      jSONObject0.optInt("");
      jSONObject0.optString("fk pDoWG", "");
      long long0 = jSONObject1.optLong(string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.746503100815494
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("nqSO:N");
      JSONObject.doubleToString(Double.NaN);
      Object object0 = new Object();
      jSONObject1.append("Expected a ',' or ']'", object0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("val");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "h3ecK";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("h3ecK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h3ecK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0639425051135407
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.put("", (-2104.0));
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject0.put("n", (-2104.0));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject3 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.getString("");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(double0, jSONObject2);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("wheel.json.JSONArray@0000000008", "rUVBgvkEY8VXZ");
      jSONObject1.toString();
      jSONObject2.toString();
      jSONObject2.put("n", (-3634));
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      jSONObject1.optInt((String) null);
      JSONObject jSONObject5 = new JSONObject((Object) "wheel.json.JSONArray@0000000008");
      try { 
        jSONObject5.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5840022485903527
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float.min(0.0F, 0.0F);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("~-03a", (Object) null);
      JSONObject.valueToString((Object) null);
      jSONObject0.put("isnotifyAll", true);
      JSONObject.valueToString("!b\u0001}(YfX[Ui", 21, 21);
      jSONObject0.toJSONArray((JSONArray) null);
      Object object1 = JSONObject.NULL;
      jSONObject1.names();
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5315018781076346
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("AO])", 1244);
      jSONObject0.optDouble("bi3)aCUjMn;I");
      Boolean.valueOf("\t");
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(false);
      Boolean.getBoolean((String) null);
      hashMap1.putIfAbsent(boolean0, boolean1);
      jSONObject1.optJSONArray("\t");
      jSONObject1.has("\"\"");
      Long long0 = new Long(0L);
      jSONObject0.accumulate("\t", long0);
      jSONObject0.optString("\"\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7608723090341707
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put("", "L<_?3/uC");
      short short0 = (short)9;
      Short short1 = new Short((short)9);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[1] = null;
      stringArray0[2] = "getsum";
      String string0 = "6@pAm";
      jSONObject0.putOpt("6@pAm", (Object) null);
      JSONObject.getNames((Object) null);
      jSONObject0.optDouble("7KW. ReY~-;9`#u)");
      try { 
        jSONObject0.getString("L<_?3/uC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L<_?3/uC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7252284909778317
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-362));
      Byte byte0 = new Byte((byte) (-30));
      Integer integer1 = new Integer((byte) (-30));
      Integer.getInteger("", integer0);
      Integer.remainderUnsigned((-1431), (-289));
      hashMap0.put(integer1, byte0);
      JSONObject.getNames((Object) integer0);
      String string0 = null;
      jSONObject0.optBoolean("TTla=z<uuy.X", false);
      try { 
        jSONObject0.getInt("i/p.v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i/p.v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7370699364010604
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("nqSO:N");
      long long0 = jSONObject0.optLong("\t", (long) 0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3914860443845836
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("");
      hashMap0.put("", "517.6220");
      Short short0 = new Short((short)9);
      jSONObject0.optLong("istoHxStrig");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString((Object) null, (short)9, (short)9);
      jSONObject1.optLong("!<~$2rB%xE6uJ%#");
      jSONObject1.optBoolean("");
      jSONObject0.optInt("!/$");
      try { 
        jSONObject1.get("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[}b[";
      stringArray0[1] = "[";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(0L);
      Float float0 = new Float((-64.5587F));
      Float.max(0.0F, 0.0F);
      Float.sum(0L, 0.0F);
      Float.isFinite(0.0F);
      String string0 = JSONObject.numberToString(long0);
      Object object0 = new Object();
      Float float1 = new Float(0.0F);
      Long long1 = new Long(0L);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_GGm";
      try { 
        jSONObject0.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4912213967117514
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-30895));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "<z/Q+dO";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("m]T]SC8Dz2,Sx)#j,", (long) (short) (-30895));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("do", (Collection) linkedList0);
      jSONObject3.optDouble("lH`juJ(,rfm");
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(true, true);
      JSONObject jSONObject4 = new JSONObject(boolean0);
      jSONObject2.optBoolean("fkV`!pYuG:_N DBe", true);
      try { 
        jSONObject2.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0829585727837223
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Long long0 = new Long((-15L));
      Float float0 = new Float(0.0F);
      Float.max(0.0F, (-15L));
      Float.sum((-15L), 0.0F);
      Object object0 = new Object();
      Double.sum(1.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONArray text must start with '['";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      int int0 = jSONObject0.optInt("istoString");
      assertEquals(0, int0);
      
      jSONObject0.optJSONObject("cop");
      boolean boolean0 = jSONObject0.isNull("-cMVm");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7350519159829267
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      double double0 = (-2104.0);
      jSONObject0.put("", (-2104.0));
      jSONObject1.keys();
      String string1 = "n";
      JSONObject jSONObject2 = jSONObject0.put("n", (-2104.0));
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2491709762531196
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (Object) hashMap0);
      assertEquals(1, jSONObject0.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optInt("] is not a JSONObject.");
      boolean boolean0 = jSONObject1.isNull("*Q\"-LQ$LkW763\";q{e");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.398130744621738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      String string0 = "\\t";
      stringArray0[0] = "\t";
      Float float0 = new Float(0.0F);
      int int0 = 44;
      Byte byte0 = new Byte((byte)81);
      Byte.toUnsignedInt((byte)39);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(14, 44);
      String string1 = "qFig@";
      try { 
        jSONObject0.getDouble("qFig@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qFig@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6608869813925713
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(76);
      jSONObject0.opt("{}");
      String string0 = "L<_?3/uC";
      hashMap0.put("", "L<_?3/uC");
      Short short0 = new Short((short)9);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) short0);
      jSONObject1.optDouble("nqSO:N");
      JSONObject jSONObject2 = jSONObject1.put("]E`f{@.FS&.b=m", (-912.337882));
      jSONObject0.optBoolean("]E`f{@.FS&.b=m");
      String string1 = "HK.G=.Uo/lNHu(i";
      jSONObject2.optInt("HK.G=.Uo/lNHu(i");
      try { 
        jSONObject2.get("Ly||ajVo%FkKGwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ly||ajVo%FkKGwK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6424758464280775
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[3] = "\t";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("AO])", 1244);
      jSONObject0.optDouble("bi3)aCUjMn;I");
      Boolean.valueOf("\t");
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(false);
      Boolean.getBoolean((String) null);
      hashMap1.putIfAbsent(boolean0, boolean1);
      jSONObject1.optJSONArray("\t");
      jSONObject1.has("\"\"");
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optString("\"\"");
      jSONObject2.put("{", false);
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("min", false);
      String string0 = null;
      String string1 = "Unterminated string";
      try { 
        jSONObject0.getDouble("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3016914131064325
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("");
      String string0 = "jO";
      jSONObject0.has("jO");
      jSONObject0.put("jO", 0L);
      String string1 = ">k**Nw~5h7_<M@\"qT]m";
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("jO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of jO
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.312242165116608
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float float0 = new Float(0.0F);
      Byte byte0 = new Byte((byte)81);
      StringWriter stringWriter0 = new StringWriter(5);
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      jSONObject0.write(stringWriter0);
      Float float1 = new Float((-1330.7032));
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      Object object0 = new Object();
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\t";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[6] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject1 = new JSONObject(collection0, stringArray0);
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(0);
      jSONObject1.append("\t", double0);
      String string1 = "\\n";
      JSONTokener jSONTokener0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1353677537582625
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double(11.8296444);
      Float float0 = new Float(2985.6987F);
      Float.max(2985.6987F, 3143.3926F);
      Float.sum((-1780.1295F), 0.0F);
      Float.isFinite((-1780.1295F));
      String string0 = JSONObject.numberToString(double0);
      Object object0 = new Object();
      Float float1 = new Float(2985.6987F);
      Long long0 = new Long(0L);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3957094260849363
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Lf<g>1r]mKMD_xTp,", 2498.5802753443836);
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.617051411355598
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "!~5E$-F 2; EZ@MLS";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optJSONArray("de");
      try { 
        jSONObject0.getBoolean("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8561805146670056
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Double double0 = new Double(Double.NaN);
      Double.min(0L, 0.0);
      Double double1 = new Double(603.5807);
      JSONObject jSONObject1 = new JSONObject(double1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1329.56);
      assertEquals("1329.56", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0457648257580447
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BiFunction<Object, Byte, Byte> biFunction0 = (BiFunction<Object, Byte, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "min";
      jSONObject0.put("min", true);
      try { 
        jSONObject0.getInt("min");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"min\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1589399154675832
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      String string0 = "7SHj";
      String string1 = ",";
      jSONObject0.optString("7SHj", ",");
      String string2 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6576671430417886
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("k^.3");
      String string0 = null;
      String string1 = "JqX .nn#u#ma*xN4/";
      JSONObject jSONObject1 = jSONObject0.put("JqX .nn#u#ma*xN4/", (-378L));
      jSONObject1.putOpt("mjVz+s", jSONObject0);
      jSONObject0.remove("");
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.241345207612541
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Double double0 = new Double(908.754212471);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string0 = "<i% H+7:x";
      jSONObject1.put("<i% H+7:x", (Object) null);
      Long long0 = new Long(0L);
      Short short0 = new Short((short)123);
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject1.opt("VmfwqV#+=");
      jSONObject2.optJSONArray("VmfwqV#+=");
      String string1 = "q:3r@&&:Rd]<";
      try { 
        jSONObject1.getBoolean("q:3r@&&:Rd]<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q:3r@&&:Rd]<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.922279383872607
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(boolean0, boolean0);
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      StringWriter stringWriter0 = new StringWriter(0);
      Float float0 = new Float((double) 0);
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      Object object0 = new Object();
      Float float1 = new Float(0.0);
      hashMap2.put(object0, float1);
      jSONObject0.putOpt("", float1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.204122311185877
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject2 = new JSONObject(collection0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      try { 
        jSONObject1.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1779078664912497
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-30895));
      String[] stringArray0 = new String[14];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "<z/Q+dO";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      jSONObject0.put("m]T]SC8Dz2,Sx)#j,", (long) (short) (-30895));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("do", (Collection) linkedList0);
      jSONObject2.optDouble("lH`juJ(,rfm");
      Boolean boolean0 = new Boolean(true);
      jSONObject0.opt("");
      jSONObject0.optString("] is not a JSONObject.", "0.{>");
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "Qi35";
      JSONTokener jSONTokener0 = new JSONTokener("Qi35");
      JSONTokener jSONTokener1 = new JSONTokener("\"\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      long long0 = (-2074L);
      Long long1 = new Long((-2074L));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of re
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[5];
      stringArray0[2] = "\t";
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0);
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(64);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      assertSame(stringWriter2, stringWriter1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6723957433509247
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("<FcZ/~].");
      long long0 = jSONObject0.optLong(".*%WUWQ`+c W\"H", (long) 0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Long long0 = new Long((-15L));
      Float float0 = new Float(0.0F);
      Float.max(0.0F, (-15L));
      Float.sum((-15L), 0.0F);
      Object object0 = new Object();
      Double.sum(1.0, 0.0);
      String string0 = JSONObject.quote("pc>,aX*hwV{g]*jY");
      assertEquals("\"pc>,aX*hwV{g]*jY\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1281.0));
      assertEquals((-1281.0), double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getLong("?atmRc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?atmRc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
