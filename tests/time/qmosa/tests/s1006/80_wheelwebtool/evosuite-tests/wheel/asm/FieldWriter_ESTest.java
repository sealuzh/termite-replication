/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:36:55 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5250199997186045
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(697);
      String string0 = "RuntimeVisibleAnnotations";
      String string1 = "org.apache.commons.io.filefilter.AndFileFilter";
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.AndFileFilter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string2 = "";
      String string3 = null;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 285212681, "", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      classWriter0.toByteArray();
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3952585200528596
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(697);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.AndFileFilter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 285212681, "", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      classWriter0.toByteArray();
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = 65535;
      classWriter0.toByteArray();
      classWriter0.visitAnnotation("", false);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5038957092877099
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3384), "23![aM&VJ.8}?", "23![aM&VJ.8}?", "G b2L", "23![aM&VJ.8}?");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "23![aM&VJ.8}?";
      stringArray0[1] = "G b2L";
      stringArray0[2] = "G b2L";
      stringArray0[3] = "23![aM&VJ.8}?";
      stringArray0[4] = "ve";
      stringArray0[5] = "23![aM&VJ.8}?";
      classWriter0.visit((-3384), 0, "23![aM&VJ.8}?", "ve", "ve", stringArray0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 430, "23![aM&VJ.8}?", "3%?3Dk5p6x3q0hD4agf", "", (Object) null);
      classWriter0.toByteArray();
      FieldWriter fieldWriter2 = classWriter0.firstField;
      AnnotationVisitor annotationVisitor0 = fieldWriter2.visitAnnotation("ConstantValue", false);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4804779276453799
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ve";
      stringArray0[1] = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      stringArray0[2] = "ve";
      stringArray0[3] = "ve";
      stringArray0[4] = "ve";
      classWriter0.visit(49, 49, "org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter", "ve", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1330), "org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("ve", false);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5087598483524394
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.firstField = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 430, "", "", "G b2L", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      String string0 = "Lx?/`~yK\\4|#;M&zi\"";
      PipedInputStream pipedInputStream0 = new PipedInputStream(430);
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, 3282, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5087598483524394
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.firstField = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.lastField = null;
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 430, "", "", "G b2L", (Object) null);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.firstField.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5876302662159738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.firstField = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 430, "", "", "G b2L", (Object) null);
      fieldWriter0.visitAnnotation("G b2L", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      String string0 = "Lx?/`~yK\\4|#;M&zi\"";
      PipedInputStream pipedInputStream0 = new PipedInputStream(430);
      pipedInputStream0.markSupported();
      classWriter0.firstField.visitAnnotation("", false);
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, 3282, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4808035255413385
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "G b2L", "", (String) null, (Object) null);
      classWriter0.toByteArray();
      Attribute attribute0 = new Attribute("G b2L");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5269064510325534
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "G b2L", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 62152, "", "", (String) null, (Object) null);
      classWriter0.toByteArray();
      ByteVector byteVector0 = new ByteVector();
      classWriter0.toByteArray();
      ClassWriter classWriter1 = new ClassWriter(4096);
      AnnotationVisitor annotationVisitor0 = classWriter1.visitAnnotation("", true);
      AnnotationVisitor annotationVisitor1 = fieldWriter1.visitAnnotation("D>&|.PM]IT?A{0@GB", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      ByteVector byteVector0 = null;
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5188608584534495
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HzeZ`_/f;l0a{fvF");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4857), "|(:5 uwBo=+alVMV", "P4#eqvs", "org.apache.commons.io.filefilter.CanWriteFileFilter", (Object) null);
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("~@Jev?Ssv", true);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("~@Jev?Ssv", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(697);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 718, "W%Zdc,OCb3/t4", "PZdRlct", "W%Zdc,OCb3/t4", "W%Zdc,OCb3/t4");
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", true);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.AndFileFilter");
      Attribute attribute1 = attribute0.next;
      byte[] byteArray0 = new byte[0];
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.072402763593355
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.thisName = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "nQ/vWITW{6");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ClassWriter classWriter1 = new ClassWriter(5);
      File file0 = MockFile.createTempFile("0Bdmiy71Lv", "0Bdmiy71Lv");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ClassWriter classWriter2 = new ClassWriter(0);
      classWriter2.toByteArray();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter2, (-643), "< GH}Pm1)>@(3", "", "&A", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value /tmp/0Bdmiy71Lv00Bdmiy71Lv
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String string0 = "^C?";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "^C?", "^C?", "^C?", "^C?");
      fieldWriter0.visitAnnotation("^C?", true);
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(697);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.AndFileFilter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("<g~; uHN{h<Xe?%", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 49, "", (String) null, (String) null, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
