/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:16:09 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4341542660770568
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.setConnected(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player1 = new Player((-2560), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "oO~d;sd{I#g!PEweg", 2552);
      player0.setJoinOK(player1, false);
      player0.type();
      player1.setDead();
      player1.type();
      player0.gangStrength();
      player1.setX((-163.55F));
      player0.toString();
      player0.getY();
      player0.isJoinOK(player1, false);
      player1.toString();
      player1.toString();
      player1.isJoinOK(player0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player2 = new Player(10);
      player2.getY();
      Player player3 = new Player(1);
      player0.setJoinOK(player3, true);
      player3.getPictureId();
      player0.getIP();
      float float0 = player1.getX();
      assertEquals(1392409281320L, player1.getTimeOfDeath());
      assertEquals((-163.55F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5322663729506716
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY((-1291.29F));
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      player0.pack();
      player1.toString();
      player0.isJoinOK(player1, false);
      player0.getY();
      Player player2 = new Player(1);
      player1.setX((short)4919);
      player0.setJoinOK(player2, true);
      player0.getPictureId();
      System.setCurrentTimeMillis((-2647L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0);
      String string0 = "state.Player$JoinInfo";
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      EvoSuiteFile evoSuiteFile0 = null;
      player1.setY((-1.0F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Player$JoinInfo");
      byte[] byteArray0 = new byte[2];
      player0.boss = (Party) player1;
      player1.pack();
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-10);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player1.getZ();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("state.Player$JoinInfo");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.105426495394898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-1), "", 3456);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player1 = new Player((short)4919, "~Vlw", "", 113);
      Player player2 = new Player((short)4919, (String) null, (-939));
      player2.setJoinOK(player1, false);
      Player player3 = new Player((-2011), "&ek]q(\"wh]", "oO~d;sd{I#g!PEweg", 2424);
      player3.type();
      player1.setDead();
      player0.type();
      player1.gangStrength();
      player3.setX(0.1F);
      player2.toString();
      player2.getY();
      player3.isJoinOK(player0, true);
      player0.toString();
      player3.gangStrength();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3117598862917363
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player1 = new Player((-2560), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "oO~d;sd{I#g!PEweg", 2556);
      player0.setJoinOK(player1, false);
      player0.type();
      player0.setDead();
      player1.type();
      player1.gangStrength();
      player1.setX(0);
      player1.toString();
      player1.getY();
      player0.isJoinOK(player1, true);
      player1.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      player1.gangStrength();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.174834213558677
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(3456);
      Player player1 = new Player(3456, "", "", 3456, (-1316));
      player0.setY(487.8017F);
      player1.pack();
      player0.isJoinOK(player1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0.0.0.0", false);
      player0.remove(player1);
      player1.setConnected(true);
      player0.getY();
      player0.toString();
      player0.gangStrength();
      player0.toString();
      player1.getName();
      Player player2 = new Player((-735), "Player3456", "", (short)4919);
      Player player3 = new Player(1, "Player3456", (-481));
      player3.remove(player2);
      player1.getStrength();
      player0.setMoney(0.0F);
      System.setCurrentTimeMillis((-3682L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1034354550763315
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(3456, "", "", 3456, (-1316));
      byte[] byteArray0 = player0.pack();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0.0.0.0", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.write(byteArray0, 0, 0);
      Player player1 = new Player(4919, "'pkQg.", (byte) (-10));
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, false);
      player1.getZ();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("f@>2Dp");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf((Locale) null, "f@>2Dp", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      player1.pack(dataOutputStream0);
      player1.getX();
      Player player2 = new Player();
      player2.reset(true);
      System.setCurrentTimeMillis((-1L));
      int int0 = player1.gangStrength();
      assertEquals((-1316), player1.getStrength());
      assertEquals((-1316), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5681782945332445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1495.5388F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      player0.setDead((-4163L), true);
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player1, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      player0.pack();
      player1.toString();
      player0.getY();
      Player player2 = new Player(1);
      player1.setX((short)4919);
      player0.setJoinOK(player2, true);
      int int0 = player0.getPictureId();
      assertEquals(561.7067F, player0.getMoney(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-2502), (String) null, (-2502));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.470816112834929
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1505);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Player$JoinInfo");
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      Player player1 = new Player((byte)98, "", "state.Player$JoinInfo", 0);
      player0.isJoinOK(player1, false);
      Player player2 = new Player();
      player2.getZ();
      player0.gangStrength();
      Player player3 = new Player(1, "", "x|_XO", (-2529));
      player3.getPictureId();
      player2.setDead((long) 1478, false);
      player1.getX();
      player0.pack();
      player3.remove(player1);
      player0.getStrength();
      player3.setDead((long) 1478, false);
      player3.setJoinOK(player0, false);
      player2.reset(true);
      player0.type();
      player2.getY();
      player2.pack();
      assertEquals(0L, player2.getTimeOfDeath());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-1300), "", "module.ModuleBrowserDialog$ModuleFilter", (-1300));
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5672840401178636
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1528.2786F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      Player player2 = new Player((-3901), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "1Zucc:+", 10, 2805);
      player0.setJoinOK(player2, false);
      player2.id = 0;
      player1.reset(false);
      player1.type();
      player0.getX();
      int int0 = player0.getStrength();
      assertTrue(player0.isDead());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.361272036422214
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".*[.]class$");
      Player player1 = new Player((-30647), ".*[.]class$", (-30647));
      player1.setZ(0.2F);
      player1.prev = (Party) player0;
      player1.reset(false);
      player1.boss = (Party) player0;
      player0.head = (Party) player1;
      player0.setJoinOK(player1, false);
      player0.pack();
      player0.pack();
      player0.type();
      player0.pack();
      player0.getPictureId();
      player1.toString();
      player0.getStrength();
      player1.getX();
      player1.isJoinOK(player0, false);
      player0.getPictureId();
      player1.getZ();
      assertEquals(0.2F, player1.getZ(), 0.01F);
      
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      byte[] byteArray0 = player0.pack();
      player0.boss = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.write(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(58, pipedInputStream0.available());
      
      player0.reset(true);
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9472002185719735
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(448L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(3, "~.*_9", "~.*_9", 1488, 5);
      player0.pack();
      player0.setX(10.0F);
      Player player1 = new Player(1488, "~.*_9", " ", 4919, 3);
      player0.setJoinOK(player1, true);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(3, player1.getStrength());
      
      player0.pack();
      player0.gangStrength();
      player0.getIP();
      player0.gangStrength();
      player0.pack();
      int int0 = player0.gangStrength();
      assertEquals(5, int0);
      
      int int1 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals(5, int1);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1488, player0.getPictureId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.532786574095114
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1495.5388F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      player0.pack();
      player1.toString();
      boolean boolean0 = player0.isJoinOK(player1, false);
      player0.getY();
      Player player2 = new Player(1);
      player0.setJoinOK(player2, true);
      player0.setX(1002.8F);
      player0.setJoinOK(player2, true);
      assertEquals(1002.8F, player0.getX(), 0.01F);
      
      player1.getPictureId();
      boolean boolean1 = player1.isJoinOK(player2, false);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setDead((long) 0, true);
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.reset(false);
      player0.pack();
      player0.setX((-1928.457F));
      player1.isConnected();
      player1.setMoney(0.2F);
      player0.setZ(0);
      player1.setDead();
      player1.setDead(0L, true);
      float float0 = 500.7842F;
      player1.id = 0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 4919;
      String string0 = "hqh&yd.\\`ij904)Rt";
      Player player0 = new Player(4919, "hqh&yd.`ij904)Rt", 4919);
      int int1 = 2424;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "";
      byte byte0 = (byte) (-10);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1761414031011608
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1528.2786F);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d<+C10!QK:ZocUXuo4", false);
      Player player1 = new Player(0, "2Z3Jq", 0);
      player0.remove(player1);
      player0.setConnected(false);
      player0.getY();
      player0.toString();
      player0.gangStrength();
      player1.toString();
      player1.getName();
      Player player2 = new Player(0, "DaN'c00kJ(&N90W", "g=-c_XD-pG}g0_Rh", 1439);
      player1.setJoinOK(player0, false);
      assertEquals(1528.2786F, player0.getY(), 0.01F);
      
      player2.gangStrength();
      player1.setConnected(true);
      int int0 = player2.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1970;
      Player player0 = new Player(1970, "w+7Z3-E2HB6", "2T4&cyY-W{", 1970);
      Party party0 = player0.gangBoss();
      player0.prev = party0;
      Player player1 = null;
      player0.reset(true);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3042644954097065
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(4919, "gui.ModuleBrowserDialog$ModuleFilter", "", 4919, 4919);
      player0.setMoney(4919);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player(0, "g!", "gui.ModuleBrowserDialog$ModuleFilter", 4919, (short)4919);
      player1.unpack(byteArray0);
      player0.setZ((-1881.32F));
      player0.gangStrength();
      player0.getY();
      Party party0 = player1.boss;
      player1.setMoney(0.2F);
      player1.getStrength();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player1.pack(dataOutputStream0);
      player0.add(player1);
      player1.setMoney(0.0F);
      player1.add(player0);
      player0.type();
      player1.pack();
      player0.getZ();
      player1.setX(0.0F);
      assertEquals(0.0F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-1612), "EZxV%gZ}^Pd", (-1612));
      player0.setDead();
      player0.isDead();
      Player player1 = new Player((-838), "EZxV%gZ}^Pd", "", (-838), 1382);
      player1.reset(false);
      player0.head = (Party) player1;
      player1.setDead((long) (-1612));
      player0.reset(true);
      float float0 = Player.TOLERANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      pipedOutputStream0.write(byteArray0);
      byte[] byteArray1 = new byte[0];
      pipedOutputStream0.write(byteArray1);
      pipedOutputStream0.write(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream0);
      player0.reset(false);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(3456, "", "A#s-#i", 3456);
      player0.getSubparty();
      player0.pack();
      player0.setMoney(3664.06F);
      Player player1 = new Player();
      player1.getMoney();
      player1.getSubparty();
      player1.setMoney(778.19073F);
      float float0 = player0.getMoney();
      assertEquals(3664.06F, float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 25186;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(25186, "8w", 25186);
      player0.getY();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      MockFile mockFile0 = new MockFile("$.m>M*XQT/", "&n(2+3Fe{rMw\"pS");
      File file0 = MockFile.createTempFile("&n(2+3Fe{rMw\"pS", "&n(2+3Fe{rMw\"pS", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = new Locale("");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      mockPrintStream0.printf(locale0, "", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player();
      String string0 = player0.getIP();
      assertEquals("0.0.0.0", string0);
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player();
      player0.type();
      Party party0 = new Party();
      party0.add(player0);
      party0.next = (Party) player0;
      player0.prev = party0;
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(3127, "", 3127);
      player0.setConnected(false);
      player0.setDead();
      player0.isConnected();
      player0.getName();
      player0.setConnected(false);
      player0.setConnected(false);
      player0.setDead((-1L), false);
      player0.setDead();
      player0.setDead((-2092L), false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      player0.setConnected(false);
      player0.unpack(byteArray0);
      float float0 = player0.getZ();
      assertEquals((-2092L), player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(3456, "", "", 3456, (-1316));
      byte[] byteArray0 = player0.pack();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0.0.0.0", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      bufferedOutputStream0.write(byteArray0, 0, 0);
      Player player1 = new Player(4919, "'pkQg.", (byte) (-10));
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, false);
      player1.getZ();
      mockFileOutputStream0.flush();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("f@>2Dp");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf((Locale) null, "f@>2Dp", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      player1.pack(dataOutputStream0);
      player1.getX();
      Player player2 = new Player();
      player2.getY();
      player0.toString();
      player1.pack();
      assertEquals("", player1.getName());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(0, "#|N_N lpu+b({Q0xiR'", "#|N_N lpu+b({Q0xiR'", 0, 3);
      player0.id = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)78;
      Player player1 = new Player(3, "#|N_N lpu+b({Q0xiR'", "#|N_N lpu+b({Q0xiR'", 0, 25186);
      player0.add(player1);
      assertEquals(0, player1.getPictureId());
      assertEquals(25186, player1.getStrength());
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.getPictureId();
      player0.toString();
      System.setCurrentTimeMillis(3);
      int int0 = player0.type();
      assertEquals(5, int0);
      
      float float0 = player0.getX();
      assertTrue(player0.isConnected());
      assertEquals(10.0F, float0, 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(2896, (String) null, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.id = (-1090);
      player0.unpack(dataInputStream0);
      player0.setMoney(0);
      player0.isDead();
      player0.reset(false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertFalse(boolean0);
      
      player0.getName();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(2330, "~]LQ^w>i>9um", "0.0.0.0", 2330, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(2330, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("~]LQ^w>i>9um", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(2959, "", "JM%;OSZ;Mxbsi}L=(i", 2959, 2959);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(2959, player0.getStrength());
      assertEquals(2959, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.196422294125466
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(2704, "&Fqd", "&Fqd", 2127, 2704);
      player0.setDead();
      player0.setZ(2704);
      player0.getX();
      player0.getMoney();
      Player player1 = new Player((short)4919, "&Fqd", "&Fqd", 0);
      player0.next = (Party) player1;
      Party party0 = player0.gangBoss();
      player0.next = party0;
      Player player2 = new Player(195);
      player0.setJoinOK(player2, true);
      player0.setMoney(2127);
      player0.getMoney();
      player2.isJoinOK(player0, true);
      player0.getTimeOfDeath();
      player2.setZ(560.0F);
      assertEquals(560.0F, player2.getZ(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(4727L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(34, "", "Nobnu^xvsh w_N 1", 481, (-1));
      player0.id = (-1);
      int int0 = player0.type();
      assertEquals(5, int0);
      
      String string0 = player0.getIP();
      assertEquals("", string0);
      
      float float0 = player0.getY();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(481, player0.getPictureId());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6565747353549103
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 0);
      player0.pack();
      player0.gangStrength();
      player0.setConnected(false);
      player0.setY(1495.5388F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      player0.getTimeOfDeath();
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      player0.pack();
      player1.toString();
      player1.isConnected();
      player0.getY();
      Player player2 = new Player(1);
      player1.setX((short)4919);
      player0.setJoinOK(player2, false);
      int int0 = player0.getPictureId();
      assertFalse(player0.isConnected());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "jd<}m?|J)(";
      String string1 = "IDKiQ";
      Player player0 = new Player((-1316), "IDKiQ", "jd<}m?|J)(", 3456, (-1316));
      Player player1 = new Player(1275, "IDKiQ", "IDKiQ", (-1316));
      player1.pack();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(1, "", 1);
      player0.setDead();
      player0.setDead(0L, true);
      player0.setDead((-1260L), true);
      boolean boolean0 = player0.isDead();
      assertEquals((-1260L), player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(4919);
      player0.pack();
      Player player1 = new Player();
      player1.isJoinOK(player0, true);
      player0.getZ();
      player1.setDead((-1L), false);
      player1.getX();
      assertTrue(player1.isDead());
      
      player1.reset(false);
      assertEquals(0.0F, player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.855868606181163
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-1612), "EZxV%gZ}^Pd", (-1612));
      player0.setDead();
      player0.isDead();
      Player player1 = new Player((-838), "EZxV%gZ}^Pd", "Player.unpack(): *** WARNING *** data is not of proper type!", (-838), 1382);
      player1.reset(false);
      player0.head = (Party) player1;
      player1.setDead((long) (-1612));
      player0.reset(true);
      player0.getMoney();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      player0.setMoney((-1458.8729F));
      player0.getMoney();
      player0.setMoney((byte)0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      player0.pack();
      player0.boss = null;
      player0.setMoney(0.0F);
      player0.getMoney();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(1505);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      Player player1 = new Player((-2141), "", (short)4919);
      player0.remove(player1);
      int int1 = player0.getStrength();
      assertEquals(1, int1);
      
      player0.reset(true);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player1505", player0.getName());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      
      System.setCurrentTimeMillis((-2141));
      float float1 = player1.getX();
      assertEquals(10.0F, float1, 0.01F);
      assertEquals(4919, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      player0.pack();
      player0.boss = null;
      player0.setMoney(0.0F);
      player0.getMoney();
      player0.setMoney(1.0F);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player(0, "state.Player$JoinInfo", (-103));
      player1.setY((-1.0F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Player$JoinInfo");
      byte[] byteArray0 = new byte[2];
      player0.boss = (Party) player1;
      player1.pack();
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-10);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player1.getZ();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("state.Player$JoinInfo");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-10);
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockFile0;
      mockPrintStream0.printf((Locale) null, "state.Player$JoinInfo", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((-2966), "", 25092);
      Player player1 = new Player((short)4919);
      assertEquals(0.0F, player1.getY(), 0.01F);
      
      player1.setY(0.2F);
      player1.id = 197;
      player0.next = (Party) player1;
      player0.getIP();
      float float0 = player1.getY();
      assertEquals(0.2F, float0, 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.53777822894345
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [EO~] d:t' was incomplete: ", "Player.unpack(): *** WARNING *** [EO~] d:t' was incomplete: ", 0, 0);
      player0.pack();
      player0.setConnected(false);
      player0.setY(1495.5388F);
      player0.getIP();
      player0.setDead((long) 0);
      player0.setMoney(561.7067F);
      player0.getPictureId();
      player0.getX();
      Party party0 = player0.gangBoss();
      player0.head = party0;
      Player player1 = new Player(0, "Player.unpack(): *** WARNING *** [EO~] d:t' was incomplete: ", "Player.unpack(): *** WARNING *** [EO~] d:t' was incomplete: ", (short)4919, 0);
      player0.prev = (Party) player1;
      player0.getZ();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      player0.setConnected(false);
      player0.pack();
      player1.toString();
      player0.isJoinOK(player1, false);
      player0.getY();
      Player player2 = new Player(1);
      player2.setZ((short)4919);
      player1.id = 10;
      player1.setX((short)4919);
      player0.setJoinOK(player2, true);
      int int0 = Packable.UNDEFINED;
      player2.isJoinOK(player1, true);
      assertEquals(4919.0F, player1.getX(), 0.01F);
      assertEquals(4919.0F, player2.getZ(), 0.01F);
  }
}
