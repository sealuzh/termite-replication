/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:43:26 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2414625352988633
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-22));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1715));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-3087));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1715));
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-3087), advancedSettings0.getSocketLinger());
      assertEquals((-1715), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketTrafficClass("y=)");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6642105699387058
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(2527);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.setClientSocketSendBufferSize((-3466));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings2.setClientSocketReceiveBufferSize(0);
      advancedSettings2.toXML("");
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("!i9J*Ek-0IbLBl%tC1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !i9J*Ek-0IbLBl%tC1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5289116063865116
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(576);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(576, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(2212);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientIdentifier("1");
      advancedSettings0.setPerformancePreferencesBandwidth((-1983));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("1");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 1
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTrafficClass();
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1028100642070378
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("N=MqX!3<");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency(6904);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesLatency((-793));
      advancedSettings1.setClientSocketReceiveBufferSize((-740));
      advancedSettings1.setSocketLinger(6904);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings1.setPerformancePreferencesConnectionTime(2765);
      advancedSettings1.setCharset("");
      assertEquals(6904, advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5644963522721977
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-latency>\n");
      advancedSettings0.toXML("</performance-preferences-latency>\n");
      advancedSettings0.setQSObjectPoolMaker("ol8vy%S>%VcAwr[");
      advancedSettings0.setPerformancePreferencesConnectionTime(3118);
      advancedSettings0.setSocketLinger(3118);
      advancedSettings0.toXML("=C,6|9");
      advancedSettings0.setByteBufferSize(2526);
      advancedSettings0.setSocketLinger(2526);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(2526);
      advancedSettings0.toXML("ol8vy%S>%VcAwr[");
      advancedSettings0.setPerformancePreferencesConnectionTime(519);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("</socket-linger>\n");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("=C,6|9");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =C,6|9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = "</qsobject-pool-maker>\n";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\"}.FnbVb:i");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"}.FnbVb:i
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.197465788216186
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-22));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite((-1151));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1715));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-3087));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1715));
      advancedSettings0.setClientIdentifier("q&KsFL");
      assertEquals("q&KsFL", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3437405211946944
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.toXML("ISO-8859-1<advanced-settings>\nISO-8859-1\t<charset>ISO-8859-1</charset>\nISO-8859-1\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\nISO-8859-1\t<byte-buffer-size>65536</byte-buffer-size>\nISO-8859-1\t<backlog>0</backlog>\nISO-8859-1\t<socket-linger>-1</socket-linger>\nISO-8859-1\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\nISO-8859-1\t<client-identifier>ISO-8859-1</client-identifier>\nISO-8859-1\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\nISO-8859-1\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\nISO-8859-1\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\nISO-8859-1\t<performance-preferences-latency>0</performance-preferences-latency>\nISO-8859-1\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\nISO-8859-1\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\nISO-8859-1</advanced-settings>\n");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientIdentifier("XH");
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals("XH", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.617641735631542
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-latency>\n");
      advancedSettings0.toXML("</performance-preferences-latency>\n");
      advancedSettings0.setQSObjectPoolMaker("ol8vy%S>%VcAwr[");
      advancedSettings0.setPerformancePreferencesConnectionTime(3118);
      advancedSettings0.toXML("=C,6|9");
      advancedSettings0.setByteBufferSize(2526);
      advancedSettings0.setSocketLinger(2526);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("ol8vy%S>%VcAwr[");
      advancedSettings0.setPerformancePreferencesConnectionTime(519);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("</socket-linger>\n");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getCharset();
      assertEquals(2526, advancedSettings0.getByteBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      int int0 = advancedSettings2.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(1597);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("k8)n#l[yVk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // k8)n#l[yVk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5311791800826566
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-598));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(3663);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-598), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4309786547718817
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("f/l%TjQAB.6Ex~S)^g");
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4022903216983984
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientIdentifier("S1OxPHT");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth(2434);
      advancedSettings0.setPerformancePreferencesBandwidth(302);
      advancedSettings0.setClientSocketTrafficClass("hC5l<;4SZ_!&mNt0`");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("w+4Ofp5W%F1");
      advancedSettings0.setPerformancePreferencesConnectionTime(302);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(2434);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("w+4Ofp5W%F1");
      assertEquals(302, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4758269983266037
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketTcpNoDelay();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings1.getQSObjectPoolMaker();
      String string0 = advancedSettings1.toXML("p\"wO|7IG");
      assertEquals("p\"wO|7IG<advanced-settings>\np\"wO|7IG\t<charset>ISO-8859-1</charset>\np\"wO|7IG\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\np\"wO|7IG\t<byte-buffer-size>65536</byte-buffer-size>\np\"wO|7IG\t<backlog>0</backlog>\np\"wO|7IG\t<socket-linger>-1</socket-linger>\np\"wO|7IG\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\np\"wO|7IG\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\np\"wO|7IG\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\np\"wO|7IG\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\np\"wO|7IG\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\np\"wO|7IG\t<performance-preferences-latency>0</performance-preferences-latency>\np\"wO|7IG\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\np\"wO|7IG\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\np\"wO|7IG</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.581985347345011
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(876);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(876);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3276323700617536
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1337));
      advancedSettings0.toXML("");
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>-1337</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      assertEquals((-1337), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3628433742803376
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      int int0 = (-22);
      advancedSettings0.setMaxThreadsForNioWrite((-22));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite((-1151));
      advancedSettings0.setClientSocketTrafficClass("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("N=MqX!3<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N=MqX!3<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.172431811156274
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.627313143518155
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(65536);
      advancedSettings2.setDebugNonBlockingMode(true);
      advancedSettings2.setByteBufferSize(0);
      advancedSettings2.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings2.getDebugNonBlockingMode());
      
      advancedSettings0.getBacklog();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      int int0 = advancedSettings3.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.379438583546008
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getClientIdentifier();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("~k^ !,");
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6497049730961217
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(2);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(2);
      advancedSettings1.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("N=MqX!3<");
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("DC|9|*~b#Tb=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // DC|9|*~b#Tb=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2183004874823533
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      String string1 = advancedSettings0.toXML(" M&na@},z&g");
      assertEquals(" M&na@},z&g<advanced-settings>\n M&na@},z&g\t<charset>ISO-8859-1</charset>\n M&na@},z&g\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n M&na@},z&g\t<byte-buffer-size>65536</byte-buffer-size>\n M&na@},z&g\t<backlog>0</backlog>\n M&na@},z&g\t<socket-linger>-1</socket-linger>\n M&na@},z&g\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n M&na@},z&g\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n M&na@},z&g\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n M&na@},z&g\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n M&na@},z&g\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n M&na@},z&g\t<performance-preferences-latency>0</performance-preferences-latency>\n M&na@},z&g\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n M&na@},z&g\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n M&na@},z&g</advanced-settings>\n", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setBacklog((-3079));
      advancedSettings0.setByteBufferSize(4840);
      advancedSettings0.setClientSocketSendBufferSize(0);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(4840, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.309281350678734
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("</byte-buffer-size>\n");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(719);
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setByteBufferSize((-831));
      advancedSettings0.setClientIdentifier("</byte-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals("</byte-buffer-size>\n", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }
}
