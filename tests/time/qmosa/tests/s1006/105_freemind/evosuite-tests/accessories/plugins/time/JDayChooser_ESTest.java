/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:40:03 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.ChoiceFormat;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import javax.help.ForwardAction;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockSpinnerDateModel;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.164900461674488
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(0);
      jDayChooser0.setMonth(1046);
      Locale locale0 = jDayChooser0.locale;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getParent();
      Locale.filter((List<Locale.LanguageRange>) canvasGraphicsNode0, (Collection<Locale>) null);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2742907015233556
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseWheelListeners();
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, true);
      Point point0 = new Point();
      jInternalFrame0.setLocation(point0);
      jInternalFrame0.getLastCursor();
      jDayChooser0.setCursor((Cursor) null);
      KeyEvent.getKeyModifiersText((-2281));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3217), 0, (-2281), (-2281), 't');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.setAlwaysFireDayProperty(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color1.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.164789965657869
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(59);
      jDayChooser0.setMonth(1046);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2978893000399134
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(3063);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-802L));
      Locale locale0 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1288415756655623
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(90);
      int int0 = 63735;
      jDayChooser0.setMonth(63735);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 4, "day", 90);
      jDayChooser0.setMonth(63735);
      jDayChooser0.getLocale();
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      try { 
        fileUtil0.canonicalFile("Windows");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.264823903629938
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.control;
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2100), 65535L, 0, 0, 'U');
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, true);
      jInternalFrame0.getLastCursor();
      jDayChooser0.setCursor((Cursor) null);
      KeyEvent.getKeyModifiersText(0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getGreen());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1246);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.getRootPane();
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0918293977637266
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.setDay((-1437625606));
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2000817895580993
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2128));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.drawDays();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.164813263462051
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, '.', 0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.init();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      float float0 = 761.723F;
      jDayChooser0.setRequestFocusEnabled(true);
      Color color0 = Color.LIGHT_GRAY;
      int int0 = (-861);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance((-861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.222559436814969
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int0 = 0;
      int int1 = 8744;
      jDayChooser1.setSize(0, 8744);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser1.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1224539890510763
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jDayChooser0.setDay(3193);
      jDayChooser0.setMonth(1);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 4, "14", 2281);
      jDayChooser0.setMonth(228);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2000470781831813
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      color0.getComponents(floatArray0);
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getRootPane();
      JMenu jMenu0 = new JMenu("");
      jMenu0.setHideActionText(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1459, 0L, 48, (-1912), 'X');
      jDayChooser0.getDecorationBackgroundColor();
      jMenu0.remove((Component) jDayChooser0);
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setDay(1459);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      Component component0 = Box.createGlue();
      jDayChooser0.add(component0);
      jDayChooser0.createVolatileImage(0, 0);
      jDayChooser0.setDayBordersVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      defaultTreeCellRenderer0.setLeafIcon((Icon) null);
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      Color.getColor("Dialog Plain 11", color0);
      Color color1 = color0.darker();
      jDayChooser0.setSundayForeground(color1);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1648359379136126
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getRootPane();
      JMenu jMenu0 = new JMenu("day");
      jMenu0.setHideActionText(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((-174));
      jDayChooser0.setMonth(0);
      ActionEvent actionEvent0 = new ActionEvent(color0, (-174), "day", 90);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Color cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      TimeZone timeZone0 = TimeZone.getTimeZone("JDayChooser");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jDayChooser0.setCalendar(calendar0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      String string0 = "e7VdFwRRyH=A^*/geak";
      MockSpinnerDateModel mockSpinnerDateModel0 = null;
      try {
        mockSpinnerDateModel0 = new MockSpinnerDateModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal value
         //
         verifyException("javax.swing.SpinnerDateModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1509904277017364
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.repaint(4456, 4456, (-3120), 563);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters((-2044));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.44629116271883
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-3237));
      jDayChooser0.isWeekOfYearVisible();
      int int0 = 10;
      jDayChooser0.setLocation((-3237), 10);
      jDayChooser0.firePropertyChange("", 'K', 'K');
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxDayCharacters();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      boolean boolean0 = false;
      jDayChooser0.setEnabled(false);
      jDayChooser0.getDay();
      jDayChooser0.getMinSelectableDate();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2704;
      doubleArray0[1] = (double) 2704;
      doubleArray0[2] = (double) 2704;
      doubleArray0[3] = (double) 2704;
      doubleArray0[4] = (double) 2704;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      mockSimpleDateFormat0.setNumberFormat(choiceFormat0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2704, false, jDayChooser0);
      Component component0 = focusEvent0.getOppositeComponent();
      focusEvent0.setSource(component0);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(date1);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2704);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2000703759873637
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.control;
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2100), 65535L, 0, 0, 'a');
      jDayChooser0.decorationBackgroundColor = (Color) systemColor0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis((-2100));
      jDayChooser0.setDay((-2100));
      jDayChooser0.drawWeeks();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1755300331423153
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(76L);
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getSundayForeground();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2345977880086134
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, (-2100), 0, 'F');
      KeyEvent.getKeyModifiersText((-2100));
      jDayChooser0.keyReleased(keyEvent0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jDayChooser0.setDay(0);
      jDayChooser0.setMonth(0);
      ActionEvent actionEvent0 = new ActionEvent(systemColor0, 1111, "|xu,}I+R\"rFh", 90);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.SystemColor cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 56;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1348), (-1348), 56, 0, 'v', 0);
      KeyEvent.getKeyModifiersText((-1348));
      InputEvent.getModifiersExText(0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      String string0 = "";
      JYearChooser jYearChooser0 = new JYearChooser();
      JSpinner jSpinner0 = jYearChooser0.spinner;
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jSpinner0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JSpinner.ListEditor jSpinner_ListEditor0 = null;
      try {
        jSpinner_ListEditor0 = new JSpinner.ListEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerListModel
         //
         verifyException("javax.swing.JSpinner$ListEditor", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0919150278174286
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      Component component0 = Box.createGlue();
      jDayChooser0.add(component0);
      jDayChooser0.createVolatileImage(0, 0);
      jDayChooser0.setDayBordersVisible(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = Color.lightGray;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setDay(90);
      int int0 = 63735;
      jDayChooser0.setMonth(63735);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 63735, "day", 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1549802683554673
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.lightGray;
      jDayChooser0.decorationBackgroundColor = color0;
      JMenu jMenu0 = new JMenu("day");
      jMenu0.remove((Component) jDayChooser0);
      jDayChooser0.setDay(0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertEquals(1, jDayChooser0.getDay());
      
      ActionEvent actionEvent0 = new ActionEvent(color0, 4, "day", 1314);
      jDayChooser1.setMonth(4);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.29782304928079
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(3063);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.150964732980717
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 0;
      jDayChooser0.setSize(0, 0);
      jDayChooser0.drawDays();
      Color color0 = Color.gray;
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1647413942639915
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      LayoutManager layoutManager0 = jDayChooser0.getLayout();
      jDayChooser0.setLayout(layoutManager0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      jDayChooser0.today = (Calendar) gregorianCalendar0;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "day", 0, 1);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseWheelListeners();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.setDayBordersVisible(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.setFocus();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 61);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2000351874353727
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-3237);
      jDayChooser0.setYear((-3237));
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setSize((-3237), (-3237));
      jDayChooser0.drawDays();
      Color color0 = Color.BLUE;
      JMenu jMenu0 = new JMenu("Metal");
      jMenu0.remove((Component) jDayChooser0);
      jDayChooser0.setDay((-3237));
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-3510));
      jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3510);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-3510);
      floatArray0[4] = (float) (-3510);
      floatArray0[5] = (float) 0;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement((-2317));
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 0);
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.list();
      jYearChooser0.getLocale();
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = 1602;
      jDayChooser0.getUIClassID();
      // Undeclared exception!
      try { 
        jDayChooser0.setFocusTraversalKeys(1602, (Set<? extends AWTKeyStroke>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }
}
