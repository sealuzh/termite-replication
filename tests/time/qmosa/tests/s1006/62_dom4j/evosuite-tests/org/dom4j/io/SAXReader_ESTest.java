/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:43:22 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = (byte)14;
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("f!V*N@PA4QM8sI%");
      sAXReader_SAXEntityResolver0.resolveEntity("f!V*N@PA4QM8sI%", "//home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.DefaultCommentNodeStep/org.jaxen.expr.DefaultCommentNodeStep0org.jaxen.exp.DefaultCommentNodeStep");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.DefaultCommentNodeStep/org.jaxen.expr.DefaultCommentNodeStep0org.jaxen.exp.DefaultCommentNodeStep");
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.createXMLReader();
      MockFile.createTempFile("http://xml.org/sax/features/namespace-prefixes", "DyTI'wN2nHN-`OV'", (File) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)64;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-60);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-33);
      byteArray2[4] = (byte) (-60);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte)64;
      byteArray2[8] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2, 85, (byte) (-1));
      byteArrayInputStream1.markSupported();
      SAXReader sAXReader1 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader1.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      MockURL.getFileExample();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8840527810511
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.uriPrefix = "K,/f x;XS#3QY;pf+*";
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("K,/f x;XS#3QY;pf+*", "K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.resolveEntity("", "[8NXF}VkIJpMtg~>1l");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endPrefixMapping("[8NXF}VkIJpMtg~>1l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      xMLFilterImpl0.setEntityResolver(sAXReader_SAXEntityResolver0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      dispatchHandler0.addHandler("org.jaxen.function.LastFunction", (ElementHandler) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.getDispatchHandler();
      boolean boolean0 = false;
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader1.setFeature("", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3117474939709357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)14;
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.DefaultCommentNodeStep/org.jaxen.expr.DefaultCommentNodeStep0org.jaxen.expr.DefaultCommentNodeStep");
      stringReader0.markSupported();
      sAXReader0.isIncludeInternalDTDDeclarations();
      try { 
        sAXReader0.read((Reader) stringReader0, "lang");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/lang : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte) (-122);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.getErrorHandler();
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      String string1 = "//2|G,^t/H/7CUona^&Pk0";
      // Undeclared exception!
      try { 
        MockURI.create("//2|G,^t/H/7CUona^&Pk0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in authority at index 2: //2|G,^t/H/7CUona^&Pk0
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLReader xMLReader0 = null;
      defaultDocumentFactory0.createText("Q1][$]PP/pEJhlG");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startPrefixMapping("u", (String) null);
      String string0 = "http://xml.org/sax/features/namespaces";
      defaultHandler0.resolveEntity("Q1][$]PP/pEJhlG", "Q1][$]PP/pEJhlG");
      defaultHandler0.endElement("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", "//processing-instruction()/QZ,&j# BoWW/t0KH'TM}av,[Ok");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      sAXReader0.setMergeAdjacentText(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)82;
      MockFile mockFile0 = new MockFile("begFTPREVg'yY)',", "//2|G,^t/H/7CUona^&Pk0");
      MockFile mockFile1 = new MockFile("-?JXruJ+e-Ek=Drx^0", "-?JXruJ+e-Ek=Drx^0");
      MockFile mockFile2 = new MockFile("http://xml.org/sax/properties/declaration-andler");
      MockURL.getFileExample();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty(" ]B,?DD3uQSo", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ' ]B,?DD3uQSo' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      MockURL.getFileExample();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream1, "{w@B<^sA$]t");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document {w@B<^sA$]t : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.uriPrefix = "K,/f x;XS#3QY;pf+*";
      sAXReader_SAXEntityResolver0.resolveEntity("]", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", "Warning: missing namespace prefix ignored: ");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("++4\",");
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = '_';
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.isValidating();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isValidating();
      sAXReader0.isIgnoreComments();
      String string0 = "/";
      String string1 = "D";
      try { 
        MockURL.URL("/", "D", (-1592), "/");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-1592
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.62115586703738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("b}q?uyg>OocF/rv[,");
      sAXReader_SAXEntityResolver0.resolveEntity(":`K", "iYI<Z");
      sAXReader_SAXEntityResolver0.resolveEntity("b}q?uyg>OocF/rv[,", ":`K");
      sAXReader_SAXEntityResolver0.resolveEntity("b}q?uyg>OocF/rv[,", "getBaseURI");
      sAXReader_SAXEntityResolver0.resolveEntity("$>5%Lc%[xc93X6sx^6]", "e2bP!eiW{HtndH1B");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.isMergeAdjacentText();
      try { 
        sAXReader0.setFeature(":`K", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature ':`K' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "L{g&gNYQ9<\"A<ZU";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L{g&gNYQ9<\"A<ZU");
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("otg.jaxen.expr.DefaultCommentNodeStep");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      File file0 = MockFile.createTempFile("otg.jaxen.expr.DefaultCommentNodeStep", "otg.jaxen.expr.DefaultCommentNodeStep", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createXMLReader();
      String string0 = "Miz[_[i~dpFS!";
      String string1 = "";
      sAXReader0.setStringInternEnabled(false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)11;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)64;
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/otg.jaxen.expr.DefaultCommentNodeStep/otg.jaxen.expr.DefaultCommentNodeStep0otg.jaxen.expr.DefaultCommentNodeStep";
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/otg.jaxen.expr.DefaultCommentNodeStep/otg.jaxen.expr.DefaultCommentNodeStep0otg.jaxen.expr.DefaultCommentNodeStep");
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/otg.jaxen.expr.DefaultCommentNodeStep/otg.jaxen.expr.DefaultCommentNodeStep0otg.jaxen.expr.DefaultCommentNodeStep");
      stringReader0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "3";
      StringReader stringReader1 = new StringReader("3");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "org.jaxen.expr.DefaultCommentNodeStep";
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", "");
      MockFile mockFile1 = new MockFile("O&v/GQQi1N^", "org.jaxen.expr.DefaultCommentNodeStep");
      String string1 = "QZ\\,&j# BoWW/t";
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      File file0 = MockFile.createTempFile("O&v/GQQi1N^", "QZ,&j# BoWW/t", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.56476562743878
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.createXMLReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0");
      ParserAdapter parserAdapter0 = new ParserAdapter(sAXParserImpl_JAXPSAXParser0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.resetHandlers();
      String string0 = "H/7CUona^&Pk";
      MockFile mockFile0 = new MockFile("/", "2|G,^t");
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("H/7CUona^&Pk", "", (File) mockFile0);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/ZGS8}MJHUS/K,/F X;XS#3QY;PF+*_/MIZ[_[I~DPFS!0\". Nested exception: Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/ZGS8}MJHUS/K,/F X;XS#3QY;PF+*_/MIZ[_[I~DPFS!0\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "namespace::");
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("otg.jaxen.expr.DefaultCommentNodeStep");
      MockFile.createTempFile("+K+td", "+K+td", (File) mockFile0);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader1.setFeature(" Z", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature ' Z' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("org.jaxen.expr.DefaultCommentNodeStep");
      File file0 = MockFile.createTempFile("org.jaxen.expr.DefaultCommentNodeStep", "org.jaxen.expr.DefaultCommentNodeStep", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory1, false);
      MockURL.getFileExample();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.markSupported();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-60);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      sAXReader1.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      xMLFilterImpl0.endElement((String) null, "&)PX", (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Object object0 = new Object();
      try { 
        sAXReader1.setProperty("//home/ubuntu/termite/projects/62_dom4j/7 tn/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: //home/ubuntu/termite/projects/62_dom4j/7 tn/K,/f x;XS#3QY;pf+*_/Miz[_[i~dpFS!0
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockURL.getHttpExample();
      DefaultDocumentFactory.getInstance();
      try { 
        sAXReader0.setXMLReaderClassName("[ lhs: ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class [ lhs:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-60);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)82;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)66;
      byteArray1[6] = (byte) (-60);
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Warning: missing namespace prefix ignored: ");
      sAXReader_SAXEntityResolver0.resolveEntity("#SHRxA", "//2|G,^t/H/7CUona^&Pk0/ of document 0Miz[_[i~dpFS!");
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader0.createXMLReader();
      MockFile mockFile0 = new MockFile((String) null, "l*MB");
      MockFile.createTempFile("Warning: missing namespace prefix ignored: ", "//2|G,^t/H/7CUona^&Pk0/ of document 0Miz[_[i~dpFS!", (File) mockFile0);
      documentFactory0.createDocument();
      MockURL.getFileExample();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Object object0 = new Object();
      SAXReader sAXReader2 = new SAXReader(xMLReader0);
      MockException mockException0 = new MockException("http://xml.org/sax/features/use-locator2");
      SAXParseException sAXParseException0 = new SAXParseException("//2|G,^t/H/7CUona^&Pk0", "l*MB", "CiIr`{ia8[tG@20i", 39, 39, mockException0);
      try { 
        sAXReader2.setProperty("<OS7Fzj", sAXParseException0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '<OS7Fzj' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4406133134903523
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("zLDmJ=K-9WpL4G21");
          SAXReader sAXReader0 = new SAXReader(false);
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)14;
          byte byte0 = (byte)89;
          sAXReader0.resetHandlers();
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)64;
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/otg.jaxen.expr.DefaultCommentNodeStep/otg.jaxen.expr.DefaultCommentNodeStep0otg.jaxen.expr.DefaultCommentNodeStep";
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/otg.jaxen.expr.DefaultCommentNodeStep/otg.jaxen.expr.DefaultCommentNodeStep0otg.jaxen.expr.DefaultCommentNodeStep");
      stringReader0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "3";
      StringReader stringReader1 = new StringReader("3");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3585555441044765
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.uriPrefix = "K,/f x;XS#3QY;pf+*";
      InputSource inputSource0 = new InputSource("K,/f x;XS#3QY;pf+*");
      sAXReader_SAXEntityResolver0.resolveEntity("0", "Warning: missing namespace prefix ignored: ");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity("FQ] $", "//processing-instruction()/QZ,&j# BoWW/t0KH'TM}av,[Ok");
      sAXReader1.configureReader(xMLReader0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLFilterImpl0.getErrorHandler();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      String string0 = "";
      DOMNamespace dOMNamespace0 = new DOMNamespace("", (String) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "");
      try { 
        xMLReaderAdapter0.parse((InputSource) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("M^'Z[,F~eSP?ecx(05m", (String) null);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      MockURL.getFileExample();
      sAXReader0.getXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getDocumentFactory();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("~", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ~ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("PIU+SyvYf>mngh`~4s", sAXModifyElementHandler0);
      sAXReader0.setValidation(false);
      sAXReader0.setXMLReader((XMLReader) null);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3219307546040406
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-60);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)75;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)75, (byte) (-1));
      byteArrayInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader1.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3c7c7def Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3c7c7def Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte)64;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-60);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-33);
      byteArray2[4] = (byte) (-60);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte)64;
      byteArray2[8] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2, 85, (byte) (-1));
      sAXReader0.getDocumentFactory();
      byteArrayInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5786000152695845
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDocumentFactory0.createText("Q1][$]PP/pEJhlG");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startPrefixMapping("u", (String) null);
      defaultHandler0.resolveEntity("Q1][$]PP/pEJhlG", "Q1][$]PP/pEJhlG");
      char[] charArray0 = new char[0];
      defaultHandler0.ignorableWhitespace(charArray0, (-986), 15);
      defaultHandler0.endElement("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", "//processing-instruction()/QZ,&j# BoWW/t0KH'TM}av,[Ok");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "http://xml.org/sax/features/namespaces");
      sAXReader_SAXEntityResolver0.resolveEntity("+EVP3ZIWE", "N^l0Nzr&q>");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "7fSn[Y[s*XYL=n.,");
      defaultDocumentFactory0.createDocument();
      sAXReader_SAXEntityResolver0.resolveEntity("[XPathPattern: text: ", "7fSn[Y[s*XYL=n.,");
      sAXReader0.getXMLReader();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.setXMLReaderClassName("http://xml.org/sax/features/namespaces");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/features/namespaces not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      String string0 = null;
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader1.isIncludeExternalDTDDeclarations();
      try { 
        sAXReader1.setProperty("}q3W ", "}q3W ");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '}q3W ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      sAXReader0.getDispatchHandler();
      sAXReader0.isStringInternEnabled();
      sAXReader0.removeHandler("http://xml.org/sax/features/use-locator2");
      URI uRI0 = MockURI.create("");
      MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setValidation(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      parserAdapter0.setDTDHandler((DTDHandler) null);
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.startPrefixMapping("", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("http://xml.org/sax/properties/lexical-handler", "upper-case() requires at least one argument.");
      String string0 = null;
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      String string1 = "5";
      defaultHandler2_1.resolveEntity("", "5");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLReader0);
      // Undeclared exception!
      try { 
        xMLReaderAdapter0.parse((InputSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "HvvA+m#Gs9.x0\\VN";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("HvvA+m#Gs9.x0VN");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class HvvA+m#Gs9.x0VN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockURL.getFileExample();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "<v/?a '='Nd2B", (URLStreamHandler) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9421822974250196
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endPrefixMapping(";q D6e/uJ^B]S{Z");
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      xMLFilterImpl0.setEntityResolver(sAXContentHandler0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.createXMLReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      dispatchHandler0.addHandler(";q D6e/uJ^B]S{Z", pruningDispatchHandler0);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      boolean boolean0 = false;
      try { 
        sAXReader0.setFeature("//2|G,^t/H/7CUona^&Pk0", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//2|G,^t/H/7CUona^&Pk0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("/>]");
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.read((Reader) stringReader0, "/>]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document />] : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      try { 
        sAXReader0.read("//processing-instruction()/QZ,&j# BoWW/t0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //processing-instruction()/QZ,&j# BoWW/t0 Nested exception: no protocol: //processing-instruction()/QZ,&j# BoWW/t0
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "HtvA+m#Gs9.x0VN";
      stringArray0[1] = "HtvA+m#Gs9.x0VN";
      stringArray0[2] = "|]<4hs\"c@W{'}B2";
      stringArray0[3] = "HtvA+m#Gs9.x0VN";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte byte0 = (byte)14;
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/org.jaxen.expr.DefaultCommentNodeStep/org.jaxen.expr.DefaultCommentNodeStep0org.jaxen.exp.DefaultCommentNodeStep");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0, "org.jaxen.pattern.AnyNodeTest");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.jaxen.pattern.AnyNodeTest : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      MockException mockException0 = new MockException("XefKH-]Il");
      SAXParseException sAXParseException0 = new SAXParseException("XefKH-]Il", locatorImpl1, mockException0);
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl2);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      String string0 = "string() takes at most argument.";
      File file0 = MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", "//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2879917301334416
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0");
      sAXReader_SAXEntityResolver0.resolveEntity("", "Error on line ");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", "");
      SAXReader sAXReader1 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/zgS8}MjhUs/K,/f x;XS#3QY;pf+*/Miz[_[i~dpFS!0", "l-!yHmi(4OlCs.");
      MockFile mockFile1 = new MockFile("/RTFi+8?/z;t}C;;XF", "http://xml.org/sax/features/namespaces");
      MockFile mockFile2 = new MockFile("http://xml.org/sax/properties/declaration-handler");
      MockURL.getFileExample();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("//home/ubuntu/termite/projects/62_dom4j/DWVezym/PaYB0(Uf)", sAXReader_SAXEntityResolver0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//home/ubuntu/termite/projects/62_dom4j/DWVezym/PaYB0(Uf)' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.setContentHandler((ContentHandler) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.isIgnoreComments();
      MockFile mockFile0 = new MockFile("/", "2|G,^t");
      MockFile.createTempFile("H/7CUona^&Pk", "", (File) mockFile0);
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "H/7CUona^&Pk", uRLStreamHandler0);
      assertEquals(0, uRL1.getDefaultPort());
  }
}
