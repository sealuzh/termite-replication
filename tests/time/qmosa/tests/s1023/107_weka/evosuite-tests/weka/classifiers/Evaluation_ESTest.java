/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:38:54 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.753965716419247
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      evaluation0.rootMeanPriorSquaredError();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.matthewsCorrelationCoefficient((-259));
      evaluation0.numTrueNegatives(5967);
      evaluation0.incorrect();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "Ufh=MVBf# !_~wB!p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.704894589281409
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFMeasure();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.generate(".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.KBInformation();
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.numTruePositives((-2));
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2379456944931535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Random.setNextRandom(2);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double1 = evaluation1.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.confusionMatrix();
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3169392047597572
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 1427;
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      evaluation1.num2ShortID(498, charArray0, 498);
      SparseInstance sparseInstance0 = new SparseInstance(1427);
      try { 
        evaluation0.evaluateModelOnce(6.0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3735953334351976
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Random.setNextRandom((-2));
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1737863719369757
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@data");
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.toSummaryString("@data", true);
      evaluation0.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(5442, (char[]) null, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0338754433240194
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Random.setNextRandom(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toMatrixString();
      evaluation0.areaUnderPRC(494);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader1.getNextInstance(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "setNumFolds";
      stringArray0[1] = "setNumFolds";
      try { 
        Evaluation.evaluateModel("setNumFolds", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name setNumFolds.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.080747840101659
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      String string1 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string1);
      
      double double0 = evaluation0.m_MaxTarget;
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4869952111070925
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3020.127644821125);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-3020.127644821125);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-638.18);
      doubleArray0[6] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3020.127644821125));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(866);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 866
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1987926481569326
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionStump decisionStump0 = new DecisionStump();
      Random.setNextRandom(3820);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-3675);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int1 = 473;
      Instances instances0 = new Instances("numIterationsTipText", arrayList0, 473);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4151183748482077
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string0 = Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      evaluation0.SFPriorEntropy();
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) instances0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) instances0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 488, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.434448337225669
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "-k\n";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@relation";
      TextDirectoryLoader.main(stringArray0);
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.setPriors(instances0);
      evaluation1.unweightedMacroFmeasure();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.getHeader();
      assertEquals(Double.NaN, evaluation1.SFMeanPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2248803905467636
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[9];
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      gaussianProcesses0.setFilterType(selectedTag0);
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      evaluation0.toCumulativeMarginDistributionString();
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.weightedAreaUnderROC();
      String string1 = evaluation0.toClassDetailsString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5031121961114695
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      MultiScheme multiScheme3 = new MultiScheme();
      MultiScheme multiScheme4 = new MultiScheme();
      MultiScheme multiScheme5 = new MultiScheme();
      MultiScheme[] multiSchemeArray0 = new MultiScheme[4];
      multiSchemeArray0[0] = multiScheme3;
      multiSchemeArray0[1] = multiScheme0;
      MultiScheme multiScheme6 = new MultiScheme();
      multiSchemeArray0[2] = multiScheme6;
      multiSchemeArray0[3] = multiScheme5;
      instances0.toArray(multiSchemeArray0);
      evaluation0.fMeasure((-1129));
      evaluation0.priorEntropy();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1129);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-1129);
      intArray0[4] = 1;
      intArray0[5] = (-1129);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1129));
      try { 
        evaluation0.updateStatsForPredictor(2927.637419731095, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7052586745637783
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      MultiScheme multiScheme3 = new MultiScheme();
      MultiScheme multiScheme4 = new MultiScheme();
      MultiScheme multiScheme5 = new MultiScheme();
      MultiScheme[] multiSchemeArray0 = new MultiScheme[4];
      multiSchemeArray0[0] = multiScheme3;
      multiSchemeArray0[1] = multiScheme0;
      MultiScheme multiScheme6 = new MultiScheme();
      multiSchemeArray0[2] = multiScheme6;
      multiSchemeArray0[3] = multiScheme5;
      instances0.toArray(multiSchemeArray0);
      evaluation0.fMeasure((-1129));
      evaluation0.priorEntropy();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1129);
      intArray0[1] = 2;
      intArray0[2] = 40;
      intArray0[3] = (-1129);
      intArray0[4] = 1;
      intArray0[5] = (-1129);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1129));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multiScheme1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2519287103330434
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      String string1 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string1);
      
      double double0 = evaluation0.numFalseNegatives(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5425910743928557
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      Random.setNextRandom((-2));
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      evaluation0.num2ShortID(1466, charArray0, 1466);
      evaluation0.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.recall(41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6233392568450444
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      evaluation0.toMatrixString("listOptions");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      evaluation0.weightedFMeasure();
      Random.setNextRandom(494);
      textDirectoryLoader0.setOutputFilename(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      charArray0[6] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 's';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      charArray0[7] = 's';
      evaluation0.num2ShortID(718, charArray0, 718);
      evaluation0.SFMeanEntropyGain();
      evaluation0.correct();
      evaluation0.numInstances();
      evaluation0.recall(14);
      Random.setNextRandom(14);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.773412589485358
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2510.27591433293;
      doubleArray0[3] = (-1084.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-63.94234351497);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3020.127644821125);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2510.27591433293);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.fMeasure((-3167));
      double double1 = evaluation0.priorEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertEquals(0.0, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1782356557936127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double double0 = evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.353301429474909
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "L{U3pT6tO3MwGaBjb");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SGD sGD0 = new SGD();
      Evaluation.makeOptionString(sGD0, true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      Random.setNextRandom(111);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation1.setPriors(instances1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom(0);
      try { 
        evaluation1.crossValidateModel((Classifier) gaussianProcesses0, instances1, 6, (java.util.Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3840695574638957
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double0 = evaluation0.SFPriorEntropy();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 0.0;
      doubleArray0[2] = (double) 483;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 483;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 28, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = '\\';
      evaluation0.num2ShortID(73, charArray0, 489);
      SparseInstance sparseInstance0 = new SparseInstance(289);
      try { 
        evaluation0.evaluateModelOnce((double) 6, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6419077021409563
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.matthewsCorrelationCoefficient(483);
      int int0 = 4857;
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, ".bsi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2643679206824285
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      String string1 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string1);
      
      String string2 = evaluation0.toSummaryString("costMatrixTipText", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("costMatrixTipText\nTotal Number of Instances                0     \n", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.194056847581763
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string1 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string1);
      
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3979645143451527
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string1 = Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string2 = Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      assertFalse(string2.equals((Object)string1));
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 4857, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.423055557285366
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFMeasure();
      Random.setNextRandom(494);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances2 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances2);
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.KBInformation();
      double double2 = evaluation1.SFEntropyGain();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.711846289847046
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      MultiScheme multiScheme3 = new MultiScheme();
      MultiScheme multiScheme4 = new MultiScheme();
      MultiScheme multiScheme5 = new MultiScheme();
      MultiScheme[] multiSchemeArray0 = new MultiScheme[4];
      multiSchemeArray0[0] = multiScheme3;
      multiSchemeArray0[1] = multiScheme0;
      MultiScheme multiScheme6 = new MultiScheme();
      multiSchemeArray0[2] = multiScheme6;
      multiSchemeArray0[3] = multiScheme5;
      instances0.toArray(multiSchemeArray0);
      evaluation0.fMeasure((-1129));
      evaluation0.priorEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.fMeasure(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.251928710333044
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2275823809957087
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.matthewsCorrelationCoefficient(483);
      evaluation0.KBRelativeInformation();
      evaluation0.totalCost();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.497459500036311
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toMatrixString();
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Random.setNextRandom(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4694275161306334
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "79");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7896325309380625
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2510.27591433293;
      doubleArray0[3] = (-1084.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-63.94234351497);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3020.127644821125);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2510.27591433293);
      textDirectoryLoader0.reset();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.fMeasure((-3167));
      evaluation0.priorEntropy();
      evaluation0.weightedFalsePositiveRate();
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'N';
      charArray0[2] = 'k';
      charArray0[3] = 'l';
      charArray0[4] = 'F';
      charArray0[5] = 'p';
      charArray0[6] = 's';
      charArray0[7] = ']';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-3167), charArray0, 477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "@data";
      stringArray0[3] = ".arff";
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.longs((long) 0);
      try { 
        evaluation0.crossValidateModel(string0, instances0, 1, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2206707943846333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", 106);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5*8[$");
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      JSONLoader jSONLoader0 = new JSONLoader();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-3020.127644821125);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 228.02345384167);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      int[] intArray0 = new int[5];
      intArray0[0] = 485;
      intArray0[1] = 0;
      intArray0[2] = 2068;
      intArray0[3] = 1364;
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3020.127644821125), intArray0, 831);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6787773626575233
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = true;
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = ']';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-3292), charArray0, (-4756));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      Random.setNextRandom(4857);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      String string0 = evaluation0.num2ShortID(4857, charArray0, 34);
      assertEquals("                            000000", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.279098889103382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.400117238503879
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toMatrixString();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0;
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5814742493461305
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5*8[$");
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      testInstances0.toString();
      JSONLoader.FILE_EXTENSION_COMPRESSED = "getEstimatorType";
      evaluation0.incorrect();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.handleCostOption((String) null, 2);
      Evaluation.makeOptionString((Classifier) null, true);
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4910478339745667
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toMatrixString();
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 1;
      intArray0[8] = 491;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 680);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.REVISION = 5292;
      evaluation0.toMatrixString(".arff");
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6813455773899344
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3020.127644821125);
      doubleArray0[1] = (-3020.127644821125);
      doubleArray0[2] = (-3020.127644821125);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3020.127644821125));
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      MultiScheme multiScheme3 = new MultiScheme();
      MultiScheme multiScheme4 = new MultiScheme();
      MultiScheme multiScheme5 = new MultiScheme();
      MultiScheme[] multiSchemeArray0 = new MultiScheme[0];
      instances0.toArray(multiSchemeArray0);
      double double0 = evaluation0.fMeasure(28);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.542416754851055
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Random.setNextRandom(2);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation1.toClassDetailsString();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5862070295659376
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2510.27591433293;
      doubleArray0[3] = (-1084.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-63.94234351497);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3020.127644821125);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2510.27591433293);
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      MultiScheme multiScheme2 = new MultiScheme();
      MultiScheme multiScheme3 = new MultiScheme();
      MultiScheme multiScheme4 = new MultiScheme();
      MultiScheme multiScheme5 = new MultiScheme();
      MultiScheme[] multiSchemeArray0 = new MultiScheme[4];
      multiSchemeArray0[0] = multiScheme1;
      multiSchemeArray0[1] = multiScheme5;
      multiSchemeArray0[2] = multiScheme0;
      multiSchemeArray0[3] = multiScheme1;
      instances0.toArray(multiSchemeArray0);
      double double0 = evaluation0.fMeasure(489);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1360414599491286
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".arff");
      evaluation0.totalCost();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      int int0 = 485;
      int[] intArray0 = new int[8];
      intArray0[0] = 485;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = (-1114383320);
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 28);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, sparseInstance0, (-3854.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.495624493013468
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toMatrixString();
      evaluation0.areaUnderPRC(1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFMeasure();
      Random.setNextRandom(0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 2052.66216187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6773247707389238
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      instances0.spliterator();
      intArray0[0] = 494;
      SparseInstance sparseInstance0 = new SparseInstance((-1185.0), doubleArray0, intArray0, 494);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZnXkKi3&6T}f3KN2J");
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.getDataSet();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      instances0.remove((Object) euclideanDistance0);
      CostMatrix costMatrix0 = new CostMatrix(67);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataFlavor dataFlavor0 = DataFlavor.javaFileListFlavor;
      dataFlavor0.match((DataFlavor) null);
      dataFlavor0.isFlavorSerializedObjectType();
      StringSelection stringSelection0 = new StringSelection("setMomentum");
      try { 
        dataFlavor0.getReaderForText(stringSelection0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // application/x-java-file-list
         //
         verifyException("java.awt.datatransfer.StringSelection", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_SumPriorSqrErr = (double) 2;
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Aqe0Op";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CVParametersTipText";
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8548720307766429
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Evaluation.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataFlavor dataFlavor0 = DataFlavor.selectionHtmlFlavor;
      dataFlavor0.isMimeTypeSerializedObject();
      dataFlavor0.isFlavorSerializedObjectType();
      StringSelection stringSelection0 = new StringSelection((String) null);
      String string0 = "ssl-max";
      DataFlavor dataFlavor1 = DataFlavor.selectionHtmlFlavor;
      try { 
        stringSelection0.getTransferData(dataFlavor1);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // text/html
         //
         verifyException("java.awt.datatransfer.StringSelection", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5653948371180277
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getRevision();
      String[] stringArray0 = logitBoost0.getOptions();
      logitBoost0.setNumFolds(110);
      cVParameterSelection0.setClassifier(logitBoost0);
      String string0 = Evaluation.makeOptionString(cVParameterSelection0, true);
      logitBoost0.getRevision();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray1 = new String[8];
      stringArray1[6] = "9186";
      stringArray1[1] = "9186";
      stringArray1[2] = string0;
      logitBoost0.setNumRuns(110);
      stringArray1[3] = "9186";
      stringArray1[4] = "9186";
      stringArray1[5] = string0;
      stringArray1[6] = "9186";
      stringArray1[7] = "9186";
      Evaluation.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.makeOptionString(logitBoost0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      Random.setNextRandom(1024);
      try { 
        Evaluation.handleCostOption("    s[i.classIndex()] = null;\n", 210);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
