/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:03:18 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.net.BIFReader;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.ZeroR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      zeroR0.setDebug(false);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      instances0.checkInstance(denseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 1564.0;
      naiveBayesMultinomialText0.m_minWordP = (-2292.5679063);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getMinWordFrequency();
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = 29;
      intArray0[2] = 110;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4073.089692979, intArray0, 29);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance0.mergeInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer1.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 78;
      Instances instances0 = new Instances("", arrayList0, 78);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.47136353375727
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.7003315192564328;
      doubleArray0[1] = 522.792576596821;
      doubleArray0[4] = (-101.58818);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.checkInstance(denseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      intArray0[5] = 1;
      intArray0[6] = (-1);
      intArray0[7] = (-630);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-1));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0, intArray0, 77);
      sparseInstance1.copy();
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      File file1 = MockFile.createTempFile("-M <iterations>", "-M <iterations>", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      int[] intArray0 = new int[3];
      intArray0[0] = (-3246);
      intArray0[1] = (-1367);
      intArray0[2] = (-3246);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3716747874025006
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-101.58818);
      doubleArray0[1] = (-101.58818);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-101.58818);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.listOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.toString();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-2);
      intArray0[2] = 110;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-2);
      intArray0[6] = 1;
      intArray0[7] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, 336);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.171509317528458
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText1.m_stemmer;
      naiveBayesMultinomialText0.m_norm = (-170.499236858624);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText1.useStopListTipText();
      naiveBayesMultinomialText1.getLowercaseTokens();
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText0.setNorm((-1.0));
      naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText1.listOptions();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords((File) null);
      MockFile.createTempFile("-M <iterations>", "L_K;4n4o", file0);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1367);
      intArray0[1] = (-1367);
      intArray0[2] = (-1367);
      intArray0[3] = (-1367);
      intArray0[4] = (-1367);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1581.115886772, intArray0, (-1367));
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue("-M <iterations>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.269894502330855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.7003315192564328;
      doubleArray0[1] = 502.46720054344615;
      doubleArray0[4] = (-101.58818);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning(2040109465);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.checkInstance(denseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[0] = 6;
      intArray0[2] = 6;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      intArray0[6] = (-1);
      intArray0[7] = (-630);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      String[] stringArray0 = new String[7];
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      stringArray0[0] = "If true, ignores all words that are on the stoplist.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[1] = "-num-slots";
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      stringArray0[2] = "If true, ignores all words that are on the stoplist.";
      stringArray0[3] = "";
      stringArray0[4] = "If true, ignores all words that are on the stoplist.";
      stringArray0[5] = "If true, ignores all words that are on the stoplist.";
      stringArray0[6] = "LO{#NI.}W";
      try { 
        AbstractClassifier.forName("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer1.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.IteratedLovinsStemmer";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[2] = "";
      stringArray0[3] = "weka.core.stemmers.IteratedLovinsStemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9655571666272396
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-3246);
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      File file1 = MockFile.createTempFile("](PE=]G6Bd@v=#xt<) ", "](PE=]G6Bd@v=#xt<) ", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      try { 
        CostMatrix.parseMatlab("Gj1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseWordFrequencies(true);
      naiveBayesMultinomialText1.setStemmer(iteratedLovinsStemmer0);
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer1.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      naiveBayesMultinomialText1.normTipText();
      naiveBayesMultinomialText1.getUseWordFrequencies();
      assertTrue(naiveBayesMultinomialText1.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.358017069615499
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      int int0 = (-1);
      double double0 = 6.0;
      naiveBayesMultinomialText0.setLNorm(6.0);
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText1.stemmerTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLNorm(2.0);
      naiveBayesMultinomialText0.setLNorm((-305.8960738906));
      stringArray0[0] = "";
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      KStar kStar0 = new KStar();
      SelectedTag selectedTag0 = kStar0.getMissingMode();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setCostMatrixSource(selectedTag0);
      BIFReader bIFReader0 = new BIFReader();
      costMatrix1.toString();
      BIFReader bIFReader1 = new BIFReader();
      try { 
        bIFReader1.processFile(" 0\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/ubuntu/termite/projects/107_weka/ 0
         //  (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      double double0 = naiveBayesMultinomialText0.m_norm;
      naiveBayesMultinomialText0.m_useStopList = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-6.78214234), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(sparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.m_norm;
      MockFile mockFile0 = new MockFile("](PE=]G6Bd@v=#xt<) ", "](PE=]G6Bd@v=#xt<) ");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3246);
      doubleArray0[1] = 5.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 5.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 5.0;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.307044990051715
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      File file1 = MockFile.createTempFile("-M <iterations>", "-M <iterations>", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3246), intArray0, (-1367));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStemmer();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3359415500803022
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-9), doubleArray0);
      instances0.checkInstance(denseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      stringArray0[7] = " ";
      stringArray0[8] = "@data";
      testInstances0.setOptions(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMaxSize((-2));
      SparseInstance sparseInstance0 = new SparseInstance((-1775.88), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6577755763570785
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer1.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.IteratedLovinsStemmer";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[2] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[4] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5633157807180753
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      iteratedLovinsStemmer0.globalInfo();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.307044990051715
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      file0.getCanonicalPath();
      File file1 = MockFile.createTempFile("-M <iterations>", "-M <iterations>", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getLNorm();
      int[] intArray0 = new int[3];
      intArray0[0] = (-3246);
      intArray0[1] = (-1367);
      intArray0[2] = (-3246);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-661.840213), intArray0, (-3246));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-3246);
      double double0 = naiveBayesMultinomialText0.m_norm;
      naiveBayesMultinomialText0.m_useStopList = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-6.78214234), intArray0, (-3246));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.822061379926953
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.listOptions();
      String string0 = null;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1206);
      naiveBayesMultinomialText0.m_data = instances0;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("r{", "General options", 1206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.stemString("");
      iteratedLovinsStemmer0.toString();
      iteratedLovinsStemmer0.toString();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-101.58818);
      doubleArray0[1] = (-101.58818);
      doubleArray0[3] = (-101.58818);
      doubleArray0[4] = (double) 1;
      doubleArray0[7] = (double) 1;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.listOptions();
      MockFile mockFile0 = new MockFile("", "\tSpecify L-norm to use (default 2.0)");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText1.getStopwords();
      MockFile.createTempFile("*PLDNqs<m_J`i9*", "\tSeed for randomly sampling instances.\n\t(Default = 1)", file0);
      MockFile mockFile1 = new MockFile("", "");
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4448836846954114
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 406.5517699;
      doubleArray0[1] = 118.5255;
      naiveBayesMultinomialText0.getNorm();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      File file1 = MockFile.createTempFile("Introduction to Gaussian Processes", "Introduction to Gaussian Processes", file0);
      MockFile mockFile0 = new MockFile(file1, "](PE=]G6Bd@v=#xt<) ");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-3246);
      intArray0[2] = (-790);
      intArray0[3] = (-1367);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, (-3246));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.7003315192564328;
      doubleArray0[1] = 502.46720054344615;
      doubleArray0[4] = (-101.58818);
      naiveBayesMultinomialText0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.dataset();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setLNorm((-1));
      naiveBayesMultinomialText0.setUseStopList(false);
      double double0 = naiveBayesMultinomialText0.m_norm;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3246);
      intArray0[1] = 2045222521;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-231.4), intArray0, 69);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3699.46);
      doubleArray0[1] = 746.5412029;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 69;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 2045222521;
      doubleArray0[8] = (double) 6;
      SparseInstance sparseInstance1 = new SparseInstance((-1564.1444449619066), doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 0;
      naiveBayesMultinomialText0.m_periodicP = 0;
      naiveBayesMultinomialText0.setNorm(0.693147181);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.m_stopwords = null;
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-348));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      int int0 = 2606;
      int[] intArray0 = new int[5];
      intArray0[0] = 2606;
      intArray0[1] = 2606;
      intArray0[2] = 2606;
      intArray0[3] = 2541;
      intArray0[4] = 2606;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      principalComponents0.listOptions();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("{l'");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[3] = "org.tartarus.snowball";
      stringArray0[4] = "org.tartarus.snowball";
      stringArray0[5] = "not using ";
      stringArray0[6] = "{l'";
      snowballStemmer0.setOptions(stringArray0);
      snowballStemmer0.getOptions();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMaxSize(30);
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      naiveBayesMultinomialText1.useStopListTipText();
      assertTrue(naiveBayesMultinomialText1.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.getUseStopList();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      String string2 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string2);
      
      MockFile mockFile0 = new MockFile("9122", "Whether to convert all tokens to lowercase");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string3 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string3);
      
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6586413772228794
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseWordFrequencies(false);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("weka.core.stemmers.IteratedLovinsStemmer");
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.globalInfo();
      naiveBayesMultinomialText1.setStemmer(snowballStemmer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "An iterated version of the Lovins stemmer. It stems the word (in case it's longer than 2 characters) until it no further changes.\n\nFor more information about the Lovins stemmer see:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "An iterated version of the Lovins stemmer. It stems the word (in case it's longer than 2 characters) until it no further changes.\n\nFor more information about the Lovins stemmer see:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "weka.core.stemmers.IteratedLovinsStemmer";
      stringArray0[5] = "org.tartarus.snowball.ext";
      stringArray0[6] = "org.tartarus.snowball";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText1.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText0.getUseWordFrequencies();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText1.setStemmer(nullStemmer0);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance(4.0, (double[]) null);
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.pruneDictionary();
      // Undeclared exception!
      try { 
        denseInstance0.isMissingSparse(81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(113);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Whether to convert all tokens to lowercase";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "MultiScheme selection using";
      stringArray0[4] = "&30X";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8353849917532665
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("");
      naiveBayesMultinomialText0.setLNorm((-2428.93639409597));
      naiveBayesMultinomialText0.getOptions();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      MockFile.createTempFile("4f_[ ~P_", "A4z),/2`U1_N", file0);
      MockFile.createTempFile("G}QbIN\"Ldz=(2", "?|ib", file0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      try { 
        CostMatrix.parseMatlab("4f_[ ~P_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }
}
