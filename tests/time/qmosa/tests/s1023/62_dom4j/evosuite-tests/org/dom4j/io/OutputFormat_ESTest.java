/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:59:28 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.501320292540266
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("-indent");
      OutputFormat outputFormat1 = new OutputFormat("-padText");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-padText";
      stringArray0[1] = "#2}sT4";
      stringArray0[2] = "-padText";
      stringArray0[3] = "*{b[4E'";
      stringArray0[4] = "-padText";
      stringArray0[5] = "-padText";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setTrimText(false);
      outputFormat0.setLineSeparator("-indent");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("&G%WJCu*=a$$F]:Rb");
      outputFormat2.setOmitEncoding(false);
      outputFormat2.setIndentSize(49);
      outputFormat2.setTrimText(true);
      assertEquals("                                                 ", outputFormat2.getIndent());
      
      OutputFormat outputFormat3 = new OutputFormat("w^ivr", true);
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      outputFormat4.setTrimText(true);
      OutputFormat outputFormat5 = new OutputFormat((String) null, true, "-padText");
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.409295196441032
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("-newlines");
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-expandEmpty=Z:Cd^G)mr";
      stringArray0[5] = "-expandEmpty|Q&\"iSwT`<54 %";
      stringArray0[6] = "-newlines";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(false);
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String string0 = outputFormat0.getIndent();
      assertEquals("", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3686298470025906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("-encoding");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-expandEmpty-expandEmptyFA4z7(hv:+<Fbbh~>";
      stringArray0[2] = "qM\u00049^_`S";
      stringArray0[3] = "qM\u00049^_`S";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.parseOptions(stringArray0, 0);
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setTrimText(true);
      outputFormat1.setTrimText(false);
      assertEquals("-expandEmpty-expandEmptyFA4z7(hv:+<Fbbh~>", outputFormat1.getEncoding());
      
      outputFormat2.setOmitEncoding(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat3.isPadText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setXHTML(true);
      outputFormat0.getEncoding();
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("UTF-8", outputFormat1.getEncoding());
      
      outputFormat1.setEncoding("");
      char char0 = outputFormat1.getAttributeQuoteCharacter();
      assertEquals("", outputFormat1.getEncoding());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.404578786208029
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setPadText(true);
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setTrimText(false);
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator(stringArray0[1]);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.setNewLineAfterNTags((-1842));
      outputFormat1.setLineSeparator((String) null);
      OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("-newlines");
      outputFormat1.getLineSeparator();
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9319243689357934
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qM\u00049^_`S";
      stringArray0[1] = "4";
      stringArray0[2] = "";
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[7] = "qM\u00049^_`S";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setOmitEncoding(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("4");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat1.setLineSeparator("s%=KtH&6`");
      outputFormat2.setIndent("qM\u00049^_`S");
      assertEquals("qM\u00049^_`S", outputFormat2.getIndent());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.628800685492354
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-omitEncoding";
      outputFormat0.setPadText(false);
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-omitEncoding";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-omitEncoding";
      outputFormat0.setIndent("-omitEncoding");
      stringArray0[5] = "-omitEncoding";
      outputFormat0.setIndentSize(0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewLineAfterNTags(5);
      outputFormat0.setTrimText(true);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-omitEncoding";
      stringArray1[1] = "-omitEncoding";
      stringArray1[2] = "-omitEncoding";
      stringArray1[3] = "-omitEncoding";
      outputFormat0.setEncoding("-omitEncoding");
      outputFormat0.parseOptions(stringArray1, 39);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("-omitEncoding", outputFormat0.getEncoding());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1643727633700354
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("UTF-8");
      outputFormat0.getIndent();
      OutputFormat.createCompactFormat();
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setOmitEncoding(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat1.isOmitEncoding();
      outputFormat0.getEncoding();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      outputFormat2.getAttributeQuoteCharacter();
      outputFormat2.isOmitEncoding();
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("UTF-8", outputFormat0.getIndent());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      char char0 = ' ';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("s/@Sb7y0N$axs)hKN");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.802619975721076
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[1];
      outputFormat0.setLineSeparator("");
      stringArray0[0] = "";
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat0.setIndent(true);
      outputFormat0.getLineSeparator();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isPadText());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1034354550763315
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isNewlines();
      outputFormat0.isPadText();
      outputFormat0.getIndent();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isNewlines();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.011015831001672
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      outputFormat1.setIndent("\n");
      outputFormat1.setNewLineAfterDeclaration(true);
      boolean boolean0 = outputFormat1.isTrimText();
      assertEquals("\n", outputFormat1.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2439743092392086
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.isXHTML();
      outputFormat0.setNewlines(false);
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("-lineSeparator");
      outputFormat0.setNewLineAfterNTags(2);
      outputFormat0.isNewlines();
      outputFormat0.isXHTML();
      outputFormat0.getIndent();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.getEncoding();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getLineSeparator();
      assertEquals("-lineSeparator", outputFormat0.getLineSeparator());
      
      outputFormat1.setSuppressDeclaration(true);
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.279410856758641
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qM\u00049^_`S";
      stringArray0[1] = "4";
      stringArray0[2] = "";
      outputFormat0.setNewLineAfterNTags((-14));
      stringArray0[7] = "qM\u00049^_`S";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 840);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent("-expandEmptyUTF-8");
      outputFormat0.setIndent("");
      outputFormat0.setTrimText(false);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-14), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Y!^v(pX}$eZS.fF<a");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (n)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8373875876189167
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("-xhtml-xhtml");
      outputFormat0.setIndent("-xhtml-xhtml");
      outputFormat1.setIndent("K<C8P}D0-");
      assertEquals("K<C8P}D0-", outputFormat1.getIndent());
      
      outputFormat0.getLineSeparator();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1271454652812123
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("WMK", false, "WMK");
      outputFormat0.setIndent("");
      outputFormat0.setTrimText(false);
      outputFormat0.setEncoding("ma|xp");
      outputFormat0.setLineSeparator("vwAKXSc:J");
      outputFormat0.setIndent("8bUEL^");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getLineSeparator();
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("WMK");
      outputFormat0.isTrimText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setLineSeparator("-omitEncoding");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("8bUEL^", outputFormat0.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3384481491346487
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1907);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(true);
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      outputFormat0.isTrimText();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isPadText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "FgO$u~";
      stringArray0[1] = "e";
      stringArray0[2] = "";
      stringArray0[3] = "i2Ld@Qd5Vz?";
      outputFormat0.setPadText(false);
      stringArray0[4] = "-indent";
      stringArray0[5] = "";
      stringArray0[6] = "V";
      outputFormat0.setNewlines(true);
      stringArray0[7] = "m-#<L*>/?a`DFO";
      stringArray0[8] = "!T^#yTIa";
      outputFormat0.parseOptions(stringArray0, 2679);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setEncoding("V");
      assertEquals("V", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5015166969605436
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Zk$u3U|{-0Q~j#kZ", true);
      outputFormat0.setLineSeparator("Zk$u3U|{-0Q~j#kZ");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isPadText();
      outputFormat0.isPadText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zk$u3U|{-0Q~j#kZ";
      outputFormat0.setLineSeparator("Zk$u3U|{-0Q~j#kZ");
      OutputFormat outputFormat1 = new OutputFormat("-indent", false, "Bya.J`C?E%u_3");
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.setIndentSize(4056);
      char char0 = '%';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.153149858203344
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndentSize(2170);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[9];
      outputFormat1.setAttributeQuoteCharacter('\"');
      stringArray0[0] = "LqxJ[c^$62x";
      stringArray0[1] = "";
      stringArray0[2] = "Y4}qUa4o2Xwo%";
      stringArray0[3] = "UTF-8";
      stringArray0[4] = "NUN@pcEtWERh-*I4i";
      stringArray0[5] = "";
      stringArray0[6] = "0R/?|^EzGEAde";
      stringArray0[7] = ")";
      outputFormat1.setSuppressDeclaration(false);
      stringArray0[8] = "";
      outputFormat1.parseOptions(stringArray0, 660);
      OutputFormat.createPrettyPrint();
      outputFormat1.getIndent();
      outputFormat0.setIndent("{9p");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      outputFormat0.getAttributeQuoteCharacter();
      assertEquals("{9p", outputFormat0.getIndent());
      
      outputFormat2.getIndent();
      outputFormat2.setIndent(")");
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0769452557053736
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      outputFormat0.setEncoding("=ZCCd^G)mr");
      outputFormat0.setNewlines(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewlines(false);
      outputFormat1.setIndent("=ZCCd^G)mr");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent("SW%7");
      assertEquals("=ZCCd^G)mr", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1553840668399755
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qM\u00049^_`S-";
      stringArray0[1] = "4";
      stringArray0[2] = "qM\u00049^_`S-";
      stringArray0[5] = "qM\u00049^_`S-";
      stringArray0[7] = "qM\u00049^_`S-";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      
      outputFormat0.isOmitEncoding();
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("l4", false);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("l4", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat1 = new OutputFormat((String) null, true, "`^wy^A19!^l98AyMx");
      String[] stringArray0 = new String[0];
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertEquals("`^wy^A19!^l98AyMx", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals(1, int0);
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isXHTML());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertTrue(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(">/s~-:m|mS,`e7e,M6y", true, "$O");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("$O", outputFormat0.getEncoding());
      assertEquals(">/s~-:m|mS,`e7e,M6y", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.173924038862116
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("l4", false);
      outputFormat0.setLineSeparator("-xhtml");
      outputFormat0.setPadText(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isPadText();
      outputFormat0.isPadText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l4";
      stringArray0[1] = "-expandEmptyFA4z7(hv:+<Fbbh~>";
      stringArray0[2] = "-xhtml";
      outputFormat0.setIndent("MwcD #P:[$)SH");
      stringArray0[3] = "D<K {BN1z=Gqg%,oe4qq";
      stringArray0[4] = "-expandEmptyFA4z7(hv:+<Fbbh~>";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(true);
      outputFormat0.setLineSeparator("Invalid attribute quote character (");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("-expandEmptyFA4z7(hv:+<Fbbh~>");
      outputFormat0.setIndent("D<K {BN1z=Gqg%,oe4qq");
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("4#6vcrNDe");
      assertEquals("4#6vcrNDe", outputFormat0.getIndent());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("EWC4`D`s>1", false);
      assertEquals("EWC4`D`s>1", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setPadText(false);
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setPadText(true);
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(false);
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8842802123171847
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize((-1933));
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(3281);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndent("");
      outputFormat0.setLineSeparator("");
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("");
      outputFormat0.setTrimText(false);
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize((-1933));
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setTrimText(true);
      boolean boolean0 = true;
      outputFormat0.setIndent(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 4064);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.745085659776791
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isPadText());
      assertEquals("  ", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = new OutputFormat("s/@Sb7y0N$axs)hKN");
      assertEquals("s/@Sb7y0N$axs)hKN", outputFormat1.getIndent());
      
      outputFormat1.setIndent("");
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isTrimText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isPadText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      
      String[] stringArray0 = new String[1];
      OutputFormat.createCompactFormat();
      stringArray0[0] = "qM\u00049^_`S";
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      OutputFormat outputFormat0 = new OutputFormat("@4)", true);
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("@4)", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhtml-xhtml";
      stringArray0[1] = "-xhtml-xhtml";
      stringArray0[2] = "-expandEmpty=Z:Cd^G)mr";
      stringArray0[3] = "-expandEmpty=Z:Cd^G)mr";
      stringArray0[4] = "-expandEmpty=Z:Cd^G)mr";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-expandEmpty=Z:Cd^G)mr";
      stringArray1[1] = "-expandEmpty=Z:Cd^G)mr";
      stringArray1[2] = "-expandEmpty=Z:Cd^G)mr";
      stringArray1[4] = "-xhtml-xhtml";
      stringArray1[5] = "-xhtml-xhtml";
      stringArray1[6] = "-expandEmpty=Z:Cd^G)mr";
      stringArray1[7] = "-xhtml-xhtml";
      stringArray1[8] = "-expandEmpty=Z:Cd^G)mr";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7903336705349573
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhtml-xhtml";
      stringArray0[1] = "-xhtml-xhtml";
      stringArray0[2] = "-expandEmpty=Z:Cd^G)mr";
      stringArray0[3] = "-expandEmpty=Z:Cd^G)mr";
      stringArray0[4] = "-expandEmpty=Z:Cd^G)mr";
      outputFormat0.setLineSeparator("FsOd{OlRm)vL|6c");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("-xhtml-xhtml");
      outputFormat0.setIndent("-expandEmpty=Z:Cd^G)mr");
      outputFormat1.setIndent("");
      outputFormat1.getLineSeparator();
      outputFormat0.getLineSeparator();
      assertEquals("FsOd{OlRm)vL|6c", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Y!^v(pX}$eZS.fF<a", false, " ");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (n)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8328255142358683
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setIndent("-newlines");
      outputFormat0.setPadText(true);
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndentSize(34);
      outputFormat0.setTrimText(false);
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      outputFormat0.setNewlines(false);
      stringArray0[4] = "=ZCCd^G)mr";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("l4", false);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "l4";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "l4";
      stringArray0[5] = "-xhtml";
      stringArray0[6] = "-xhtml";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1846493056));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1846493056
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.665664105514813
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 34);
      OutputFormat outputFormat1 = new OutputFormat("=ZCCd^G)mr", true);
      outputFormat1.isXHTML();
      outputFormat0.isXHTML();
      outputFormat1.setPadText(false);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setTrimText(false);
      outputFormat0.setTrimText(false);
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCb^G)mr");
      outputFormat0.setLineSeparator("=ZCCb^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setPadText(true);
      stringArray0[0] = "=ZCCb^G)mr";
      stringArray0[1] = "=ZCCb^G)mr";
      stringArray0[2] = "=ZCCb^G)mr";
      stringArray0[3] = "=ZCCb^G)mr";
      stringArray0[4] = "=ZCCb^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(true);
      assertTrue(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true, ":(2v7;%P[vp*voFD#");
      outputFormat1.setTrimText(true);
      assertTrue(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7074515352304802
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true, ":(2v7;%P[vp*voFD#");
      outputFormat1.setTrimText(true);
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setPadText(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertTrue(outputFormat0.isPadText());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.853253087436612
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Zk$u3U|{-0Q~j#kZ", true);
      outputFormat0.setLineSeparator("Zk$u3U|{-0Q~j#kZ");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isPadText();
      outputFormat0.isPadText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Zk$u3U|{-0Q~j#kZ";
      outputFormat0.setTrimText(true);
      stringArray0[1] = "D<K{N1z=GqV%,oe4qq";
      stringArray0[3] = "Zk$u3U|{-0Q~j#kZ";
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndent("0;u*LQ!n#@UT");
      outputFormat1.setLineSeparator("-xhtml4");
      outputFormat1.setPadText(true);
      outputFormat1.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("H@qlyfS8lM=(eYF{?", false, "Zk$u3U|{-0Q~j#kZ");
      outputFormat2.parseOptions(stringArray0, 34);
      outputFormat2.setTrimText(false);
      outputFormat2.setTrimText(true);
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.104316458229271
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false, "-xhtmlhM]M1n99YKl=he~|");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtmlhM]M1n99YKl=he~|";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "-xhtml";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty=Z:Cd^G)mr", true);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("-expandEmpty=Z:Cd^G)mr", outputFormat0.getIndent());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("2TBt,C~zOZ");
      outputFormat0.setIndent("2TBt,C~zOZ");
      outputFormat0.setEncoding((String) null);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setOmitEncoding(true);
      assertEquals("2TBt,C~zOZ", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Zk$u3U|{-0Q~j#kZ", true);
      outputFormat0.setLineSeparator("Zk$u3U|{-0Q~j#kZ");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndentSize(4064);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "x_p-M$L){@Z9wN'YL";
      stringArray0[1] = "\"LZ!w5/=Kk32";
      stringArray0[2] = "-xhtml)";
      stringArray0[3] = "<'wq@B;`";
      stringArray0[4] = "\"LZ!w5/=Kk32";
      stringArray0[5] = "Zk$u3U|{-0Q~j#kZ";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2416));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2416
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.909157776151512
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ZCCd^G)mr");
      outputFormat0.setLineSeparator("=ZCCd^G)mr");
      String[] stringArray0 = new String[5];
      outputFormat0.setPadText(true);
      stringArray0[0] = "=ZCCd^G)mr";
      stringArray0[1] = "=ZCCd^G)mr";
      stringArray0[2] = "=ZCCd^G)mr";
      stringArray0[3] = "=ZCCd^G)mr";
      stringArray0[4] = "=ZCCd^G)mr";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setTrimText(true);
      outputFormat0.setEncoding("OQO*ZUc.r`I_?6");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("=ZCCd^G)mr");
      assertEquals("=ZCCd^G)mr", outputFormat0.getLineSeparator());
  }
}
