/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:53:57 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.ElementPath;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      String string0 = "hz.qcVZV]`*,cSDE";
      sAXReader1.createDefaultEntityResolver("hz.qcVZV]`*,cSDE");
      sAXReader1.getErrorHandler();
      StringReader stringReader0 = new StringReader("hz.qcVZV]`*,cSDE");
      CharBuffer charBuffer0 = null;
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "aqDTDWC");
      PipedInputStream pipedInputStream0 = new PipedInputStream(62);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 1059);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.478680543331222
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      String string0 = "(QZo1";
      try { 
        sAXReader1.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3665903996941062
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("Error on line ");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("//tmp/7ezCS]0zYV:n0d=z4HhTvdB%:<", "t29}>tVsW", "//tmp/7ezCS]0zYV:n0d=z4HhTvdB%:<", attributesImpl0);
      xMLFilterImpl0.setErrorHandler(defaultHandler2_0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      String string0 = "(QZo1";
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Attribute is already in use";
      QName qName0 = new QName("Attribute is already in use");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      try { 
        MockURL.URL("Attribute is already in use");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Attribute is already in use
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4905526446902004
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      String string0 = "L$7R`aH12HS";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("L$7R`aH12HS");
      sAXReader0.addHandler("L$7R`aH12HS", (ElementHandler) null);
      charArray0[1] = 'a';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.createXMLReader();
      String string1 = "";
      try { 
        sAXReader1.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.attributeDecl("//tmp/h_D?X\"&LO?98-0", "//tmp/7ezCS]0zYV:n0d=z4HhTvdB%:<", "//tmp/7ezCS]07ezCS]", (String) null, (String) null);
      defaultHandler2_1.resolveEntity("//tmp/h_D?X\"&LO?98-0", "org.dom4j.QName");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.367420033319239
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.util.NonLazyElement";
      sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "");
      sAXReader1.isIgnoreComments();
      try { 
        MockURL.URL("org.dom4j.io.SAXReader$SAXEntityResolver", "http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: org.dom4j.io.saxreader$saxentityresolver
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4226775898693353
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.VisitorSupport", "Node");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("org.dom4j.VisitorSupport", "8Q29N0O6ga", (String) null);
      sAXReader0.getErrorHandler();
      sAXReader1.getXMLReader();
      Namespace namespace0 = Namespace.get("\"9OP,KIUb_Te\u00068T{d", "\"9OP,KIUb_Te\u00068T{d");
      QName.get("!Il", namespace0, "//tmp/tmp/7ezCS]07ezCS]0.tmp");
      StringReader stringReader0 = new StringReader("8Q29N0O6ga");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLReaderAdapter0.skippedEntity("!Il");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader2 = new SAXReader(parserAdapter0);
      sAXReader1.createDefaultEntityResolver("/");
      sAXReader2.createDefaultEntityResolver("//tmp/h_D?X\"&LO?98-0");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@131f468b Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@131f468b Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      charArray0[3] = '?';
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray1 = new char[6];
      xMLFilterImpl0.notationDecl("//tmp/h_D?X\"&LO?98-0", "org.dom4j.io.SAXModifyException", "org.dom4j.io.SAXModifyException");
      charArray1[0] = 'V';
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getXMLFilter();
      sAXReader0.setEncoding("No such namespace prefix: ");
      sAXReader0.isStringInternEnabled();
      MockFile.createTempFile("Pd`<,Vt58uB;wFb%c8", "");
      char[] charArray0 = new char[15];
      charArray0[0] = '_';
      charArray0[3] = 'I';
      charArray0[2] = ':';
      charArray0[3] = '$';
      charArray0[4] = '8';
      charArray0[5] = 'p';
      charArray0[6] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("No such namespace prefix: ");
      stringReader0.read(charBuffer0);
      try { 
        sAXReader0.read((Reader) stringReader0, "No such namespace prefix: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document No such namespace prefix:  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.373030131495957
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      String string0 = "";
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.util.NonLazyElement";
      sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "");
      xMLFilterImpl0.getContentHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader2 = new SAXReader((XMLReader) null);
      sAXReader1.getDocumentFactory();
      sAXReader2.createContentHandler((XMLReader) null);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("//tmp/Pd`<,Vt58uB;wFb%c80", " [Element: <");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \" [Element: <\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4262332996465648
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          QName qName0 = QName.get("ueKu!", "ueKu!", "ueKu!");
          qName0.getDocumentFactory();
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          sAXReader0.isStripWhitespaceText();
          sAXReader0.setIncludeInternalDTDDeclarations(true);
          XMLReader xMLReader0 = sAXReader0.createXMLReader();
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ueKu!");
          sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", " [Document: name ");
          sAXReader_SAXEntityResolver0.uriPrefix = "ueKu!";
          sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", "ueKu!");
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          sAXReader0.getErrorHandler();
          sAXReader0.getXMLReader();
          Namespace namespace0 = Namespace.get("ug@", "[%Vw]?[");
          QName.get("J%px^sd7n|AjU0", namespace0, "//tmp/h_D?X\"&LO?98-0");
          StringReader stringReader0 = new StringReader("J%px^sd7n|AjU0");
          DefaultHandler defaultHandler0 = new DefaultHandler();
          sAXReader0.configureReader(xMLReader0, defaultHandler0);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6543295176471653
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = QName.get("ueKu!", "ueKu!", "ueKu!");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.createXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ueKu!");
      sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", " [Document: name ");
      sAXReader_SAXEntityResolver0.uriPrefix = "ueKu!";
      sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", "ueKu!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      sAXReader0.getErrorHandler();
      sAXReader0.getXMLReader();
      String string0 = "J%px^sd7n|AjU0";
      Namespace namespace0 = Namespace.get("ug@", "[%Vw]?[");
      QName.get("J%px^sd7n|AjU0", namespace0, "//tmp/h_D?X\"&LO?98-0");
      sAXReader0.getEncoding();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setExecutable(true, true);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6668669447760673
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = QName.get("ueKu!", "ueKu!", "ueKu!");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.createXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ueKu!");
      sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", " [Document: name ");
      sAXReader_SAXEntityResolver0.uriPrefix = "ueKu!";
      sAXReader_SAXEntityResolver0.resolveEntity("ueKu!", "ueKu!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      sAXReader0.getErrorHandler();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      Namespace.get("ug@", "[%Vw]?[");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      try { 
        sAXReader0.setProperty("3&-LMwsU0BP|3l", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '3&-LMwsU0BP|3l' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4299857333746484
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.util.NonLazyElement";
      sAXReader1.createContentHandler(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      sAXReader0.getErrorHandler();
      sAXReader1.getXMLReader();
      Namespace namespace0 = Namespace.get("", "");
      QName.get("", namespace0, "n");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@551d70b6 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@551d70b6 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      StringReader stringReader0 = new StringReader("-->");
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'a';
      sAXReader0.setMergeAdjacentText(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl0.startPrefixMapping("", "-->");
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getXMLFilter();
      sAXReader0.getXMLReader();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.attributeDecl("//tmp/h_D?X\"&LO?98-0", "//tmp/7ezCS]0zYV:n0d=z4HhTvdB%:<", "//tmp/7ezCS]07ezCS]", (String) null, (String) null);
      sAXReader0.getErrorHandler();
      sAXReader0.getXMLReader();
      Namespace.get("//tmp/7ezCS]07ezCS]", "http://xml.org/sax/properties/lexical-handler");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("\"0%[M5v3F.", xMLFilterImpl2);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '\"0%[M5v3F.' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=E@0R;Ecdv[Zh");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lEGF#FmRiJELY.Ysp");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setMergeAdjacentText(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl0.startPrefixMapping("\"td)(c0xE.7]v T1=c", "lEGF#FmRiJELY.Ysp");
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.getXMLFilter();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.729823048470849
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/h_D?X\"&LO?98-0");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity(" mapped to URI \"", "http://xml.org/sax/properties/declaration-handler");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl(" mapped to URI \"", (String) null, "i,ZifIYADA^yV)88De6");
      sAXReader0.getErrorHandler();
      sAXReader1.getXMLReader();
      sAXReader0.isIncludeInternalDTDDeclarations();
      ElementStack elementStack0 = null;
      try {
        elementStack0 = new ElementStack((-1287));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader0.setMergeAdjacentText(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.getErrorHandler();
      SAXContentHandler sAXContentHandler1 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler1);
      sAXReader1.setErrorHandler(sAXContentHandler1);
      xMLFilterImpl0.startPrefixMapping("GmAq[!G{NS0R9rf.", "//tmp/h_D?X\"&LO?98-0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader1.getXMLFilter();
      sAXReader1.getXMLReader();
      boolean boolean0 = sAXReader1.isMergeAdjacentText();
      assertFalse(boolean0);
      
      sAXReader1.setEntityResolver(xMLFilterImpl0);
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'a';
      charArray0[2] = 'u';
      charArray0[0] = '#';
      charArray0[5] = 'Z';
      charArray0[6] = '8';
      CharBuffer.wrap(charArray0);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      ElementStack elementStack0 = new ElementStack(3961);
      elementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getSystemId();
      String string0 = "//tmp/7ezCS]07ezCS]";
      File file0 = MockFile.createTempFile("//tmp/7ezCS]07ezCS]", (String) null);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[5];
      String string0 = "t~q3Q|X+";
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd((ElementPath) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setValidation(true);
      try { 
        MockURL.URL("P[_]57B;45;M");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: P[_]57B;45;M
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4795747311106564
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      InputSource inputSource0 = new InputSource("Node");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("org.dom4j.VisitorSupport", "8Q29oN0O6ga", (String) null);
      sAXReader0.getErrorHandler();
      StringReader stringReader0 = new StringReader("8Q29oN0O6ga");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8Q29oN0O6ga");
      xMLReaderAdapter0.skippedEntity("!Il");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      StringReader stringReader1 = new StringReader("http://xml.org/sax/properties/declaration-handler");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@2e86923c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@2e86923c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.239720847079902
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.isValidating();
      try { 
        sAXReader0.read("//tmp/Pd`<,Vt58uB;wFb%c80");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      sAXReader0.createXMLReader();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3507323743022455
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getXMLFilter();
      String string0 = "";
      sAXReader0.setEncoding("No such namespace prefix: ");
      sAXReader0.isStringInternEnabled();
      File file0 = MockFile.createTempFile("Pd`<,Vt58uB;wFb%c8", "");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"NO SUCH NAMESPACE PREFIX: \". Nested exception: Invalid encoding name \"NO SUCH NAMESPACE PREFIX: \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.setFeature("d.N7{O'O9wb{j$dgF\"", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'd.N7{O'O9wb{j$dgF\"' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          sAXReader0.isValidating();
          sAXReader0.setStringInternEnabled(false);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor129.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BO~";
      stringArray0[1] = "org.dom4j.tree.AbstractEntity";
      stringArray0[2] = "Validation not supported for XMLReader: ";
      stringArray0[3] = "org.dom4j.io.SAXModifyException";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2959368307306476
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.isStringInternEnabled();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      File file0 = MockFile.createTempFile("7ezCS]", "7ezCS]");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      sAXReader0.resetHandlers();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)11);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 47);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2833517168939514
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("Error on line ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("FX]lu}iqsM897+");
      String string0 = "//tmp/7ezCS]07ezCxS]";
      sAXReader_SAXEntityResolver0.resolveEntity("Error on line ", "//tmp/7ezCS]07ezCxS]");
      InputSource inputSource0 = new InputSource("Error on line ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("true", "//tmp/7ezCS]07ezCS]");
      defaultHandler2_0.getExternalSubset("9e9", "true");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null, "(QZo1");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getSystemId();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader1.getDispatchHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      sAXReader1.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("(QZo1", sAXReader1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: (QZo1
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      URL uRL0 = MockURL.getHttpExample();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader1.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.458054830067992
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      xMLFilterImpl0.setDocumentLocator(locator2Impl1);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      String string0 = "(QZo1";
      try { 
        sAXReader1.read((InputStream) null, "&2*<N'l4cz8&<~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.860271904073296
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      SAXContentHandler sAXContentHandler1 = sAXReader0.createContentHandler((XMLReader) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader1.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "Node");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("http://xml.org/sax/properties/declaration-handler", "DocumentType", "yp<CKq$wO");
      xMLFilterImpl1.setEntityResolver(xMLFilterImpl0);
      sAXReader1.getErrorHandler();
      StringReader stringReader0 = new StringReader("asXPathResult() not yet implemented fully for: ");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      xMLReaderAdapter0.skippedEntity("Node");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl2);
      DOMDocument dOMDocument0 = new DOMDocument("asXPathResult() not yet implemented fully for: ");
      sAXReader2.getXMLFilter();
      sAXReader2.configureReader(parserAdapter0, sAXContentHandler1);
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isStripWhitespaceText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.removeHandler("");
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.setDocumentLocator((Locator) null);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      MockFile mockFile0 = new MockFile("tp|6}L");
      mockFile0.getAbsolutePath();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QName qName0 = new QName("Error on line ");
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = 'a';
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.getXMLReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("-->");
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'a';
      charArray0[2] = 'u';
      charArray0[3] = '#';
      charArray0[4] = 't';
      charArray0[5] = 'Z';
      charArray0[6] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      try { 
        sAXReader0.read((Reader) stringReader0, "-->");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = null;
      String string1 = null;
      MockException mockException0 = new MockException((String) null);
      MockException mockException1 = new MockException();
      SAXParseException sAXParseException0 = new SAXParseException("K;", "K;", "K;", (-172), (-172), mockException1);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("xl,'8;F");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class xl,'8;F not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.825858220876302
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler1 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler1);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader2.setXMLFilter(xMLFilterImpl0);
      String string0 = "(QZo1";
      SAXReader sAXReader3 = new SAXReader((DocumentFactory) null, true);
      sAXReader3.setDocumentFactory(defaultDocumentFactory0);
      try { 
        sAXReader3.configureReader(xMLFilterImpl1, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@39f547f5 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "?iTnYnp";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "?iTnYnp", 58, " : ", uRLStreamHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 10;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@f8f59e4 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@f8f59e4 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7366162102910074
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createContentHandler(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.util.NonLazyElement";
      sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader1.setDefaultHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl("//tmp/h_D?X\"&LO?98-0", "//tmp/h_D?X\"&LO?98-0", "\"9OP,KIUb_Te\u00068T{d");
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = 'Z';
      xMLFilterImpl1.characters(charArray0, 375, 9);
      sAXReader1.setIgnoreComments(false);
      xMLFilterImpl1.setDTDHandler(sAXContentHandler0);
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader1.setDocumentFactory(defaultDocumentFactory0);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BZ4fl\"0Erw9cPS)k");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setStripWhitespaceText(false);
      String string0 = "This should never happen. Caught: ";
      try { 
        sAXReader0.setFeature("BZ4fl\"0Erw9cPS)k", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'BZ4fl\"0Erw9cPS)k' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "3|qA|,2~7u{e";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("3|qA|,2~7u{e", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 3|qA|,2~7u{e not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
