/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:53:07 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1019), "pN?J/|z", "pN?J/|z", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(2948, 1);
      ByteVector byteVector2 = byteVector1.putByte(1);
      ByteVector byteVector3 = byteVector0.putByte(515);
      byteVector2.putByte(3);
      byteVector1.put12(7, 272);
      ByteVector byteVector4 = byteVector0.put12(1, 206);
      ByteVector byteVector5 = byteVector3.put12(7, 1);
      byteVector1.putUTF8("");
      fieldWriter0.put(byteVector2);
      classWriter0.visit((-44), (-44), "", "pN?J/|z", "", (String[]) null);
      fieldWriter0.put(byteVector1);
      fieldWriter0.put(byteVector5);
      assertSame(byteVector5, byteVector4);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2948);
      classWriter0.version = 65535;
      classWriter0.version = 2780;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}\"e&Wsh";
      stringArray0[1] = "int";
      classWriter0.visit(2780, 65535, "}\"e&Wsh", "}\"e&Wsh", " HOr![TNH)Uo", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "RuntimeVisibleAnnotations", "int", "}\"e&Wsh", " HOr![TNH)Uo");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteVector byteVector1 = byteVector0.putLong(2780);
      byteVector1.putShort(65492);
      ByteVector byteVector2 = byteVector1.putInt(2780);
      byteVector2.length = 2780;
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2948);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.version = 65535;
      classWriter0.version = 2780;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}\"e&Wsh";
      stringArray0[1] = "}\"e&Wsh";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "}\"e&Wsh", "}\"e&Wsh", "}\"e&Wsh", " HOr![TNH)Uo");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong(2780);
      byteVector0.putInt((byte) (-100));
      byteVector1.putShort(65492);
      ByteVector byteVector2 = byteVector1.putInt(2780);
      assertSame(byteVector1, byteVector2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0832409930999294
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", true);
      int int0 = 2;
      ByteVector byteVector1 = byteVector0.putByte((-1159));
      ByteVector byteVector2 = byteVector1.putByte(50);
      byteVector0.putInt((-1159));
      fieldWriter0.put(byteVector2);
      byteVector0.put12((-1159), 65492);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 515);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8647337539567728
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1019), "pN?J/|z", "pN?J/|z", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(2948, 1);
      ByteVector byteVector2 = byteVector1.putByte(1);
      ByteVector byteVector3 = byteVector0.putByte(515);
      byteVector2.putByte(3);
      byteVector2.putShort(2948);
      byteVector0.put12(1, 2954);
      byteVector3.put12(7, 1);
      byteVector1.putUTF8("");
      fieldWriter0.put(byteVector2);
      classWriter0.visit((-44), (-44), "", "pN?J/|z", "", (String[]) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4804779276453799
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2948);
      classWriter0.version = 65535;
      classWriter0.version = 2780;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}\"e&Wsh";
      stringArray0[1] = "int";
      classWriter0.visit(1, 65535, "}\"e&Wsh", "}\"e&Wsh", " HOr![TNH)Uo", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "RuntimeVisibleAnnotations", "int", "}\"e&Wsh", " HOr![TNH)Uo");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong(1);
      byteVector1.putShort(65492);
      ByteVector byteVector2 = byteVector1.putInt(1);
      byteVector2.length = 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      classWriter0.newNameType("lb", "The list of suffixes must not be null");
      fieldWriter0.put(byteVector2);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094477478421831
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter1.visitAnnotation("X/;", false);
      byteVector0.putInt(1081);
      classWriter0.newUTF8("RuntimeInvisibleAnnotations");
      int int0 = (-204);
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, (-204), "The array of names must not be null", "", ";lTq(y", "The array of names must not be null");
      fieldWriter2.getSize();
      fieldWriter2.getSize();
      fieldWriter1.getSize();
      int int1 = 4135;
      ByteVector byteVector1 = byteVector0.put11(4135, 8);
      fieldWriter0.put(byteVector1);
      byte[] byteArray0 = new byte[0];
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1556);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3, "pN?J/|z", "pN?J/|z", "", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(1556, 501);
      ByteVector byteVector2 = byteVector1.putByte(501);
      ByteVector byteVector3 = byteVector1.putByte(3);
      ByteVector byteVector4 = new ByteVector();
      fieldWriter0.put(byteVector2);
      byteVector3.put12(104, 104);
      byteVector2.put12(1, 5);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 16777221);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putShort(515);
      ByteVector byteVector2 = byteVector0.putByte((-1159));
      ByteVector byteVector3 = byteVector2.putByte(50);
      byteVector1.putInt((-1159));
      fieldWriter0.put(byteVector3);
      byteVector0.put12((-1159), 65492);
      byteVector0.put12(2, 2342);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 515);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(bufferedInputStream0);
      pushbackInputStream0.markSupported();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, bufferedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4921365626372998
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter1.visitAnnotation("X/;", false);
      byteVector0.putInt(1081);
      classWriter0.newUTF8("RuntimeInvisibleAnnotations");
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, (-204), "The array of names must not be null", "", ";lTq(y", "The array of names must not be null");
      Attribute attribute0 = new Attribute("");
      fieldWriter2.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter2.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6363840440238837
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", "", "");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = new ByteVector();
      fieldWriter1.visitAnnotation("X/;", false);
      byteVector0.putInt(1081);
      classWriter0.newUTF8("RuntimeInvisibleAnnotations");
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, (-204), "The array of names must not be null", "", ";lTq(y", "The array of names must not be null");
      fieldWriter2.getSize();
      int int0 = fieldWriter2.getSize();
      assertEquals(36, int0);
      
      fieldWriter1.getSize();
      ByteVector byteVector1 = byteVector0.put11(4135, 8);
      fieldWriter0.put(byteVector1);
      byte[] byteArray0 = new byte[0];
      fieldWriter1.visitAnnotation("The list of names must not be null", true);
      int int1 = fieldWriter1.getSize();
      assertEquals(48, int1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0225955941538991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 515;
      ClassWriter classWriter0 = new ClassWriter(515);
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      int int1 = 2;
      int int2 = (-1159);
      ByteVector byteVector1 = byteVector0.putByte((-1159));
      ByteVector byteVector2 = byteVector1.putByte(50);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      byteVector0.putInt((-1159));
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4863125658959901
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2948);
      classWriter0.version = 65535;
      classWriter0.version = 2780;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ".x_fmQFmi=p";
      String[] stringArray0 = new String[2];
      classWriter0.newDouble(0.0);
      stringArray0[0] = ".x_fmQFmi=p";
      stringArray0[1] = "int";
      classWriter0.visit(1, 131072, ".x_fmQFmi=p", ".x_fmQFmi=p", " HOr![TNH)Uo", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "RuntimeVisibleAnnotations", "int", "}\"e&Wsh", " HOr![TNH)Uo");
      fieldWriter0.visitAnnotation("LocalVariableTable", false);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      int int0 = 1886;
      Attribute attribute0 = new Attribute("RuntimeInvisibleAnnotations");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8945706855324711
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1556);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt(288);
      ByteVector byteVector2 = byteVector1.putShort((-1013));
      byteVector2.putByte((-2382));
      ByteVector byteVector3 = byteVector1.putByte(69);
      byteVector3.put12(2689, (-1));
      ByteVector byteVector4 = byteVector3.putUTF8("xUNhz`d+@AT'MM@");
      byteVector4.put11(3, 2689);
      fieldWriter0.put(byteVector4);
      fieldWriter0.put(byteVector3);
      assertSame(byteVector3, byteVector1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(515);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 49, "Signature", "Signature", ";JkK`gJTgt9b", (Object) null);
      fieldWriter1.visitAnnotation("", true);
      fieldWriter0.next = fieldWriter1;
      FieldWriter fieldWriter2 = classWriter0.lastField;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2954);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-100);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.version = 65535;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.version = 2;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}[-l5");
      String[] stringArray0 = new String[9];
      stringArray0[0] = " HOr![TNH)Uo";
      stringArray0[1] = "}[-l5";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "}[-l5", "}[-l5", "}[-l5", " HOr![TNH)Uo");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.next = fieldWriter1;
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(2780);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1556);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "!Wk\":Mn", "!Wk\":Mn", "!Wk\":Mn", "The list of prefixes must not be null");
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("!Wk\":Mn");
      Attribute attribute1 = new Attribute("!Wk\":Mn");
      Attribute attribute2 = attribute1.next;
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.AbstractFileFilter");
      MockFile mockFile1 = new MockFile(mockFile0, "`Ix2G^XR/6$G");
      assertFalse(mockFile1.equals((Object)mockFile0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".x_fmQFmi=p";
      stringArray0[1] = "int";
      ClassWriter classWriter0 = new ClassWriter(65492);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2780, "int", "", "boolean", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@1316d2c4
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = null;
      int int0 = 2;
      String string0 = "\\rM&\"!s9";
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 2, "", "", "\rM&\"!s9", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
