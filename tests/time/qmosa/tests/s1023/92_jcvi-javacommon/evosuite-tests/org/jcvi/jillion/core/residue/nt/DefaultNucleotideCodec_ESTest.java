/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:10:18 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (-614));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.121778780118077
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-87);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec1.encode((-1), iterator0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-24));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-110));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      Integer integer1 = new Integer(0);
      defaultNucleotideCodec1.isGap(byteArray0, (byte) (-34));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)28;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.isGap(byteArray1, 5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3777725706090145
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      byte[] byteArray1 = defaultNucleotideCodec5.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.decodedLengthOf(byteArray1);
      defaultNucleotideCodec6.getNumberOfGapsUntil(byteArray0, 255);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte) (-72));
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec9 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec9.getUngappedOffsetFor(byteArray0, 2);
      DefaultNucleotideCodec defaultNucleotideCodec10 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec10.toString(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte) (-72);
      byteArray2[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets(byteArray2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.012586325222597
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      byte byte0 = (byte)81;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1);
      int int0 = (-1199);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((long) 1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1 .. 1 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.292766130506512
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-80);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[3] = (byte)81;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.iterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.324094113258143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 2138);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      
      Range range0 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)32}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Weak;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3758823434458964
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 2138);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      Range range0 = Range.ofLength(0);
      Range range1 = Range.of((long) 2138);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.getBegin();
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0, range0);
      Nucleotide nucleotide1 = Nucleotide.Weak;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set2 = nucleotide0.getBasesFor();
      defaultNucleotideCodec3.encode((Collection<Nucleotide>) set2);
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((-3200), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)57;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-34);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)64;
      defaultNucleotideCodec0.isGap(byteArray0, (-73));
      Nucleotide nucleotide0 = Nucleotide.Keto;
      nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-34);
      byteArray1[6] = (byte)64;
      byteArray1[7] = (byte)11;
      byteArray1[8] = (byte)64;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, (byte)11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 11 corresponds to encodedIndex 9  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 435);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      byte byte0 = (byte) (-124);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byte byte1 = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte byte2 = (byte) (-76);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 170);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3744287378605162
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-54);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2122219133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      byteArray0[0] = (byte) (-28);
      byteArray0[0] = (byte)62;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.671722143604516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)90;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1076);
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byte byte1 = (byte) (-3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0868859901424064
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Strong;
      byte[] byteArray2 = defaultNucleotideCodec2.encode(nucleotide1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-80)}, byteArray2);
      
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte) (-120);
      byteArray3[2] = (byte)10;
      byteArray3[3] = (byte)11;
      defaultNucleotideCodec1.decodedLengthOf(byteArray3);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 68);
      assertEquals(1, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray1);
      int int2 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray3, 44);
      assertEquals(44, int2);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec5.toString(byteArray1);
      assertEquals("-", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      List<Integer> list0 = defaultNucleotideCodec6.getGapOffsets(byteArray0);
      assertFalse(list0.contains(int0));
      
      int int3 = defaultNucleotideCodec6.getNumberOfGaps(byteArray3);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1774707483986018
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      byte byte0 = (byte) (-124);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-80);
      long long0 = new Byte((byte) (-80));
      int int0 = new Byte((byte) (-34));
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.encode(nucleotide0);
      byte byte1 = (byte)81;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(65, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.921700419787323
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1076);
      byteArray0[0] = (byte)90;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1276);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 3635L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 3635 corresponds to encodedIndex 1821  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9564339811456435
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9784131432944947
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-24);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 573);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146571764));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Integer integer0 = new Integer((-2146571764));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-791));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte) (-24);
      defaultNucleotideCodec1.isGap(byteArray1, (byte)37);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte) (-8), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 10L, 10L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)62;
      defaultNucleotideCodec1.decode(byteArray0, 1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, (-1076L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1076
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0871506629406595
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      byte[] byteArray1 = defaultNucleotideCodec1.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec5.getUngappedOffsetFor(byteArray1, 6);
      assertEquals(6, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.toString(byteArray1);
      String string0 = defaultNucleotideCodec3.toString(byteArray1);
      assertEquals("M", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getGapOffsets(byteArray0);
      int int1 = defaultNucleotideCodec6.getNumberOfGaps(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.300331942484313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 2576);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, (byte) (-124));
      assertEquals(0, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec3.getNumberOfGaps(byteArray0);
      assertTrue(int2 == int0);
      
      Integer integer0 = new Integer(939);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, 1);
      assertFalse(boolean0);
      
      defaultNucleotideCodec2.isGap(byteArray0, (-2008));
      String string0 = defaultNucleotideCodec3.toString(byteArray0);
      assertEquals("-", string0);
      
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-60);
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-65), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGapsUntil((byte[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-89);
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-105);
      byte byte1 = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byte byte2 = (byte) (-124);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-19));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)3;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Range range0 = Range.ofLength((byte)15);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7321184591665695
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(1148L);
      Range range1 = Range.of(3302L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 3302 .. 3302 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0601971394057923
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      Set<Nucleotide> set2 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      assertEquals(4, byteArray1.length);
      
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)15;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Range.ofLength((byte)15);
      Range range0 = Range.of((long) (byte)15);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1503873768282427
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-80);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-2065780736L), long0);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[3] = (byte)81;
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2100));
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-124));
      assertEquals((-124), int1);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("C", string0);
      
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      int int2 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertEquals(5, byteArray1.length);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.147864047236483
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-16)}, byteArray0);
      
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)29, (byte)46}, byteArray1);
      assertEquals(4L, long0);
      assertEquals(6, byteArray1.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1758));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-124);
      int int0 = 1120;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 1120, (long) 1120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0836965178665086
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Strong;
      Set<Nucleotide> set1 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray1.length);
      
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)16}, byteArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.382435249959657
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      assertTrue(int1 == int0);
      
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)31;
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 2L);
      assertEquals(Nucleotide.Adenine, nucleotide0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1076);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-3);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3519094763680632
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, 0);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      long long0 = new Integer(0);
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte)109;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 3821;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5703506325889265
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      int int1 = new Byte((byte) (-124));
      byteArray0[2] = (byte) (-76);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-2065779712L), long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.268315217966277
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 435);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (int) integer0);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      Integer integer1 = new Integer(0);
      defaultNucleotideCodec0.isGap(byteArray0, 201326592);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) integer0, (Iterator<Nucleotide>) listIterator0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-110));
      defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.969753626489527
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      byteArray0[0] = (byte) (-28);
      byteArray0[0] = (byte)62;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)31;
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      defaultNucleotideCodec0.decode(byteArray0, 2L);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3177);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.417908845253019
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      Nucleotide nucleotide2 = defaultNucleotideCodec0.decode(byteArray1, 0L);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray1);
      assertEquals(Nucleotide.Guanine, nucleotide2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-62);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1652L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1652 corresponds to encodedIndex 830  encodedglyph length is 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0570128495250297
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-3734));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1641);
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)31;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Thymine, nucleotide0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 2L);
      assertEquals(Nucleotide.Adenine, nucleotide1);
      
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3177);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1073741824, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = null;
      int int0 = 805820159;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 805820159);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6364077903306034
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 435);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (int) integer0);
      byteArray0[1] = (byte) (-124);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 201326592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 435);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (int) integer0);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      Integer integer1 = new Integer(0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList1.listIterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte) (-76), (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7944736034533117
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-621L);
      Range range0 = Range.of(range_CoordinateSystem0, (-621L), (-621L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -621 .. -621 ]/0B is out of range of sequence which is only [ 0 .. 2 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7906679823987566
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Weak;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.840310808512987
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)85;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1069);
      byteArray0[0] = (byte)85;
      byte byte1 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.261351372140415
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray1);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1613);
      assertEquals(1612, int0);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.222651276473768
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      assertEquals(5, byteArray0.length);
      
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-32)}, byteArray1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7955428394729185
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 435);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (int) integer0);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      Integer integer1 = new Integer(0);
      defaultNucleotideCodec0.isGap(byteArray0, 201326592);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.listIterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5706696118552745
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-76);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5287985193076428
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (byte)68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4212064844137973
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)14;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      long long0 = (-1749L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1871372558903355
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Amino;
      nucleotide1.getBasesFor();
      Range.of(16L);
      Nucleotide nucleotide2 = Nucleotide.Thymine;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide3 = Nucleotide.NotAdenine;
      Set<Nucleotide> set2 = nucleotide3.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-591));
      assertEquals((-591), int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-41);
      Byte byte0 = new Byte((byte) (-41));
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)42;
      byte byte1 = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)15;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte)11;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      DefaultNucleotideCodec.values();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Nucleotide nucleotide0 = Nucleotide.Purine;
      linkedList0.push(nucleotide0);
      linkedList0.forEach(consumer0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-64)}, byteArray1);
  }
}
