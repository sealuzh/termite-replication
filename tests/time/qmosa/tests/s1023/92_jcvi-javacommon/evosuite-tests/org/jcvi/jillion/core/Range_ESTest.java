/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:32:14 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8206822936419824
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.iterator();
      Object object0 = new Object();
      long long0 = 3163L;
      Long long1 = new Long(3163L);
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2117L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.054055860520931
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
      range_Builder1.contractEnd((-2445L));
      range_Builder0.copy();
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(1210L, 9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      range_Builder2.copy();
      range0.split(60L);
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean2 = range2.intersects(range1);
      assertFalse(boolean2 == boolean1);
      
      range_Builder2.expandEnd(263L);
      Range.Builder range_Builder3 = new Range.Builder((-543L), 747L);
      Range range3 = Range.ofLength(9223372036854773718L);
      Range range4 = range2.asRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      String string0 = range3.toString();
      assertEquals("[ 0 .. 9223372036854773717 ]/0B", string0);
      
      Range range5 = Range.ofLength(980L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.086183989426423
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 1 .. 1 ]/RB");
      Range range1 = Range.parseRange("[ 1 .. 1 ]/RB");
      range1.spliterator();
      Range.parseRange("[ 1 .. 1 ]/RB", range_CoordinateSystem0);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 1568L);
      Range.ofLength(65535L);
      Range.of(range_CoordinateSystem1, 65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1568L);
      Range range2 = Range.ofLength(2222L);
      range0.endsBefore(range2);
      long long0 = 1397L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.678715366049598
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      Object object0 = new Object();
      range0.equals(iterator0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range range1 = Range.of(4294967295L, 9223372036854775807L);
      range1.equals(range_Builder1);
      long long0 = 1007L;
      // Undeclared exception!
      try { 
        Range.of(1007L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9329875602183306
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 1653L);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 65535L, 65535L);
      Range.of(65535L, 9223372036854775807L);
      Range.of(range_CoordinateSystem2, 3402L, 65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.679343137187602
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.71449646282393
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-1149L));
      range0.iterator();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1068L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.644663663390551
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.of(9223372036854775807L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2743L, long0);
      
      Range range1 = Range.ofLength(2743L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.120057720084181
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      Object object0 = new Object();
      range0.equals(iterator0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-2685L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-820L), (-820L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-820L), 2147483647L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.ofLength(2173L);
      range2.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4204L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.072297372745895
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range.Builder range_Builder4 = range_Builder1.copy();
      long long0 = (-1343L);
      range_Builder4.contractEnd((-1343L));
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1343L), 2628L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem1, (-1L), 2628L);
      range2.intersects(range0);
      Range.of(2628L, 9223372036854773313L);
      Range range3 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("e{K@YyKp", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse e{K@YyKp into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-5263L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5263L), (-5263L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.69293601131415
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1668L), 4864L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractEnd(561L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      long long0 = 0L;
      range_Builder2.contractEnd(4864L);
      Range range0 = Range.of(0L, 4294967295L);
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        Range.of(561L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6254833093743137
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-1149L);
      Range range0 = Range.of((-1149L));
      range0.iterator();
      Object object0 = new Object();
      long long1 = 3163L;
      Long long2 = new Long((-1149L));
      range0.equals(long2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1149L), 3163L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.357718378762424
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-5057L);
      Range range0 = Range.of((-5057L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 3359L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2104L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2104L), (-2104L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7139852996259624
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      long long0 = 0L;
      range_Builder0.expandEnd(0L);
      long long1 = 1412L;
      Range.of(0L, 1412L);
      range0.equals("[ 0 .. -1 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. -1 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ 0 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.556655881708655
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
      range_Builder1.contractEnd((-2445L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range0.getBegin();
      Range range1 = Range.of(1210L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      long long0 = range0.getLength();
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7616720752865875
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractEnd((-2445L));
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-2445L));
      range_Builder0.copy();
      range0.getBegin();
      long long1 = 1210L;
      Range range1 = Range.of(1210L, 9223372036854775807L);
      range0.startsBefore(range1);
      Range.of((-2445L), (-1L));
      range_Builder2.expandBegin((-2683L));
      range1.endsBefore(range0);
      long long2 = 624L;
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2683L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.807146466787499
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-211L);
      long long1 = 4294967295L;
      Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.ofLength((-211L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8943388856186654
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1668L), 4864L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 561L;
      range_Builder0.contractEnd(561L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      range_Builder2.contractEnd(4864L);
      Range range0 = Range.of((-1668L), 4294967295L);
      range0.equals(range_Builder0);
      Range range1 = Range.of(561L, 4864L);
      range1.intersects(range0);
      range1.getEnd();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.449247830367885
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = (-590L);
      Range range0 = Range.of((-590L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-590L), (-2695L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.002207741531149
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-1L), 2147483647L);
      range1.complement(range0);
      range1.asRange();
      long long0 = 454L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 454L, (-2147486425L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6042928572052144
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-2949L), 917L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 917L, 917L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2949L), 3226L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773818L, (-2898L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2898 would make range [9223372036854773818 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.437359174056062
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(2183L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2183L, long0);
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.02805746735998
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      range_Builder0.expandEnd(0L);
      Range range1 = Range.of(0L, 1412L);
      List<Range> list0 = range0.split(3519L);
      Range.of((-1739L), 1412L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 932L, 2772L);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.102123288662163
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-1149L));
      range0.iterator();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1149L), (-1149L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem0, (-1507L), (-1149L));
      long long0 = range2.getLength();
      assertEquals(359L, long0);
      
      Range.of((-128L), (-128L));
      Range range3 = Range.ofLength(1L);
      range1.complementFrom(linkedList0);
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.contains(range3));
      assertFalse(range3.isEmpty());
      
      range0.equals((Object) null);
      assertNotSame(range0, range2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-5263L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5263L), (-5263L));
      long long1 = 0L;
      Long long2 = new Long((-2474L));
      range0.equals(long2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2474L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7442192922947455
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      Object object0 = new Object();
      range0.equals(iterator0);
      range0.spliterator();
      Range range1 = Range.of((-2779L), 2222L);
      range1.split(1920L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-2779L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9928625547363947
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.contractEnd(0L);
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, (-1L), (-1L));
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-1L), (-1L));
      range_Builder2.expandBegin(0L);
      range1.endsBefore(range0);
      Range.of(0L);
      Range.ofLength(0L);
      range_Builder2.expandBegin((-1L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1149L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.883500133875763
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 1 .. 1 ]/RB");
      Range range2 = Range.parseRange("[ 1 .. 1 ]/RB");
      range2.spliterator();
      Range.parseRange("[ 1 .. 1 ]/RB", range_CoordinateSystem0);
      range0.intersection(range2);
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      range_Builder0.contractEnd((-979L));
      range_Builder0.expandBegin(0L);
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        range1.split((-2047L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.939302179665654
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(13L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 12 ]/0B", string0);
      
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      Long long0 = new Long(5L);
      boolean boolean0 = range0.startsBefore(range1);
      Range range2 = Range.parseRange("[ 0 .. 12 ]/0B");
      range_Builder0.expandBegin(0L);
      range0.endsBefore(range1);
      Range.parseRange("[ 0 .. 12 ]/0B");
      Range range3 = Range.of(0L);
      Range range4 = Range.ofLength(0L);
      Range range5 = range4.asRange();
      boolean boolean1 = range5.endsBefore(range2);
      assertFalse(range5.equals((Object)range3));
      assertSame(range2, range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.388452419154598
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.isEmpty();
      range0.intersection(range1);
      range1.toString();
      range1.endsBefore(range0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.538338992958964
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      long long0 = 2504L;
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = 624L;
      range_Builder0.expandEnd(624L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-13L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 624L, (-13L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.642216544268128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-1L));
      range_Builder0.copy();
      long long1 = (-1L);
      range_Builder2.contractEnd(0L);
      Range range1 = Range.of((-1L), (-1L));
      range1.equals("org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange");
      range0.intersects(range1);
      range1.getEnd();
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.085312873300412
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range.Builder range_Builder4 = range_Builder1.copy();
      range_Builder4.shift(2743L);
      range_Builder4.shift((-1L));
      range_Builder4.contractEnd((-1343L));
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1343L), 2628L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem1, (-1L), 17L);
      range_Builder5.expandBegin(9223372036854775807L);
      boolean boolean0 = range2.endsBefore(range0);
      assertTrue(boolean0);
      
      Range range3 = Range.of((-3016L), 1397L);
      Range.Builder range_Builder6 = new Range.Builder(range3);
      range_Builder0.expandBegin(1L);
      Range.ofLength(3607L);
      List<Range> list0 = range2.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4914149475552216
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-5263L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5263L), (-5263L));
      long long1 = 0L;
      Long long2 = new Long((-5263L));
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-5263L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.216212418083071
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.403368586825856
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.090143440430575
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      long long1 = (-6L);
      range_Builder0.expandEnd((-6L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.905201251734832
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2743L, 2743L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2743L, 2743L);
      Range.Builder range_Builder4 = range_Builder1.copy();
      range_Builder4.contractEnd((-1343L));
      Range range1 = Range.of((-1L), (-1L));
      range1.equals(range_Builder0);
      range1.split(127L);
      range0.intersects(range1);
      range0.getEnd();
      range1.isSubRangeOf(range0);
      range_Builder2.copy();
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder2.expandBegin(127L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(2743L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5322311716449026
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.10637844682983
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of((-1149L));
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1149L), (-1149L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem0, (-1507L), (-1149L));
      long long0 = range2.getLength();
      assertEquals(359L, long0);
      
      Range range3 = Range.of((-128L), (-128L));
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(1L);
      long long1 = range4.getEnd();
      assertEquals(0L, long1);
      
      range1.complementFrom(linkedList0);
      List<Range> list0 = range4.complement(range0);
      assertTrue(list0.contains(range4));
      
      range0.equals((Object) null);
      assertFalse(range0.equals((Object)range3));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4395783683976435
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-128L));
      long long0 = (-695L);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-1352L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.8756571026696314
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.spliterator();
      Range range1 = Range.of(0L, 0L);
      Range.of(0L, 3519L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.ofLength(3519L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(0L);
      List<Range> list0 = range0.complement(range2);
      assertNotSame(range2, range1);
      assertTrue(list0.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3610113272635873
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("<oUOXe!VqGb8Ks2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.<oUOXe!VqGb8Ks2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5819652334771037
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 1955L;
      Range range0 = Range.of(1955L, 1955L);
      Range.Builder range_Builder0 = new Range.Builder(1955L, 1955L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_Builder0.expandBegin(1955L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-3693L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1955L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7445686152542494
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 3178L);
      range0.spliterator();
      List<Range> list0 = range0.split(3519L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(0L, 3519L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(3519L);
      Range range3 = range_Builder0.build();
      Range range4 = Range.of(2147483647L);
      range_Builder0.contractEnd(2772L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = new Range.Builder(range2);
      range_Builder1.contractBegin((-1L));
      assertNotSame(range2, range1);
      
      boolean boolean0 = range4.isSubRangeOf(range3);
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.318984488569487
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2495L, 2495L);
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(2183L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = (-128L);
      range_Builder1.expandEnd((-128L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2342L, 2183L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = 2183L;
      Range.Builder range_Builder0 = new Range.Builder(2183L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder2.expandBegin(65535L);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = (-847L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-847L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.6669298615982893
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1862L), (-1862L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-979L));
      range_Builder0.expandBegin(9223372036854775807L);
      range_Builder2.shift(4294967295L);
      Range range0 = Range.ofLength(4294967295L);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of(0L, (-1862L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9179374954802197
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder((-1674L), (-1333L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      range1.iterator();
      Range.Builder range_Builder3 = range_Builder1.contractEnd(0L);
      range_Builder3.copy();
      range_Builder2.copy();
      Range range2 = Range.ofLength(2504L);
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertTrue(boolean1);
      
      boolean boolean2 = range1.intersects(range2);
      assertNotSame(range2, range0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.0038413878142105
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      range_Builder0.copy();
      range_Builder1.contractEnd(0L);
      Range range1 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-1L), 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem2, (-1L), (-1L));
      Range range2 = range_Builder3.build();
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-1L), 2446L);
      range_Builder3.expandBegin(1246L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range range3 = Range.of(321L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(1344L);
      range_Builder2.expandBegin((-2779L));
      Range range5 = Range.ofLength(1246L);
      List<Range> list0 = range4.split(2147483647L);
      assertFalse(list0.contains(range5));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.716638382677753
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.shift(1L);
      range_Builder0.copy();
      Range range0 = Range.of((-4584L));
      range0.split(255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.130934019482354
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
      range_Builder1.contractEnd((-2445L));
      range_Builder0.copy();
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals((-1L), long0);
      
      Range range1 = Range.of(1210L, 9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range0.isSubRangeOf(range1);
      range_Builder2.copy();
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      List<Range> list0 = range1.split(9223372036854775807L);
      Range.of((-2445L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2220L), 1210L);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2513870421770865
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.of((-1842L));
      // Undeclared exception!
      try { 
        Range.ofLength((-3182L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 2183L;
      long long1 = 4294967295L;
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.346895128556114
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-304L), (-1L));
      String string0 = "-l&";
      // Undeclared exception!
      try { 
        Range.parseRange("I/L", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse I/L into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.7657227631206043
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.spliterator();
      Range range1 = Range.of(0L, 0L);
      Range.ofLength(3519L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.spliterator();
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("t2{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse t2{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5467235967157005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 240L, 240L);
      range_Builder0.build();
      long long1 = 2147483647L;
      long long2 = 255L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.769515427605494
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      range_Builder0.copy();
      range_Builder1.contractEnd(0L);
      Range range1 = Range.of(0L, 4872L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6067000905622892
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.spliterator();
      long long1 = (-2779L);
      long long2 = 2222L;
      Range range1 = Range.of((-2779L), 2222L);
      // Undeclared exception!
      try { 
        range1.split((-1195L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.7758795918994434
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range0.isEmpty();
      range0.intersection(range1);
      range1.toString();
      range1.endsBefore(range0);
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 537L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 537L, 537L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.744795311232758
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of((-1840L), (-1840L));
      Range range1 = Range.of((-1840L));
      assertSame(range1, range0);
      
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3272954596351867
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = (-2445L);
      Range.of(1210L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-2683L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2139L), (-2683L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      long long1 = 2183L;
      Range.Builder range_Builder0 = new Range.Builder(2183L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-128L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2342L, 2183L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.050268857805566
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.toString();
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long(5L);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 5L);
      assertFalse(range2.isEmpty());
      
      range_Builder0.expandBegin(0L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range.of((-1256L), 624L);
      Range range3 = Range.of(0L);
      assertNotSame(range3, range2);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(0L);
      range4.asRange();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.7552165896117558
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.isSubRangeOf(range0);
      long long0 = new Long(0L);
      Range range2 = range0.asRange();
      boolean boolean0 = range2.intersects(range2);
      boolean boolean1 = range1.equals(range0);
      boolean boolean2 = range0.isEmpty();
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = range2.endsBefore(range1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6397510714436394
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 3820L;
      Range range0 = Range.of(3820L);
      range0.split(3820L);
      Range range1 = Range.of(3820L, 3820L);
      Range range2 = range0.intersection(range1);
      range2.endsBefore(range1);
      range0.equals("!JBu-,7rWU:g0b}1^|n");
      range1.split(3820L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.0768942190082464
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 3386L;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 1653L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 65535L, 65535L);
      Range.ofLength(9223372036854775807L);
      Range range2 = Range.of(range_CoordinateSystem2, 3386L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2222L);
      range2.endsBefore(range1);
      Range.of(1397L, 65535L);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.312335425973952
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.of(1565L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1566L, long0);
      
      Range range1 = Range.ofLength(3724L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 436L, 4294965090L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.7283686791886437
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1178L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2369L, 1178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.953396222786526
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1L));
      range_Builder0.copy();
      range_Builder1.contractEnd(0L);
      Range range1 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-1L), 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem2, (-1L), (-1L));
      Range range2 = range_Builder3.build();
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-1L), 2446L);
      Range.Builder range_Builder4 = range_Builder3.expandBegin(1246L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.of(321L);
      Range range3 = Range.ofLength(1344L);
      assertFalse(range3.isEmpty());
      
      range_Builder2.expandBegin((-2779L));
      Range.Builder range_Builder5 = new Range.Builder(0L);
      Range range4 = range_Builder4.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.832695595980006
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.spliterator();
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of(0L, 3519L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.intersects(range0);
      range0.split(4723L);
      Object object0 = new Object();
      range0.equals(object0);
      range2.intersects(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range3 = Range.of(0L, 4723L);
      List<Range> list0 = range0.complement(range2);
      range0.complementFrom(list0);
      range3.intersects(range2);
      // Undeclared exception!
      try { 
        Range.of(244L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.766869331122905
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6479797308271613
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of(0L, 1412L);
      Long long0 = new Long(1412L);
      Range range1 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(1425L);
      range1.asRange();
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.943544838887065
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2445L));
      Range.Builder range_Builder3 = range_Builder1.contractEnd((-2445L));
      range_Builder0.copy();
      range_Builder1.contractEnd((-32768L));
      Range range1 = Range.of(1210L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      range_Builder2.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 2491L, 5541L);
      range_Builder3.build();
      Range.Builder range_Builder5 = new Range.Builder();
      range0.endsBefore(range1);
      range_Builder1.expandBegin(3385L);
      Range.of(1210L, 5541L);
      range_Builder3.expandBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.26434764612705
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-384L), long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3250185550996156
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range range0 = Range.of(3756L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3764058124683003
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long long0 = 2183L;
      Range.of(2183L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.ofLength((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
