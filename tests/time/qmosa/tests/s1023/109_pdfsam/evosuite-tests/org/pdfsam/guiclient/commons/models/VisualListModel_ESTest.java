/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:32:06 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.RenderingHints;
import java.awt.event.InputMethodListener;
import java.awt.image.renderable.ParameterBlock;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.media.jai.OperationRegistry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.287775125414499
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      int[] intArray0 = new int[1];
      intArray0[0] = 1553;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveDownIndex(12);
      visualListModel0.moveDownIndexes(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.moveDownIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1552
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1390191586452127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      intArray0[0] = (-2346);
      intArray0[1] = (-1194);
      intArray0[2] = 2055;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements((-1194), 0, false);
      visualListModel0.clearData();
      intArray0[3] = 3954;
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[4] = 5;
      intArray0[5] = (-5244);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.getSize();
      visualListModel0.addElement((VisualPageListItem) null);
      boolean boolean0 = false;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.moveUpIndex((-1913));
      visualListModel0.moveDownIndex(0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      int int0 = 4052;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2012, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2012
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      visualListModel1.elementChanged((VisualPageListItem) null);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      HashMap<RenderingHints.Key, BasicComboBoxEditor> hashMap0 = new HashMap<RenderingHints.Key, BasicComboBoxEditor>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      // Undeclared exception!
      try { 
        operationRegistry0.createCollection("$L!LH", parameterBlock0, renderingHints0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"$L!LH\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = (-1206);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1206
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      int int0 = (-30);
      visualListModel0.moveUpIndex((-30));
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7319281223917313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      int[] intArray0 = new int[5];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(1295);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel1.prependAllElements(linkedHashSet0);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.setData(visualPageListItemArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.reverseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel3.updateElementAt(1295, visualPageListItemArray0[7]);
      assertNotSame(visualListModel3, visualListModel1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6745460275183657
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel1.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.data = null;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.subList(1821, 1821);
      visualListModel0.addAllElements(1821, (Collection<VisualPageListItem>) null);
      // Undeclared exception!
      try { 
        visualListModel0.clearData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4697253909244914
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      VisualListModel visualListModel1 = new VisualListModel();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel2 = new VisualListModel();
      int int0 = (-110);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel1.prependAllElements(linkedHashSet0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-110);
      intArray0[1] = (-110);
      intArray0[2] = (-110);
      intArray0[3] = (-110);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.setData(visualPageListItemArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      int[] intArray1 = new int[1];
      intArray1[0] = (-110);
      try { 
        visualListModel1.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -110
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveDownIndex(1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel1.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6082873972465448
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1206
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5028085294147036
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex(1);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.prependAllElements(arrayList0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, VisualPageListItem> function0 = (Function<Object, VisualPageListItem>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, VisualPageListItem> function1 = unaryOperator0.andThen((Function<? super Object, ? extends VisualPageListItem>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends VisualPageListItem>) function1);
      Function.identity();
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      visualListModel2.prependAllElements(arrayList0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.updateElementAt(1, (VisualPageListItem) null);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = (-1242);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1242);
      visualListModel1.rotateClockwiseElements(intArray0);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1242
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.79702464647557
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel1 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-110);
      visualListModel0.rotateClockwiseElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.undeleteElements(intArray1);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.setData(visualPageListItemArray0);
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      visualListModel1.moveUpIndexes(intArray2);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.set((-1512L), 2);
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel0.reverseElements(intArray1);
      int[] intArray3 = new int[0];
      visualListModel0.moveDownIndexes(intArray3);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.setData(vector0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9620683055449604
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex((-1445));
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1445);
      intArray0[1] = (-1445);
      intArray0[2] = (-1445);
      intArray0[3] = (-1445);
      intArray0[4] = (-1445);
      intArray0[5] = 1;
      intArray0[6] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel1.elementsChanged();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.setData(vector0);
      visualListModel0.addElementAt(visualPageListItemArray0[5], 1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1445), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1445
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6852796955098506
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      int[] intArray0 = new int[5];
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(1295);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel1.prependAllElements(linkedHashSet0);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[10];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = visualPageListItemArray0[2];
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = visualPageListItemArray0[1];
      visualPageListItemArray0[8] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1586));
      // Undeclared exception!
      try { 
        visualListModel1.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      arrayList0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(arrayList0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      defaultComboBoxModel0.getSelectedItem();
      stack1.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel1 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.addAllElements((-1206), (Collection<VisualPageListItem>) arrayList0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayList0);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8060589105490013
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndex(1);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray0 = new int[2];
      UnaryOperator.identity();
      Function<Object, VisualPageListItem> function0 = (Function<Object, VisualPageListItem>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super VisualPageListItem, ? extends Integer>) function1);
      UnaryOperator<VisualPageListItem> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      vector0.replaceAll(unaryOperator1);
      visualListModel1.setData(vector0);
      visualListModel1.addElementAt((VisualPageListItem) null, (-1159));
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveUpIndex(5905);
      visualListModel2.getElements();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.66321897304404
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray0 = new int[5];
      intArray0[3] = 1422;
      intArray0[4] = 1553;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveDownIndex(1);
      int[] intArray1 = new int[0];
      visualListModel0.moveDownIndexes(intArray1);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 1;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.moveDownIndexes(intArray2);
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray2);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1586));
      visualListModel0.clearData();
      visualListModel0.getSize();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6365457565245944
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      int[] intArray0 = new int[5];
      intArray0[3] = 1422;
      intArray0[4] = 1553;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveDownIndex(1);
      int[] intArray1 = new int[0];
      visualListModel0.moveDownIndexes(intArray1);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 1;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.moveDownIndexes(intArray2);
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray2);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1586));
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray2);
      visualListModel0.elementChanged(visualPageListItemArray0[2]);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel1 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      stack1.clear();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultComboBoxModel1);
      VisualListModel visualListModel1 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.addAllElements(0, (Collection<VisualPageListItem>) priorityQueue0);
      assertNotSame(visualListModel2, visualListModel1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.754240930731769
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      intArray0[0] = (-2346);
      intArray0[1] = (-1194);
      intArray0[2] = 2023;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements((-1194), 0, false);
      visualListModel0.clearData();
      intArray0[3] = 3971;
      visualListModel0.addElement((VisualPageListItem) null);
      intArray0[4] = 5;
      intArray0[5] = (-5244);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.getSize();
      visualListModel0.removeElements(intArray0, false);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.clearData();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      VisualListModel visualListModel3 = new VisualListModel();
      VisualListModel visualListModel4 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel4.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2831984663755978
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1279);
      intArray0[1] = (-3189);
      intArray0[2] = 1350;
      intArray0[3] = (-166);
      intArray0[4] = (-1229);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1279
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1331337395597156
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1206);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1206
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1206
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.updateElementAt(488, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.getElements();
      visualListModel0.setData(vector0);
      visualListModel0.getValidElements();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(488);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener0);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[1];
      Vector<String> vector0 = new Vector<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      defaultTableModelArray0[0] = defaultTableModel0;
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(defaultTableModelArray0);
      defaultComboBoxModel0.removeAllElements();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      jComboBox1.getMaximumSize();
      visualListModel0.addListDataListener(jComboBox1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int int0 = 0;
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.moveDownIndex(1);
      visualListModel0.moveUpIndex(5);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) visualListModel0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) visualListModel0;
      objectArray0[4] = (Object) visualListModel0;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      int int0 = 1600;
      int int1 = (-2039);
      // Undeclared exception!
      try { 
        visualListModel0.subList(279, (-2039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(279) > toIndex(-2039)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      defaultComboBoxModel0.getListDataListeners();
      defaultComboBoxModel0.removeAllElements();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      stack0.add((DefaultTableModel) null);
      jComboBox0.getMaximumSize();
      visualListModel1.addListDataListener(jComboBox0);
      visualListModel1.moveUpIndex(32767);
      visualListModel0.addElementAt((VisualPageListItem) null, 636);
      visualListModel1.elementChanged((VisualPageListItem) null);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7413926873721288
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      jComboBox0.firePropertyChange("", (byte) (-30), (byte) (-3));
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener0);
      jComboBox0.addInputMethodListener((InputMethodListener) null);
      jComboBox0.requestFocusInWindow();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getListDataListeners();
      visualListModel0.moveUpIndex(1167);
      visualListModel0.subList((int) (byte) (-3), (int) (byte) (-3), false);
      visualListModel0.moveDownIndex((-1));
      visualListModel0.moveDownIndex(34);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1167, (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1167) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      defaultComboBoxModel0.getListDataListeners();
      defaultComboBoxModel0.removeAllElements();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      visualListModel1.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel1.moveUpIndexes(intArray0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      parameterBlock0.set(0L, 32767);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.spliterator();
      visualListModel0.addAllElements(4506, (Collection<VisualPageListItem>) treeSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.addElement((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex(0);
      visualListModel0.removeElements(intArray0, true);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      visualListModel0.getValidElements();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, sunHints_Key1);
      OperationRegistry.getThreadSafeOperationRegistry();
      RenderingHints renderingHints1 = new RenderingHints(sunHints_Key1, (Object) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      visualListModel0.getSize();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.removeElements(2046, 0, false);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jComboBox0.addFocusListener(defaultCaret0);
      visualListModel1.addListDataListener(jComboBox0);
      visualListModel1.moveUpIndex(0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel1.moveDownIndex(0);
      visualListModel1.getValidElements();
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1, vector0);
      Vector<Object> vector2 = parameterBlock1.getSources();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector2);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      basicComboBoxEditor0.setItem(metalComboBoxEditor0);
      parameterBlock0.addSource(basicComboBoxEditor0);
      Vector<VisualPageListItem> vector3 = visualListModel2.data;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      int int1 = 925;
      int[] intArray0 = new int[4];
      int int2 = 0;
      int int3 = 0;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.prependAllElements(collection0);
      intArray0[0] = 0;
      intArray0[1] = 925;
      int int4 = (-1);
      intArray0[2] = (-1);
      Vector<VisualPageListItem> vector0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(stack0);
      visualListModel0.removeListDataListener(jComboBox0);
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      float float0 = (-1069.1748F);
      float float1 = 0.0F;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      int int0 = (-1163);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1163));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1163
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.360380995184394
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      visualListModel1.removeElements(intArray0, false);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      visualListModel0.getValidElements();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Integer integer0 = new Integer(0);
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, integer0);
      OperationRegistry.getThreadSafeOperationRegistry();
      RenderingHints renderingHints1 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, (Object) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel1.clearData();
      visualListModel2.getSize();
      // Undeclared exception!
      try { 
        visualListModel1.removeElementAt(633, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 633
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.734399680379122
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jComboBox0.addInputMethodListener((InputMethodListener) null);
      jComboBox0.requestFocusInWindow();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getListDataListeners();
      visualListModel0.moveUpIndex(1167);
      visualListModel0.moveDownIndex((-1));
      visualListModel0.moveDownIndex(34);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1167, (-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1167) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(vector0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel1 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<Object> stack2 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack2);
      ParameterBlock parameterBlock1 = new ParameterBlock(stack2, stack2);
      int[] intArray0 = new int[4];
      intArray0[0] = 1668;
      intArray0[1] = 0;
      intArray0[2] = 1668;
      intArray0[3] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      assertArrayEquals(new int[] {1668, 0, 1668, 0}, intArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-1230), 1668);
      Collection<VisualPageListItem> collection0 = new PriorityQueue<VisualPageListItem>();
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1494, 1600);
      assertNull(collection0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6082873972465448
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.addElement((VisualPageListItem) null);
      int int0 = 488;
      visualListModel0.updateElementAt(488, (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.clearData();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      visualListModel1.getSize();
      visualListModel1.addAllElements((-1757), (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(vector0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      stack0.clear();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel1 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel1);
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel2 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      stack1.clear();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultComboBoxModel1);
      VisualListModel visualListModel1 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.addAllElements((-1203), (Collection<VisualPageListItem>) priorityQueue0);
      assertNotSame(visualListModel1, visualListModel2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 1261;
      intArray0[2] = (-3991);
      intArray0[3] = 1;
      intArray0[4] = 2912;
      intArray0[5] = 3;
      intArray0[6] = 13;
      intArray0[7] = 651;
      intArray0[2] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 13;
      intArray1[1] = 10;
      intArray1[2] = 651;
      intArray1[3] = 0;
      intArray1[4] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.removeElements(0, 0, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      int int0 = 9;
      int int1 = 783;
      visualListModel0.removeElements(9, 783, false);
      Function.identity();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<Object> vector1 = new Vector<Object>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      int int2 = (-1006);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      vector1.add((Object) sunHints_Key0);
      // Undeclared exception!
      try { 
        vector1.listIterator(783);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 783
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 7402;
      intArray0[2] = 92;
      intArray0[3] = 1139;
      intArray0[4] = 8;
      visualListModel1.undeleteElements(intArray0);
      defaultComboBoxModel0.removeAllElements();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      visualListModel1.addListDataListener(jComboBox0);
      int[] intArray1 = new int[0];
      visualListModel1.undeleteElements(intArray1);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.573897503310073
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-110);
      visualListModel0.rotateClockwiseElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.undeleteElements(intArray1);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel1.appendAllElements(linkedHashSet0);
      visualListModel1.setData(visualPageListItemArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      try { 
        visualListModel1.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -110
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jComboBox0.addInputMethodListener((InputMethodListener) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, sunHints_LCDContrastKey0);
      OperationRegistry.getThreadSafeOperationRegistry();
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      RenderingHints renderingHints1 = new RenderingHints((RenderingHints.Key) null, sunHints_Key2);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel1.clearData();
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.524931174849591
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      intArray0[0] = (-2346);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      defaultComboBoxModel0.getListDataListeners();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.moveUpIndexes(intArray0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      ParameterBlock parameterBlock1 = new ParameterBlock();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.reverseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel2.moveUpIndexes(intArray0);
      visualListModel2.rotateClockwiseElements(intArray0);
      assertArrayEquals(new int[] {(-2346), 0, 0, 0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.removeElements(1, (-493), false);
      visualListModel1.removeElements((-493), (-493), true);
      Function.identity();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Object> vector1 = new Vector<Object>();
      // Undeclared exception!
      try { 
        vector1.listIterator((-1006));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1006
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(vector0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      visualListModel0.removeListDataListener(jComboBox0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1272, 1);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[9];
      defaultTableModelArray0[0] = defaultTableModel0;
      defaultTableModelArray0[1] = defaultTableModel0;
      defaultTableModelArray0[2] = defaultTableModel0;
      defaultTableModelArray0[3] = defaultTableModel0;
      defaultTableModelArray0[4] = defaultTableModel0;
      defaultTableModelArray0[5] = defaultTableModel0;
      defaultTableModelArray0[6] = defaultTableModel0;
      defaultTableModelArray0[7] = defaultTableModel0;
      defaultTableModelArray0[8] = defaultTableModel0;
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel1 = new DefaultComboBoxModel<DefaultTableModel>(defaultTableModelArray0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-4348);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.undeleteElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      defaultComboBoxModel0.getListDataListeners();
      defaultComboBoxModel0.removeAllElements();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      visualListModel1.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel1.moveUpIndexes(intArray0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      parameterBlock0.set((double) 32767, 32767);
      parameterBlock0.set(0L, 32767);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.addElementAt((VisualPageListItem) null, 694);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<DefaultTableModel> vector1 = new Vector<DefaultTableModel>();
      JList<DefaultTableModel> jList0 = new JList<DefaultTableModel>(vector1);
      jList0.getSelectedValuesList();
      vector0.removeAll(vector1);
      visualListModel0.setData(vector0);
      Vector<VisualPageListItem> vector2 = null;
      try {
        vector2 = new Vector<VisualPageListItem>((-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1205
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1206);
      VisualListModel visualListModel1 = new VisualListModel();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      jComboBox0.requestFocusInWindow();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1167, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1167) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      stack0.clear();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      Stack<Object> stack2 = new Stack<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(stack2);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Object object0 = visualListModel0.getElementAt(439);
      assertNull(object0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(stack0);
      stack0.clear();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultComboBoxModel0);
      VisualListModel visualListModel1 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7842068034002125
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>();
      DefaultComboBoxModel<DefaultTableModel> defaultComboBoxModel0 = new DefaultComboBoxModel<DefaultTableModel>(vector0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) visualListModel0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) null;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      jComboBox0.addInputMethodListener((InputMethodListener) null);
      jComboBox0.requestFocusInWindow();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getListDataListeners();
      visualListModel0.moveUpIndex((-1));
      visualListModel0.moveDownIndex(1167);
      visualListModel0.moveDownIndex(34);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1167, 1167, true);
      assertNull(collection0);
  }
}
