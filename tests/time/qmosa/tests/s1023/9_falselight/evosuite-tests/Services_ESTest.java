/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:15:53 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.65746215038855
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Services.testPOP3("", 1760);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@578f1eb2) **");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 126);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      Services services0 = new Services();
      services_HTTP_Result0.reset();
      Services services1 = new Services();
      Services.testSMTP("", 1760);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 0);
      assertEquals((-1), services_HTTP_Result1.code);
      
      services_HTTP_Result0.reset();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Services.testPOP3("", 126);
      services_HTTP_Result1.reset();
      services_HTTP_Result0.toString();
      services_HTTP_Result0.page_weight = 0;
      services_HTTP_Result0.toString();
      Services.testHTTP("**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@578f1eb2) **", (-2816));
      Services.testHTTPS("q7N6PKEidb]+M", 0);
      Services.testHTTP("", 409);
      Services.testSMTP("", (-1596));
      System.setCurrentTimeMillis(0);
      Services.testHTTP("", (-1596));
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", 1768);
      assertEquals(0, services_HTTP_Result2.code);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.861689812002369
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 1760);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://`a>`II,\":0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@578f1eb2) **");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      Services services0 = new Services();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("`a>`II,\"", 0);
      services_HTTP_Result1.reset();
      services_SIMPLE_Result0.toString();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, "http");
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("q", 0);
      services_HTTP_Result1.reset();
      services_HTTP_Result0.toString();
      services_HTTP_Result1.toString();
      Services.testHTTPS("", 0);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)12;
      boolean boolean0 = services_SIMPLE_Result1.works;
      services_HTTP_Result2.reset();
      Services.testHTTP("", 0);
      System.setCurrentTimeMillis(0);
      Services.testSMTP("", (-3103));
      Services.testPOP3("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **", 0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4771L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1414L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-5273L));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2754);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis(1L);
      Services.testSMTP("sxb>C0eqVt<", 2754);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(197L);
      System.setCurrentTimeMillis((-2743L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.86271545302801
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Services.testPOP3("", 1760);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://gdCitB[ap;B4C:1");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@578f1eb2) **");
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      Services services0 = new Services();
      services_HTTP_Result0.reset();
      Services services1 = new Services();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 0);
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.testPOP3("", 0);
      services_HTTP_Result0.reset();
      String string1 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", string1);
      
      services_HTTP_Result0.toString();
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      
      Services.testHTTP("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **", 0);
      Services.testHTTPS("q7N6PKEidb]+M", 0);
      Services.testHTTP("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: [**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **]) **", 0);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("gdCitB[ap;B4C", 1);
      assertEquals(126, services_HTTP_Result2.page_weight);
      assertTrue(services_HTTP_Result2.works);
      
      Services.testHTTP("", 1760);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: [**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: [**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **]) **]) **", 0);
      assertEquals(0L, services_SIMPLE_Result1.time);
      assertFalse(services_SIMPLE_Result1.works);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8623398661735497
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services.testPOP3("", 1760);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@578f1eb2) **");
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      Services services0 = new Services();
      services_HTTP_Result0.reset();
      Services services1 = new Services();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 0);
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.testPOP3("", 0);
      services_HTTP_Result0.reset();
      String string1 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : true\n** Temps : 0 ms\n** Poid de la page : 126 octets\n** Code de page : -1\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      String string2 = services_HTTP_Result0.toString();
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string2);
      assertEquals(0, services_HTTP_Result0.code);
      
      Services.testHTTP("", 0);
      Services.testHTTPS("q7N6PKEidb]+M", 0);
      Services.testHTTP("", 0);
      Services.testHTTPS("gdCitB[ap;B4C", 1);
      Services.testHTTP("", 1760);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", 0);
      assertEquals(0L, services_SIMPLE_Result1.time);
      assertFalse(services_SIMPLE_Result1.works);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.524673352026602
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", (-2770));
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:3000");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**Erreur : java.lang.IllegalArgumentException: port out of range:-2770**");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services services0 = new Services();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-2770**.\n****", string0);
      
      Services.testPOP3("", 0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 3000);
      assertEquals(73, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", (-2770));
      assertEquals(0L, services_SIMPLE_Result1.time);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("** Erreur g\u00E9n\u00E9r\u00E9e : ", 3000);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, (-520));
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 0);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.page_weight = (-3466);
      services_HTTP_Result0.toString();
      services_HTTP_Result0.toString();
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", (-3466));
      services_HTTP_Result0.page_weight = (-3466);
      services_SIMPLE_Result0.toString();
      Services services0 = new Services();
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "** Erreur g\u00E9n\u00E9r\u00E9e : ");
      byteArray0[0] = (byte) (-12);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", (byte) (-12));
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result1.Error = "B!";
      services_SIMPLE_Result1.works = false;
      services_SIMPLE_Result0.time = (long) 20;
      services_SIMPLE_Result1.works = true;
      Services.testHTTPS("B!", 20);
      System.setCurrentTimeMillis(20);
  }
}
