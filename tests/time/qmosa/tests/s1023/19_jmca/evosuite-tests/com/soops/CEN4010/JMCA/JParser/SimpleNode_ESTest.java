/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:56:00 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9920480917684886
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer.allocate(3031);
      stringWriter1.close();
      arrayList0.add(">>");
      simpleNode0.dump("!wyHK\"SF", stringWriter1);
      arrayList0.add("iNv-53 _]a93pc;");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(3031);
      simpleNode0.dump("Luu_Oh", stringWriter1);
      arrayList0.clear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser((String) null);
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1552944795792688
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("</");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 9);
      simpleNode0.toString();
      StringReader stringReader1 = new StringReader("GFf.[T");
      JavaParser javaParser1 = new JavaParser(stringReader1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      SimpleNode simpleNode1 = new SimpleNode((-1338));
      ArrayList<String> arrayList1 = simpleNode1.identifiers;
      arrayList0.add("3#_!uap>kzk2[+5x");
      arrayList0.add("}");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("EnumBody");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JavaParser javaParser2 = new JavaParser("EnumBody");
      simpleNode0.dump("\"`/", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(9);
      simpleNode0.dump("\"`/", stringWriter0);
      try { 
        javaParser2.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("&&");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer.allocate(3031);
      stringWriter1.close();
      arrayList0.add("|");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add(")'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter3 = new StringWriter();
      stringWriter0.append('W');
      StringWriter stringWriter4 = stringWriter0.append('y');
      simpleNode0.dump("*201}m*", stringWriter3);
      StringWriter stringWriter5 = stringWriter0.append((CharSequence) null);
      simpleNode0.dump("!wyHK\"SF", stringWriter5);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter6.append((CharSequence) null);
      stringWriter4.flush();
      StringWriter stringWriter7 = new StringWriter(3031);
      assertEquals("", stringWriter7.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8313156158018913
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(";");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ";");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      simpleNode0.dump((String) null, stringWriter2);
      CharBuffer.allocate(5437);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(5437);
      simpleNode0.dump("kRqH", stringWriter4);
      simpleNode0.dump("%<C-M09<)1WVB|<`$", stringWriter2);
      StringWriter stringWriter5 = new StringWriter();
      simpleNode0.dump(";", stringWriter5);
      assertEquals("<ImplementsList>\n</ImplementsList>\n", stringWriter5.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(12);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '~';
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "<";
      arrayList0.add("<");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append('e');
      stringWriter2.close();
      CharBuffer.allocate('e');
      CharBuffer.allocate(12);
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "<");
      stringWriter3.append((CharSequence) "<");
      stringWriter1.write((-1));
      simpleNode0.dump(".MgOn(D).(f$L", stringWriter1);
      stringWriter3.flush();
      StringWriter stringWriter4 = null;
      try {
        stringWriter4 = new StringWriter((-2045222519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4283921010830838
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("</");
      JavaParser javaParser0 = new JavaParser("</");
      SimpleNode simpleNode0 = new SimpleNode(0);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">=");
      arrayList0.add("</");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "</");
      simpleNode0.dump("kRqH", stringWriter0);
      assertEquals("</<CompilationUnit>\n  <identifier>*ge</identifier>\n  <identifier></</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      CharBuffer.allocate(0);
      StringWriter stringWriter1 = new StringWriter();
      JavaParser javaParser2 = new JavaParser("*lt");
      SimpleNode simpleNode1 = new SimpleNode(javaParser2, 0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtGetChild(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(3361);
      JavaParser javaParser0 = new JavaParser(pipedInputStream1);
      SimpleNode simpleNode0 = new SimpleNode(3361);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<=");
      SimpleNode simpleNode1 = new SimpleNode(3361);
      simpleNode0.jjtAddChild(simpleNode1, 3361);
      Node node0 = javaParser0.currNode;
      simpleNode1.jjtAddChild((Node) null, 3361);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1703
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5012174293093299
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode2 = (SimpleNode)javaParser0.currNode;
      simpleNode1.jjtSetParent(simpleNode2);
      simpleNode0.dump("Literal", (Writer) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "", 0, 0);
      stringWriter1.append((CharSequence) "-=", 0, 0);
      simpleNode0.dump("-=", stringWriter1);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.setIdentifier("-=");
      simpleNode0.dump("", stringWriter0);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.clear();
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, 0);
      arrayList0.add("\"--\"");
      SimpleNode simpleNode4 = new SimpleNode(0);
      Node node0 = simpleNode1.jjtGetParent();
      simpleNode4.jjtAddChild(node0, 0);
      simpleNode3.jjtAddChild(node0, 0);
      simpleNode0.jjtGetParent();
      simpleNode1.dump("+va+Rr=!e#s", stringWriter0);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
      
      String string0 = simpleNode3.toString(">");
      assertEquals(">CompilationUnit", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3847504283476768
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(7);
      String string0 = simpleNode0.toString();
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "ImplementsList");
      simpleNode0.jjtAddChild(simpleNode0, 7);
      stringWriter1.append((CharSequence) "<+/Kb1");
      simpleNode0.dump(string0, stringWriter0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.332743259698963
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.toString();
      String string0 = ">";
      StringReader stringReader0 = new StringReader(">");
      simpleNode0.toString("CompilationUnit");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.parser = javaParser0;
      arrayList0.add("\"else\"");
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("\"--\"");
      StringWriter stringWriter0 = new StringWriter(28);
      arrayList0.clear();
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      arrayList0.add("CompilationUnitCompilationUnit");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 3956);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, 0);
      simpleNode1.jjtAddChild(simpleNode0, 573);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      // Undeclared exception!
      simpleNode0.dump("CompilationUnit", stringWriter0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2381744996028692
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(12);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '~';
      charArray0[2] = 'g';
      charArray0[3] = '.';
      charArray0[4] = 'M';
      charArray0[5] = '5';
      charArray0[6] = 'e';
      charArray0[7] = 'p';
      charArray0[8] = '~';
      StringReader stringReader0 = new StringReader("&&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 12, 81);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParser0.getToken(81);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      javaCharStream0.backup(0);
      StringBuffer stringBuffer0 = javaParser1.token_source.image;
      StringWriter stringWriter0 = new StringWriter('\u001C');
      simpleNode0.dump("", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(3361);
      JavaParser javaParser0 = new JavaParser(pipedInputStream1);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 3361);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("&&", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 829;
      SimpleNode simpleNode0 = new SimpleNode(829);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(829);
      simpleNode1.parent = (Node) simpleNode0;
      Node node0 = simpleNode1.jjtGetParent();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = simpleNode1.parent;
      nodeArray0[2] = node0;
      nodeArray0[3] = (Node) simpleNode1;
      nodeArray0[4] = node0;
      nodeArray0[5] = (Node) simpleNode1;
      nodeArray0[6] = simpleNode1.parent;
      StringReader stringReader0 = new StringReader("jLv{WrOt+");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser1, (-5934));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(nodeArray0[3], (-633));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(12);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.write(charArray0);
      String string0 = "\\u";
      StringReader stringReader0 = new StringReader(string0);
      int int0 = 75;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 80, 75, 12);
      stringReader0.skip(941L);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      javaCharStream1.backup(2801);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      SimpleNode simpleNode1 = new SimpleNode(1750);
      simpleNode0.jjtAddChild(simpleNode1, 2801);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-2123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2123
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '~';
      charArray0[2] = 'g';
      charArray0[3] = '.';
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      charArray0[5] = '5';
      charArray0[7] = 'p';
      charArray0[8] = '|';
      stringWriter0.write(charArray0);
      StringReader stringReader0 = new StringReader("&&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 7, 98);
      stringReader0.skip(98);
      javaCharStream0.backup(420);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      simpleNode0.jjtAddChild(simpleNode0, 7);
      simpleNode0.jjtAddChild(simpleNode0, 7);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter1 = new StringWriter(0);
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9146804067996936
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("&&");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer.allocate(3031);
      stringWriter1.close();
      arrayList0.add("|");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("*rshft");
      arrayList1.add(")'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter0.append('W');
      StringWriter stringWriter5 = stringWriter4.append('W');
      simpleNode0.dump("&&", stringWriter1);
      simpleNode0.dump("!wyHK\"SF", stringWriter1);
      stringWriter5.append((CharSequence) "");
      stringWriter1.flush();
      StringWriter stringWriter6 = new StringWriter(7);
      String string0 = "*le";
      simpleNode0.toString();
      // Undeclared exception!
      try { 
        stringWriter5.append((CharSequence) "ImplementsList : && : | : *rshft : )'", (-4396), 3031);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("</");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.toString();
      StringReader stringReader1 = new StringReader("GFf.[T");
      JavaParser javaParser1 = new JavaParser(stringReader1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      JavaParser javaParser2 = new JavaParser("&");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.toString("-");
      String string0 = simpleNode0.toString("</");
      assertEquals("</EnumBody : <", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(")'");
      arrayList0.add(";");
      StringWriter stringWriter1 = new StringWriter();
      arrayList0.clear();
      simpleNode0.jjtAddChild(simpleNode0, 28);
      simpleNode0.jjtAddChild(simpleNode0, 41);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(41);
      assertEquals(42, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x~iR\"Fg.[l1JoZ_&s ");
      simpleNode0.jjtAddChild((Node) null, 14);
      simpleNode0.toString();
      simpleNode0.jjtGetChild(14);
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.toString();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(15, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8350516730230504
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '~';
      charArray0[2] = 'g';
      charArray0[3] = '.';
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      charArray0[5] = '5';
      charArray0[7] = 'p';
      simpleNode0.setIdentifier("$<");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.dump("G", stringWriter0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter1.append((CharSequence) "G");
      stringWriter4.flush();
      simpleNode0.dump("G", stringWriter4);
      assertEquals("null<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\n<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\nG<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\n", stringWriter1.toString());
      assertEquals("null<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\n<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\nG<ImplementsList>\n  <identifier>$<</identifier>\n</ImplementsList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yv;^*iMh_4wIS>XjzD$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 1;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader0.read(charBuffer0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1102214078));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("</");
      JavaParser javaParser0 = new JavaParser("</");
      SimpleNode simpleNode0 = new SimpleNode(0);
      SystemInUtil.addInputLine("</");
      JavaParser javaParser1 = new JavaParser(stringReader0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/19_jmca");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'k';
      charArray0[2] = ';';
      charArray0[3] = 'k';
      charArray0[4] = ';';
      CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      JavaParser javaParser2 = new JavaParser("");
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Literal");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-3037));
      javaParser0.Type();
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-3037));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1080934351));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PackageDeclaration");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*ge");
      // Undeclared exception!
      try { 
        simpleNode0.toString("\" at line ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1080934351
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-702));
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      SimpleNode simpleNode1 = new SimpleNode(57);
      nodeArray0[7] = (Node) simpleNode1;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtClose();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      assertNotSame(simpleNode0, simpleNode1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1482769357196196
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("&&");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer.allocate(3031);
      stringWriter1.close();
      arrayList0.add("!wyHK\"SF");
      simpleNode0.dump("!wyHK\"SF", stringWriter0);
      arrayList0.add("|");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(3031);
      simpleNode0.dump("ExtendsList", stringWriter0);
      arrayList0.clear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser("v");
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1715, (byte)67);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-6274), 3322, (-112));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 297;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1080934351));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PackageDeclaration");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      // Undeclared exception!
      try { 
        simpleNode0.toString("*ge");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1080934351
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
