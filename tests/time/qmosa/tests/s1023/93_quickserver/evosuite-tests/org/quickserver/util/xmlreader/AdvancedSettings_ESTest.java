/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:10:49 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.663481654808839
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-1297));
      advancedSettings0.toXML("#:16");
      advancedSettings0.setCharset((String) null);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(10, advancedSettings0.getSocketLinger());
      assertEquals((-1297), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.659005500182372
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(65551);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setMaxThreadsForNioWrite(65551);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(65551);
      advancedSettings1.setSocketLinger(2593);
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setQSObjectPoolMaker("");
      advancedSettings1.setBacklog(2593);
      advancedSettings1.toXML("");
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setBacklog(58);
      advancedSettings1.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite(18);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals(2593, advancedSettings1.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0329233799129258
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings5.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings5.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings5.getBacklog());
      assertEquals(10, advancedSettings5.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings5.getClientIdentifier());
      assertEquals(65536, advancedSettings5.getByteBufferSize());
      assertEquals(0, advancedSettings5.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings5.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings5.getPerformancePreferencesLatency());
      assertFalse(advancedSettings5.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings5.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings5.getSocketLinger());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.574336468163399
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("G#)c<a-5");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setBacklog(1);
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("G#)c<a-5", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("V5fu");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // V5fu
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6800956103789195
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-1297));
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6118808360029067
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("G#)c<a-5");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setBacklog(1);
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(2889);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(2889, advancedSettings0.getSocketLinger());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("</byte-buffer-size>\n");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite((-198));
      advancedSettings0.setPerformancePreferencesLatency((-198));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("<E");
      advancedSettings0.setPerformancePreferencesLatency((-198));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-198));
      advancedSettings0.setBacklog((-1072));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-198), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.616475822871012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketReceiveBufferSize((-2308));
      advancedSettings0.setClientSocketSendBufferSize((-126));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Amj!{yKL{]b");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Amj!{yKL{]b
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.732733652510943
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(3709);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize(4865);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("mD)8DBPvn");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientSocketReceiveBufferSize(4865);
      advancedSettings0.setClientIdentifier("");
      assertEquals(4865, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.614847600347267
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2003);
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(14);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setCharset("");
      assertEquals(2003, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(1);
      advancedSettings2.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-2250));
      advancedSettings1.setClientSocketSendBufferSize(1);
      assertEquals(1, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5742567424199563
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      String string0 = advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier(string0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setMaxThreadsForNioWrite((-2393));
      advancedSettings2.setMaxThreadsForNioWrite((-3030));
      advancedSettings1.getClientIdentifier();
      int int0 = advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals((-2393), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7038582472717674
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(11);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-2073));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-2073));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(10);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings2.toXML("");
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setSocketLinger(2396);
      advancedSettings4.setCharset("");
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(19);
      advancedSettings0.setMaxThreadsForNioWrite(11);
      advancedSettings5.toXML("");
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(11, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings3.setClientIdentifier("");
      assertEquals(65536, advancedSettings3.getByteBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.666700045613437
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger((-1725));
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-1725));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-4621));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency((-351));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(0);
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.531629648083513
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-3030));
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.setCharset("");
      assertEquals((-3030), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6288993006919115
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("</byte-buffer-size>\n");
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6646989704271062
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3440));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setSocketLinger((-3879));
      advancedSettings0.setSocketLinger(240);
      advancedSettings0.setClientSocketTrafficClass("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientIdentifier("\"9OcCYY\u0001t8#4kB");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize((-3879));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(240);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("\"9OcCYY\u0001t8#4kB", advancedSettings0.getClientIdentifier());
      assertEquals(240, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.490343875008185
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-2073));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-620));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-2073));
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      advancedSettings3.setMaxThreadsForNioWrite(65536);
      advancedSettings2.setMaxThreadsForNioWrite(6);
      assertEquals(6, advancedSettings2.getMaxThreadsForNioWrite());
      
      advancedSettings5.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>-2073</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>-620</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      int int0 = advancedSettings5.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6212373073067443
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("9P{~(qI#P!7k%rcqTE");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("9P{~(qI#P!7k%rcqTE");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("#:16");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(2010, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4816975470067226
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.toXML("</performance-preferences-connection-time>\n");
      advancedSettings0.setClientSocketReceiveBufferSize((-1474));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(1685);
      advancedSettings0.setByteBufferSize(0);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-1474), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1685, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6241164454761248
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(26);
      advancedSettings0.setClientIdentifier("*V");
      advancedSettings0.setPerformancePreferencesLatency(1372);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(1372);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(10);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings2.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("w4");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings1.setClientIdentifier("w4");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings3.setCharset("");
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings1.setMaxThreadsForNioWrite(19);
      advancedSettings5.setMaxThreadsForNioWrite(26);
      advancedSettings2.toXML((String) null);
      assertEquals(10, advancedSettings2.getClientSocketSendBufferSize());
      
      int int0 = advancedSettings3.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = true;
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize((-3610));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("xT!T^#yT");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // xT!T^#yT
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.658629913327912
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(11);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-2073));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(20);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings2.toXML("");
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setCharset("");
      advancedSettings1.setCharset("");
      assertEquals(20, advancedSettings1.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5561041536319435
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-3030));
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      assertEquals(2010, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4835177180377923
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-3030));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2010);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("sQ4/r!)j9$$CNpLSf");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals("sQ4/r!)j9$$CNpLSf", advancedSettings0.getClientIdentifier());
      assertEquals(2010, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings2.getClientIdentifier();
      assertEquals((-1), advancedSettings2.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }
}
