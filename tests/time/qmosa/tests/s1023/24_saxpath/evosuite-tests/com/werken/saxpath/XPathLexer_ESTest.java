/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:16:38 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.706041409214921
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer1.and();
      xPathLexer1.dots();
      xPathLexer1.div();
      xPathLexer0.and();
      xPathLexer1.leftParen();
      xPathLexer0.rightParen();
      xPathLexer1.whitespace();
      xPathLexer1.equals();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      String string0 = "";
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.123155250363954
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer1.literal();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer1.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-575));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1307771568174605
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      xPathLexer1.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setXPath("");
      xPathLexer1.notEquals();
      xPathLexer2.relationalOperator();
      xPathLexer1.and();
      xPathLexer2.consume((-2617));
      // Undeclared exception!
      try { 
        xPathLexer2.LA(1579);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.919858430367202
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.setXPath("0#Tp$A2Y");
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      xPathLexer1.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.consume(1290);
      xPathLexer1.LA(1290);
      XPathLexer xPathLexer3 = new XPathLexer("0#Tp$A2Y");
      xPathLexer3.consume();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7710394790929787
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.nextToken();
      xPathLexer1.setXPath(") (");
      xPathLexer1.consume();
      xPathLexer1.div();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.leftBracket();
      xPathLexer0.mod();
      xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1596));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.506793492426398
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-1106));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4589767888906895
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals("=", token0.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.dollar();
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("oe4qq7", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals(";", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("-", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("Byi=wU%0a@EfH");
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer1.leftParen();
      Token token9 = xPathLexer2.notEquals();
      assertEquals("By", token9.getTokenText());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      assertEquals("", token13.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2864985959859063
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("vI", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("QY.A", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.colon();
      assertEquals("+", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      assertNotNull(token8);
      
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7732673716634129
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("0#Tp$A2Y");
      Token token1 = xPathLexer0.slashes();
      assertEquals("0", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer1.identifierOrOperatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Tp", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("$", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      Token token8 = xPathLexer2.leftParen();
      assertEquals(1, token8.getTokenType());
      
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer("0#Tp$A2Y");
      Token token9 = xPathLexer3.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer3.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("#", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5259685353966674
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      XPathLexer xPathLexer1 = new XPathLexer("`/h9p!5?!7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer2.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer2.equals();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("/", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer2.setPreviousToken(token2);
      assertEquals(21, token2.getTokenType());
      
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer1.and();
      xPathLexer1.and();
      Token token5 = xPathLexer1.dots();
      assertEquals("`", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6554228458793077
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer0.comma();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer1.nextToken();
      xPathLexer2.not();
      xPathLexer0.colon();
      xPathLexer1.isIdentifierStartChar('v');
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.getXPath();
      xPathLexer3.leftParen();
      xPathLexer3.currentPosition();
      xPathLexer2.isIdentifierStartChar('`');
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.81547840368962
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("=G", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("%", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("GqV", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('r');
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      xPathLexer1.currentPosition();
      xPathLexer0.isIdentifierStartChar(')');
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1662247339692797
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(:gFo,");
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.currentPosition();
      xPathLexer0.and();
      xPathLexer0.LA(12);
      xPathLexer0.setXPath("(:gFo,");
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7944981076517434
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer2.notEquals();
      xPathLexer0.comma();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer("U~/Gt7wNEh<ab");
      xPathLexer3.and();
      xPathLexer2.notEquals();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.114937672537895
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "!gPbw6YzW,M";
      XPathLexer xPathLexer0 = new XPathLexer("!gPbw6YzW,M");
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      String string1 = "[ (";
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.equals();
      xPathLexer1.consume((-1618));
      xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        xPathLexer1.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.209700579837196
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("vIfmZQY.A+V:");
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1274));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.235444415284352
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume((-1955));
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.setXPath("Io&au#tZ'c_&LV6)}");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer1.number();
      xPathLexer0.or();
      xPathLexer1.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer1.endPosition();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer2.dots();
      xPathLexer2.relationalOperator();
      xPathLexer0.and();
      xPathLexer1.consume(0);
      xPathLexer1.LA(6);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath("");
      assertNotSame(xPathLexer3, xPathLexer0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1903183377248667
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume((-1955));
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8399338382371382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1274));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0289251927098695
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("~QQMs)q|>nkhfKU");
      xPathLexer1.consume((-418));
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer1.comma();
      // Undeclared exception!
      try { 
        xPathLexer1.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6465448511082532
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("Gq", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("%", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("o", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("4", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token8 = xPathLexer1.leftParen();
      assertEquals("=", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals("q7", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.918108068655752
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.whitespace();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.getXPath();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4812751438240865
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.consume((-1955));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9903246406301014
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token0 = xPathLexer0.slashes();
      String string0 = token0.toString();
      assertEquals("[ (11) (0)", string0);
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.equals();
      assertEquals("T", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("iD(dJ73SA1W3)ri");
      Token token2 = xPathLexer0.colon();
      assertEquals("i", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer1.endPosition();
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.and();
      xPathLexer1.consume(1);
      char char0 = xPathLexer1.LA(13);
      assertEquals('\uFFFF', char0);
      
      xPathLexer1.setXPath("0#Tp$A?Q");
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.927314524467435
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer1.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer("<|~Jw/Pn");
      xPathLexer2.endPosition();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.currentPosition();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      xPathLexer4.literal();
      xPathLexer5.at();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer5.literal();
      XPathLexer xPathLexer8 = new XPathLexer("<|~Jw/Pn");
      Token token0 = xPathLexer8.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.861689812002369
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.consume((-2138));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5378039012068325
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wO");
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.162303009766531
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token1 = xPathLexer1.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.consume();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer1.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer2.notEquals();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("QY", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      Token token9 = xPathLexer3.number();
      assertEquals(30, token9.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      char char0 = xPathLexer0.LA(119);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0523038823601696
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1274));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.983061317742611
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("Io&au#tZ'c_&LV6)}");
      Token token0 = xPathLexer1.slashes();
      token0.toString();
      xPathLexer1.consume(1);
      token0.toString();
      xPathLexer1.minus();
      xPathLexer1.equals();
      xPathLexer1.plus();
      xPathLexer0.number();
      xPathLexer0.slashes();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.currentPosition();
      xPathLexer1.notEquals();
      xPathLexer2.literal();
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer3.relationalOperator();
      Token token2 = xPathLexer0.mod();
      assertNull(token2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4149208424702038
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (`)");
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      xPathLexer0.slashes();
      Token token6 = xPathLexer1.slashes();
      assertEquals(" ", token6.getTokenText());
      
      Token token7 = xPathLexer1.leftParen();
      assertEquals("(", token7.getTokenText());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("1", token8.getTokenText());
      
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (13) (`)", string0);
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("3", token10.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1280174281541155
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("vI", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      assertEquals("f", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer1.plus();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('{');
      assertFalse(boolean0);
      
      xPathLexer1.identifier();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("mZ", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertNotNull(token4);
      
      xPathLexer1.equals();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("Q", token7.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.923711389212434
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('v');
      assertTrue(boolean0);
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.equals();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.952816824188579
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5507214407129015
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("vI", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      assertEquals("f", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("Z", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.setXPath("vIfmZQY.A+V:");
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("vIfmZQY.A+V:");
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("v", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(20, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.200601777762938
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.consume(1695);
      xPathLexer0.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1706, int0);
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8192522653335017
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!gPbw6YzW,M");
      xPathLexer0.or();
      Token token0 = xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("bw6YzW", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(",M", token4.getTokenText());
      
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7311441797362228
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.consume(150);
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.getXPath();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      int int0 = xPathLexer1.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.36329940543795
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^Pg5lNOBdySp");
      Token token0 = xPathLexer0.plus();
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Pg5lNOBdySp", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.endPosition();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer0.or();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.leftParen();
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3173862807154517
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.plus();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0884763270651936
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("Gq", token1.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("o", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("e4qq7", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(";", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("-", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token8);
      assertEquals(4, token8.getTokenType());
      assertEquals("h", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("=GqV%,oe4qq7;,-h*}");
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer1.hasMoreChars();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token10 = xPathLexer2.pipe();
      assertEquals("=", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer2.comma();
      assertEquals("G", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.922140525477181
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer2.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer("~V+V:");
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.524313703393373
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wO");
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3326951489585555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV\"l!LU0V[");
      xPathLexer0.or();
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("AV", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("\"", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer1.plus();
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer2.plus();
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7922406750334363
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.consume(150);
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-476));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5730942253609739
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.slashes();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8636349932578953
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6872056394025998
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Gq", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.dollar();
      assertEquals("V", token1.getTokenText());
      
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token4.getTokenText());
      assertNotNull(token4);
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(",", token5.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      Token token9 = xPathLexer0.leftParen();
      assertEquals("4", token9.getTokenText());
      
      xPathLexer1.currentPosition();
      Token token10 = xPathLexer2.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer1.identifier();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals("q", token11.getTokenText());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("q7", token12.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer2.leftParen();
      boolean boolean0 = xPathLexer2.isIdentifierChar('g');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5874314089373363
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.consume();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3656796065734116
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dots();
      String string0 = token1.toString();
      assertEquals("[ (13) (h)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (19) (`/)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.literal();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2301313590757736
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Io", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("&", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals("Z", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("'", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Byi=wU%0a@EfH");
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("c", token7.getTokenText());
      
      xPathLexer1.notEquals();
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6203308142468664
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.376196623860288
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("`/", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("`/h9p!5?!7");
      Token token2 = xPathLexer1.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("9", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.slashes();
      assertEquals("/", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("p", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertEquals(27, token6.getTokenType());
      assertNotNull(token6);
      assertEquals("5?", token6.getTokenText());
      
      Token token7 = xPathLexer2.leftParen();
      assertEquals(1, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token8 = xPathLexer1.notEquals();
      assertEquals("h9", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer2.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
  }
}
