/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:49:21 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("jga]TTH ", (String) null);
      usernamePasswordToken0.clear();
      Object object0 = new Object();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '\\';
      charArray0[2] = 'I';
      charArray0[3] = '0';
      charArray0[4] = '';
      charArray0[5] = 'c';
      usernamePasswordToken0.setPassword(charArray0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Kg$tkw8Xn&(X");
      MockInetAddress.getByName("_{CQKAhCvd'y@k%.Tg)");
      MockInetAddress.getByName("shcn4NV+");
      MockInetAddress.getByName("1+Q)#u");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 't';
      charArray0[4] = '|';
      charArray0[5] = 't';
      charArray0[6] = '<';
      charArray0[7] = '@';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false, inetAddress0);
      char[] charArray0 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'S';
      charArray0[1] = '|';
      charArray0[4] = 'S';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("W3Z-Cxgr$P07$%H01", charArray0, false);
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'i';
      charArray0[2] = 'W';
      charArray0[3] = 'Z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("mEO .<!@[b$x#*", charArray0, false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - mEO .<!@[b$x#*, rememberMe=false", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("");
      MockInetAddress.getByName("Q");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getByName("Q");
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Q", charArray0, inetAddress0);
      Object object0 = new Object();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("Kg$tkwd8Xn&(X");
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("Kg$tkwd8Xn&(X");
      MockInetAddress.getByName("OUA7bN^c\"g}@T$}!");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", "Dmp-f,%Kg,CzO!", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("`dCLV85Y%?f", "=9Qs%EJy\"F\"7tK#h4Cr", true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("jga]TTH ", "xEVSp&4A>O.OK");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword((char[]) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '!';
      charArray0[2] = '_';
      charArray0[3] = '9';
      charArray0[4] = '\\';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Kg$tkw8Xn&(X");
      MockInetAddress.getByName("_{CQKAhCvd'y@k%.Tg)");
      MockInetAddress.getByName("shcn4NV+");
      MockInetAddress.getByName("1+Q)#u");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '(';
      charArray0[3] = 'S';
      charArray0[4] = 'V';
      charArray0[5] = 'O';
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("1+Q)#u", "_{CQKAhCvd'y@k%.Tg)", true, inetAddress0);
      char[] charArray1 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Kg$tkw8Xn&(X");
      MockInetAddress.getByName("_{CQKAhCvd'y@k%.Tg)");
      MockInetAddress.getByName("shcn4NV+");
      MockInetAddress.getByName("1+Q)#u");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("kJDF#Q", "kJDF#Q", false);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("Kg$tkwd8Xn&(X");
      MockInetAddress.getByName("Kg$tkwd8Xn&(X");
      MockInetAddress.getByName("Q");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, inetAddress0);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Kg$tkw8Xn&(X");
      MockInetAddress.getByName("sPE");
      MockInetAddress.getByName("");
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Og&gheoUS?Hv5lWdU#", "W?9&D^6JOk", true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - Og&gheoUS?Hv5lWdU#, rememberMe=true", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("`dCLV85Y%?f", "`dCLV85Y%?f");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("J|AdZUh", "J|AdZUh", inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getByName("J|AdZUh");
      assertFalse(inetAddress1.isLinkLocalAddress());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("0g$tkwd8fn&(X");
      MockInetAddress.getByName("0g$tkwd8fn&(X");
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("0g$tkwd8fn&(X", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '|';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("yfSF*KdO/{3)AN", "", true);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "N@ba&5l9b", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '';
      charArray0[2] = 'c';
      charArray0[3] = '1';
      charArray0[4] = 'd';
      charArray0[5] = 'V';
      charArray0[6] = 'Y';
      usernamePasswordToken0.setPassword(charArray0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Kg$tkw8Xn&(X");
      MockInetAddress.getByName("_{CQKAhCvd'y@k%.Tg)");
      MockInetAddress.getByName("shcn4NV+");
      MockInetAddress.getByName("1+Q)#u");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("0g$tkwd8fn&(X");
      InetAddress inetAddress0 = MockInetAddress.getByName("0g$tkwd8fn&(X");
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("0g$tkwd8fn&(X", "", inetAddress0);
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      Object object0 = new Object();
  }
}
