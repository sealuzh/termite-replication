/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:50:21 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7381249273388133
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("g[s>d");
      advancedSettings0.setPerformancePreferencesBandwidth((-1209));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize((-1421));
      advancedSettings0.setClientSocketTrafficClass("g[s>d");
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getSocketLinger();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings1.setPerformancePreferencesLatency((-1421));
      advancedSettings0.setBacklog((-434));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.getSocketLinger();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings3.setClientIdentifier("");
      int int0 = advancedSettings1.getPerformancePreferencesLatency();
      assertEquals((-1421), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(3067);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(3067, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.624006056554367
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1596);
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-bandwidth>");
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setBacklog((-1884));
      advancedSettings0.setClientSocketReceiveBufferSize((-1884));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-bandwidth>");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1884));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.toXML("a[");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      assertEquals(1596, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("u");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // u
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6164758228710117
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(198);
      advancedSettings0.toXML("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setQSObjectPoolMaker("VT!2^Wxn)<");
      advancedSettings0.setDebugNonBlockingMode(false);
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(198, advancedSettings0.getClientSocketReceiveBufferSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(2107);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      String string0 = "";
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("jisFN*s'PHz^x_");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // jisFN*s'PHz^x_
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6626856349083416
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("%");
      advancedSettings0.setByteBufferSize((-1004));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-1004));
      advancedSettings0.setMaxThreadsForNioWrite((-163));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5992505278344304
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-434));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(402);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(1423);
      advancedSettings0.setClientIdentifier("yJ{a7sX2,~{n(");
      advancedSettings0.setByteBufferSize((-434));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getCharset();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.622057525815322
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-434));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(402);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("F_4=aWQI~#d:59");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset((String) null);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6654754242792444
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("VI/i");
      advancedSettings0.setByteBufferSize(1639);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite((-464));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite(1639);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-464));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog((-464));
      advancedSettings0.setPerformancePreferencesBandwidth((-464));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency((-283));
      assertEquals(1639, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setBacklog((-1085));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize(6);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(6, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(14);
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("yhq");
      advancedSettings0.setClientIdentifier("yhq");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("yhq", advancedSettings0.getClientIdentifier());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setByteBufferSize(598);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset((String) null);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.784619384820671
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setClientSocketSendBufferSize((-474));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("9otJ'Q^q8o");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("9otJ'Q^q8o", advancedSettings0.getClientIdentifier());
      assertEquals((-474), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.383761246557698
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4820675063111985
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("@em-n20)+,\"XgM^(T");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("@em-n20)+,\"XgM^(T");
      assertEquals("@em-n20)+,\"XgM^(T", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings1.setCharset("");
      advancedSettings1.setClientSocketSendBufferSize((-474));
      assertEquals((-474), advancedSettings1.getClientSocketSendBufferSize());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketSendBufferSize();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketTrafficClass("yhq");
      advancedSettings0.setClientIdentifier("yhq");
      assertEquals("yhq", advancedSettings0.getClientIdentifier());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      assertEquals(1, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1761414031011608
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setClientSocketTrafficClass("</charset>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(1172);
      advancedSettings0.setSocketLinger(1015);
      advancedSettings0.setPerformancePreferencesLatency((-528));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("\t<client-identifier>");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(1, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-528));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings1.setPerformancePreferencesLatency((-528));
      advancedSettings1.setSocketLinger((-1627));
      advancedSettings0.setPerformancePreferencesLatency((-528));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.getByteBufferSize();
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings1.getClientSocketTrafficClass();
      assertEquals((-528), advancedSettings1.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("ELIE49QWz[HsOjz-z");
      advancedSettings0.setClientIdentifier("a&-jM<!4f-r~^O1");
      assertEquals("a&-jM<!4f-r~^O1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8807566041424137
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings1.setSocketLinger(65536);
      advancedSettings1.setClientSocketSendBufferSize((-474));
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setBacklog(0);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.getCharset();
      advancedSettings1.setClientIdentifier("ISO-8859-1");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6205872531355636
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(945);
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize(2022);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.toXML("</charset>\n");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(2022);
      advancedSettings0.setBacklog((-1876));
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("\t<client-socket-receive-buffer-size>", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("5w`Lba9L~VUF^?y`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5w`Lba9L~VUF^?y`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8807566041424137
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings1.setPerformancePreferencesLatency(65536);
      advancedSettings1.setClientSocketSendBufferSize((-474));
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.setClientIdentifier("ISO-8859-1");
      advancedSettings1.getCharset();
      assertEquals("ISO-8859-1", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1085));
      advancedSettings0.setClientSocketTrafficClass("Fz=z(>@#|4zw}A($Gv");
      advancedSettings0.setClientSocketTrafficClass("@(5fmReW?=AJgR%+s");
      advancedSettings0.setClientSocketSendBufferSize(28);
      advancedSettings0.setClientSocketTrafficClass("Fz=z(>@#|4zw}A($Gv");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("Fz=z(>@#|4zw}A($Gv");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("Fz=z(>@#|4zw}A($Gv", advancedSettings0.getClientIdentifier());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6875440376031756
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings1.setClientSocketSendBufferSize((-474));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(1);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.getCharset();
      advancedSettings1.setClientIdentifier("ISO-8859-1");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6997816137042037
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setSocketLinger(1015);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }
}
