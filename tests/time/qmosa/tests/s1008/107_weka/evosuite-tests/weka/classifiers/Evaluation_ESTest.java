/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:21:08 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0829906738453343
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)0;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.recall(97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      textDirectoryLoader0.getDataSet();
      instances0.indexOf(textDirectoryLoader0);
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.reset();
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.falsePositiveRate((-294));
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (-1));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.927789124294108
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Mean absolute error                ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("sent");
      textDirectoryLoader0.setDebug(false);
      databaseLoader0.setQuery("globalInfo");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mean absolute error                ";
      databaseLoader0.setOptions(stringArray0);
      databaseLoader0.getOptions();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDirectory();
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.033633978563949
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Turns on the output of debugging information.");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.indexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.kappa();
      textDirectoryLoader0.getDirectory();
      evaluation0.toClassDetailsString("toSource");
      evaluation0.weightedPrecision();
      SMO sMO0 = new SMO();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sMO0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0011441405939667
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Turns on the output of debugging information.");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.indexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      doubleArray1[2] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.reset();
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.falsePositiveRate(250007);
      try { 
        Evaluation.handleCostOption("ClassType: ", 250007);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.558635108317224
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      instances0.resampleWithWeights((Random) mockRandom0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.SFEntropyGain();
      textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      IBk iBk0 = new IBk((-3286));
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation.getGlobalInfo(iBk0);
      AbstractClassifier.makeCopies(iBk0, 4384);
      evaluation0.weightedFMeasure();
      iBk0.setKNN(4384);
      evaluation0.toSummaryString("@relation", true);
      evaluation0.toMatrixString();
      evaluation0.SFSchemeEntropy();
      evaluation0.setPriors(instances0);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double double2 = evaluation0.recall((-1106));
      assertNotEquals(double2, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.getGlobalInfo(jRip0);
      double double3 = evaluation0.trueNegativeRate(1003);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.694363117656481
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Mean absolute error                ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("sent");
      databaseLoader0.setQuery("globalInfo");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mean absolute error                ";
      databaseLoader0.setOptions(stringArray0);
      databaseLoader0.getOptions();
      databaseLoader0.getStructure();
      Evaluation.handleCostOption("", 122);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.avgCost();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.fMeasure(1003);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.373080800662341
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(400);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(400);
      evaluation0.KBRelativeInformation();
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-50);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z9\"]ou1dK\"@-Y/|}9i";
      stringArray0[1] = "@data";
      stringArray0[2] = "Z9\"]ou1dK\"@-Y/|}9i";
      Evaluation.main(stringArray0);
      Object object0 = new Object();
      OneR oneR0 = new OneR();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(82);
      assertEquals(82, binarySparseInstance0.numValues());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.050613221345892
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass((-26.775034459604356), (-1967.716460689505));
      evaluation0.addNumericTrainClass(985.534, 1984.0671);
      Object object0 = new Object();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8905352830902906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluation.handleCostOption("", 116);
      IBk iBk0 = new IBk(116);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".cost";
      stringArray0[1] = ".cost";
      stringArray0[2] = "";
      AbstractClassifier.runClassifier(iBk0, stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation.getGlobalInfo(iBk0);
      int int0 = 4384;
      AbstractClassifier.makeCopies(iBk0, 2);
      Instances instances0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setDistanceWeighting");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.994353300719145
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "GC#BcG2]~O0^}";
      objectArray0[1] = (Object) "GC#BcG2]~O0^}";
      objectArray0[2] = (Object) "GC#BcG2]~O0^}";
      evaluation0.toClassDetailsString("weka.classifiers.Evaluation");
      textDirectoryLoader0.getStructure();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.rootMeanPriorSquaredError();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      try { 
        libSVMLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063594376997188
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Mean absolute error                ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("sent");
      databaseLoader0.setQuery("globalInfo");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mean absolute error                ";
      databaseLoader0.setOptions(stringArray0);
      databaseLoader0.getOptions();
      databaseLoader0.getStructure();
      Evaluation.handleCostOption("", 122);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4728108243842586
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      evaluation0.SFEntropyGain();
      textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      IBk iBk0 = new IBk((-3286));
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation.getGlobalInfo(iBk0);
      AbstractClassifier.makeCopies(iBk0, 4384);
      evaluation0.weightedFMeasure();
      iBk0.setKNN(4384);
      evaluation0.toSummaryString("@relation", true);
      evaluation0.SFSchemeEntropy();
      evaluation0.setPriors(instances0);
      evaluation0.numTruePositives(0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.recall((-1106));
      evaluation0.toClassDetailsString("vo");
      String[] stringArray1 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.getStructure();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) naiveBayesMultinomial0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      objectArray0[3] = (Object) naiveBayesMultinomial0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) classificationViaRegression0, instances0, 115, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'M';
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-397);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1, charArray0, (-397));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'M';
      evaluation0.m_Header = instances0;
      evaluation0.getRevision();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "9101");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2083164576807426
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      evaluation0.m_Header = instances0;
      evaluation0.addNumericTrainClass(100.0, 115);
      evaluation0.addNumericTrainClass(115, 115);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      instances0.indexOf(naiveBayesMultinomialText0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.pctCorrect();
      evaluation1.getRevision();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stratify(1003);
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0242024446231635
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Turns on the output of debugging information.");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.indexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.kappa();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(423);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) decisionTable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      evaluation0.m_Header = instances0;
      textDirectoryLoader0.getStructure();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      String[] stringArray0 = new String[3];
      String string0 = "IXjf";
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " h~#.I?F");
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
      J48 j48_0 = new J48();
      int int0 = 461;
      J48 j48_1 = new J48();
      j48_1.setSeed(22);
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "@relation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      int int0 = 115;
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'M';
      evaluation0.m_Header = instances0;
      charArray0[2] = 'O';
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      evaluation0.getClassPriors();
      CoverTree coverTree0 = new CoverTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-40);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Object object0 = new Object();
      DecisionStump decisionStump0 = new DecisionStump();
      MockRandom mockRandom0 = new MockRandom((-1L));
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, (int) (byte) (-36), (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      evaluation0.m_Header = instances0;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2933), charArray0, 2231);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.setOutputFilename(true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "GC#BcG2]~O0^}";
      objectArray0[1] = (Object) "GC#BcG2]~O0^}";
      objectArray0[2] = (Object) "GC#BcG2]~O0^}";
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[5];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "<!-- technical-bibtex-start -->";
      stringArray0[1] = "-";
      stringArray0[3] = "";
      stringArray0[4] = "Z9\"]ou1dK\"@-Y/|}9i";
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      Object object0 = new Object();
      arffLoader0.reset();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, ".arff");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8618650377696493
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.addNumericTrainClass(100.0, 3712.153);
      evaluation0.addNumericTrainClass(1.0, 100.0);
      Object object0 = new Object();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.415300537044959
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      evaluation0.SFEntropyGain();
      Instances instances1 = textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      IBk iBk0 = new IBk((-3286));
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation.getGlobalInfo(iBk0);
      AbstractClassifier.makeCopies(iBk0, 4384);
      evaluation0.weightedFMeasure();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      instances1.remove((Object) additiveRegression0);
      iBk0.setKNN(4384);
      Evaluation.makeOptionString(iBk0, true);
      evaluation0.SFSchemeEntropy();
      evaluation0.setPriors(instances0);
      evaluation0.numTruePositives(0);
      evaluation0.toSummaryString();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "setDistanceWeighting");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5468829148041054
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1003);
      instances0.resampleWithWeights((Random) mockRandom0);
      String string0 = evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      evaluation0.SFEntropyGain();
      textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      IBk iBk0 = new IBk((-3286));
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation.getGlobalInfo(iBk0);
      AbstractClassifier.makeCopies(iBk0, 4384);
      evaluation0.weightedFMeasure();
      iBk0.setKNN(4384);
      evaluation0.toSummaryString("@relation", true);
      evaluation0.toMatrixString();
      evaluation0.SFSchemeEntropy();
      evaluation0.setPriors(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.recall((-1106));
      J48 j48_0 = new J48();
      j48_0.setSeed(4);
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "@relation\nTotal Number of Instances                0     \n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      costSensitiveClassifier0.getCostMatrix();
      NumericPrediction numericPrediction0 = new NumericPrediction(2, 1493.394860284);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1493.394860284;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 1493.394860284;
      doubleArray1[3] = (-904.0571119559);
      doubleArray1[4] = 1493.394860284;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (-904.0571119559);
      doubleArray4[2] = 1493.394860284;
      doubleArray4[3] = 985.534;
      doubleArray4[4] = (-904.0571119559);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals(gaussianProcesses0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      evaluation0.m_Header = instances0;
      evaluation0.m_SumSqrClass = (double) 115;
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      MockRandom mockRandom1 = new MockRandom(0L);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "GC#BcG2]~O0^}";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = "GC#BcG2]~O0^}";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "@relation";
      try { 
        evaluation0.crossValidateModel("j8(V}", instances0, 115, stringArray0, (Random) mockRandom1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: j8(V}
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.426775702954569
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setDirectory(file0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      textDirectoryLoader1.getDirectory();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      boolean boolean0 = evaluation0.equals(c45Loader0);
      assertFalse(boolean0);
      
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1360414599491286
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Mean absolute error                ");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setUrl("sent");
      databaseLoader0.setQuery("globalInfo");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mean absolute error                ";
      databaseLoader0.setOptions(stringArray0);
      databaseLoader0.getOptions();
      databaseLoader0.getStructure();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      evaluation0.recall(1003);
      evaluation0.toClassDetailsString("weka.gui.SysErrLog");
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.483552432806068
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-36);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      String string0 = evaluation0.toClassDetailsString("toSource");
      assertEquals("toSource\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedPrecision();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3404169320371344
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(400);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(400);
      evaluation0.KBRelativeInformation();
      mockRandom0.longs();
      instances0.resampleWithWeights((Random) mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.KBMeanInformation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      evaluation0.SFEntropyGain();
      textDirectoryLoader0.getStructure();
      evaluation0.setPriors(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      IBk iBk0 = new IBk((-3286));
      iBk0.getTechnicalInformation();
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      textDirectoryLoader0.setOutputFilename(true);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation0.evaluateModel((Classifier) iBk0, instances0, (Object[]) stringArray0);
      J48 j48_0 = new J48();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9385005954171288
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MockFile mockFile0 = new MockFile(".bsi", "@relation");
      evaluation1.SFSchemeEntropy();
      evaluation1.setPriors(instances0);
      int int0 = 0;
      evaluation0.numTruePositives(0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "<!-- technical-bibtex-start -->";
      stringArray0[3] = "";
      stringArray0[4] = "Z9\"]ou1dK\"@-Y/|}9i";
      Evaluation.main(stringArray0);
      Object object0 = new Object();
      OneR oneR0 = new OneR();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1078);
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instances instances0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'M';
      evaluation0.m_Header = instances0;
      charArray0[2] = '!';
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) '!';
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) textDirectoryLoader0;
      objectArray0[7] = (Object) mockRandom0;
      objectArray0[8] = (Object) evaluation0.m_Header;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 115, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
