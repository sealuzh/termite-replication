/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 21:20:50 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      assertNotNull(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixSignificance1.getVisibleRowCount());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(26, resultMatrixSignificance1.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(26, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals(26, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance1);
      assertNotNull(resultMatrixGnuPlot0);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixSignificance1.getVisibleRowCount());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(26, resultMatrixSignificance1.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(26, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals(26, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(26, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      int int0 = resultMatrixGnuPlot0.getMeanPrec();
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals(2, int0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixSignificance1.getVisibleRowCount());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(26, resultMatrixSignificance1.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(26, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals(26, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(26, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(26, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      boolean boolean0 = resultMatrixSignificance0.getDefaultPrintColNames();
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertFalse(boolean0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(26, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(26, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.482757746939308
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      resultMatrixCSV0.setRowNameWidth(17);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 17;
      resultMatrixCSV0.setRowOrder(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertArrayEquals(new int[] {17}, intArray0);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      resultMatrixCSV0.setStdDevWidth(3);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(3, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      int int0 = resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(25, int0);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(3, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      int int1 = resultMatrixCSV0.getRowNameWidth();
      assertFalse(int1 == int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(17, int1);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(3, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      resultMatrixCSV0.clearSummary();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(17, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(3, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9685690569705327
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      int[] intArray0 = new int[3];
      resultMatrixSignificance0.setRemoveFilterName(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4036593689287575
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[10];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(10, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      
      String string0 = resultMatrixGnuPlot0.padString("", 96);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("                                                                                                ", string0);
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(50, int0);
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9963067983056164
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      resultMatrixCSV0.setStdDevWidth(1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      String string0 = resultMatrixLatex0.toStringRanking();
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("-ranking data not set-", string0);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      boolean boolean0 = resultMatrixCSV0.getRowHidden(26);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      boolean boolean1 = resultMatrixCSV0.getDefaultShowStdDev();
      assertTrue(boolean1 == boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean1);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      
      boolean boolean2 = resultMatrixSignificance0.getDefaultPrintColNames();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean2);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      
      resultMatrixLatex0.addHeader((String) null, " ");
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      resultMatrixLatex0.setMeanWidth(67);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(67, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      
      int int0 = resultMatrixSignificance0.getDefaultMeanWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, int0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      int[][] intArray0 = new int[0][6];
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8770066551282616
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringRanking();
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("-ranking data not set-", string0);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      resultMatrixGnuPlot0.setSize(331, 2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(331, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(331, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      
      String string1 = resultMatrixGnuPlot0.removeFilterName("~'5s*(4E[7s2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("~'5s*(4E[7s2", string1);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(331, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(331, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(50, int0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(331, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(331, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      
      int[] intArray0 = resultMatrixSignificance0.getRowOrder();
      assertNull(intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3910078256999587
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      
      double double0 = resultMatrixSignificance1.getAverage(40);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      
      String string1 = resultMatrixSignificance0.getRowName(0);
      assertNotNull(string1);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertEquals("row0", string1);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixSignificance1);
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(40, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      resultMatrixGnuPlot1.setSummary(intArray1, intArray1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(4, intArray1.length);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(40, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      
      int int0 = resultMatrixGnuPlot1.getDefaultRowNameWidth();
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(50, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(40, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance2);
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixSignificance2.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance2.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getSignificanceWidth());
      assertFalse(resultMatrixSignificance2.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance2.globalInfo());
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
      assertFalse(resultMatrixSignificance2.getShowAverage());
      assertFalse(resultMatrixSignificance2.getShowStdDev());
      assertFalse(resultMatrixSignificance2.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance2.showStdDevTipText());
      assertFalse(resultMatrixSignificance2.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance2.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance2.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance2.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertFalse(resultMatrixSignificance2.getRemoveFilterName());
      assertFalse(resultMatrixSignificance2.getEnumerateRowNames());
      assertEquals("Significance only", resultMatrixSignificance2.getDisplayName());
      assertEquals(1, resultMatrixSignificance2.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance2.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance2.meanPrecTipText());
      assertTrue(resultMatrixSignificance2.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance2.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance2.showAverageTipText());
      assertEquals(2, resultMatrixSignificance2.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance2.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance2.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance2.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance2.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance2.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance2.getColCount());
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance2.getColNameWidth());
      assertEquals(40, resultMatrixSignificance2.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance2.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance2.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertEquals(0, resultMatrixSignificance2.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance2.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance2.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance2.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance2.significanceWidthTipText());
      
      int[] intArray3 = resultMatrixSignificance2.getRowOrder();
      assertNull(intArray3);
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixSignificance2, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance2, resultMatrixSignificance0);
      assertTrue(resultMatrixSignificance2.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance2.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getSignificanceWidth());
      assertFalse(resultMatrixSignificance2.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance2.globalInfo());
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
      assertFalse(resultMatrixSignificance2.getShowAverage());
      assertFalse(resultMatrixSignificance2.getShowStdDev());
      assertFalse(resultMatrixSignificance2.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance2.showStdDevTipText());
      assertFalse(resultMatrixSignificance2.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance2.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance2.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance2.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertFalse(resultMatrixSignificance2.getRemoveFilterName());
      assertFalse(resultMatrixSignificance2.getEnumerateRowNames());
      assertEquals("Significance only", resultMatrixSignificance2.getDisplayName());
      assertEquals(1, resultMatrixSignificance2.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance2.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance2.meanPrecTipText());
      assertTrue(resultMatrixSignificance2.getDefaultEnumerateColNames());
      assertTrue(resultMatrixSignificance2.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance2.showAverageTipText());
      assertEquals(2, resultMatrixSignificance2.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance2.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance2.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance2.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance2.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance2.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance2.getColCount());
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance2.getColNameWidth());
      assertEquals(40, resultMatrixSignificance2.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance2.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance2.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertEquals(0, resultMatrixSignificance2.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance2.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance2.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance2.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance2.significanceWidthTipText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.476151011051009
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      String string1 = resultMatrixSignificance0.getRowName(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("row0", string1);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, int0);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      int[] intArray1 = resultMatrixSignificance0.getRowOrder();
      assertNull(intArray1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "*";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      resultMatrixGnuPlot0.setMeanPrec(1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.513670838717165
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      
      String string0 = resultMatrixLatex0.toStringSummary();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("-summary data not set-", string0);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      
      String string1 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string1);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      
      String string2 = resultMatrixPlainText0.getRevision();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("8034", string2);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      
      boolean boolean0 = resultMatrixLatex0.getEnumerateRowNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      
      ResultMatrixHTML.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 1);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      
      int[] intArray0 = resultMatrixSignificance0.getRowOrder();
      assertNull(intArray0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      
      String string4 = resultMatrixSignificance0.globalInfo();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", string4);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      
      int int0 = resultMatrixPlainText0.getColNameWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, int0);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1095546356203583
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      
      resultMatrixHTML0.setOptions((String[]) null);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3824244366824727
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      resultMatrixSignificance0.setSignificanceWidth(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      String string2 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string2);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      double double1 = resultMatrixSignificance0.getAverage(17);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      String string3 = resultMatrixSignificance0.getRowName(8);
      assertNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, int0);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      int int1 = resultMatrixGnuPlot0.getMeanPrec();
      assertFalse(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, int1);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3399844390365687
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      int int0 = resultMatrixSignificance0.getVisibleRowCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, int0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 1188;
      resultMatrixSignificance0.setColOrder(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2, 1, 0, 0, 1, 1188}, intArray1);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      double double0 = resultMatrixSignificance0.getAverage(1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double0, 0.01);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      
      String string1 = resultMatrixSignificance1.getRowName(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals("row0", string1);
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      
      int int1 = resultMatrixSignificance0.getVisibleRowCount();
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertTrue(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertEquals(1, int1);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 2);
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      
      resultMatrixHTML0.assign(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 12);
      assertNotNull(resultMatrixHTML1);
      assertFalse(resultMatrixHTML1.equals((Object)resultMatrixHTML0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML1.getDefaultCountWidth());
      assertFalse(resultMatrixHTML1.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML1.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML1.meanWidthTipText());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML1.meanPrecTipText());
      assertFalse(resultMatrixHTML1.getShowAverage());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML1.showAverageTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML1.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML1.getColCount());
      assertTrue(resultMatrixHTML1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML1.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML1.printColNamesTipText());
      assertEquals(12, resultMatrixHTML1.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML1.globalInfo());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML1.getDisplayName());
      assertEquals(25, resultMatrixHTML1.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML1.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML1.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML1.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML1.printRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML1.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML1.countWidthTipText());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML1.showStdDevTipText());
      assertEquals(2, resultMatrixHTML1.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(2, resultMatrixHTML1.getVisibleColCount());
      assertFalse(resultMatrixHTML1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML1.getDefaultEnumerateRowNames());
      assertEquals(12, resultMatrixHTML1.getRowCount());
      
      // Undeclared exception!
      try { 
        resultMatrixHTML1.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2092937151109555
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      stringArray0[0] = ")";
      resultMatrixHTML0.setShowAverage(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset,(1)\n(1),''\n'(v/ /*)',''\n", string0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      String string1 = resultMatrixCSV0.toStringRanking();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("-ranking data not set-", string1);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      resultMatrixCSV0.setColName(1, " ");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      String string2 = resultMatrixHTML0.trimString("Array-Dimensions of 'new int[][]': ", 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Ar", string2);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.458650899296136
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      
      resultMatrixCSV0.setRowNameWidth(2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixCSV0.setRowOrder(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {2}, intArray0);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5438668435336944
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int int0 = resultMatrixSignificance0.getVisibleRowCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(8, int0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string2 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string2);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      double double1 = resultMatrixSignificance0.getAverage(8);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string3 = resultMatrixSignificance0.getRowName(8);
      assertNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int int1 = resultMatrixSignificance0.getVisibleRowCount();
      assertTrue(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(8, int1);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      String string4 = resultMatrixCSV0.toStringMatrix();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset,(1),(2),'',(3),'',(4),'',(5),'',(6),'',(7),'',(8),''\nrow0,'','','','','','','','','','','','','','',''\nrow1,'','','','','','','','','','','','','','',''\nrow2,'','','','','','','','','','','','','','',''\nrow3,'','','','','','','','','','','','','','',''\nrow4,'','','','','','','','','','','','','','',''\nrow5,'','','','','','','','','','','','','','',''\nrow6,'','','','','','','','','','','','','','',''\nrow7,'','','','','','','','','','','','','','',''\n'(v/ /*)','','',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0)\n", string4);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      String string5 = resultMatrixCSV0.toStringRanking();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("-ranking data not set-", string5);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      resultMatrixCSV0.setColName(0, "Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n");
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      assertNotNull(resultMatrixCSV1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixCSV1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixCSV1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(8, resultMatrixCSV1.getColCount());
      assertEquals(8, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      boolean boolean0 = resultMatrixCSV1.getEnumerateColNames();
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertTrue(boolean0);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixCSV1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixCSV1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(8, resultMatrixCSV1.getColCount());
      assertEquals(8, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      int int2 = resultMatrixCSV1.getDisplayCol(2);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertEquals(2, int2);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixCSV1.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixCSV1.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(8, resultMatrixCSV1.getColCount());
      assertEquals(8, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = "(";
      stringArray0[3] = "*";
      stringArray0[4] = "-ranking data not set-";
      stringArray0[5] = "(";
      stringArray0[6] = "v";
      stringArray0[7] = "Dataset,(1),(2),'',(3),'',(4),'',(5),'',(6),'',(7),'',(8),''\nrow0,'','','','','','','','','','','','','','',''\nrow1,'','','','','','','','','','','','','','',''\nrow2,'','','','','','','','','','','','','','',''\nrow3,'','','','','','','','','','','','','','',''\nrow4,'','','','','','','','','','','','','','',''\nrow5,'','','','','','','','','','','','','','',''\nrow6,'','','','','','','','','','','','','','',''\nrow7,'','','','','','','','','','','','','','',''\n'(v/ /*)','','',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0),'',(0/0/0)\n";
      stringArray0[8] = ")";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.360750760196149
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(244);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(239);
      assertNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2826;
      intArray2[1] = 244;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray1[5] = intArray2;
      resultMatrixGnuPlot0.setSummary(intArray1, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, int0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      int[] intArray3 = resultMatrixSignificance0.getRowOrder();
      assertNull(intArray3);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      resultMatrixCSV0.setStdDevWidth(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      String string0 = resultMatrixLatex0.toStringRanking();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("-ranking data not set-", string0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      
      boolean boolean0 = resultMatrixCSV0.getRowHidden(1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      boolean boolean1 = resultMatrixCSV0.getDefaultShowStdDev();
      assertTrue(boolean1 == boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      
      boolean boolean2 = resultMatrixSignificance0.getDefaultPrintColNames();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean2);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      
      resultMatrixSignificance0.m_StdDevWidth = 102;
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(102, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      
      resultMatrixLatex0.addHeader("v", "*");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      
      resultMatrixLatex0.setMeanWidth(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      
      int int0 = resultMatrixSignificance0.getDefaultMeanWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(102, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3361257542305904
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      
      String string1 = resultMatrixSignificance0.getRowName(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("row0", string1);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean0);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      
      boolean boolean1 = resultMatrixGnuPlot0.getDefaultShowAverage();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean1);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3489383276194653
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("row0", string1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      resultMatrixSignificance0.clear();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      int int0 = resultMatrixSignificance0.getVisibleRowCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      
      int int1 = resultMatrixCSV0.getDefaultRowNameWidth();
      assertFalse(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(25, int1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2338, 3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.454355794902588
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      String string0 = resultMatrixCSV0.getRevision();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("8034", string0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      resultMatrixCSV0.clear();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      String string1 = resultMatrixCSV0.toStringRanking();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("-ranking data not set-", string1);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      resultMatrixCSV0.setPrintColNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      assertNotNull(resultMatrixPlainText0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      
      String string2 = resultMatrixPlainText0.meanPrecTipText();
      assertNotNull(string2);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The number of decimals after the decimal point for the mean.", string2);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertNotNull(resultMatrixLatex0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & [1]\\\\\n\\hline\nrow0                      &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      int[] intArray0 = resultMatrixCSV0.getColOrder();
      assertNull(intArray0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      boolean boolean0 = resultMatrixCSV0.isStdDev(111);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertFalse(boolean0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      
      String string4 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string4);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The maximum width of the column names (0 = optimal).", string4);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      String string5 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string5);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The maximum width of the column names (0 = optimal).", string5);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      
      double double0 = resultMatrixGnuPlot1.getCount(0);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      
      int int0 = resultMatrixGnuPlot1.getSignificance(0, 114);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(0, int0);
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      
      resultMatrixGnuPlot1.setStdDevWidth(2);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      
      String string6 = resultMatrixGnuPlot1.colNameWidthTipText();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("The maximum width of the column names (0 = optimal).", string6);
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8023124626719724
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      
      String string0 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      
      double double0 = resultMatrixGnuPlot1.getCount(1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      
      int int0 = resultMatrixGnuPlot1.getSignificance(0, 1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(0, int0);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      
      resultMatrixGnuPlot1.setStdDevWidth(0);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      
      String string1 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string1);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The maximum width of the column names (0 = optimal).", string1);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2270050582485554
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      int int0 = resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(25, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      int int1 = resultMatrixCSV0.getRowNameWidth();
      assertFalse(int1 == int0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(40, int1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      String string0 = resultMatrixCSV0.toString();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset,(1)\nrow0,''\n'(v/ /*)',''\n", string0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      
      resultMatrixCSV1.clearRanking();
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      
      boolean boolean0 = resultMatrixCSV0.getShowStdDev();
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      resultMatrixCSV0.setEnumerateRowNames(false);
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      int[] intArray1 = resultMatrixCSV1.getColOrder();
      assertNull(intArray1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance1.getVisibleRowCount());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance1.getRowCount());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixCSV0);
      assertNotNull(resultMatrixSignificance2);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance2.getDisplayName());
      assertFalse(resultMatrixSignificance2.getShowStdDev());
      assertFalse(resultMatrixSignificance2.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance2.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
      assertTrue(resultMatrixSignificance2.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance2.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance2.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance2.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance2.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance2.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance2.globalInfo());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertFalse(resultMatrixSignificance2.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance2.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance2.getRemoveFilterName());
      assertFalse(resultMatrixSignificance2.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance2.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance2.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance2.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance2.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance2.countWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance2.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance2.getVisibleRowCount());
      assertFalse(resultMatrixSignificance2.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance2.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      assertFalse(resultMatrixSignificance2.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance2.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance2.colNameWidthTipText());
      assertTrue(resultMatrixSignificance2.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance2.showAverageTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance2.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance2.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance2.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance2.getPrintColNames());
      assertEquals(40, resultMatrixSignificance2.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance2.getDefaultShowStdDev());
      
      double double0 = resultMatrixSignificance2.getStdDev((-1044), 830);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance2));
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance2.equals((Object)resultMatrixSignificance0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance2);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertNotSame(resultMatrixSignificance2, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance2, resultMatrixSignificance0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance2.getDisplayName());
      assertFalse(resultMatrixSignificance2.getShowStdDev());
      assertFalse(resultMatrixSignificance2.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance2.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
      assertTrue(resultMatrixSignificance2.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance2.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance2.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance2.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance2.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance2.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance2.globalInfo());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertFalse(resultMatrixSignificance2.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance2.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance2.getRemoveFilterName());
      assertFalse(resultMatrixSignificance2.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance2.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance2.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance2.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance2.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance2.countWidthTipText());
      assertEquals(0, resultMatrixSignificance2.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance2.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance2.getVisibleRowCount());
      assertFalse(resultMatrixSignificance2.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance2.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      assertFalse(resultMatrixSignificance2.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance2.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance2.colNameWidthTipText());
      assertTrue(resultMatrixSignificance2.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance2.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance2.showAverageTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance2.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance2.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance2.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance2.stdDevPrecTipText());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance2.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance2.getPrintColNames());
      assertEquals(40, resultMatrixSignificance2.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance2.getDefaultShowStdDev());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5271659358091756
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.clearHeader();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      String string0 = resultMatrixLatex0.toStringSummary();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("-summary data not set-", string0);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      String string1 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string1);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      String string2 = resultMatrixPlainText0.getRevision();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("8034", string2);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      boolean boolean0 = resultMatrixLatex0.getEnumerateRowNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean0);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      ResultMatrixHTML.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = resultMatrixPlainText0.toStringMatrix();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) \n------------\nrow0(0)    |\n------------\n($\\circ$/  |\n", string4);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      int int0 = resultMatrixPlainText0.getRowCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, int0);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      boolean boolean1 = resultMatrixHTML0.getDefaultEnumerateRowNames();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean1);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4118881763666997
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[6];
      String[] stringArray0 = new String[10];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(10, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      String string0 = resultMatrixGnuPlot0.getColName(0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("col0", string0);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      try { 
        resultMatrixGnuPlot0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.doubleToString(2.0, (-2462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.421275403972367
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      resultMatrixSignificance0.setSignificanceWidth((-651));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      String string0 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      double double0 = resultMatrixGnuPlot0.getCount(12);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      int int0 = resultMatrixGnuPlot0.getSignificance((-350), 0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, int0);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      resultMatrixGnuPlot0.setStdDevWidth(0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      String string1 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", string1);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      String[] stringArray0 = new String[3];
      resultMatrixHTML0.setStdDevPrec((-651));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      stringArray0[0] = "|DEIXT3=pS";
      stringArray0[1] = "*";
      String string2 = resultMatrixHTML0.padString(" ", 2298);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      stringArray0[2] = "(";
      resultMatrixHTML0.setOptions(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean0);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.816436569111356
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      assertEquals(1, int0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      String string2 = resultMatrixLatex0.toStringKey();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n(2) & col1 \\\\\n(3) & col2 \\\\\n(4) & col3 \\\\\n(5) & col4 \\\\\n(6) & col5 \\\\\n(7) & col6 \\\\\n(8) & col7 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string2);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      int[] intArray1 = resultMatrixCSV0.getColOrder();
      assertNull(intArray1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      boolean boolean0 = resultMatrixCSV0.isStdDev((-2733));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      
      String string3 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", string3);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      
      double double1 = resultMatrixGnuPlot0.getCount((-2733));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0.0, double1, 0.01);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      int int1 = resultMatrixCSV0.getVisibleColCount();
      assertFalse(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(8, int1);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 597);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      
      int int2 = resultMatrixPlainText0.getMeanPrec();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, int2);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      
      resultMatrixLatex0.setColHidden(0, true);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(7, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      resultMatrixLatex0.setStdDev(1, 4244, 0.0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(7, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      String string4 = resultMatrixSignificance0.meanWidthTipText();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the mean (0 = optimal).", string4);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      int int3 = resultMatrixSignificance0.getDefaultCountWidth();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, int3);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertNotNull(resultMatrixCSV1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(597, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertEquals(5, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV1);
      assertNotNull(resultMatrixHTML0);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(597, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(597, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertEquals(5, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(597, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(597, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      
      resultMatrixHTML0.setOptions(stringArray0);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(18, stringArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(597, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(597, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertEquals(5, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(7, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(597, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(597, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.791039810954727
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      int[][] intArray0 = new int[0][8];
      String string0 = resultMatrixHTML0.doubleToString((-685.04), 577);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("-685.0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.m_NonSigWins = intArray0;
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5436244943666853
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      String string0 = resultMatrixCSV0.getRevision();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("8034", string0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      resultMatrixCSV0.clear();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      String string1 = resultMatrixCSV0.toStringRanking();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("-ranking data not set-", string1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      resultMatrixCSV0.setPrintColNames(false);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      assertNotNull(resultMatrixPlainText0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      
      String string2 = resultMatrixPlainText0.meanPrecTipText();
      assertNotNull(string2);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The number of decimals after the decimal point for the mean.", string2);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertNotNull(resultMatrixLatex0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      String string3 = resultMatrixLatex0.toStringKey();
      assertNotNull(string3);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n[1] & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string3);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      int[] intArray0 = resultMatrixCSV0.getColOrder();
      assertNull(intArray0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      boolean boolean0 = resultMatrixCSV0.isStdDev(111);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      String string4 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string4);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("The maximum width of the column names (0 = optimal).", string4);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      double double0 = resultMatrixGnuPlot0.getCount(111);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertNotNull(stringArray0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(18, stringArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      int int0 = resultMatrixCSV0.getVisibleColCount();
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals(1, int0);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      
      int int1 = resultMatrixPlainText0.getMeanPrec();
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertFalse(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals(2, int1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      
      resultMatrixLatex0.setColHidden(4244, false);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      
      resultMatrixLatex0.setStdDev(3133, 1, 0);
      assertFalse(resultMatrixGnuPlot0.equals((Object)resultMatrixGnuPlot1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixGnuPlot0, resultMatrixGnuPlot1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6085334907569546
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      int int0 = resultMatrixSignificance0.getVisibleRowCount();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(8, int0);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      String string2 = resultMatrixLatex0.toStringKey();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n(2) & col1 \\\\\n(3) & col2 \\\\\n(4) & col3 \\\\\n(5) & col4 \\\\\n(6) & col5 \\\\\n(7) & col6 \\\\\n(8) & col7 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string2);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      
      int[] intArray1 = resultMatrixCSV0.getColOrder();
      assertNull(intArray1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      
      boolean boolean0 = resultMatrixCSV0.isStdDev((-2733));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(boolean0);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      
      String string3 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width of the column names (0 = optimal).", string3);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      
      double double1 = resultMatrixGnuPlot0.getCount((-2733));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      int int1 = resultMatrixCSV0.getVisibleColCount();
      assertTrue(int1 == int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(8, int1);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(8, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(8, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(8, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 597);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      
      int int2 = resultMatrixPlainText0.getMeanPrec();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, int2);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      
      resultMatrixLatex0.setColHidden(0, false);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      resultMatrixLatex0.setStdDev(8, 4244, 0.0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(8, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(8, resultMatrixLatex0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(8, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      
      String string4 = resultMatrixSignificance0.meanWidthTipText();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the mean (0 = optimal).", string4);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      int int3 = resultMatrixSignificance0.getDefaultCountWidth();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, int3);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertNotNull(resultMatrixCSV1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertEquals(597, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(5, resultMatrixCSV1.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV1);
      assertNotNull(resultMatrixHTML0);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(597, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(597, resultMatrixPlainText0.getRowCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV1.getColCount());
      assertEquals(597, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals(597, resultMatrixCSV1.getVisibleRowCount());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(5, resultMatrixCSV1.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(597, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(597, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      // Undeclared exception!
      resultMatrixHTML0.toStringMatrix();
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.950391601025311
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      stringArray0[0] = ")";
      resultMatrixHTML0.setShowAverage(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(")"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.getColSize((String[][]) null, 3133, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3954774577676368
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double0, 0.01);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int int0 = resultMatrixSignificance0.getVisibleRowCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(8, int0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      String string2 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string2);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      assertNotNull(resultMatrixSignificance1);
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixSignificance1.getColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      
      double double1 = resultMatrixSignificance1.getAverage(485);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals(0.0, double1, 0.01);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixSignificance1.getColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      
      String string3 = resultMatrixSignificance1.getRowName(485);
      assertNull(string3);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixSignificance1.getColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      
      int int1 = resultMatrixSignificance1.getVisibleRowCount();
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertFalse(resultMatrixSignificance1.equals((Object)resultMatrixSignificance0));
      assertTrue(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertNotSame(resultMatrixSignificance1, resultMatrixSignificance0);
      assertEquals(8, int1);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance1.getPrintColNames());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance1.globalInfo());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance1.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertTrue(resultMatrixSignificance1.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertFalse(resultMatrixSignificance1.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance1.showStdDevTipText());
      assertEquals(8, resultMatrixSignificance1.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals("Significance only", resultMatrixSignificance1.getDisplayName());
      assertFalse(resultMatrixSignificance1.getShowAverage());
      assertEquals(2, resultMatrixSignificance1.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance1.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertTrue(resultMatrixSignificance1.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance1.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance1.showAverageTipText());
      assertFalse(resultMatrixSignificance1.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance1.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance1.countWidthTipText());
      assertFalse(resultMatrixSignificance1.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance1.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance1.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance1.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance1.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance1.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance1.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance1.enumerateColNamesTipText());
      assertEquals(8, resultMatrixSignificance1.getColCount());
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance1.significanceWidthTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(8, 0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      assertFalse(resultMatrixSignificance0.equals((Object)resultMatrixSignificance1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixSignificance0, resultMatrixSignificance1);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixHTML0.setRanking(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(8, resultMatrixHTML0.getRowCount());
      assertEquals(8, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4509542425770134
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[6];
      String[] stringArray0 = new String[10];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(10, stringArray0.length);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 180);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(180, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(26, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(180, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4391175858873746
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixCSV0.setRowNameWidth(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      
      ResultMatrixGnuPlot.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      int int0 = resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, int0);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      
      int int1 = resultMatrixGnuPlot0.getDefaultSignificanceWidth();
      assertFalse(int1 == int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, int1);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.384537957289727
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      resultMatrixGnuPlot0.m_EnumerateRowNames = false;
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      int int0 = resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(50, int0);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.LEFT_PARENTHESES = "v";
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      String string0 = resultMatrixHTML0.padString("", 1, false);
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(" ", string0);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.setSize(1, 193);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(193, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(193, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.setPrintRowNames(true);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(193, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(193, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      String string1 = resultMatrixHTML0.toStringSummary();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("-summary data not set-", string1);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(193, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(193, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.setRowNameWidth(50);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(193, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(193, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      
      int int1 = resultMatrixGnuPlot0.getVisibleRowCount();
      assertFalse(int1 == int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, int1);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      resultMatrixGnuPlot0.setSignificance(50, 3363, 0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      String string2 = resultMatrixGnuPlot0.getSummaryTitle(2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("c", string2);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      int int2 = resultMatrixGnuPlot0.getDefaultSignificanceWidth();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, int2);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      String string3 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string3);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1338514763076932
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 41);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(41, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(41, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      
      resultMatrixCSV0.setRowNameWidth(0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(41, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(41, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(41, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(41, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3356829523026654
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      assertEquals(0, int0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      
      String[][] stringArray0 = new String[5][1];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "(";
      stringArray1[1] = " ";
      stringArray1[2] = "(";
      stringArray1[3] = "Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n";
      stringArray1[4] = "*";
      stringArray1[5] = "Zd2}[D[JiSMJ^0";
      stringArray1[6] = "(";
      stringArray1[7] = " ";
      stringArray1[8] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "v";
      stringArray2[1] = "(";
      stringArray2[2] = "Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n";
      stringArray2[3] = "v";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[6];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "v";
      stringArray3[1] = "(";
      stringArray3[2] = "v";
      stringArray3[3] = " ";
      stringArray3[4] = "*";
      stringArray3[5] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "(";
      stringArray4[1] = "";
      stringArray4[2] = ")";
      stringArray4[3] = " ";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[6];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "(";
      stringArray5[1] = "{centering\n";
      stringArray5[2] = "v";
      stringArray5[3] = ")";
      stringArray5[4] = "*";
      stringArray5[5] = "v";
      stringArray0[4] = stringArray5;
      int int1 = resultMatrixGnuPlot0.getColSize(stringArray0, 2, true, true);
      assertFalse(int1 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(344, int1);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(8, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5986051779973063
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      
      boolean boolean0 = resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      
      String[][] stringArray0 = new String[2][0];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixGnuPlot0.getColSize(stringArray0, 2, false, true);
      assertEquals(2, stringArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, int0);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.34027774787933
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0.0, double0, 0.01);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(20, 2);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(20, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(20, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n";
      stringArray1[1] = ")";
      stringArray1[2] = " ";
      stringArray1[3] = "*";
      stringArray1[4] = "(";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "*";
      stringArray2[1] = "*";
      stringArray2[2] = "";
      stringArray2[3] = "v";
      stringArray2[4] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray0[2] = stringArray3;
      int int0 = resultMatrixGnuPlot0.getColSize(stringArray0, (-303), false, false);
      assertEquals(3, stringArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, int0);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(20, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(20, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.35563889555545
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertArrayEquals(new int[] {0, 8, 8}, intArray0);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      String string1 = resultMatrixSignificance0.getRowName(8);
      assertNull(string1);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      String string2 = resultMatrixCSV0.toStringKey();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Key,\n[1],col0\n", string2);
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      String string3 = resultMatrixCSV0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string3);
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV1);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      
      String string4 = resultMatrixCSV1.toStringRanking();
      assertNotNull(string4);
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertEquals("-ranking data not set-", string4);
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      
      resultMatrixCSV1.setColName(8, " ");
      assertFalse(resultMatrixCSV1.equals((Object)resultMatrixCSV0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixCSV1, resultMatrixCSV0);
      assertFalse(resultMatrixCSV1.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV1.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV1.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV1.countWidthTipText());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV1.rowNameWidthTipText());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV1.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV1.printColNamesTipText());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertFalse(resultMatrixCSV1.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV1.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV1.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV1.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV1.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV1.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV1.getShowAverage());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV1.globalInfo());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertTrue(resultMatrixCSV1.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV1.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV1.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV1.getDefaultColNameWidth());
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV1.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV1.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV1.getDisplayName());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV1.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV1.meanWidthTipText());
      assertFalse(resultMatrixCSV1.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertFalse(resultMatrixCSV0.equals((Object)resultMatrixCSV1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixCSV0, resultMatrixCSV1);
      assertTrue(boolean0);
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3110913254181864
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      assertNotNull(resultMatrixSignificance0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int[] intArray0 = new int[3];
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      double double0 = resultMatrixSignificance0.getAverage(8);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double0, 0.01);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int int0 = 5;
      String string1 = resultMatrixSignificance0.getRowName(5);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("row5", string1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int int1 = resultMatrixSignificance0.getVisibleRowCount();
      assertFalse(int1 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(8, int1);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      String string2 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string2);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      double double1 = resultMatrixSignificance0.getAverage(8);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0.0, double1, 0.01);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int int2 = 97;
      String string3 = resultMatrixSignificance0.getRowName(97);
      assertNull(string3);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      int int3 = resultMatrixSignificance0.getVisibleRowCount();
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(8, int3);
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(8, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(8, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2782, 53);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.071006090208417
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      
      String string0 = resultMatrixPlainText0.rowNameWidthTipText();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The maximum width for the row names (0 = optimal).", string0);
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 1);
      assertNotNull(resultMatrixPlainText1);
      assertFalse(resultMatrixPlainText1.equals((Object)resultMatrixPlainText0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText1.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText1.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText1.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText1.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText1.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText1.countWidthTipText());
      assertEquals(25, resultMatrixPlainText1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText1.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText1.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText1.getRemoveFilterName());
      assertFalse(resultMatrixPlainText1.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText1.showAverageTipText());
      assertTrue(resultMatrixPlainText1.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText1.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText1.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText1.getStdDevPrec());
      assertFalse(resultMatrixPlainText1.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText1.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText1.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText1.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText1.printRowNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText1.colNameWidthTipText());
      assertTrue(resultMatrixPlainText1.getPrintColNames());
      assertEquals(1, resultMatrixPlainText1.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText1.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText1.getColCount());
      assertTrue(resultMatrixPlainText1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText1.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText1.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText1.removeFilterNameTipText());
      assertTrue(resultMatrixPlainText1.getEnumerateColNames());
      assertFalse(resultMatrixPlainText1.getShowStdDev());
      assertEquals(0, resultMatrixPlainText1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText1.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText1.stdDevPrecTipText());
      assertTrue(resultMatrixPlainText1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText1.getMeanWidth());
      assertEquals("Plain Text", resultMatrixPlainText1.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText1.showStdDevTipText());
      assertTrue(resultMatrixPlainText1.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText1.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText1.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText1.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText1.globalInfo());
      assertEquals(2, resultMatrixPlainText1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText1.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText1.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText1.significanceWidthTipText());
      
      // Undeclared exception!
      try { 
        resultMatrixPlainText1.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4170190670127183
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 15);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      int int0 = resultMatrixGnuPlot0.getSignificance(4, 0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, int0);
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      resultMatrixGnuPlot0.setStdDevWidth(2);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      String string1 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", string1);
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(15, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.303246036699927
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = resultMatrixHTML0.getSummaryTitle(0);
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("a", string0);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      boolean boolean0 = vector0.add(".1/ *");
      assertTrue(boolean0);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains(".1/ *"));
      assertEquals("[.1/ *]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains(".1/ *"));
      assertEquals("[.1/ *]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector1.capacity());
      assertEquals("[.1/ *]", vector1.toString());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      
      resultMatrixHTML0.m_HeaderKeys = vector0;
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("[.1/ *]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(resultMatrixHTML0.m_HeaderKeys.isEmpty());
      assertEquals(1, resultMatrixHTML0.m_HeaderKeys.size());
      assertEquals("[.1/ *]", resultMatrixHTML0.m_HeaderKeys.toString());
      assertEquals(10, resultMatrixHTML0.m_HeaderKeys.capacity());
      
      resultMatrixHTML0.setMeanPrec(0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      String string1 = resultMatrixHTML0.toStringKey();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string1);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      String string2 = resultMatrixLatex0.toStringSummary();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("-summary data not set-", string2);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      resultMatrixHTML0.m_ShowStdDev = true;
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      
      String string4 = resultMatrixPlainText0.getRevision();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("8034", string4);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      
      boolean boolean1 = resultMatrixLatex0.getEnumerateRowNames();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean1);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      String string5 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string5);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DM,$xG";
      stringArray0[1] = "v";
      stringArray0[2] = "a";
      stringArray0[3] = "v";
      boolean boolean2 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean2);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.50366334278996
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[10];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(10, stringArray0.length);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(3, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(3, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(3, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(3, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      boolean boolean0 = resultMatrixCSV0.isStdDev(6075);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(boolean0);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(3, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(3, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(3, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(3, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 26);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(26, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      
      String string0 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(26, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      
      double double0 = resultMatrixGnuPlot1.getCount(2544);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      
      int int0 = resultMatrixCSV0.getVisibleColCount();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(3, int0);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(3, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(3, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(3, resultMatrixCSV0.getColCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(3, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      int int1 = resultMatrixPlainText0.getMeanPrec();
      assertFalse(int1 == int0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, int1);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(110, 1);
      assertNotNull(resultMatrixLatex0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(110, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(110, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      
      resultMatrixLatex0.setColHidden(2544, false);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(110, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(110, resultMatrixLatex0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.248307522963491
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      boolean boolean0 = true;
      resultMatrixGnuPlot0.setEnumerateColNames(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"(1) col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      
      String string1 = resultMatrixPlainText0.globalInfo();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Generates the output as plain text (for fixed width fonts).", string1);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.setCountWidth(2653);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2653, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.setShowAverage(true);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2653, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.m_EnumerateColNames = false;
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertTrue(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2653, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2, 771);
      assertNotNull(resultMatrixGnuPlot1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(771, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(771, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      
      resultMatrixGnuPlot1.setCountWidth(1);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(771, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(771, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot1);
      assertNotNull(resultMatrixHTML0);
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(771, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(771, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(771, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      int int0 = resultMatrixHTML0.getDefaultRowNameWidth();
      assertFalse(resultMatrixGnuPlot1.equals((Object)resultMatrixGnuPlot0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotSame(resultMatrixGnuPlot1, resultMatrixGnuPlot0);
      assertEquals(25, int0);
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot1.globalInfo());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot1.stdDevWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(771, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot1.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot1.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot1.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot1.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(771, resultMatrixGnuPlot1.getRowCount());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot1.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot1.significanceWidthTipText());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot1.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot1.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot1.printRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getColCount());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot1.countWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot1.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot1.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot1.showAverageTipText());
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
      assertFalse(resultMatrixGnuPlot1.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot1.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot1.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultCountWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot1.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(771, resultMatrixHTML0.getRowCount());
      assertEquals(771, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      // Undeclared exception!
      resultMatrixGnuPlot1.toStringMatrix();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.631612186595399
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      resultMatrixPlainText0.m_ColHidden = booleanArray0;
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertNotNull(resultMatrixCSV0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertTrue(boolean0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1509699624985004
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      resultMatrixGnuPlot0.addHeader("", "<k#5LC43q@c8YCq0X");
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertNotNull(resultMatrixCSV0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      String string0 = resultMatrixCSV0.toStringKey();
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Key,\n[1],col0\n", string0);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      String string1 = resultMatrixCSV0.toStringMatrix();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string1);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      String string2 = resultMatrixCSV0.toStringRanking();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("-ranking data not set-", string2);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      resultMatrixCSV0.setColName(2, "");
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertTrue(boolean0);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5510882099892873
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      String string0 = resultMatrixLatex0.toStringSummary();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("-summary data not set-", string0);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      String string1 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string1);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      String string2 = resultMatrixPlainText0.getRevision();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("8034", string2);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      boolean boolean0 = resultMatrixLatex0.getEnumerateRowNames();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(boolean0);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      
      ResultMatrixHTML.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = resultMatrixPlainText0.toStringMatrix();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Dataset (1) \n------------\nrow0(0)    |\n------------\n($\\circ$/  |\n", string4);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertNotNull(resultMatrixSignificance0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      
      int int0 = resultMatrixSignificance0.getDefaultMeanWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, int0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      
      String string5 = resultMatrixSignificance0.toStringKey();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("Key:\n(1) col0\n", string5);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      
      String string6 = resultMatrixHTML0.getSummaryTitle(1);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("b", string6);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5324970870200003
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertNotNull(resultMatrixGnuPlot0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      assertNotNull(resultMatrixHTML0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      String string0 = resultMatrixHTML0.getSummaryTitle((-3785));
      assertNotNull(string0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("R", string0);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("");
      assertTrue(boolean0);
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      Vector vector1 = (Vector)vector0.clone();
      assertNotNull(vector1);
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      resultMatrixHTML0.setMeanPrec((-1081));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      String string1 = resultMatrixHTML0.toStringKey();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string1);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertNotNull(resultMatrixLatex0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(2, 1);
      assertNotNull(resultMatrixLatex1);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      
      String string2 = resultMatrixLatex1.toStringSummary();
      assertNotNull(string2);
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      assertEquals("-summary data not set-", string2);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      
      String string3 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string3);
      assertFalse(resultMatrixLatex0.equals((Object)resultMatrixLatex1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixLatex0, resultMatrixLatex1);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string3);
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      assertNotNull(resultMatrixPlainText0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      
      String string4 = resultMatrixPlainText0.getRevision();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals("8034", string4);
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      
      boolean boolean1 = resultMatrixLatex1.getEnumerateRowNames();
      assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotSame(resultMatrixLatex1, resultMatrixLatex0);
      assertFalse(boolean1);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertFalse(resultMatrixLatex1.getShowAverage());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex1.getPrintRowNames());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
      assertFalse(resultMatrixLatex1.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
      assertFalse(resultMatrixLatex1.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
      assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixLatex1.getRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
      assertEquals(2, resultMatrixLatex1.getColCount());
      assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
      assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
      assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
      assertEquals(1, resultMatrixLatex1.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex1.getVisibleRowCount());
      assertFalse(resultMatrixLatex1.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex1.getVisibleColCount());
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertFalse(resultMatrixLatex1.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
      
      String string5 = resultMatrixLatex0.toStringMatrix();
      assertNotNull(string5);
      assertFalse(resultMatrixLatex0.equals((Object)resultMatrixLatex1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotSame(resultMatrixLatex0, resultMatrixLatex1);
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string5);
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertNotNull(resultMatrixHTML0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      resultMatrixHTML0.setEnumerateColNames(false);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      String string0 = resultMatrixHTML0.getDisplayName();
      assertNotNull(string0);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals("HTML", string0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      int int0 = resultMatrixHTML0.getStdDevWidth();
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, int0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0800471376768797
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setSignificanceWidth((-651));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount((-684));
      resultMatrixGnuPlot0.getSignificance((-350), 3274);
      resultMatrixGnuPlot0.setStdDevWidth(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("\tThe width of the mean (0 = optimal).\n\t(default: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9083826809913753
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(12);
      resultMatrixGnuPlot0.listOptions();
      resultMatrixGnuPlot0.setStdDevWidth(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      String[][] stringArray0 = new String[0][2];
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.getColSize(stringArray0, 0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.867455416675068
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1235);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1235;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 1;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(0);
      int int0 = resultMatrixGnuPlot0.getSignificance(0, 2);
      assertEquals(0, int0);
      
      resultMatrixGnuPlot0.setStdDevWidth(0);
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1235, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3784227929362283
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(8, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(8, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.setColOrder(intArray0);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1) (2) (3) (4) (5) (6) (7) (8)\n---------------------------------------\nrow0                            \nrow1                            \nrow2                            \nrow3                            \nrow4                            \nrow5                            \nrow6                            \nrow7                            \n", string0);
      
      resultMatrixSignificance0.getAverage((-666));
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getVisibleRowCount();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(8, 97);
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 8;
      intArray1[2] = 8;
      intArray1[3] = 8;
      intArray1[4] = 0;
      resultMatrixSignificance0.getSignificance(97, 0);
      assertFalse(resultMatrixSignificance0.getShowStdDev());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.185256796640907
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.addHeader("<k#5LC43q@c8YCq0X", "");
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.toStringKey();
      String string0 = resultMatrixCSV1.toStringMatrix();
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixCSV0.m_RankingLosses = intArray0;
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.setColName(2, (String) null);
      resultMatrixCSV1.getEnumerateColNames();
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getColNameWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3966578329737875
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.meanPrecTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.isStdDev(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(1);
      resultMatrixCSV0.getVisibleColCount();
      assertTrue(resultMatrixCSV0.getPrintColNames());
      
      resultMatrixPlainText0.getMeanPrec();
      resultMatrixLatex0.setColHidden(1, false);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3006905024379614
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.getAverage(1842);
      resultMatrixSignificance0.getRowName(24);
      resultMatrixSignificance0.getVisibleRowCount();
      int int0 = 0;
      int int1 = 5592;
      resultMatrixHTML0.setEnumerateColNames(true);
      int int2 = (-31);
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML(5592, (-31));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4919476491696932
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.getAverage(8);
      resultMatrixSignificance0.getRowName(8);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.isStdDev((-2733));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(1);
      resultMatrixGnuPlot0.getSignificance(17, 2);
      resultMatrixGnuPlot0.setStdDevWidth(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(8, 8);
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.getHeader("The maximum width of the column names (0 = optimal).");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.861755854244213
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      stringArray0[0] = ")";
      resultMatrixHTML0.setShowAverage(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setCountWidth(584);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.setColName((-2), "y$~]");
      resultMatrixCSV0.getEnumerateColNames();
      resultMatrixHTML0.getDefaultStdDevWidth();
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.556350811231054
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.clear();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.meanPrecTipText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringKey();
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.isStdDev(11);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(0);
      resultMatrixLatex1.getOptions();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 9);
      resultMatrixCSV1.getVisibleColCount();
      resultMatrixPlainText0.getMeanPrec();
      resultMatrixLatex0.setColHidden(2, false);
      resultMatrixLatex0.setStdDev((-1541), (-6025), 1);
      resultMatrixCSV0.getSummaryTitle(26);
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.513670838717165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.getSummaryTitle(0);
      vector0.add(".1/ *");
      vector0.clone();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.toStringKey();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.toStringMatrix();
      resultMatrixHTML0.m_ShowStdDev = true;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getRevision();
      resultMatrixLatex0.getEnumerateRowNames();
      resultMatrixLatex0.toStringMatrix();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DM,$xG";
      stringArray0[1] = "v";
      stringArray0[2] = "a";
      stringArray0[3] = "v";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0724579351310877
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixSignificance0.m_RowOrder = intArray0;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.setEnumerateColNames(false);
      resultMatrixSignificance0.getSignificanceWidth();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.400697888968149
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixGnuPlot.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.toArray();
      assertTrue(resultMatrixGnuPlot0.getShowStdDev());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2474824703049774
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      resultMatrixPlainText0.m_EnumerateColNames = false;
      resultMatrixPlainText0.rowNameWidthTipText();
      resultMatrixPlainText0.toArray();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixPlainText0.setShowAverage(true);
      resultMatrixPlainText0.getDisplayName();
      resultMatrixHTML0.m_StdDevPrec = 0;
      resultMatrixHTML0.getPrintRowNames();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.452577255092425
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[3];
      resultMatrixSignificance0.getRevision();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = "v";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixSignificance0.isRowName(2);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = "(";
      stringArray0[2] = "*";
      stringArray0[3] = "v";
      stringArray0[4] = " ";
      stringArray0[5] = "*";
      stringArray0[6] = "(";
      resultMatrixSignificance0.m_ColNames = stringArray0;
      resultMatrixSignificance0.m_PrintRowNames = false;
      resultMatrixSignificance0.m_ShowAverage = false;
      resultMatrixSignificance0.setRowNameWidth(1128);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      assertEquals(7, resultMatrixSignificance0.getColCount());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9158033087561757
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setRowNameWidth(97);
      resultMatrixPlainText0.m_ColNameWidth = 97;
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColNameWidth((-4324));
      resultMatrixPlainText0.isRowName((-4324));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.m_MeanWidth = (-4324);
      resultMatrixGnuPlot0.padString("(", 158, false);
      resultMatrixPlainText0.setEnumerateRowNames(false);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.228163189844828
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[6];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.toString();
      resultMatrixCSV0.setStdDevWidth(3);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getRowNameWidth();
      resultMatrixCSV0.toString();
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.getShowStdDev();
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.getColOrder();
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getStdDev(2763, (-328));
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.262400771124387
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setCountWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.padString((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.163347590722785
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toString();
      resultMatrixCSV0.setStdDevWidth(37);
      resultMatrixCSV0.getDefaultRowNameWidth();
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      resultMatrixCSV0.toString();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int int1 = ResultMatrix.SIGNIFICANCE_TIE;
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV((-712), 1370);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.867455416675068
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1235);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1235;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 1;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(0);
      resultMatrixGnuPlot0.getSignificance(4755, 1);
      resultMatrixGnuPlot0.setStdDevWidth((-1409));
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1169548881664926
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.colNameWidthTipText();
      String string0 = resultMatrixSignificance0.doubleToString(0, 1);
      assertEquals("0.0", string0);
      
      double double0 = resultMatrixGnuPlot0.getCount(12);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixGnuPlot0.getSignificance((-350), 0);
      resultMatrixGnuPlot0.setStdDevWidth(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      resultMatrixLatex0.setStdDev((-2434), 2, 0.0);
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.121597974516327
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1520, 1);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.m_StdDevPrec = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      int[] intArray0 = new int[2];
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      resultMatrixGnuPlot0.setStdDevWidth(1);
      intArray0[0] = (-1838);
      intArray0[1] = 1;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixPlainText0.m_CountWidth = (-1694);
      resultMatrixPlainText0.m_PrintRowNames = false;
      resultMatrixPlainText0.doubleToString(0, 2);
      resultMatrixGnuPlot0.padString("y4xX8ht1Pp;", (-1694), false);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.meanWidthTipText();
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      resultMatrixGnuPlot0.getRowCount();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.991090425845649
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setRowNameWidth(0);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setStdDevWidth(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getRowNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3625687231643964
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.meanPrecTipText();
      resultMatrixGnuPlot0.m_EnumerateColNames = true;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(493);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.isStdDev(3446);
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixCSV0.getVisibleColCount();
      resultMatrixPlainText0.getMeanPrec();
      resultMatrixPlainText0.setSize(2, 44);
      assertEquals(44, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixCSV0.getPrintColNames());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.017401840278014
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[6][4];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 2;
      intArray1[7] = 0;
      intArray1[8] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 25;
      intArray2[4] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 1;
      intArray3[6] = (-607);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = (-607);
      intArray4[1] = 2;
      intArray4[2] = 25;
      intArray4[3] = 0;
      intArray4[4] = (-2801);
      intArray4[5] = (-1476);
      intArray4[6] = 2;
      intArray4[7] = (-306);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 0;
      intArray5[1] = (-2801);
      intArray5[2] = 1;
      intArray5[3] = 809;
      intArray5[4] = (-2801);
      intArray5[5] = (-607);
      intArray5[6] = (-1476);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 25;
      intArray6[3] = 25;
      intArray6[4] = 2;
      intArray6[5] = (-607);
      intArray0[5] = intArray6;
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[] intArray7 = new int[3];
      intArray7[0] = 0;
      intArray7[1] = 0;
      intArray7[2] = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(12);
      String string0 = resultMatrixSignificance0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6226547442694517
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance();
      resultMatrixSignificance2.getDefaultPrintColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[3] = " ";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "$circ$";
      ResultMatrixSignificance.main(stringArray0);
      String[] stringArray1 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray1.length);
      
      resultMatrixLatex0.addHeader("v", stringArray0[1]);
      resultMatrixLatex0.setMeanWidth(2758);
      resultMatrixSignificance2.getDefaultMeanWidth();
      resultMatrixSignificance0.getCountWidth();
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6137809834998693
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.getAverage(8);
      resultMatrixSignificance0.getRowName(8);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.isStdDev((-2733));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount((-2733));
      resultMatrixLatex0.getOptions();
      resultMatrixCSV0.getVisibleColCount();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 581);
      resultMatrixPlainText0.getMeanPrec();
      resultMatrixLatex0.setColHidden(0, false);
      resultMatrixLatex0.setStdDev(1, 4244, 0.0);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixSignificance0.getDefaultCountWidth();
      resultMatrixLatex0.getColName(17);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV1);
      // Undeclared exception!
      resultMatrixHTML0.toStringMatrix();
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3162382764347673
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixCSV0.setPrintColNames(true);
      resultMatrixCSV0.TIE_STRING = " ";
      resultMatrixCSV0.m_RowNameWidth = 2;
      resultMatrixPlainText0.padString("A7'@51RZ", 45);
      resultMatrixPlainText0.meanWidthTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.LEFT_PARENTHESES = "";
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixCSV0.globalInfo();
      resultMatrixPlainText0.showStdDevTipText();
      resultMatrixPlainText0.setMeanWidth(2);
      resultMatrixHTML0.getRemoveFilterName();
      int int0 = 0;
      resultMatrixPlainText0.getRowName(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 0);
      resultMatrixLatex0.setMeanWidth(45);
      resultMatrixLatex0.m_ShowAverage = true;
      resultMatrixHTML0.listOptions();
      resultMatrixLatex0.globalInfo();
      resultMatrixLatex0.stdDevPrecTipText();
      resultMatrixLatex0.setSize(0, 1);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.clearRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8501274359005797
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.padString("tN`@X4)W?j", 4960);
      int int0 = resultMatrixPlainText0.getDisplayCol((-855));
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals((-1), int0);
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.818762871904427
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setCountWidth((-14));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixHTML0.getRevision();
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.padString((String) null, (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.377199384723431
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.getSummaryTitle(0);
      vector0.add(".1/ *");
      vector0.clone();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.setShowAverage(false);
      Vector<String> vector1 = new Vector<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a";
      stringArray0[1] = "v";
      resultMatrixHTML0.setOptions(stringArray0);
      resultMatrixHTML0.stdDevWidthTipText();
      resultMatrixHTML0.getDefaultRemoveFilterName();
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.247482470304977
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[2];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.toString();
      resultMatrixCSV0.setStdDevWidth(1);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getRowNameWidth();
      resultMatrixCSV0.toString();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixCSV0.setColNameWidth(23);
      assertEquals(23, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.426485177934715
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2236, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      // Undeclared exception!
      resultMatrixGnuPlot0.toString();
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.743535678836661
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.clearRanking();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.RIGHT_PARENTHESES = "#set terminal postscript\n";
      resultMatrixGnuPlot0.listOptions();
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixCSV0.padString("*", 0, true);
      assertTrue(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.07522054805437
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(50, 50);
      resultMatrixLatex0.m_ShowAverage = false;
      resultMatrixLatex0.m_ShowStdDev = true;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      resultMatrixLatex0.m_StdDevWidth = (-3085);
      booleanArray0[2] = true;
      resultMatrixLatex0.setPrintColNames(true);
      booleanArray0[3] = true;
      resultMatrixLatex0.setStdDevWidth((-1));
      booleanArray0[4] = true;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.colNameWidthTipText();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.removeFilterName("");
      resultMatrixLatex0.padString("", 0, false);
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5271659358091756
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.padString("-summary data not set-", 407, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixLatex0.getEnumerateRowNames();
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixHTML.main(stringArray0);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowCount();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4290845937947863
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 8;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.getAverage(8);
      resultMatrixSignificance0.getRowName(8);
      resultMatrixSignificance0.getVisibleRowCount();
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.getAverage(485);
      resultMatrixSignificance1.getRowName(485);
      resultMatrixSignificance1.getVisibleRowCount();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(8, 0);
      resultMatrixHTML0.setShowStdDev(true);
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      resultMatrixHTML0.toStringMatrix();
      stringArray0[1] = "?xssG*p` @-uV";
      stringArray0[2] = null;
      resultMatrixSignificance1.setShowAverage(true);
      stringArray0[3] = "\n";
      try { 
        resultMatrixHTML0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.9456881713856515
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.LEFT_PARENTHESES = "Gz*llx?7`dDZ";
      resultMatrixLatex0.listOptions();
      int int0 = resultMatrixLatex0.getVisibleColCount();
      assertEquals(1, int0);
      
      String string0 = resultMatrixLatex0.doubleToString(1, 1);
      assertEquals("1.0", string0);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2128189783784378
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setPrintRowNames(false);
      stringArray0[0] = ")";
      resultMatrixHTML0.setShowAverage(false);
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      resultMatrixHTML0.setOptions(stringArray0);
      assertFalse(resultMatrixHTML0.getPrintRowNames());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3885337676500895
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(281, 0);
      resultMatrixSignificance0.setColOrder((int[]) null);
      resultMatrixSignificance0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.getAverage(284);
      resultMatrixSignificance1.getRowName((-1082));
      resultMatrixSignificance0.getVisibleRowCount();
      resultMatrixSignificance1.setColOrder((int[]) null);
      resultMatrixSignificance1.toStringMatrix();
      resultMatrixSignificance1.getAverage(0);
      resultMatrixSignificance1.getRowName(95);
      resultMatrixSignificance0.getVisibleRowCount();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      int[][] intArray0 = new int[6][0];
      intArray0[0] = null;
      intArray0[1] = null;
      intArray0[2] = null;
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[3] = intArray1;
      intArray0[4] = null;
      intArray0[5] = null;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.1434924791380054
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixSignificance0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1884);
      intArray0[2] = 3;
      intArray0[3] = 1;
      resultMatrixLatex0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.237973067001244
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(8, 8);
      resultMatrixCSV0.setRowNameWidth(1232);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      int[] intArray0 = new int[9];
      resultMatrixCSV0.listOptions();
      intArray0[0] = 2758;
      intArray0[1] = 1;
      intArray0[6] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 0;
      resultMatrixCSV1.setRowOrder(intArray0);
      resultMatrixCSV1.toString();
      resultMatrixCSV0.setStdDevWidth(850);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getRowNameWidth();
      resultMatrixCSV0.toString();
      resultMatrixCSV1.clearRanking();
      resultMatrixCSV1.getShowStdDev();
      resultMatrixCSV0.setEnumerateRowNames(false);
      assertEquals(850, resultMatrixCSV0.getStdDevWidth());
      
      resultMatrixCSV1.getColOrder();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 1;
      resultMatrixSignificance0.getStdDev(1307, 6);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9975390780044373
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setRowNameWidth(0);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.635203351027977
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = " ";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.addHeader("\\textbackslash", "*");
      resultMatrixLatex0.setMeanWidth((-4491));
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixSignificance0.getCountWidth();
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1751539589795965
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.addHeader("", "<k#5LC43q@c8YCq0X");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.toString();
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV(0, (-908));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.2128189783784378
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixHTML0.setStdDevPrec(160);
      int[][] intArray0 = new int[0][8];
      resultMatrixHTML0.m_NonSigWins = intArray0;
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.setOptions(stringArray0);
      boolean boolean0 = resultMatrixHTML0.getDefaultShowStdDev();
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.0829126413850387
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setSignificanceWidth((-651));
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.colNameWidthTipText();
      resultMatrixGnuPlot0.getCount(12);
      resultMatrixGnuPlot0.getSignificance((-350), 0);
      resultMatrixGnuPlot0.setStdDevWidth(0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("}\n");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.842880615317132
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_CountWidth = (-5045);
      boolean boolean0 = resultMatrixPlainText0.isSignificance(26);
      assertFalse(boolean0);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(1, resultMatrixPlainText0.getColCount());
  }
}
