/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:40:56 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".arff";
      stringArray0[1] = "problem with the following packages after upgrading them:";
      stringArray0[2] = "5Q";
      stringArray0[3] = "I!] h:Z'PW3WMz]ERV";
      stringArray0[4] = "]:gk/~c[u#Lv]sZ";
      stringArray0[5] = "3Y`/58D]}T=P\u0002";
      stringArray0[6] = "\tOutput binary attributes for discretized attributes.";
      stringArray0[7] = "-F";
      stringArray0[8] = "M";
      discretize0.setOptions(stringArray0);
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.882372207858138
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(607.25599973276);
      discretize0.getOptions();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 607.25599973276;
      doubleArray1[1] = 607.25599973276;
      doubleArray1[2] = 607.25599973276;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 607.25599973276;
      doubleArray2[1] = 607.25599973276;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 607.25599973276;
      doubleArray2[4] = 607.25599973276;
      doubleArray2[5] = 607.25599973276;
      doubleArray2[6] = 607.25599973276;
      doubleArray2[7] = 607.25599973276;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      int int0 = 14;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[8] = "u1do\"@-G/|}";
      LinkedList<SparseInstance> linkedList0 = new LinkedList<SparseInstance>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u1do\"@-G/|}", arrayList0, 1684);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1684);
      Attribute attribute0 = new Attribute(".bsi");
      arrayList1.add(attribute0);
      Instances instances2 = new Instances(instances0, (-1968526675));
      arrayList0.addAll((Collection<? extends Attribute>) arrayList1);
      instances2.compactify();
      SystemInUtil.addInputLine("");
      arrayList0.add(attribute0);
      instances2.compactify();
      Discretize discretize0 = new Discretize("numeric");
      discretize0.getBins();
      Discretize discretize1 = new Discretize("So2Eo-a ");
      try { 
        discretize1.setInputFormat(instances2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at So2Eo-a
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.390130693647336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("i%S12_ncsJ");
      discretize0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      discretize0.m_MakeBinary = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i%S12_ncsJ";
      stringArray0[2] = "i%S12_ncsJ";
      stringArray0[3] = "i%S12_ncsJ";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "i%S12_ncsJ";
      stringArray0[7] = "i%S12_ncsJ";
      Discretize.main(stringArray0);
      discretize0.m_NumBins = 3100;
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.attributeIndicesTipText();
      discretize0.setInvertSelection(true);
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setUseBinNumbers(false);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getOptions();
      assertEquals(3100, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7180907514608585
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(607.25599973276);
      discretize0.getOptions();
      double[][] doubleArray0 = new double[2][6];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize("u1do\"@-G/|}");
      discretize1.getOptions();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(607.25599973276, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("u1dK\"@-Y/|}");
      discretize0.setFindNumBins(true);
      discretize0.setBins(1507);
      discretize0.globalInfo();
      assertEquals(1507, discretize0.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      discretize0.setUseEqualFrequency(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Make resulting attributes binary.";
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      discretize0.getCutPoints((-976));
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-976));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("u1do\"@-G/|}");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u1do\"@-G/|}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("-699");
      Filter.makeCopy(discretize0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((byte)66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.843461957285851
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(607.25599973276);
      discretize0.getOptions();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 607.25599973276;
      doubleArray1[1] = 607.25599973276;
      doubleArray1[2] = 607.25599973276;
      doubleArray0[0] = doubleArray1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 607.25599973276;
      doubleArray2[1] = 607.25599973276;
      doubleArray2[2] = 0.0;
      doubleArray1[1] = 607.25599973276;
      doubleArray2[4] = 607.25599973276;
      doubleArray2[5] = 607.25599973276;
      doubleArray2[6] = 607.25599973276;
      doubleArray2[7] = 607.25599973276;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      boolean boolean0 = true;
      discretize0.setIgnoreClass(true);
      discretize0.setUseEqualFrequency(true);
      discretize0.listOptions();
      Discretize discretize1 = new Discretize();
      discretize1.m_IgnoreClass = true;
      discretize0.setIgnoreClass(true);
      discretize1.getDesiredWeightOfInstancesPerInterval();
      discretize1.getOptions();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4835649606388426
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("i%S12_ncsJ");
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = true;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i%S12_ncsJ";
      stringArray0[1] = "";
      stringArray0[2] = "i%S12_ncsJ";
      stringArray0[3] = "i%S12_ncsJ";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "i%S12_ncsJ";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "i%S12_ncsJ";
      Discretize.main(stringArray0);
      discretize0.m_NumBins = 3100;
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.setInvertSelection(true);
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(false);
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setUseBinNumbers(false);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[11];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(stringArray0[8], arrayList0, 1684);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1684);
      Attribute attribute0 = new Attribute(".bsi");
      arrayList1.add(attribute0);
      arrayList1.add(attribute0);
      Instances instances2 = new Instances(instances0, 0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      arrayList1.addAll((Collection<? extends Attribute>) linkedList0);
      instances0.compactify();
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.compactify();
      Discretize discretize0 = new Discretize("]SZ'i25'f");
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.setDesiredWeightOfInstancesPerInterval(607.25599973276);
      Locale.getISOCountries();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 607.25599973276;
      doubleArray1[1] = 607.25599973276;
      doubleArray1[2] = 607.25599973276;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 607.25599973276;
      doubleArray2[1] = 607.25599973276;
      discretize0.listOptions();
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 607.25599973276;
      doubleArray2[4] = 607.25599973276;
      doubleArray2[5] = 607.25599973276;
      doubleArray2[6] = 607.25599973276;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5771892591223446
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("i%S12_ncsJ");
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = false;
      assertEquals(10, discretize0.getBins());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "i%S12_ncsJ";
      stringArray0[1] = "";
      stringArray0[2] = "i%S12_ncsJ";
      stringArray0[3] = "i%S12_ncsJ";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "i%S12_ncsJ";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "i%S12_ncsJ";
      Discretize.main(stringArray0);
      discretize0.m_NumBins = 3100;
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.attributeIndicesTipText();
      discretize0.setInvertSelection(true);
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setUseBinNumbers(false);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("u1do\"@-G/|}");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u1do\"@-G/|}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[0] = (byte)66;
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("u1do\"@-G/|}");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1214983158722167
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(607.25599973276);
      String[] stringArray0 = discretize0.getOptions();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 607.25599973276;
      doubleArray1[1] = 607.25599973276;
      doubleArray1[2] = 607.25599973276;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 607.25599973276;
      doubleArray2[1] = 607.25599973276;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 607.25599973276;
      doubleArray2[4] = 607.25599973276;
      Filter filter0 = Filter.makeCopy(discretize0);
      Filter.runFilter(filter0, stringArray0);
      doubleArray2[5] = 607.25599973276;
      doubleArray2[6] = 607.25599973276;
      doubleArray2[7] = 607.25599973276;
      Filter.runFilter(discretize0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      StringReader stringReader0 = new StringReader("Input instance to filter");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Input], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 834.61088017;
      doubleArray0[1] = (-1857.1013874338123);
      doubleArray0[2] = (-1857.1013874338123);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1857.1013874338123);
      doubleArray0[5] = (-1857.1013874338123);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-1857.1013874338123), doubleArray0);
      int[] intArray0 = new int[27];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 86;
      intArray0[3] = 86;
      intArray0[4] = 86;
      intArray0[5] = 86;
      intArray0[6] = 86;
      intArray0[7] = 86;
      intArray0[8] = 10;
      sparseInstance1.toString(10, 7);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1968526675));
      SparseInstance sparseInstance2 = new SparseInstance(1155.925704394205, doubleArray0, intArray0, 86);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[11];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(stringArray0[8], arrayList0, 1684);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1684);
      Instances instances2 = new Instances(instances0, (-1968526675));
      arrayList0.addAll((Collection<? extends Attribute>) arrayList1);
      instances2.compactify();
      instances2.compactify();
      Discretize discretize0 = new Discretize("u1do\"@-G/|}");
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = (-1958);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[11];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("s{Yp\b,g-");
      Filter filter0 = Filter.makeCopy(discretize0);
      discretize0.setUseEqualFrequency(false);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      StringReader stringReader0 = new StringReader("-");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[-], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2547.568611910666;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2547.568611910666;
      doubleArray0[3] = 654.8624565708844;
      doubleArray0[4] = 2547.568611910666;
      doubleArray0[5] = 2547.568611910666;
      doubleArray0[6] = 0.0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[2] = "2Chv|u4a;|*xPD24zE<";
      stringArray0[3] = ")ew<:Mmy";
      stringArray0[4] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[5] = "";
      stringArray0[6] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[7] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      Filter.runFilter(discretize0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      allFilter0.toString();
      StringReader stringReader0 = new StringReader("&4{");
      discretize0.getBinRangesString(4);
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[&4], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("wY-F|x/~");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("first-last");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.toString(86, 7);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 86;
      intArray0[2] = 86;
      intArray0[3] = (-1968526675);
      intArray0[4] = 86;
      intArray0[5] = 86;
      intArray0[6] = 7;
      intArray0[7] = (-1968526675);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(86, intArray0, 347);
      SparseInstance sparseInstance0 = new SparseInstance(7.0, doubleArray0, intArray0, 66);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      
      String string2 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string2);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[11];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(stringArray0[8], arrayList0, 1684);
      Instances instances1 = new Instances(".bsi", arrayList0, 1684);
      Attribute attribute0 = new Attribute(".bsi");
      arrayList0.add(attribute0);
      Instances instances2 = new Instances("date", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.poll();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      instances0.compactify();
      instances0.compactify();
      Discretize discretize0 = new Discretize("]SZ'i25'f");
      discretize0.listOptions();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("V");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2034.3342412601392);
      doubleArray0[1] = (-2034.3342412601392);
      doubleArray0[2] = (-2034.3342412601392);
      doubleArray0[3] = (-2034.3342412601392);
      doubleArray0[4] = (-2034.3342412601392);
      doubleArray0[5] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance((-2034.3342412601392), doubleArray0);
      discretize0.setDesiredWeightOfInstancesPerInterval((-650.652290885));
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize(" Val:");
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1054.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-1054.3), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("B");
      int[] intArray0 = new int[2];
      intArray0[0] = 3201;
      intArray0[1] = 2;
      discretize0.setAttributeIndicesArray(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 834.61088017;
      doubleArray0[1] = (-1857.1013874338123);
      doubleArray0[2] = (-1857.1013874338123);
      doubleArray0[1] = 0.0;
      doubleArray0[4] = (-1857.1013874338123);
      doubleArray0[5] = (-1857.1013874338123);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-1857.1013874338123), doubleArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 10;
      intArray1[1] = 86;
      sparseInstance0.toStringMaxDecimalDigits(10);
      intArray1[2] = 10;
      intArray1[3] = 86;
      intArray1[4] = 86;
      intArray1[5] = 86;
      intArray1[6] = 86;
      intArray1[7] = 86;
      intArray1[8] = 10;
      sparseInstance1.toString(86, 7);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray1, (-1968526675));
      SparseInstance sparseInstance2 = new SparseInstance(1155.925704394205, doubleArray0, intArray1, 86);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemInUtil.addInputLine("u1do\"@-G/|}");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u1do\"@-G/|}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "2Chv|u4a;|*xPD24zE<";
      String string1 = "";
      String string2 = null;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B");
      Discretize discretize0 = new Discretize("B");
      double[] doubleArray0 = new double[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.getInvertSelection();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getMakeBinary();
      int int0 = (-1286);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1286));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2034.3342412601392);
      DenseInstance denseInstance0 = new DenseInstance(4.8, doubleArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cpMyxKl\"";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      Discretize discretize0 = new Discretize("u1do\"@-G/|}");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Make resulting attributes binary.";
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      discretize0.getUseEqualFrequency();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2547.568611910666;
      doubleArray0[2] = 2547.568611910666;
      doubleArray0[3] = 2547.568611910666;
      doubleArray0[4] = 611.49551786818;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = null;
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Make resulting attributes binary.";
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      Discretize discretize1 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E[4X2f6ir+W");
      discretize0.setUseEqualFrequency(false);
      discretize1.invertSelectionTipText();
      discretize0.getBinRangesString((-1831));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize1.binsTipText();
      StringReader stringReader0 = new StringReader("q+%ID$z<|vP#D");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[q+], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[11];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(stringArray0[8], arrayList0, 1684);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1684);
      Attribute attribute0 = new Attribute(".bsi");
      arrayList1.add(attribute0);
      Instances instances2 = new Instances(instances0, 0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Instances instances3 = new Instances(instances1, 3);
      arrayList1.addAll((Collection<? extends Attribute>) arrayList2);
      instances3.compactify();
      instances1.compactify();
      Discretize discretize0 = new Discretize("@end");
      try { 
        discretize0.setInputFormat(instances3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemInUtil.addInputLine("u1do\"@-G/|}");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u1do\"@-G/|}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("-699");
      Filter.makeCopy(discretize0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((byte)66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("u1dK\"@-Y/|}");
      discretize0.m_MakeBinary = true;
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.setBins(1507);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances((String) null, arrayList0, 3259);
      // Undeclared exception!
      try { 
        instances0.renameAttribute(35, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.m_DefaultCols = "/eI";
      discretize0.useBinNumbersTipText();
      discretize0.invertSelectionTipText();
      discretize0.setAttributeIndices("l(N52I(C");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1825.8304015504498));
      assertEquals((-1825.8304015504498), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      arrayList1.addAll((Collection<? extends Attribute>) linkedList0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("idfIIU");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.m_NumBins = (-46);
      discretize0.setMakeBinary(true);
      discretize0.invertSelectionTipText();
      discretize0.useEqualFrequencyTipText();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      SystemInUtil.addInputLine("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.useBinNumbersTipText();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("B");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 834.61088017;
      doubleArray0[1] = (-1857.1013874338123);
      doubleArray0[2] = (-1857.1013874338123);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1857.1013874338123);
      doubleArray0[5] = (-1857.1013874338123);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-1857.1013874338123), doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 86;
      intArray0[2] = 10;
      intArray0[3] = 86;
      intArray0[4] = 86;
      intArray0[5] = 86;
      intArray0[6] = 86;
      intArray0[7] = 86;
      intArray0[8] = 10;
      sparseInstance1.toString(86, 7);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1968526675));
      SparseInstance sparseInstance2 = new SparseInstance(1155.925704394205, doubleArray0, intArray0, 86);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }
}
