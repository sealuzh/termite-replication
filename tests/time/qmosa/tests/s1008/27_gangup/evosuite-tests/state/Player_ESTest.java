/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:15:06 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(0, "9'b1N", "9'b1N", 10, 0);
      player0.setDead();
      player0.setMoney(0);
      player0.pack();
      player0.id = (-995);
      player0.getStrength();
      System.setCurrentTimeMillis(10);
      player0.type();
      System.setCurrentTimeMillis((-516L));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-1), "K]Wf0Zc>&,)j", "", (-1), 1);
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = player0.getIP();
      assertEquals("K]Wf0Zc>&,)j", string0);
      
      Player player1 = new Player(1);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(boolean0);
      
      player0.getName();
      player1.getX();
      float float0 = player0.getX();
      assertEquals((-1), player0.getPictureId());
      assertEquals(10.0F, float0, 0.01F);
      
      player1.getIP();
      player1.pack();
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertEquals(0, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("Player1", player1.getName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9454908168625717
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player1 = new Player();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.gangStrength();
      player0.pack();
      player1.setConnected(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      player1.setX(5);
      player0.setY((-610.81F));
      Player player2 = new Player(4);
      Player player3 = new Player((byte)0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 821);
      player3.gangStrength();
      player0.getSubparty();
      player0.getY();
      assertEquals((-610.81F), player0.getY(), 0.01F);
      
      player3.getX();
      player3.pack();
      assertEquals(821, player3.getPictureId());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.241862695362889
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.isDead();
      player0.setDead();
      Player player1 = new Player(4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (short)4919, (-1690));
      player0.setMoney(1958.4712F);
      Player player2 = new Player((-1546), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 3);
      player2.setDead();
      player2.isJoinOK(player1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player3 = new Player((-1546), (String) null, "", 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      player3.setY((-476.72192F));
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      player0.pack();
      assertEquals(1958.4712F, player0.getMoney(), 0.01F);
      
      player1.type();
      int int0 = player1.gangStrength();
      assertEquals((-1690), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9461162077318646
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      player0.isDead();
      player0.setDead();
      Player player1 = new Player(4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "gWs(Z8P8r>.s", (short)4919, (short)4919);
      player1.setMoney(0.0F);
      Player player2 = new Player((short)4919, "gWs(Z8P8r>.s", (-1546));
      player2.isJoinOK(player0, true);
      Player player3 = new Player((short)4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "@[=[zBmXD2XX6]}=7%}", (short)4919, 276);
      Party party0 = new Party((-18860));
      player0.type();
      boolean boolean0 = player0.isDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7846193848206715
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setJoinOK(player0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.gangStrength();
      byte[] byteArray1 = player0.pack();
      player0.setConnected(false);
      player0.isJoinOK(player0, false);
      File file0 = MockFile.createTempFile("Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(player0.isConnected());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9143872249830642
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player1 = new Player((short)4919, "Jr@:(", 10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setJoinOK(player1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Packable.GAME_STATE;
      player0.pack();
      player0.isJoinOK(player1, false);
      player1.setX(1.0F);
      Player player2 = new Player();
      player2.setY((short)4919);
      Player player3 = new Player((-1566));
      player0.isJoinOK(player2, false);
      Player player4 = new Player();
      player4.setY((-1566));
      player0.getY();
      player0.getX();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      float float0 = player1.getZ();
      assertEquals(1.0F, player1.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 239;
      Player player0 = new Player((-2463), "jp9=PO\"<K|b'`_K /", (String) null, 239);
      MockFile mockFile0 = new MockFile("jp9=PO\"<K|b'`_K /");
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-736), (String) null, (String) null, (-736), (-736));
      player0.setDead((-722L), true);
      player0.toString();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1761414031011608
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player();
      Player player2 = new Player(1);
      player1.setJoinOK(player2, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player3 = new Player((short)4919, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 10, (short)4919);
      player1.setJoinOK(player3, true);
      player0.gangStrength();
      player2.pack();
      player2.setConnected(false);
      player0.isJoinOK(player1, false);
      player0.reset(true);
      player2.getX();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player1.pack();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream1);
      boolean boolean0 = player2.isConnected();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9383113296830845
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "~}(7KrBJK";
      Player player0 = new Player(0, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "~}(7KrBJK", 0, 0);
      player0.setDead((long) 0, false);
      player0.reset(true);
      player0.getIP();
      player0.gangStrength();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)113;
      player0.unpack(byteArray0);
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party((short)4919);
      party0.id = 0;
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = player0.getX();
      assertEquals(10.0F, float1, 0.01F);
      
      int int1 = player0.type();
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(5, int1);
      assertEquals(0, player0.getPictureId());
      assertEquals((-1), player0.getId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1));
      Player player1 = new Player((short)4919);
      player0.setConnected(false);
      player1.add(player0);
      player1.getSubparty();
      player1.next = (Party) player0;
      player0.setZ((-1));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      int int0 = 377;
      filterOutputStream0.write((int) (short)4919);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 377);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      player0.gangStrength();
      player1.pack(dataOutputStream0);
      byte[] byteArray0 = new byte[0];
      int int1 = (-18860);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-18860), 1727);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.available();
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8875113783568844
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setJoinOK(player0, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = Packable.GAME_STATE;
      player0.pack();
      player0.isJoinOK(player0, false);
      player0.setX(0.0F);
      player0.setY(0.0F);
      Player player1 = new Player(5);
      player0.isJoinOK(player1, false);
      player0.setY(495.0536F);
      player1.getY();
      player1.getX();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** data is not of proper type!");
      float float0 = player0.getZ();
      assertEquals(0.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "~}(7KrBJK", 0, 0);
      Player player1 = new Player(4919, "A*SrOJ1Wzgb0}HMd", "CP`kJ\"zTu", (-1316));
      player0.next = (Party) player1;
      player0.setDead((long) 0, false);
      assertTrue(player0.isDead());
      
      player0.reset(false);
      player0.getIP();
      player0.getMoney();
      player0.getY();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      player0.unpack(byteArray0);
      player0.getTimeOfDeath();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0, ";", ";", 832, 0);
      Player player1 = new Player((-12320), "nt9,X", "nt9,X", 47);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party((short)4919);
      party0.id = 0;
      player0.boss = party0;
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      player0.setY(0.0F);
      Player player1 = new Player(0);
      player0.isJoinOK(player1, false);
      player1.getY();
      float float0 = player0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(0, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "~}(7KrBJK", 0, 0);
      player0.setDead(1715L, true);
      player0.reset(true);
      player0.getIP();
      player0.getMoney();
      player0.getY();
      byte[] byteArray0 = new byte[3];
      player0.setZ(0.0F);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      player0.getY();
      int int0 = player0.getPictureId();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 10;
      Player player0 = new Player((-1386), "", "", 10, 2);
      player0.gangStrength();
      Party party0 = new Party();
      party0.add(player0);
      player0.add(party0);
      player0.getZ();
      player0.getStrength();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      int int1 = (-18860);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1034354550763315
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(5);
      Player player1 = new Player();
      player1.setConnected(false);
      Player player2 = new Player(5);
      player0.add(player2);
      player0.getSubparty();
      player1.setZ((-1594.8354F));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      filterOutputStream0.write((int) (short)4919);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, (short)4919);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player0.gangStrength();
      player2.pack(dataOutputStream0);
      player2.setJoinOK(player0, false);
      player2.gangStrength();
      player2.pack();
      player1.setConnected(false);
      player1.isJoinOK(player2, false);
      player0.reset(true);
      Player player3 = new Player((-1293), "f0*0", 5);
      player3.getX();
      int int0 = player1.type();
      assertEquals((-1594.8354F), player1.getZ(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9683276135677734
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player1 = new Player(5);
      player0.setJoinOK(player1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.gangStrength();
      player1.pack();
      player1.setConnected(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      player0.isJoinOK(player0, true);
      player1.setX(5);
      player0.setY((-610.81F));
      Player player2 = new Player(4);
      Player player3 = new Player((byte)0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 821);
      player3.gangStrength();
      player0.getSubparty();
      player3.getX();
      player3.pack();
      // Undeclared exception!
      try { 
        player1.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      Player player1 = new Player();
      player1.id = 3000;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-120);
      player1.unpack(byteArray0);
      Player player2 = new Player(0, "", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 1547);
      player0.setDead();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)5;
      player2.setDead((long) (byte)0);
      player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      
      Player player3 = new Player(0, "", 0);
      player3.getY();
      player1.unpack(byteArray1);
      String string0 = player2.getIP();
      assertEquals("", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1b");
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setJoinOK(player0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player(2633, "Player.unpack(): *** WARNING *** data is not of proper type!", "5", (short)4919);
      player0.setJoinOK(player1, true);
      assertEquals(4919, player1.getPictureId());
      assertEquals("Player.unpack(): *** WARNING *** data is not of proper type!", player1.getIP());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Player player2 = new Player();
      assertEquals(1, player2.getStrength());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertTrue(player2.isConnected());
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertFalse(player2.isDead());
      assertEquals(0, player2.getPictureId());
      assertEquals("Player-1", player2.getName());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(0, "Beb|;j%S$| N*<[=.g", "yfDlU:7\"5}", (-1835));
      player0.pack();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "'9o|N f,";
      String string1 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-1890), "state.Player$JoinInfo", "state.Player$JoinInfo", (-1890), (-826));
      float float0 = 0.0F;
      player0.reset(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        DataInputStream.readUTF((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(2, "omK[m4;UFZo", 2);
      player0.setDead();
      player0.getTimeOfDeath();
      player0.type();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)102;
      player0.unpack(byteArray0);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((-619), "", "n+GJb52?fncP", (-37));
      player0.getY();
      player0.id = (-619);
      player0.setY((-619));
      player0.setX(1.0F);
      player0.getStrength();
      player0.setMoney((-37));
      Party party0 = player0.boss;
      player0.boss = null;
      player0.setY(3375.5F);
      player0.getName();
      int int0 = player0.type();
      assertEquals(3375.5F, player0.getY(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(1339, " ", "", 1339, 5);
      player0.setMoney(5);
      player0.setDead();
      player0.setDead(0L, true);
      player0.getSubparty();
      player0.head = null;
      player0.reset(true);
      player0.getSubparty();
      player0.setConnected(true);
      byte[] byteArray0 = new byte[1];
      player0.unpack(byteArray0);
      byteArray0[0] = (byte)3;
      player0.unpack(byteArray0);
      player0.id = (int) (byte)3;
      player0.setZ(0.0F);
      player0.getStrength();
      player0.getIP();
      player0.setDead((long) 5, true);
      player0.setDead();
      player0.toString();
      player0.isConnected();
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      player0.setY((short)4919);
      Player player1 = new Player(5643);
      Player player2 = new Player();
      player2.setConnected(false);
      player2.getY();
      player1.getX();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** data is not of proper type!");
      player0.getZ();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Party party0 = new Party(5);
      Player player0 = new Player(5, "", "~NtWB8", (-46));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      File file0 = MockFile.createTempFile("~NtWB8", "~NtWB8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) player0;
      objectArray0[1] = (Object) player0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) dataOutputStream0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      DataOutputStream dataOutputStream2 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream3 = new DataOutputStream(printStream0);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Party party0 = new Party(5);
      Player player0 = new Player(5, "", "~NtWB8", 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals("\u00137\u0005\u0000\u0001\u0000\u0000A \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006~NtWB8", byteArrayOutputStream0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Player player0 = new Player((-2073), "Dam8@82x`dg/8", "Dam8@82x`dg/8", (-1427), (-1427));
          player0.toString();
          byte[] byteArray0 = new byte[6];
          byteArray0[0] = (byte)31;
          Player player1 = new Player(0);
          player0.next = (Party) player1;
          byteArray0[1] = (byte)98;
          byteArray0[2] = (byte) (-52);
          byteArray0[3] = (byte)4;
          byteArray0[4] = (byte)1;
          byteArray0[5] = (byte) (-28);
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
          DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
          dataInputStream0.close();
          player0.unpack(dataInputStream0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor79.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-42);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-2463), "jp9=PO\"<K|b'`_K /", (String) null, 239);
      player0.unpack(byteArray0);
      player0.getName();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(239, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(816, "", "state.Party", (-1));
      player0.setY(816);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Player player1 = new Player(1, "gui.ModuleBrowserDialog$ModuleFilter", 1240);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.id = (int) (short)4919;
      player1.setConnected(true);
      player1.setX((short)4919);
      player1.setZ((short)4919);
      player0.next = (Party) player1;
      player0.getZ();
      player1.setDead((long) 1, false);
      player0.getZ();
      player1.getX();
      player0.getX();
      player1.getMoney();
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis((-2271L));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Player player0 = new Player(4919, (String) null, (String) null, (-2982), (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9454908168625713
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-257), "", 0);
      player0.setDead();
      Player player1 = new Player((-257), "", (short)4919);
      player1.gangStrength();
      player1.setZ((short)4919);
      player0.remove(player1);
      player0.setDead((long) 0);
      player0.getIP();
      player0.getIP();
      player0.setMoney((-1838.8121F));
      player0.getX();
      player0.gangStrength();
      player1.getPictureId();
      player1.setDead(3091L, false);
      int int0 = player1.getStrength();
      assertTrue(player1.isDead());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(1044, " ", "=?*/L+)QEb14/C#.", (-955));
      player0.setDead((long) (-955), false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      player0.unpack(dataInputStream0);
      player0.setConnected(true);
      player0.setX(1527.0F);
      player0.getZ();
      player0.getPictureId();
      Player player1 = new Player(0);
      player0.remove(player1);
      player1.reset(false);
      player0.isJoinOK(player1, true);
      player1.setDead(0L);
      player0.getZ();
      player1.isConnected();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("f>", "=?*/L+)QEb14/C#.", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player((-1941), "state.Player$JoinInfo", "state.Player$JoinInfo", (-1941), (-826));
      player0.reset(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      player0.setY(0.0F);
      player0.getMoney();
      player0.getPictureId();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.id = 0;
      player0.boss = party0;
      player0.boss = party0;
      player0.setY(0);
      Player player1 = new Player(0);
      player1.getStrength();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-2463), ">K_7EQ|xk0", (String) null, 239);
      MockFile mockFile0 = new MockFile(">K_7EQ|xk0");
      player0.setX(239);
      player0.setY(239);
      Player player1 = new Player(239);
      player1.gangStrength();
      player1.setX(239);
      player0.isJoinOK(player1, false);
      player0.getY();
      float float0 = player1.getX();
      assertEquals(239.0F, float0, 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((-512), "i.CN02", "", 0, (-2055));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-1), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-1));
      Party party0 = new Party();
      party0.next = (Party) player0;
      player0.remove(party0);
      party0.getSubparty();
      party0.add(player0);
      party0.remove(player0);
      party0.id = 0;
      player0.setDead((-1864L));
      player0.setY((-1));
      player0.setDead();
      player0.add(party0);
      player0.setX(1417.3F);
      player0.setX(1417.3F);
      player0.setDead((long) (-1), true);
      player0.getTimeOfDeath();
      player0.setDead((long) (-1));
      player0.setDead((long) (-1), true);
      player0.setY(1417.3F);
      player0.setConnected(true);
      assertEquals(1417.3F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party((short)4919);
      party0.id = 0;
      player0.boss = party0;
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      player0.setY(0);
      Player player1 = new Player(0);
      player1.gangStrength();
      player0.isJoinOK(player1, true);
      player1.getY();
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }
}
