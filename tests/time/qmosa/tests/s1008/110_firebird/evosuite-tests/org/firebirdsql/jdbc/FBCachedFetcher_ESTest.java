/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:05:56 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.361061809768637
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      int int1 = FBFetcher.MAX_FETCH_ROWS;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate0);
      predicate6.negate();
      Object object1 = new Object();
      Object object2 = new Object();
      predicate6.negate();
      predicate1.test(object2);
      predicate4.test(object1);
      predicate6.negate();
      linkedList0.removeIf(predicate5);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6219881584552325
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      Integer integer0 = new Integer(30);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate0.negate();
      predicate1.or(predicate3);
      predicate2.and(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate4);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5949292641138637
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      Integer integer0 = new Integer(30);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate1.or(predicate3);
      predicate2.and(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate4);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.first();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.546254822351039
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      Integer integer0 = new Integer(30);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate<byte[][]> predicate1 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Object object0 = new Object();
      Predicate.isEqual(object0);
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("%");
      jMXPrincipal2.toString();
      predicate3.test(jMXPrincipal2);
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("\"v\"A)i");
      Predicate.isEqual((Object) predicate1);
      predicate3.and(predicate2);
      Object object1 = new Object();
      Predicate.isEqual((Object) "\"v\"A)i");
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jMXPrincipal1);
      predicate4.or(predicate3);
      predicate3.negate();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(30);
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.432739627880947
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      Integer integer0 = new Integer(30);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate1.or(predicate3);
      predicate2.and(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate4);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.343679987341
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      Integer integer0 = new Integer(400);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to tFe row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "JnV3xQNS{ch");
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate1.or(predicate2);
      predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate6.and(predicate7);
      predicate2.test(predicate6);
      predicate4.or(predicate5);
      Object object0 = new Object();
      predicate6.negate();
      predicate7.test(predicate6);
      predicate3.negate();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.next();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5711825186932167
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      Integer integer0 = new Integer(30);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate1.or(predicate3);
      predicate2.and(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate4);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1468025731695666
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      int int0 = 0;
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4918033770592505
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      Integer integer0 = new Integer(400);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("You cannot position to the row 0 with absolute() method.");
      Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate0.negate();
      predicate1.or(predicate3);
      predicate2.and(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate4);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer((byte)95);
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.removeFirstOccurrence(integer0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.poll();
      linkedList2.removeAll(linkedList1);
      linkedList2.add((String) null);
      linkedList2.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.poll();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.offer("ISO8859_8");
      linkedList4.add("ISO8859_8");
      SynchronousQueue<FBBlobField> synchronousQueue0 = new SynchronousQueue<FBBlobField>();
      linkedList0.add(byteArray0);
      linkedList5.containsAll(linkedList3);
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3602558668880493
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher1.insertRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher2.relative((-796));
      boolean boolean0 = fBCachedFetcher1.first();
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.108619830332818
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      int int1 = FBFetcher.MAX_FETCH_ROWS;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Integer integer0 = new Integer(100);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      Integer integer1 = new Integer(100);
      Integer integer2 = new Integer(2045);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      linkedList2.add((byte[][]) null);
      fBCachedFetcher0.first();
      assertTrue(fBCachedFetcher0.isFirst());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher1.absolute(100);
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Consumer<byte[][]> consumer1 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.removeFirstOccurrence(fBResultSet0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.poll();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedBlockingQueue<FBCachedLongVarCharField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedLongVarCharField>();
      linkedList4.removeAll(linkedBlockingQueue0);
      linkedList3.add((String) null);
      linkedList2.containsAll(linkedBlockingQueue0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList2.poll();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList3.offer((String) null);
      linkedList4.add((String) null);
      SynchronousQueue<FBBlobField> synchronousQueue0 = new SynchronousQueue<FBBlobField>();
      linkedList1.add((byte[][]) null);
      linkedList4.containsAll(linkedList3);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList5.sort(comparator0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList8, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      int int1 = FBFetcher.MAX_FETCH_ROWS;
      linkedList0.add((byte[][]) null);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate0);
      predicate6.negate();
      Object object1 = new Object();
      Object object2 = new Object();
      predicate1.test(object2);
      Predicate.isEqual((Object) linkedList0);
      predicate4.negate();
      Predicate.isEqual((Object) predicate5);
      linkedList0.removeIf(predicate0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      boolean boolean0 = fBCachedFetcher0.absolute(400);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer((byte)95);
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.removeFirstOccurrence(integer0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.poll();
      linkedList2.removeAll(linkedList1);
      linkedList2.iterator();
      linkedList2.add((String) null);
      linkedList2.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.poll();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.offer("ISO8859_8");
      linkedList4.add("ISO8859_8");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Integer integer1 = new Integer(1777);
      Integer integer2 = new Integer(0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(360);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2471949977916745
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[16][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      byteArray0[1] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-40);
      byteArray0[2] = byteArray1;
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray3 = new byte[1][7];
      byteArray3[0] = byteArray2;
      linkedList1.add(byteArray3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow(byteArray3);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate.isEqual((Object) null);
      linkedList1.removeIf(predicate3);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-1205));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.372049101956355
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow(byteArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "JnV3xQNS{ch");
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate6.test("");
      predicate4.or(predicate6);
      Object object2 = new Object();
      predicate5.negate();
      predicate3.test(object2);
      predicate2.negate();
      fBCachedFetcher0.isFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer((byte) (-40));
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.poll();
      linkedList2.poll();
      linkedList1.add((String) null);
      LinkedList<String> linkedList3 = new LinkedList<String>(linkedList2);
      linkedList2.containsAll(linkedList3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2294477183695767
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[16];
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      Integer.valueOf(1005);
      Integer integer0 = new Integer(25165824);
      linkedList0.toArray();
      linkedList0.add(byteArray0);
      linkedList0.clear();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSingletonResult(true);
      isc_stmt_handle_impl0.setUpdateCount((-1037));
      isc_stmt_handle_impl0.setRsr_id_ptr(1, (-818));
      isc_stmt_handle_impl0.setSelectCount((-2287));
      Integer integer1 = new Integer((-1037));
      Integer integer2 = new Integer(92);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add(byteArray0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.absolute((-818));
      boolean boolean0 = fBCachedFetcher0.previous();
      boolean boolean1 = fBCachedFetcher0.last();
      assertTrue(boolean1 == boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.00143833807112
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.absolute(204);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.relative(100);
      fBCachedFetcher1.setFetchSize(100);
      fBCachedFetcher0.absolute(204);
      fBCachedFetcher0.getRowNum();
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.next();
      fBCachedFetcher1.isEmpty();
      fBCachedFetcher1.isLast();
      fBCachedFetcher1.isFirst();
      fBCachedFetcher2.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer((byte)95);
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.removeFirstOccurrence(integer0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.poll();
      linkedList2.removeAll(linkedList1);
      linkedList2.add((String) null);
      linkedList2.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.poll();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.offer("ISO8859_8");
      linkedList4.add("ISO8859_8");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Integer integer1 = new Integer(1777);
      Integer integer2 = new Integer(0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)48;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte)93);
      integerArray0[0] = integer0;
      Integer.getInteger("GbR5XJ01(pl");
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integerArray0[1];
      Integer integer3 = new Integer((byte)48);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      Integer integer4 = new Integer(400);
      Integer integer5 = new Integer((int) integerArray0[0]);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray2 = new byte[0][4];
      linkedList0.add(byteArray2);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      byte[][] byteArray0 = new byte[4][1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-78);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)120;
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte)74;
      byteArray2[3] = (byte) (-78);
      byteArray2[4] = (byte) (-78);
      byteArray2[5] = (byte) (-120);
      byteArray2[6] = (byte) (-120);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-78);
      byteArray3[1] = (byte) (-52);
      byteArray3[2] = (byte) (-78);
      byteArray3[3] = (byte) (-78);
      byteArray3[4] = (byte) (-78);
      byteArray3[5] = (byte)120;
      byteArray3[6] = (byte) (-78);
      byteArray3[7] = (byte) (-78);
      byteArray3[8] = (byte) (-120);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-52);
      byteArray4[1] = (byte) (-52);
      byteArray4[2] = (byte)74;
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte) (-120);
      byteArray4[5] = (byte)120;
      byteArray4[6] = (byte) (-78);
      byteArray4[7] = (byte)74;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray5 = new byte[2][8];
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte) (-1);
      byteArray6[1] = (byte)35;
      byteArray6[2] = (byte)1;
      byteArray6[3] = (byte) (-1);
      byteArray5[0] = byteArray6;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)93;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte)93);
      integerArray0[0] = integer0;
      Integer.getInteger("GbR5XJ01(pl");
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integerArray0[1];
      Integer integer3 = new Integer((byte)48);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add(byteArray0);
      linkedList2.sort((Comparator<? super byte[][]>) null);
      Integer integer4 = new Integer((byte)48);
      Integer integer5 = new Integer((byte)48);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList2.add(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5812010643126233
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.absolute(214);
      fBCachedFetcher0.absolute((-950));
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.close();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer(4);
      Integer.getInteger("sS^");
      Integer integer1 = new Integer(1596);
      Integer integer2 = new Integer((byte) (-40));
      Integer integer3 = new Integer((byte) (-40));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      Integer integer4 = new Integer((byte) (-40));
      Integer integer5 = new Integer(92);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      DummyCallableStatementMetaData dummyCallableStatementMetaData0 = new DummyCallableStatementMetaData();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getOutSqlda();
      AbstractJavaGDSImpl.calculateBLR((XSQLDA) null);
      GDSType.getType("PURE_JAVA");
      fBCachedFetcher0.isAfterLast();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[16];
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      Integer.valueOf(1005);
      Integer integer0 = new Integer(25165824);
      linkedList0.toArray();
      linkedList0.add(byteArray0);
      linkedList0.clear();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setUpdateCount((-1037));
      isc_stmt_handle_impl0.setRsr_id_ptr(1, (-818));
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      isc_stmt_handle_impl0.setSelectCount((-2287));
      isc_stmt_handle_impl0.setStatementType(1386);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((GDSHelper) null, 70, (-38), isc_stmt_handle_impl0, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0069724918931833
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)95;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)95;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)95;
      byteArray0[0] = byteArray3;
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      linkedList1.add((String) null);
      linkedList1.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      byte[][] byteArray4 = new byte[1][7];
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-40));
      integerArray0[0] = integer0;
      linkedList0.add(byteArray4);
      linkedList2.toArray();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)108;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)107;
      byteArray2[1] = (byte)108;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)107;
      byteArray2[4] = (byte)61;
      byteArray2[5] = (byte)107;
      byteArray2[6] = (byte)107;
      byteArray2[7] = (byte)108;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)74;
      byteArray3[1] = (byte)107;
      byteArray3[3] = (byte)1;
      byteArray3[4] = (byte)108;
      byteArray3[5] = (byte)61;
      byteArray3[6] = (byte)74;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)74;
      byteArray4[1] = (byte)107;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[0];
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte)108;
      byteArray7[1] = (byte) (-52);
      byteArray7[2] = (byte)61;
      byteArray7[3] = (byte)61;
      byteArray7[4] = (byte)1;
      byteArray7[5] = (byte)1;
      byteArray7[6] = (byte)1;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte)107;
      byteArray8[1] = (byte)61;
      byteArray8[2] = (byte)108;
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byte[][] byteArray1 = new byte[4][4];
      byteArray1[0] = byteArray0;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-40);
      byteArray2[1] = (byte)95;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-40);
      byteArray1[1] = byteArray2;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      linkedList0.add(byteArray1);
      byteArray0[0] = (byte)0;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)95;
      byteArray3[2] = (byte)95;
      linkedList0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      linkedList1.add((String) null);
      linkedList1.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.poll();
      linkedList1.add((String) null);
      linkedList3.containsAll(linkedList2);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList5.sort(comparator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)95;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.valueOf(1596);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1678);
      Integer.remainderUnsigned(536870912, (byte) (-40));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte) (-40));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.containsAll(linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<f");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate3.negate();
      Predicate.isEqual((Object) predicate2);
      linkedList0.removeIf(predicate4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((-797));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-40);
      Integer integer0 = new Integer((byte)95);
      linkedList0.add(byteArray0);
      linkedList0.toArray();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.removeFirstOccurrence(integer0);
      linkedList1.poll();
      SynchronousQueue<FBCachedLongVarCharField> synchronousQueue0 = new SynchronousQueue<FBCachedLongVarCharField>();
      linkedList1.removeAll(synchronousQueue0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("ig4ZB7tA@c$s=y;,B");
      linkedList1.containsAll(synchronousQueue0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.poll();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.offer((String) null);
      linkedList1.add("");
      SynchronousQueue<FBBlobField> synchronousQueue1 = new SynchronousQueue<FBBlobField>();
      linkedList3.add(byteArray0);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.containsAll(synchronousQueue1);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.280365134991917
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      byte[][] byteArray0 = new byte[2][8];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)35;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
