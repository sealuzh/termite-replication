/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:10:37 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1140059550872974
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "ALTER TABLE ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ALTER TABLE ");
      String[] stringArray0 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "J4att!0~yXW8u";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ALTER TABLE ", true, defaultDBTable0, (String[]) null, defaultDBTable1, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray1);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, (-1857), "(J4att!0~yXW8u)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J4att!0~yXW8u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.store.raw.data.EncryptData");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ntiveSQL", dBSchema0);
      Object object0 = new Object();
      String string0 = "+,r$]g;hQq8.[~2]%";
      SQLUtil.normalize("+,r$]g;hQq8.[~2]%", false);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(511, "org.apache.derby.impl.store.raw.data.EncryptData");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 511
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0856283886245763
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T}.F@=";
      stringArray0[1] = "T}.F@=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("_8X.n@C*<*oE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnNames(stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "T}.F@=");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "()");
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) nameSpec0);
      stringBuilder1.insert(0, false);
      SQLUtil.addRequiredCondition("T}.F@=", stringBuilder1);
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("falseT}.F@=()IF_REPRODUCIBLE and T}.F@=CONSTRAINT _8X.n@C*<*oE ", stringBuilder2.toString());
      assertEquals("falseT}.F@=()IF_REPRODUCIBLE and T}.F@=CONSTRAINT _8X.n@C*<*oE ", stringBuilder3.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1751396805614145
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("org.apache.derby.impl.store.raw.xact.XactId");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      SQLUtil.removeComments(">B%Q*dHMG");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.apache.derby.impl.store.raw.xact.XactId", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-102));
      SQLUtil.addOptionalCondition("-", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "-", (-102), (-102));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -102, end -102, s.length() 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.46769983754709
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{puJMR6HB?";
      stringArray0[1] = "{puJMR6HB?";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("drop indexx\"`u+g[/uq", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT {puJMR6HB? FOREIGN KEY ({puJMR6HB?, {puJMR6HB?) REFERENCES null({puJMR6HB?, {puJMR6HB?)");
      stringBuilder0.appendCodePoint(10);
      stringBuilder0.reverse();
      TableContainer tableContainer0 = new TableContainer("alter indexdrop index", defaultDBTable0);
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("alter indexdrop index", defaultDBTable0);
      TableContainer tableContainer2 = new TableContainer("alter indexdrop index", defaultDBTable0);
      tableContainer0.getTable("{puJMR6HB?");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("\n)?BH6RMJup{ ,?BH6RMJup{(llun SECNEREFER )?BH6RMJup{ ,?BH6RMJup{( YEK NGIEROF ?BH6RMJup{ TNIARTSNOCCONSTRAINT {puJMR6HB? ", stringBuilder0.toString());
      
      Character character0 = new Character('p');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'p'", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0190860938828774
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "($x[-Tu>vl8au");
      SQLUtil.normalize("($x[-Tu>vl8au", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "($ x [ - Tu > vl8au";
      stringArray0[1] = "($ x [ - Tu > vl8au";
      stringArray0[2] = "($x[-Tu>vl8au";
      stringArray0[3] = "($ x [ - Tu > vl8au";
      stringArray0[4] = "($ x [ - Tu > vl8au";
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string0 = "PGui#-P\\8x5''U";
      DBSchema dBSchema0 = new DBSchema("p|jvmCG<C0_tZ95o5");
      String string1 = "<invalid>";
      dBSchema0.getTable("<invalid>");
      DBDataType dBDataType0 = DBDataType.getInstance(1917, "p|jvmCG<C0_tZ95o5");
      Integer integer0 = Integer.getInteger("PGui#-P8x5''U", 1917);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PGui#-P8x5''U", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string2 = "/*";
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.384725757834036
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop indexx\"`u+g[/uq");
      defaultDBTable0.getIndex("'vM={'f");
      stringBuilder0.reverse();
      TableContainer tableContainer0 = new TableContainer("e1", defaultDBTable0);
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("e1", tableContainer0);
      TableContainer tableContainer2 = new TableContainer("kgL`ENN^hJk", tableContainer1);
      tableContainer2.getTable("kgL`ENN^hJk");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3183056868918186
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J4att!0~yXW8u");
      SQLUtil.removeComments("u3h+'ueop:");
      String string0 = "cRf`";
      SQLUtil.parseColumnTypeAndSize("cRf`");
      String string1 = "create materialized view";
      StringBuilder stringBuilder0 = new StringBuilder("create materialized view");
      SQLUtil.mutatesStructure("A[)ken");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("create unique index");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isDML("executve\u0146");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4627273115485182
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      SQLUtil.normalize("D#", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isDDL("_8X.n@C*<*oE");
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.h2.index.ViewIndex$CostElement");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]C", defaultDBTable0, 17, "D #");
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis((-399L));
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("3bO~", "mQJ3I$M_=SC,_", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("D#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'D#'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "ouy]M]";
      SQLUtil.normalize("ouy]M]", false);
      String string1 = "UPDATE_RULE";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UPDATE_RULE";
      stringArray0[1] = "ouy]M]";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6161405509542
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      boolean boolean0 = SQLUtil.isDML("Specified savepoint was not obtained from this connection.");
      assertFalse(boolean0);
      
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JP['!}B", defaultDBTable0, 3601, "alter session");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.derby.impl.store.raw.xact.XactId";
      stringArray0[1] = "JP['!}B";
      stringArray0[2] = "Specified savepoint was not obtained from this connection.";
      stringArray0[3] = "alter session";
      stringArray0[4] = "JP['!}B";
      stringArray0[5] = "org.apache.derby.impl.store.raw.xact.XactId";
      stringArray0[6] = "org.apache.derby.impl.store.raw.xact.XactId";
      stringArray0[7] = "Specified savepoint was not obtained from this connection.";
      stringArray0[8] = "Specified savepoint was not obtained from this connection.";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "JP['!}B", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("alter table");
      dBPrimaryKeyConstraint0.setTable(defaultDBTable1);
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (org.apache.derby.impl.store.raw.xact.XactId, JP['!}B, Specified savepoint was not obtained from this connection., alter session, JP['!}B, org.apache.derby.impl.store.raw.xact.XactId, org.apache.derby.impl.store.raw.xact.XactId, Specified savepoint was not obtained from this connection., Specified savepoint was not obtained from this connection.)", string0);
      
      String string1 = defaultDBColumn0.toString();
      assertEquals("JP['!}B : ALTER SESSION", string1);
      
      String string2 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (org.apache.derby.impl.store.raw.xact.XactId, JP['!}B, Specified savepoint was not obtained from this connection., alter session, JP['!}B, org.apache.derby.impl.store.raw.xact.XactId, org.apache.derby.impl.store.raw.xact.XactId, Specified savepoint was not obtained from this connection., Specified savepoint was not obtained from this connection.)", string2);
      
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string3 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("JP['!}B, JP['!}B, JP['!}B, JP['!}B, JP['!}B", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.store.raw.xact.XactId");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId", dBSchema0);
      DBDataType.getInstance((-1640), "org.apache.derby.impl.store.raw.xact.XactId");
      Object object0 = new Object();
      SQLUtil.normalize("truncate(drdaid =", true);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('x');
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-946), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -946
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1hP#P";
      stringArray0[1] = "B~";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("1hP#P = '1hP#P' AND B~ = 'B~'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.databene.jdbacl.SQLUtil", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.addColumnName((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (1hP#P, B~, )", string1);
      
      String string2 = SQLUtil.join("#", "Ai*K", stringArray0, "#", "B~", stringArray0);
      assertEquals("# join # as B~ on Ai*K.1hP#P = B~.1hP#P and Ai*K.B~ = B~.B~", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBSchema dBSchema0 = new DBSchema("p|jvmCG<C0_tZ95o5");
      String string0 = "<invalid>";
      dBSchema0.getTable("<invalid>");
      DBDataType dBDataType0 = DBDataType.getInstance(1917, "p|jvmCG<C0_tZ95o5");
      Integer integer0 = Integer.getInteger("PGui#-P8x5''U", 1917);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PGui#-P8x5''U", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<invalid>";
      stringArray0[1] = "<invalid>";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Booting Module   ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ALTER TABLE ";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ALTER TABLE ");
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ALTER TABLE ");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table Booting Module   ", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("ALTER TABLE ", stringArray0);
      assertEquals("ALTER TABLE .ALTER TABLE , ALTER TABLE .null", string1);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ALTER TABLE .ALTER TABLE , ALTER TABLE .null", true, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"ALTER TABLE .ALTER TABLE , ALTER TABLE .null\" FOREIGN KEY (ALTER TABLE , ) REFERENCES Booting Module   (ALTER TABLE , )", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4340184863848724
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = "_/BH51w59mmF/PVtN`@";
      stringArray0[3] = "";
      SQLUtil.parseColumnTypeAndSize("create materialized view");
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.mutatesStructure("exec");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("create materialized view");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isDML("ASC");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("_/BH51w59mmF/PVtN`@");
      assertNull(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.324619696311217
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      SQLUtil.isDML("Specified savepoint was not obtained from this connection.");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isDML("JP['!}B");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callorg.databene.jdbacl.sqlutil");
      assertNull(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lj0d_/a9o29Z,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lj0d_/a9o29Z,", defaultDBTable0, (-3370), "lj0d_/a9o29Z,");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lj0d_/a9o29Z,";
      stringArray0[1] = "lj0d_/a9o29Z,";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "lj0d_/a9o29Z,";
      stringArray1[1] = "lj0d_/a9o29Z,";
      stringArray1[2] = "lj0d_/a9o29Z,";
      String string0 = SQLUtil.renderColumnListWithTableName("lj0d_/a9o29Z,", stringArray1);
      assertEquals("lj0d_/a9o29Z,.lj0d_/a9o29Z,, lj0d_/a9o29Z,.lj0d_/a9o29Z,, lj0d_/a9o29Z,.lj0d_/a9o29Z,", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (lj0d_/a9o29Z,, lj0d_/a9o29Z,)", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      SQLUtil.removeComments("(zn9<-Eja(DcE9");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(zn9<-Eja(DcE9";
      stringArray0[1] = "(zn9<-Eja(DcE9";
      stringArray0[2] = "x";
      stringArray0[3] = "execzuc^lgg}mxagmej";
      stringArray0[4] = "CONSTRAINT ";
      stringArray0[5] = "(zn9<-Eja(DcE9";
      stringArray0[6] = "x";
      stringArray0[7] = "execzuc^lgg}mxagmej";
      stringArray0[8] = "execzuc^lgg}mxagmej";
      String string0 = SQLUtil.renderColumnListWithTableName("UQ's6maX%-QNr4`", stringArray0);
      assertEquals("UQ's6maX%-QNr4`.(zn9<-Eja(DcE9, UQ's6maX%-QNr4`.(zn9<-Eja(DcE9, UQ's6maX%-QNr4`.x, UQ's6maX%-QNr4`.execzuc^lgg}mxagmej, UQ's6maX%-QNr4`.CONSTRAINT , UQ's6maX%-QNr4`.(zn9<-Eja(DcE9, UQ's6maX%-QNr4`.x, UQ's6maX%-QNr4`.execzuc^lgg}mxagmej, UQ's6maX%-QNr4`.execzuc^lgg}mxagmej", string0);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "org.apache.derby.impl.store.raw.xact.XactId";
      stringArray1[1] = "#UBpDk:_1H(r.";
      stringArray1[2] = "org.apache.derby.impl.store.raw.xact.XactId";
      stringArray1[3] = "CONSTRAINT ";
      stringArray1[4] = "(zn9<-Eja(DcE9";
      stringArray1[5] = "execzuc^lgg}mxagmej";
      stringArray1[6] = "V1";
      stringArray1[7] = "CONSTRAINT ";
      stringArray1[8] = "execzuc^lgg}mxagmej";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execzuc^lgg}mxagmej", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execzuc^lgg}mxagmej UNIQUE (org.apache.derby.impl.store.raw.xact.XactId, #UBpDk:_1H(r., org.apache.derby.impl.store.raw.xact.XactId, CONSTRAINT , (zn9<-Eja(DcE9, execzuc^lgg}mxagmej, V1, CONSTRAINT , execzuc^lgg}mxagmej)", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jca.FBManagedConnection$3");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.firebirdsql.jca.FBManagedConnection$3";
      stringArray0[1] = "org.firebirdsql.jca.FBManagedConnection$3";
      stringArray0[2] = "";
      stringArray0[3] = "cRxx{7fvs";
      stringArray0[4] = "left";
      stringArray0[5] = "org.firebirdsql.jca.FBManagedConnection$3";
      stringArray0[6] = "org.firebirdsql.jca.FBManagedConnection$3";
      stringArray0[7] = "org.firebirdsql.jca.FBManagedConnection$3";
      stringArray0[8] = "org.firebirdsql.jca.FBManagedConnection$3";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("zuC^lgg}MxAGmeJ");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isProcedureCall("org.databene.commons.file.PatternFileFilter");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3602558668880493
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog("select into");
      DBSchema dBSchema0 = new DBSchema("J4att!0~yXW8u");
      dBSchema0.getTables();
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ntiveSQL", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder("ntiveSQL");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Boolean boolean0 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("/*");
      boolean boolean1 = SQLUtil.isDML("ntiveSQL");
      SQLUtil.isDML("J4att!0~yXW8u");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2321414795949732
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("~/3ztsIaso`6F<", true);
      assertEquals("~ / 3ztsIaso ` 6F <", string0);
      
      boolean boolean0 = SQLUtil.isDDL("UPDATE_RULE");
      VersionNumber versionNumber0 = VersionNumber.valueOf("~/3ztsIaso`6F<");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("~ / 3ztsIaso ` 6F <", "~/3ztsIaso`6F<", versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UPDATE_RULE");
      boolean boolean1 = SQLUtil.isDML("UPDATE_RULE");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3012216765047424
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      SQLUtil.isDML("Specified savepoint was not obtained from this connection.");
      SQLUtil.mutatesStructure("Specified savepoint was not obtained from this connection.");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("Specified savepoint was not obtained from this connection.");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isDML("Specified savepoint was not obtained from this connection.");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ASC");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("delete(zn9<-");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = "_/BH51w59mmF/PVtN`@";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBSchema dBSchema0 = new DBSchema("ddjM }-'q?'d-a7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" on ", dBSchema0);
      DBDataType.getInstance((-1640), "\"el");
      Object object0 = new Object();
      SQLUtil.normalize("B!'gBuT+ag&wD]I8", false);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(39, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBDataType.getInstance((-1640), "J4att!0~yXW8u");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("select into");
      SQLUtil.renderColumnListWithTableName("!P[<v", stringArray0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll((-345L), timeUnit0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string0 = "PGui#-P\\8x5''U";
      String string1 = "p|jvmCG<C0_tZ95o5";
      DBSchema dBSchema0 = new DBSchema("p|jvmCG<C0_tZ95o5");
      String string2 = "<invalid>";
      int int0 = 1917;
      DBDataType.getInstance(1917, "p|jvmCG<C0_tZ95o5");
      Integer.getInteger("PGui#-P8x5''U", 1917);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.171417801900708
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "or.databenY.com1ons.file.PattenFileFilter";
      SQLUtil.mutatesStructure("zuC^lgg}MxAGmeJ");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("zuC^lgg}MxAGmeJ");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isDML("alter tableorg.apache.derby.impl.store.raw.data.synconcommit");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "nativeSQL";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCatalog dBCatalog0 = new DBCatalog("#5el]v", (Database) null);
      dBCatalog0.getSchema("nativeSQL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nativeSQL", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-1640), "J4att!0~yXW8u");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J4att!0~yXW8u", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setName("#5el]v");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mNnCc=Q");
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "J4att!0~yXW8u";
      stringArray0[1] = "xC";
      stringArray0[2] = "UQ's6maX%-QNr4`";
      stringArray0[3] = "J4att!0~yXW8u";
      stringArray0[5] = "J4att!0~yXW8u";
      stringArray0[6] = "org.databe";
      SQLUtil.renderColumnListWithTableName("org.databe", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(547);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      mockPrintWriter0.println(5312);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4634926593953477
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop indexx\"`u+g[/uq");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(40);
      stringBuilder0.reverse();
      TableContainer tableContainer0 = new TableContainer("e1", defaultDBTable0);
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("e1", tableContainer0);
      TableContainer tableContainer2 = new TableContainer("kgL`ENN^hJk", tableContainer1);
      tableContainer2.removeTable(defaultDBTable0);
      tableContainer2.getTable("kgL`ENN^hJk");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("4\"B<OP4i]BG7mNz`!", "{puJMR6HB?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CONSTRAINT {puJMR6HB? FOREIGN KEY (, , , ) REFERENCES null(, , , )", 40, 40);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint1, nameSpec1, printWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      Character.valueOf('4');
      Character.highSurrogate(5);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5357, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<Integer> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) (-4), timeUnit0);
      String string1 = SQLUtil.substituteMarkers("token IS", "org.databene.jdbacl.sql", scheduledFuture0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "org.apache.derby.impl.store.raw.xact.XactId";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.xact.XactId");
      SQLUtil.removeComments("(zn9<-Eja(DcE9");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(zn9<-Eja(DcE9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (zn9<-Eja(DcE9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.removeComments("");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNClob(String, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = true;
      TableContainer tableContainer0 = new TableContainer("Laxt5MI@n");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Laxt5MI@n";
      stringArray0[1] = "Laxt5MI@n";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "p|jvmCG<C0_tZ95o5";
      DBSchema dBSchema0 = new DBSchema("p|jvmCG<C0_tZ95o5");
      int int0 = 84;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("PGui#-P8x5''U", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.441226648425345
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.isDDL("org.databene.jdbacl.SQLUtil");
      SQLUtil.normalize("org.databene.jdbacl.SQLUtil", false);
      SQLUtil.isProcedureCall("org.databene.jdbacl.SQLUtil");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.iterator();
      columnDescriptorList0.add((Object) "org.databene.jdbacl.SQLUtil");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T}.F@=";
      stringArray0[1] = "T}.F@=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("_8X.n@C*<*oE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnNames(stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "T}.F@=");
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "foreign key constraint _8X.n@C*<*oE");
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) nameSpec0);
      stringBuilder2.append(14);
      SQLUtil.addOptionalCondition("()", stringBuilder0);
      assertEquals("T}.F@=foreign key constraint _8X.n@C*<*oENEVER14 or ()", stringBuilder0.toString());
      
      StringBuilder stringBuilder3 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder3.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4393763126382213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_8X.n@C*<*oE");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "of0nk;$3?ai";
      stringArray0[1] = "of0nk;$3?ai";
      stringArray0[2] = "_8X.n@C*<*oE";
      stringArray0[3] = "of0nk;$3?ai";
      stringArray0[4] = "of0nk;$3?ai";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("of0nk;$3?ai", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "of0nk;$3?ai");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "of0nk;$3?ai");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("of0nk;$3?ai", defaultDBTable0, 449, "create unique indexclob");
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn0.getForeignKeyConstraint();
      stringBuilder0.append((Object) dBForeignKeyConstraint1);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, false);
      defaultDBColumn0.setDefaultValue("(of0nk;$3?ai, of0nk;$3?ai, _8X.n@C*<*oE, of0nk;$3?ai, of0nk;$3?ai)");
      SQLUtil.addRequiredCondition("g.=`2OZs*D@", stringBuilder2);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint1, stringBuilder0, nameSpec1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "_8X.n@C*<*oE";
      objectArray0[1] = (Object) dBForeignKeyConstraint0;
      objectArray0[2] = (Object) "g.=`2OZs*D@";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) dBForeignKeyConstraint1;
      objectArray0[5] = (Object) "_8X.n@C*<*oE";
      Object object1 = new Object();
      objectArray0[6] = object1;
      String string1 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "ALTER TABLE ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Booting Module   ");
      SQLUtil.mutatesStructure("ALTER TABLE ");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      // Undeclared exception!
      try { 
        fromVTI0.getDataDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.361395248891326
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = "_/BH51w59mmF/PVtN`@";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "x";
      GDSType.getType("rM@");
      SQLUtil.isDDL("create materialized viewzuc^lgg}mxagmej");
      SQLUtil.isDML("UQ's6maX%-QNr4`");
      SQLUtil.mutatesDataOrStructure("select intos{=++frvyh`y#|?");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      String string0 = ":QQ>A,!I@Rq";
      stringArray0[2] = ":QQ>A,!I@Rq";
      String string1 = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[6] = "";
      Object object0 = new Object();
      SQLUtil.substituteMarkers("", ":QQ>A,!I@Rq", "zuC^lgg}MxAGmeJ");
      SQLUtil.isQuery("org.databene.commons.file.PatternFileFilter");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.384725757834036
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop indexx\"`u+g[/uq");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(40);
      stringBuilder0.reverse();
      TableContainer tableContainer0 = new TableContainer("e1", defaultDBTable0);
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("e1", tableContainer0);
      TableContainer tableContainer2 = new TableContainer("kgL`ENN^hJk", tableContainer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tableContainer2.getTable("kgL`ENN^hJk");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("(qu/[g+u`\"xxedni pordCONSTRAINT e1 ", stringBuilder1.toString());
      
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint1);
      assertEquals("null.{puJMR6HB?", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "e1";
      String string0 = "W6^u|OWI%dk`cJH";
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(" as ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4479989633956651
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_8X.n@C*<*oE";
      stringArray0[1] = "_8X.n@C*<*oE";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray1 = new String[7];
      stringArray1[1] = "{:x8[)8{qd";
      stringArray1[4] = "_8X.n@C*<*oE";
      stringArray1[5] = "select";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      assertEquals("SELECT * FROM T}.F@= WHERE null = null AND {:x8[)8{qd = '{:x8[)8{qd' AND null = null AND null = null AND _8X.n@C*<*oE = '_8X.n@C*<*oE' AND select = 'select' AND null = null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "delete";
      stringArray1[1] = "{puJMR6HB?";
      // Undeclared exception!
      try { 
        SQLUtil.join("org.databene.commons.file.PatternFileFilter", "org.dat", stringArray0, "delete", "zuC^lgg}MxAGmeJ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7158498682448617
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[2] = "/Tn;~A|";
      stringArray0[3] = "zuC^lgg}MxAGmeJ";
      stringArray0[4] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "x";
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "x";
      objectArray0[2] = (Object) "zuC^lgg}MxAGmeJ";
      objectArray0[4] = (Object) "/Tn;~A|";
      objectArray0[5] = (Object) "UQ's6maX%-QNr4`";
      objectArray0[6] = (Object) "x";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "org.databene.commons.file.PatternFileFilter";
      stringArray1[1] = "x";
      stringArray1[2] = "x";
      String string0 = SQLUtil.innerJoin("", stringArray1, "org.data", "zuC^lgg}MxAGmeJ", stringArray0);
      assertEquals("org.data as zuC^lgg}MxAGmeJ on .org.databene.commons.file.PatternFileFilter = zuC^lgg}MxAGmeJ.zuC^lgg}MxAGmeJ and .x = zuC^lgg}MxAGmeJ.null and .x = zuC^lgg}MxAGmeJ./Tn;~A|", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isDML("org.databene.jdbacl.sq");
      SQLUtil.isQuery("org.databene.jdbacl.sq");
      SQLUtil.isDML("org.databene.jdbacl.sq");
      PipedReader pipedReader0 = new PipedReader(5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      SQLUtil.renderNumber(streamTokenizer0);
      Character character0 = new Character('4');
      Character.highSurrogate(5);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "XSLAT.D", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("org.firebirdsql.jca.FBStandAloneConnectionManager");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2052196187885977
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      SQLUtil.isQuery("truncatex\"`u+g[/uq");
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      SQLUtil.mutatesStructure("zuc^lgg}mxag");
      SQLUtil.innerJoin(") REFERENCES ", stringArray0, "zuC^lgg}MxAGmeJ", "4QEvRmA(N]5X@*", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VMNcIi-UB4?k;g* ", dBSchema0);
      assertEquals("VMNcIi-UB4?k;g* ", defaultDBTable0.getName());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = "_/BH51w59mmF/PVtN`@";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "x";
      Object object0 = new Object();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "zuC^lgg}MxAGmeJ";
      stringArray1[1] = "";
      stringArray1[2] = "org.databene.commons.file.PatternFileFilter";
      stringArray1[3] = "";
      SQLUtil.renderColumnNames(stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "(zuC^lgg}MxAGmeJ, , org.databene.commons.file.PatternFileFilter, )");
      DBSchema dBSchema0 = new DBSchema("zuc^lg");
      DBPackage dBPackage0 = new DBPackage("drop tablezuc^lgg}mxagmej", dBSchema0);
      SQLUtil.typeAndName(dBPackage0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "_/BH51w59mmF/PVtN`@");
      stringBuilder0.append((Object) "zuC^lgg}MxAGmeJ");
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, false);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("", stringBuilder2);
      SQLUtil.addRequiredCondition("UQ's6maX%-QNr4`", stringBuilder3);
      assertEquals("false(zuC^lgg}MxAGmeJ, , org.databene.commons.file.PatternFileFilter, )_/BH51w59mmF/PVtN`@zuC^lgg}MxAGmeJ or  and UQ's6maX%-QNr4`", stringBuilder0.toString());
      assertEquals("false(zuC^lgg}MxAGmeJ, , org.databene.commons.file.PatternFileFilter, )_/BH51w59mmF/PVtN`@zuC^lgg}MxAGmeJ or  and UQ's6maX%-QNr4`", stringBuilder1.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ALTER TABLE ";
      stringArray0[1] = "ALTER TABLE ";
      stringArray0[2] = "ALTER TABLE ";
      stringArray0[3] = "'f";
      stringArray0[4] = "ALTER TABLE ";
      stringArray0[5] = "ALTER TABLE ";
      stringArray0[6] = "ALTER TABLE ";
      stringArray0[7] = "ALTER TABLE ";
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ALTER TABLE ");
      StringBuilder stringBuilder1 = stringBuilder0.append("create tableauc<;5_<y6)s8k^");
      stringBuilder1.append((CharSequence) "ALTER TABLE ");
      stringBuilder0.append((Object) "ALTER TABLE ");
      stringBuilder1.insert(34, false);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("CONSTRAINT ", stringBuilder0);
      assertEquals("ALTER TABLE create tableauc<;5_<y6false)s8k^ALTER TABLE ALTER TABLE  or CONSTRAINT ", stringBuilder0.toString());
      assertEquals("ALTER TABLE create tableauc<;5_<y6false)s8k^ALTER TABLE ALTER TABLE  or CONSTRAINT ", stringBuilder2.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      SQLUtil.isQuery("ALTER TABLE ");
      boolean boolean1 = SQLUtil.isQuery("ALTER TABLE ");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "uK";
      String string1 = "`T";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`T");
      int int0 = 693;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("uK", defaultDBTable0, 693, "uK");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2519175163260234
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT {puJMR6HB? FOREIGN KEY (, , , ) REFERENCES null(, , , )", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop indexx\"`u+g[/uq");
      stringBuilder0.appendCodePoint(40);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "GYf#4", false, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint1);
      assertEquals("CONSTRAINT {puJMR6HB? ", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("VA sC=", "VA sC=", versionNumber0);
      defaultDatabase0.getCatalog("drop materialized view");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.renderValue("org.databene.jdbacl.sql");
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.isDDL("org.databene.jdbacl.SQLUtil");
      SQLUtil.isProcedureCall("org.databene.jdbacl.SQLUtil");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      columnDescriptorList0.iterator();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "in best access path";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "in best access path", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9559416729180736
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "?*/L+";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "org.apache.derby.impl.store.raw.xact.XactId";
      SQLUtil.join((String) null, "{puJMR6HB?", stringArray0, "org.apache.derby.impl.store.raw.xact.XactId", "select into~ / 3ztsiaso ` 6f <", stringArray0);
      SQLUtil.mutatesStructure("org.apache.derby.impl.store.raw.data.SyncOnCommit");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      BasicUUID basicUUID0 = new BasicUUID("org.apache.derby.impl.store.raw.xact.XactId");
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, "org.apache.derby.impl.store.raw.data.SyncOnCommit", basicUUID0, true);
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl1, "APP", schemaDescriptor0, 2, false, false);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string0 = "PGui#-P\\8x5''U";
      String string1 = "p|jvmCG<C0_tZ95o5";
      DBSchema dBSchema0 = new DBSchema("p|jvmCG<C0_tZ95o5");
      dBSchema0.getTable("<invalid>");
      DBDataType dBDataType0 = DBDataType.getInstance(1917, "p|jvmCG<C0_tZ95o5");
      Integer integer0 = Integer.getInteger("PGui#-P8x5''U", 1917);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PGui#-P8x5''U", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder("As");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.384725757834036
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("{puJMR6HB?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop indexx\"`u+g[/uq");
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(40);
      stringBuilder0.reverse();
      TableContainer tableContainer0 = new TableContainer("e1", defaultDBTable0);
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("e1", tableContainer0);
      TableContainer tableContainer2 = new TableContainer("kgL`ENN^hJk", tableContainer1);
      tableContainer2.getTable("kgL`ENN^hJk");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("(qu/[g+u`\"xxedni pordCONSTRAINT e1 ", stringBuilder1.toString());
      
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("e1", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create table");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_8X.n@C*<*oE";
      stringArray0[1] = "T}.F@=";
      stringArray0[2] = "T}.F@=";
      defaultDBTable1.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.444355939607618
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      SQLUtil.isQuery("truncatex\"`u+g[/uq");
      SQLUtil.parseColumnTypeAndSize("ovkbg)RJ6@Oa");
      StringBuilder stringBuilder0 = new StringBuilder("\u0001\u00B0");
      SQLUtil.mutatesStructure("truncatex\"`u+g[/uq");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      GDSType.getType("h@L;H");
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      SQLUtil.isDML("H,t(K<XssEY@p");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("i");
      assertNull(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      SQLUtil.renderValue(sQLUtil0);
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1904228838157913
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "~/3ztsIaso`6F<";
      SQLUtil.normalize("~/3ztsIaso`6F<", false);
      String string1 = "UPDATE_RULE";
      String[] stringArray0 = new String[18];
      stringArray0[0] = "~ / 3ztsIaso ` 6F <";
      stringArray0[8] = "~/3ztsIaso`6F<";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema(stringArray0[1]);
      StringBuilder stringBuilder0 = new StringBuilder("UPDATE_RULE");
      int int0 = 1;
      Object object0 = new Object();
      int int1 = 45;
      char char0 = '}';
      Character character0 = new Character('}');
      // Undeclared exception!
      try { 
        stringBuilder0.insert(45, (Object) character0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("T}.F@=(3,3)", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zuC^lgg}MxAGmeJ";
      stringArray0[1] = "org.databene.commons.file.PatternFileFilter";
      stringArray0[2] = ":QQ>A,!I@Rq";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "UQ's6maX%-QNr4`";
      stringArray0[6] = "";
      Object object0 = new Object();
      SQLUtil.renderColumnListWithTableName("zuC^lgg}MxAGmeJ", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "\u0001\u0145";
      stringArray0[0] = "\u0001\u0145";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getTraceObjectName();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema("ds52");
      dBSchema0.getTable("\u0001\u0145");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.423305084199081
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintStream mockPrintStream0 = new MockPrintStream("of0Nk;$3?AIHzmM");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      GDSType.getType("SYSCAT");
      SQLUtil.isDDL("SYSCAT");
      SQLUtil.isDML("of0Nk;$3?AIHzmM");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CLOB");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("of0Nk;$3?AIHzmM");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      SQLUtil.leftJoin("", stringArray0, "alter table].", "/Lt3JRp", stringArray1);
      TableContainer tableContainer0 = new TableContainer("left join alter table]. as /Lt3JRp on ", defaultDBTable0);
      tableContainer0.getTables();
      tableContainer0.getTable("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" =1.`Zhp", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "SQLERRP", true, "alter table].");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("_8X.n@C*<*oE : T}.F@=(3,3)", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_8X.n@C*<*oE : T}.F@=(3,3)";
      stringArray0[1] = "{:x8[)8{qd";
      stringArray0[2] = "_8X.n@C*<*oE : T}.F@=(3,3)";
      stringArray0[3] = "_8X.n@C*<*oE : T}.F@=(3,3)";
      stringArray0[4] = "_8X.n@C*<*oE";
      stringArray0[5] = "select";
      stringArray0[6] = "_8X.n@C*<*oE : T}.F@=(3,3)";
      String string1 = SQLUtil.join("_8X.n@C*<*oE : T}.F@=(3,3)", "f81e0010-00e3-6612-5a96-009e3a3b5e00", stringArray0, "{:x8[)8{qd", "_8X.n@C*<*oE : T}.F@=(3,3)", stringArray0);
      assertEquals("_8X.n@C*<*oE : T}.F@=(3,3) join {:x8[)8{qd as _8X.n@C*<*oE : T}.F@=(3,3) on f81e0010-00e3-6612-5a96-009e3a3b5e00._8X.n@C*<*oE : T}.F@=(3,3) = _8X.n@C*<*oE : T}.F@=(3,3)._8X.n@C*<*oE : T}.F@=(3,3) and f81e0010-00e3-6612-5a96-009e3a3b5e00.{:x8[)8{qd = _8X.n@C*<*oE : T}.F@=(3,3).{:x8[)8{qd and f81e0010-00e3-6612-5a96-009e3a3b5e00._8X.n@C*<*oE : T}.F@=(3,3) = _8X.n@C*<*oE : T}.F@=(3,3)._8X.n@C*<*oE : T}.F@=(3,3) and f81e0010-00e3-6612-5a96-009e3a3b5e00._8X.n@C*<*oE : T}.F@=(3,3) = _8X.n@C*<*oE : T}.F@=(3,3)._8X.n@C*<*oE : T}.F@=(3,3) and f81e0010-00e3-6612-5a96-009e3a3b5e00._8X.n@C*<*oE = _8X.n@C*<*oE : T}.F@=(3,3)._8X.n@C*<*oE and f81e0010-00e3-6612-5a96-009e3a3b5e00.select = _8X.n@C*<*oE : T}.F@=(3,3).select and f81e0010-00e3-6612-5a96-009e3a3b5e00._8X.n@C*<*oE : T}.F@=(3,3) = _8X.n@C*<*oE : T}.F@=(3,3)._8X.n@C*<*oE : T}.F@=(3,3)", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = "XTwuEDe68#WS2j|";
      String string1 = "";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "XTwuEDe68#WS2j|", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "_+%8<,?o/:eNYzrR=R";
      SQLUtil.mutatesStructure("org.pache.derby.iapj.types.SQLChar");
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
