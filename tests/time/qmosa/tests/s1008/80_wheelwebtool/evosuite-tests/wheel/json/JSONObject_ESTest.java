/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:50:40 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1952176286991225
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.doubleToString((-4492.3));
      JSONObject jSONObject0 = new JSONObject((Object) "-4492.3");
      String string0 = "ismin";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("ismin", object0);
      String string1 = "uUkIJ";
      try { 
        jSONObject1.get("uUkIJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uUkIJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Writer writer0 = null;
      jSONObject0.optBoolean("] not found.");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6318792397904422
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      JSONObject jSONObject0 = new JSONObject("bNU2&<]", stringArray0);
      boolean boolean0 = new Boolean(true);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("<XP", (Map) hashMap0);
      boolean boolean1 = jSONObject0.optBoolean("bNU2&<]", true);
      long long0 = jSONObject0.optLong("bNU2&<]", 6499L);
      assertEquals(6499L, long0);
      
      JSONObject.valueToString("bNU2&<]");
      boolean boolean2 = jSONObject0.isNull("<XP");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.682954725851274
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = jSONObject0.putOpt("-", "-");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      jSONObject0.keys();
      jSONObject1.accumulate("-", "-");
      String string0 = "";
      jSONObject1.optInt("-", 0);
      Short.toUnsignedInt((short)0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8301749834920975
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optString("isintern", "+O;;<VMtT,Y9CBP");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.has("+O;;<VMtT,Y9CBP");
      jSONObject0.optJSONArray("isintern");
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      double double0 = 916.266088162671;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("fo", true);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.891788066208536
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      JSONObject jSONObject3 = new JSONObject(",\n", stringArray0);
      jSONObject0.toString(35);
      Object object0 = new Object();
      jSONObject2.put("f]e0sr5ciNBsgHM#g$", object0);
      try { 
        jSONObject3.put((String) null, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.805851825045234
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GiN+tKrj '";
      jSONObject0.optDouble("GiN+tKrj '", (-510.0034731446));
      jSONObject0.toString();
      jSONObject0.remove("lo");
      try { 
        jSONObject0.getDouble("GiN+tKrj '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GiN+tKrj '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8818984236612395
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      JSONObject jSONObject3 = new JSONObject(",\n", stringArray0);
      jSONObject0.toString(35);
      Object object0 = new Object();
      jSONObject2.put("f]e0sr5ciNBsgHM#g$", object0);
      try { 
        jSONObject2.getLong("f]e0sr5ciNBsgHM#g$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f]e0sr5ciNBsgHM#g$\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.966822326500682
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double((-312.0));
      String[] stringArray1 = JSONObject.getNames((Object) double0);
      jSONObject2.putOpt(",\n", jSONObject1);
      Double double1 = new Double((-312.0));
      JSONObject jSONObject3 = new JSONObject(double1, stringArray1);
      // Undeclared exception!
      jSONObject2.toString(26);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0477869609315187
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = jSONObject0.putOpt("-", "-");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("-", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      boolean boolean0 = jSONObject2.optBoolean("-");
      jSONObject0.keys();
      JSONObject jSONObject3 = jSONObject1.put("-", 0);
      String string0 = JSONObject.valueToString(jSONObject0, 2, 2);
      String string1 = jSONObject0.optString("-", "{\"java.lang.String@0000000002\": java.lang.Integer@0000000005}");
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = jSONObject3.isNull("java.lang.Integer@0000000005");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("", biFunction0);
      jSONObject0.putOpt("", "");
      String string1 = "z,`pL-ib$9OnU#Y";
      String string2 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.879956712047241
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      long long0 = jSONObject2.optLong(string0);
      assertEquals(0L, long0);
      
      jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      String string1 = JSONObject.quote("x2%fy8g;}Qp");
      assertEquals("\"x2%fy8g;}Qp\"", string1);
      
      Float float0 = new Float(2194.7803F);
      JSONObject.numberToString(short0);
      double double2 = jSONObject2.optDouble("java.lang.Short@000000001");
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.702783948524193
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("j;", object1);
      String string0 = null;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      Object object2 = JSONObject.NULL;
      JSONObject.valueToString(object2);
      JSONObject jSONObject2 = jSONObject0.put("AfN.#NC1=)g7c", false);
      Long long0 = new Long(0L);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        Long.decode("JSONObject[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSONObject[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2645448700967497
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      Short short0 = new Short((short) (-1315));
      double double0 = (-312.0);
      jSONObject1.optString("4_?A0 ##pwAy3", "java.lang.Short@00000000040");
      String string1 = "&%IQ6/2H32yY";
      try { 
        jSONObject0.getInt(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5640891333755698
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      jSONObject2.optLong("^");
      Short.toUnsignedInt((short) (-1315));
      JSONObject jSONObject3 = jSONObject2.putOpt(",\n", jSONObject1);
      jSONObject1.optString("^", "^");
      jSONObject1.optLong("UkCbZ{clrRzp_3rQ@N;", 0L);
      JSONObject jSONObject4 = new JSONObject("UkCbZ{clrRzp_3rQ@N;", stringArray0);
      JSONObject jSONObject5 = jSONObject3.accumulate("Expected a ',' or '}'", jSONObject4);
      jSONObject5.has("4_?A0 ##pwAy3");
      assertEquals(3, jSONObject3.length());
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.631785423172331
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a Boolean.", "wC6e75!ZsC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wC6e75!ZsC";
      stringArray0[1] = "wC6e75!ZsC";
      stringArray0[2] = "] is not a JSONObject.";
      stringArray0[3] = "wC6e75!ZsC";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject2.put("wC6e75!ZsC", (Collection) linkedList0);
      jSONObject2.optBoolean("] is not a JSONObject.");
      jSONObject2.keys();
      String string0 = "Missing value";
      jSONObject1.put("Missing value", 0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 2569, 2380);
      try { 
        jSONObject1.get("H:l\"tW9xj<SM]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H:l\\\"tW9xj<SM]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "&+e[* ?U3Vo3]Z(B";
      jSONObject0.put("&+e[* ?U3Vo3]Z(B", 488L);
      String string1 = "\\^";
      jSONObject0.optLong("&+e[* ?U3Vo3]Z(B");
      Short.toUnsignedInt((short) (-1315));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      jSONObject0.optString("Bad value from toJSONString: ", ".!Ag@Z[6@n[k[y\"=9>");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.has("wheel.json.JSONArray");
      jSONObject1.optJSONArray("aq");
      Float float0 = new Float((-725.6714F));
      JSONObject jSONObject3 = jSONObject2.putOpt((String) null, float0);
      assertNotSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8684600982261519
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".1M,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      Short short0 = new Short((short)1619);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.getInteger("]:$!$1xU^$E b4V");
      JSONObject jSONObject1 = jSONObject0.putOpt("+4+'2w", (Object) null);
      Double double0 = new Double(0.0);
      String string0 = JSONObject.quote("</91Qq#");
      assertEquals("\"<\\/91Qq#\"", string0);
      
      Float float0 = new Float((float) (short)1619);
      JSONObject.numberToString(double0);
      double double1 = jSONObject1.optDouble("getlongValue");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.125196629469464
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-211));
      Double double0 = new Double((short)44);
      Short short1 = new Short((short)15);
      Short.toUnsignedInt((short) (-19687));
      Short.toUnsignedInt((short) (-1424));
      JSONObject jSONObject1 = jSONObject0.append("istoString", short1);
      String string0 = jSONObject1.toString();
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.916076131467791
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = jSONObject0.putOpt("-", "-");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = jSONObject2.put("-", (Collection) linkedList0);
      jSONObject3.append("-", jSONObject0);
      jSONObject3.optBoolean("-");
      jSONObject2.keys();
      jSONObject2.put("-", 0);
      JSONObject.valueToString((Object) null, 2, 2);
      Long long0 = new Long(0);
      Long.getLong("null");
      JSONObject.numberToString(long0);
      double double0 = jSONObject1.optDouble("getreverseBytes");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7559003229991244
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      JSONObject jSONObject3 = jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      jSONObject3.optInt("84Tj h'iiE@Ym$;^", 47);
      jSONObject1.put("84Tj h'iiE@Ym$;^", 10);
      Boolean boolean0 = new Boolean(false);
      JSONObject.valueToString(boolean0, 10, 6);
      jSONObject3.get("84Tj h'iiE@Ym$;^");
      HashMap<Integer, JSONArray> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, JSONArray>((Map<? extends Integer, ? extends JSONArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4992275542907034
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = (byte) (-27);
      Byte byte1 = new Byte((byte) (-27));
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[1] = "FeMY4g{|yx|w<TaMx";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray(stringArray0[3]);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("int", (int) (byte) (-27));
      jSONObject0.accumulate("get", (Object) null);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3031636018111192
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      long long0 = jSONObject0.optLong("-");
      assertEquals(0L, long0);
      
      Short.toUnsignedLong((short)740);
      int int0 = jSONObject0.optInt("'{XgR", (int) (short)740);
      assertEquals(740, int0);
      
      Short.toUnsignedInt((short)123);
      String string0 = jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "");
      assertEquals("", string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("[A5Q:`rN>-XJa=L", (Collection) linkedList0);
      long long1 = jSONObject0.optLong("", (long) (short)0);
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.679811812450802
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      JSONObject jSONObject3 = jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      jSONObject3.optInt("84Tj h'iiE@Ym$;^", 47);
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      String string1 = "\\x2%fy8g;}Qp";
      JSONObject.quote("x2%fy8g;}Qp");
      try { 
        Long.decode(":PxMZ|tf{.u0: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":PxMZ|tf{.u0: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9615314907284898
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.valueToString((Object) null);
      Long long0 = new Long(0L);
      jSONObject0.optString((String) null, (String) null);
      jSONObject0.optLong("getgetBytes", (long) 16);
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetBytes", (Object) null);
      jSONObject0.toString(60);
      jSONObject1.optInt("isreverseBytes");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.585029031029259
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double((-312.0));
      JSONObject.getNames((Object) double0);
      JSONObject jSONObject3 = jSONObject2.putOpt(",\n", jSONObject1);
      Double double1 = new Double(4171.404197);
      JSONObject.getNames(jSONObject0);
      JSONObject.quote(",\n");
      Float float0 = new Float(0.0F);
      jSONObject3.get("4_?A0 ##pwAy3");
      jSONObject3.has("q$.d0vOfbp/sr");
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3630631428496107
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      jSONObject0.optLong(string0);
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt(string0, hashMap0);
      Double double1 = new Double((-312.0));
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float((float) (short) (-1315));
      String string1 = ")Z{PaV*JPRh-G=Tf";
      try { 
        jSONObject1.get(")Z{PaV*JPRh-G=Tf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")Z{PaV*JPRh-G=Tf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.327963024743693
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iv`}G*y])Ie";
      jSONObject0.optBoolean("iv`}G*y])Ie", false);
      Boolean.logicalAnd(false, false);
      String string1 = "";
      Boolean.compare(false, false);
      Short short0 = new Short((short)8192);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]:$!$1xU^$E b4V";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("Null key.", object0);
      jSONObject1.toString(1998, (-615));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "]:$!$1xU^$E b4V", 0, (-615));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6795141053589555
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      JSONObject jSONObject3 = jSONObject2.put("getdoubleToLongBits", false);
      jSONObject3.optLong("va", 0L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.valueToString(jSONObject0);
      Long long0 = new Long(0L);
      jSONObject2.optString("] is not a JSONArray.", "dou");
      jSONObject1.optLong((String) null, (long) 47);
      jSONObject0.accumulate("getgetBytes", jSONArray0);
      boolean boolean0 = jSONObject1.has("ishashCode");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Integer.sum((-1628), 19);
      Object object0 = new Object();
      String[] stringArray1 = JSONObject.getNames(object0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(0.0);
      Integer integer0 = new Integer((-534));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0704571438630857
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONObject";
      stringArray0[1] = "n:Yz /|<:LBosmZ9u#";
      stringArray0[2] = "gGq60#k7b]`pl\"";
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "n:Yz /|<:LBosmZ9u#");
      Object object1 = new Object();
      Short short0 = new Short((short)386);
      Short short1 = new Short((short)386);
      String string0 = JSONObject.valueToString(short1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.533457525189374
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("c;'p`t", 128);
      int int0 = 3039;
      StringWriter stringWriter0 = new StringWriter(128);
      stringWriter0.close();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject1);
      jSONObject1.put("c;'p`t", 398);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "c;'p`t");
      jSONObject1.write(stringWriter1);
      JSONObject.testValidity(jSONObject1);
      String string0 = "%c:";
      try { 
        jSONObject0.getBoolean("%c:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%c:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1376698117477586
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject("<XP", stringArray0);
      boolean boolean0 = jSONObject2.optBoolean("<XP");
      String string0 = jSONObject1.optString(";", (String) null);
      assertNull(string0);
      
      boolean boolean1 = jSONObject0.isNull("T5fc!-");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4581263542556275
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "4_?A0 ##pwAy3";
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      jSONObject2.optLong("Expected a ',' or ']'");
      Short short0 = new Short((short) (-1315));
      Object object0 = JSONObject.NULL;
      jSONObject2.accumulate("Expected a ',' or ']'", jSONObject1);
      String string1 = "s*JhIVDRJ";
      Integer integer0 = new Integer((short) (-1315));
      Integer integer1 = Integer.getInteger("j;", integer0);
      jSONObject0.append("s*JhIVDRJ", integer1);
      JSONTokener jSONTokener0 = new JSONTokener("F0D?4{.");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of F0D?4{.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.868638252472993
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("kf&tId/u.1");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(false, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kf&tId/u.1";
      stringArray0[1] = "kf&tId/u.1";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "kf&tId/u.1";
      stringArray0[4] = "kf&tId/u.1";
      stringArray0[5] = "kf&tId/u.1";
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4393437227967087
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Short.toUnsignedLong((short)740);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "-q6AW$MO[2+kQ/Sl.g");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("-q6AW$MO[2+kQ/Sl.g", (Collection) linkedList0);
      jSONObject0.optLong("-q6AW$MO[2+kQ/Sl.g", 0L);
      try { 
        jSONObject1.getLong("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.14835717891232
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isreplace", false);
      jSONObject1.put("null", (Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.max((-72.0F), (-1.0F));
      jSONObject0.putOpt("", float0);
      Double double0 = new Double(4347.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2338776309798827
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("", biFunction0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = "gettoString";
      jSONObject1.opt("");
      JSONObject jSONObject2 = jSONObject0.put("gettoString", 1807);
      jSONObject2.put("", 0);
      JSONObject.valueToString(hashMap0, 2, 0);
      String string1 = "H:l\"tW9xj<SM]";
      try { 
        jSONObject1.get("L%EkwE,FW*%w%}l+ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L%EkwE,FW*%w%}l+ \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8057436259119415
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      long long0 = jSONObject2.optLong("Expected a ',' or ']'");
      assertEquals(0L, long0);
      
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double((-312.0));
      String[] stringArray1 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      JSONObject jSONObject3 = jSONObject2.putOpt("4_?A0 ##pwAy3", jSONObject1);
      Double double1 = new Double(4171.404197);
      String[] stringArray2 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray2);
      
      String string0 = JSONObject.quote("4_?A0 ##pwAy3");
      assertEquals("\"4_?A0 ##pwAy3\"", string0);
      
      Float float0 = new Float(0.0F);
      jSONObject3.get("4_?A0 ##pwAy3");
      jSONObject3.optDouble("\"4_?A0 ##pwAy3\"", (-1939.9960961408922));
      String string1 = "\\u";
      boolean boolean0 = jSONObject3.isNull(string1);
      assertTrue(boolean0);
      
      double double2 = jSONObject3.optDouble("2 M.e$0nt", 4171.404197);
      assertEquals(4171.404197, double2, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("BPBvpQsbc*9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BPBvpQsbc*9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1737527765569893
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", float0);
      jSONObject1.optLong("is", 1988L);
      Double double0 = new Double(4347.0);
      try { 
        jSONObject0.append("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.108401378854188
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(1249);
      Integer.sum(1249, 1249);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "A JSONObject text must begin with '{'";
      stringArray0[2] = "zX]M4P";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("{", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.487994125028512
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = (short) (-211);
      Short short1 = new Short((short) (-211));
      JSONObject jSONObject1 = jSONObject0.put("d'kF4C<t=4G96U`5", false);
      jSONObject0.optInt("", (int) (short) (-211));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optInt("84Tj h'iiE@Ym$;^", 4622);
      jSONObject1.toString(4622, 4622);
      try { 
        jSONObject0.getString("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9072596023531885
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      Double double0 = new Double(2121.505909686775);
      JSONObject jSONObject0 = new JSONObject("</91Qq#", stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("'lq%ewm:Tlv'w!F1K(", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONArray("K8dGO*8/Kr:Z2jw6u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K8dGO*8/Kr:Z2jw6u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.678917624671368
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      jSONObject2.put(",\n", false);
      jSONObject1.optInt("4_?A0 ##pwAy3", 47);
      jSONObject1.names();
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double(0L);
      JSONObject jSONObject3 = jSONObject2.putOpt(",\n", double0);
      String string1 = "iscompare";
      try { 
        jSONObject3.get("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1327416028871293
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.names();
      try { 
        jSONObject0.getJSONArray("'lq%ewm:Tlv'w!F1K(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'lq%ewm:Tlv'w!F1K(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.076221386900268
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("-", Double.NaN);
      jSONObject1.opt("`3");
      JSONObject jSONObject2 = jSONObject0.put("Bh]u1Z", 15);
      String string0 = "L%EkwE,FW*%w%}l+\\ ";
      jSONObject2.put("getappend", 1807);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0, (-3965), 2);
      try { 
        jSONObject1.get("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.539025553576771
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "4_?A0 ##pwAy3";
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string1 = ",\n";
      Boolean.compare(true, false);
      Boolean boolean0 = Boolean.valueOf("]:$!$1xU^$E b4V");
      JSONObject jSONObject3 = new JSONObject(boolean0, stringArray0);
      Object object0 = new Object();
      jSONObject2.putOpt("istoUnsignedInt", object0);
      jSONObject1.toString(5251, (-3281));
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "]:$!$1xU^$E b4V", (-620), 5251);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)217);
      Short.toUnsignedInt((short)128);
      Double double0 = new Double((short) (-1272));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.431425250959729
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[6];
      String string0 = "</91Qq#";
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(false, false);
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject("</91Qq#", stringArray0);
      Long long0 = new Long(0);
      JSONObject jSONObject1 = jSONObject0.putOpt("J;7b',~.N?g^Q'", long0);
      int int0 = (-615);
      jSONObject1.toString(0, 2);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "bNU2&<]", (-615), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7168160056451525
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Boolean.compare(true, true);
      Integer integer0 = new Integer((-263));
      jSONObject0.putOpt(".WDM,$", integer0);
      jSONObject0.toString((-263), 78);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{\n\"java.lang.String@0000000005\": java.lang.Integer@0000000006,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                                              }", 78, (int) (short) (-633));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9135499495678876
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<XP";
      stringArray0[1] = "";
      stringArray0[2] = "<XP";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "<XP";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("");
      String string0 = jSONObject1.optString((String) null, "x9MeKW:Ub*.M");
      assertNotNull(string0);
      
      boolean boolean1 = jSONObject1.isNull("gettoUpperCase");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9660402761004678
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      String string0 = "</91Qq#";
      String string1 = "bNU2&<]";
      JSONObject jSONObject1 = new JSONObject();
      String string2 = "Expected a ',' or ']'";
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "Expected a ',' or ']'");
      JSONObject jSONObject3 = new JSONObject();
      int int0 = 13;
      jSONObject3.toString(13, 13);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", (-951), 3374);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      Byte byte0 = new Byte((byte) (-122));
      Byte byte1 = new Byte((byte) (-73));
      JSONObject jSONObject1 = new JSONObject(byte1, stringArray0);
      JSONObject.quote((String) null);
      boolean boolean0 = new Boolean(".{#~.H6");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.59013475520068
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-2858);
      Integer integer0 = new Integer((-2858));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7078523370316234
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optInt("m*c/d/4uc84a_r*?i", 60);
      Double.isFinite(60);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (-395L));
      jSONObject0.remove(".");
      jSONObject0.optDouble("Expected a ',' or ']'");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put(".", (Collection) linkedList0);
      jSONObject0.optLong("7!+YO", (-2634L));
      jSONObject2.put("5el]vJ]75\"fK?h4", (double) 60);
      jSONObject1.put("A JSONObject text must end with '}'", 2149);
      try { 
        jSONObject2.getJSONObject("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3402821720088776
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Short short0 = new Short((short)1220);
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      assertEquals(0L, long0);
      
      Short.toUnsignedLong((short)740);
      int int0 = jSONObject0.optInt("", 1850);
      assertEquals(1850, int0);
      
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("ishashCode", "-q6AW$MO[2+kQ/Sl.g");
      jSONObject0.optLong("Null pointer", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.844047895106879
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.valueToString((Object) null);
      jSONObject0.put("null", true);
      String string0 = ">";
      JSONTokener jSONTokener0 = new JSONTokener("] is not a number.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.523448480499437
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject();
      Short short0 = new Short((short)47);
      Float float1 = new Float((float) (short)47);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(float1, boolean0);
      jSONObject0.put("", (Object) short0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      jSONObject1.getLong("");
      jSONObject0.getLong("");
      jSONObject1.put("", 0.0);
      Object object0 = jSONObject1.remove("' and instead saw '");
      assertNull(object0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.43856145421783
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Short.toUnsignedLong((short)766);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "-q6AW$MO[2+kQ/Sl.g");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("-q6AW$MO[2+kQ/Sl.g", (Collection) linkedList0);
      jSONObject0.optLong("-q6AW$MO[2+kQ/Sl.g", 0L);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("-q6AW$MO[2+kQ/Sl.g");
      assertEquals("\"-q6AW$MO[2+kQ/Sl.g\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.quote("5 =1.`Z");
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3135657039390103
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)45);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString();
      String string0 = ";IaG{T|[Hx+g";
      try { 
        jSONObject0.getLong(")/nrm,t]j^]6G1ZhROc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")/nrm,t]j^]6G1ZhROc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4062157525357577
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      String string0 = ".W\\DM,$";
      stringArray0[3] = ".WDM,$";
      String string1 = "Null key.";
      stringArray0[4] = "Null key.";
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Null key.", 0, 0);
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject0.getInt(".WDM,$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".WDM,$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)71);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8161195367516312
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = Short.valueOf((short)55);
      String string0 = JSONObject.valueToString(short0);
      Long long0 = new Long(0L);
      String string1 = JSONObject.valueToString(long0, (short)55, 16);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8063254702473692
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iv`}G*y])Ie", true);
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, true);
      Short short0 = new Short((short)8192);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]:$!$1xU^$E b4V";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("Null key.", object0);
      jSONObject1.toString(1998, (-615));
      Float float0 = new Float((double) (short)8192);
      JSONObject jSONObject3 = new JSONObject(float0);
      jSONObject3.opt("gettoString");
      JSONObject jSONObject4 = jSONObject1.put("]:$!$1xU^$E b4V", 1807);
      jSONObject4.optString("A JSONObject text must end with '}'");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("]:$!$1xU^$E b4V", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject5 = new JSONObject();
      JSONObject.valueToString(jSONObject5, (-1), 1998);
      try { 
        jSONObject3.getLong("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.472320274220129
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      String string0 = "bNU2&<]";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      String string1 = ".W\\DM,$";
      stringArray0[3] = ".WDM,$";
      String string2 = "Null key.";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      jSONObject1.toString(1, (-615));
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      int int0 = 0;
      try { 
        jSONObject1.getDouble("istoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.864623165653625
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      jSONObject0.putOpt("-", "-");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      jSONObject1.keys();
      JSONObject jSONObject3 = jSONObject1.put("-", 0);
      JSONObject.valueToString(jSONObject3, 2, 2);
      Float float0 = new Float((-4392.5F));
      try { 
        jSONObject0.get("{\"java.lang.String@0000000002\": java.lang.Integer@0000000006}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Integer@0000000006}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject1.toString(70);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3206053247947638
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      String[] stringArray0 = new String[9];
      Byte.compare((byte) (-128), (byte) (-68));
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = stringArray0[0];
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.get("3_Bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3_Bd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("JSONObject[", (Object) null);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.809416172574922
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      Boolean.compare(true, true);
      Integer integer0 = new Integer((-263));
      JSONObject jSONObject1 = jSONObject0.putOpt(".WDM,$", integer0);
      jSONObject0.toString((-263), 78);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optInt("getsplCt", 19);
      Short.toUnsignedInt((short) (-463));
      jSONObject1.optString("getsplCt", "{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                                              }");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("ZV_3gvA4N-T6{/", (Collection) linkedList0);
      jSONObject2.optLong("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                                              }", 0L);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.sum(0.0, 0.0);
      Byte byte0 = new Byte((byte) (-23));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ",\n";
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("getgetBytes", (int) (byte) (-23));
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("'lq%ewm:Tlv'w!F1K(", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("'lq%ewm:Tlv'w!F1K(");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7531808905518336
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P.q#U~ke^[CfCf";
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "getreplaceFirst";
      stringArray0[3] = "isreplace";
      HashMap<JSONArray, Double> hashMap1 = new HashMap<JSONArray, Double>();
      jSONObject0.put("[]", (Map) hashMap1);
      stringArray0[4] = "xVTH<5zz";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject("isreplace", stringArray0);
      jSONObject2.optBoolean("<XP");
      jSONObject1.optString((String) null, "getreplaceFirst");
      assertEquals(3, jSONObject0.length());
      
      boolean boolean0 = jSONObject2.isNull("fo");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0293124533881794
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      String string0 = "false";
      try { 
        jSONObject1.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8148657896913192
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-4205.1767));
      Short short0 = new Short((short)65);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1{Ps?uty7<2";
      stringArray0[1] = ":smH}pX =QAe_";
      stringArray0[2] = "";
      stringArray0[3] = "gettrim";
      stringArray0[5] = "*~#Zk30{;W#igU(O";
      stringArray0[5] = "|ygn";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("gettrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettrim
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.683667738328992
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = jSONObject0.putOpt("-", "-");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject0.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      jSONObject0.keys();
      jSONObject1.accumulate("gethashCode", "-");
      jSONObject1.optInt("-", 0);
      Short.toUnsignedInt((short)0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.62972293284473
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wO+'2-k*1Y";
      stringArray0[1] = "";
      stringArray0[2] = "gGq60#k7b]`pl\"";
      stringArray0[3] = "1KLI\nb8]!B*(";
      stringArray0[4] = "LPv";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("b^2_a3*y\"8Aq");
      try { 
        jSONObject0.put("b^2_a3*y\"8Aq", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4956281959367668
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("wC6e75!ZsC");
      assertEquals(0L, long0);
      
      Boolean boolean0 = new Boolean("%^H[}a&GYCwAkmq=X");
      JSONObject jSONObject1 = jSONObject0.put("%^H[}a&GYCwAkmq=X", (Object) boolean0);
      double double0 = jSONObject1.optDouble("wC6e75!ZsC");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.optString("8ik iu", "] is not a Boolean.");
      boolean boolean1 = jSONObject1.optBoolean((String) null);
      assertFalse(boolean1);
      
      String string0 = jSONObject1.optString("spl", "] is not a Boolean.");
      assertEquals("] is not a Boolean.", string0);
      
      jSONObject1.optDouble("Expected a ',' or '}'", Double.NaN);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088162671);
      JSONObject jSONObject2 = new JSONObject(hashMap0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iv`}G*y])Ie", true);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1972918763037343
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(0.0);
      double double1 = new Float(767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "w,=Q\"dl&AYGX#SvL;Mp";
      JSONObject jSONObject1 = jSONObject0.putOpt("w,=Q\"dl&AYGX#SvL;Mp", double0);
      jSONObject1.put("c_Px_&^)l03fbJ", false);
      Double double2 = new Double((-2379.59247));
      String string1 = ";'Zc*";
      try { 
        jSONObject1.getJSONObject(";'Zc*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";'Zc*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.values();
      Double double0 = new Double(916.2660881627);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.3335747103456397
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "</91Qq#";
      String string0 = "bNU2&<]";
      JSONObject jSONObject0 = new JSONObject((Object) "bNU2&<]");
      jSONObject0.optLong("toL");
      Boolean boolean1 = Boolean.FALSE;
      jSONObject0.optDouble("Missing value");
      try { 
        jSONObject0.getString("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      byte byte0 = (byte)71;
      Byte byte1 = new Byte((byte)71);
      String string1 = "\\u";
      try { 
        jSONObject0.getJSONArray(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0694603678729133
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("kf&tId/u.1");
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kf&tId/u.1";
      stringArray0[1] = "kf&tId/u.1";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "kf&tId/u.1";
      stringArray0[4] = "kf&tId/u.1";
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedInt", (Object) null);
      jSONObject1.optDouble("istoUnsignedInt");
      try { 
        jSONObject1.getString("gAp8w2ku(_gM)HQP.[=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gAp8w2ku(_gM)HQP.[=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.251260840411949
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("wC6e75!ZsC");
      String string0 = "] is not a Boolean.";
      Boolean boolean0 = new Boolean("%^H[}a&GYCwAkmq=X");
      JSONObject jSONObject1 = jSONObject0.put("%^H[}a&GYCwAkmq=X", (Object) boolean0);
      String string1 = "8ik iu";
      jSONObject1.optDouble("wC6e75!ZsC");
      try { 
        jSONObject0.getString("wC6e75!ZsC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wC6e75!ZsC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.248213119063932
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("%^H[}a&GYCwAkmq=X");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("%^H[}a&GYCwAkmq=X", object0);
      jSONObject0.getString("%^H[}a&GYCwAkmq=X");
      jSONObject0.optString("istoUpperCase", "AWH%\"MUa");
      jSONObject1.optBoolean(">>mUBrl;R 87)");
      jSONObject1.optString("(pf8w!#mFH", "toU");
      Object object1 = jSONObject1.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8878803926846093
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = Short.valueOf((short)55);
      Short.toUnsignedInt((short) (-3184));
      String string0 = JSONObject.valueToString(short0);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0, 2678, 2678);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject1.optString("RZZ71O");
      assertEquals("", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7560836273833575
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Double double0 = new Double(4377.83467388728);
      jSONObject0.append("", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.9716576976342282
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      JSONObject jSONObject0 = new JSONObject("bNU2&<]", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("</91Qq#");
      String string0 = jSONObject0.optString(" of ", "<XP");
      assertEquals("<XP", string0);
      
      boolean boolean1 = jSONObject0.isNull("<XP");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4620975966507315
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", "");
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("cp=$9z;s*{<%VJu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp=$9z;s*{<%VJu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.4817054397879863
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = stringArray0[0];
      stringArray0[8] = null;
      stringArray0[4] = null;
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optString(stringArray0[1], ">rLOxWf`3gU");
      String[] stringArray1 = new String[8];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = null;
      stringArray1[5] = "] not found.";
      stringArray1[6] = ">rLOxWf`3gU";
      stringArray1[7] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject1.has(stringArray1[7]);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("|^1YrR");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ',' or ']'";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5249780504310533
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      JSONObject.testValidity(short0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("ZfL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZfL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6952764766845418
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)71);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(1249);
      Integer.sum(1249, 1249);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double((-1584.5196351044));
      String string0 = JSONObject.valueToString(double0, (-2664), 0);
      assertNotNull(string0);
  }
}
