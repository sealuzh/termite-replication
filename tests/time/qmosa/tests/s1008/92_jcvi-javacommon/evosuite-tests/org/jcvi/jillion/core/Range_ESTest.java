/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:58:36 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7711049024088803
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of(21L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem3, 3827L, 2147483647L);
      range1.equals(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.886802097254766
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range range0 = Range.of((-1016L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range.of(176L);
      Range range1 = Range.of((-1016L));
      Range.Builder range_Builder2 = new Range.Builder(1L);
      long long0 = (-3343L);
      range_Builder2.expandEnd((-3343L));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1655L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9045204561114093
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(1561L, 1561L);
      range0.split(1561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = range0.intersection(range0);
      long long0 = new Long(1561L);
      range1.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(1561L);
      range1.endsBefore(range0);
      Range.of(1561L);
      Long long1 = new Long((-198L));
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range2 = Range.ofLength(9223372036854775316L);
      // Undeclared exception!
      try { 
        range2.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.930351222854597
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 821L, 5809L);
      Range range0 = Range.ofLength(5809L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854775316L);
      Range.of(range_CoordinateSystem0, 821L, 5809L);
      range1.spliterator();
      Range range2 = Range.of((-442L));
      Range range3 = Range.ofLength(9223372036854775316L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range3.isSubRangeOf(range1);
      Range.Comparators.values();
      boolean boolean1 = range2.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      
      range3.iterator();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.1143821312001
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range range1 = Range.of((-1016L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = Range.of(176L);
      Long long0 = new Long((-1016L));
      Range range3 = Range.of(range_CoordinateSystem0, (-198L), (-198L));
      Long long1 = new Long((-3888L));
      boolean boolean0 = range3.equals(long1);
      Range.Builder range_Builder2 = new Range.Builder(range3);
      Range.ofLength(9980L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range1.isSubRangeOf(range3);
      Range.Comparators.values();
      boolean boolean1 = range2.endsBefore(range3);
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3610161705964603
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of((-476L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.0176194870744135
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 176L, 9223372036854775551L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(731L);
      range_Builder1.copy();
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(4198L);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      Range range3 = Range.ofLength(4198L);
      range3.equals((Object) null);
      range2.getLength();
      range0.iterator();
      Range.Builder range_Builder2 = new Range.Builder();
      Long long0 = new Long(917L);
      Object object0 = new Object();
      range3.equals(object0);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range0.isSubRangeOf(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8993483210143265
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(254L, 2778L);
      range0.split(1561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of((-1245L), 254L);
      range1.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(2778L, long0);
      
      Range range2 = Range.of((-1245L), 1561L);
      range2.getLength();
      Range range3 = range1.intersection(range2);
      Object object0 = new Object();
      boolean boolean0 = range3.equals(object0);
      assertSame(range3, range1);
      assertFalse(boolean0);
      
      Range.of(2147483647L);
      range2.toString();
      long long1 = range2.getLength();
      assertEquals(2807L, long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.952239498809419
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-128L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-128L));
      range_Builder2.shift((-4605L));
      range_Builder0.expandEnd((-4605L));
      Object object0 = new Object();
      Range.Builder range_Builder3 = new Range.Builder();
      Long long0 = new Long(0L);
      Long long1 = new Long((-432L));
      range0.equals(long1);
      range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder((-477L), (-128L));
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder5 = range_Builder1.expandEnd(1818L);
      range_Builder5.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.952382194872806
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(2147483648L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(2147483648L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Long long1 = new Long(753L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      range0.equals(object0);
      assertSame(range0, range2);
      
      Range range3 = Range.of((-32768L), 2147483647L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.704944844049588
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2147483647L);
      range_Builder2.shift(2847L);
      Range.of(2847L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-655L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -656 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.906306160551214
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.of(1L);
      range_Builder1.expandEnd(1L);
      range2.isSubRangeOf(range0);
      range2.endsBefore(range0);
      Range range3 = Range.of(65535L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8978458930608486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(2147483648L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(753L);
      range1.intersection(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.of((-32768L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.137736898899749
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range range1 = Range.of((-1016L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range2 = Range.ofLength(4198L);
      range2.iterator();
      Range range3 = range1.intersection(range0);
      range0.spliterator();
      range2.equals(range_Builder1);
      range1.getLength();
      range0.iterator();
      Range.Builder range_Builder2 = new Range.Builder();
      Long long0 = new Long(392L);
      range3.equals(range_Builder2);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      range3.isSubRangeOf(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.187699931822445
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(176L);
      range_Builder0.copy();
      Range range1 = Range.of((-1016L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range.of(176L);
      Long long0 = new Long((-1016L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of(range_CoordinateSystem0, (-198L), (-198L));
      Long long1 = new Long((-3888L));
      range2.equals(long1);
      Range range3 = Range.ofLength(9223372036854775632L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.isSubRangeOf(range0);
      Range.Comparators.values();
      range1.endsBefore(range3);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range3));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4268080450967746
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-476L));
      Range range1 = Range.of((-476L));
      range0.intersection(range1);
      Range.of((-2147483648L));
      long long1 = (-1590L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1590L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7717418005186443
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(127L);
      range0.isEmpty();
      Range range1 = Range.ofLength(127L);
      range0.getLength();
      List<Range> list0 = range1.split(127L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7891969791125355
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 821L, 5809L);
      Range.ofLength(5809L);
      Range range0 = Range.of(9223372036854775316L);
      Range.of(range_CoordinateSystem0, 821L, 5809L);
      range0.spliterator();
      Range range1 = Range.of((-442L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-442L), 393L);
      Range range2 = Range.of((-3160L));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9518820539469326
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1374L, 4124L);
      Range range1 = Range.ofLength(4124L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      range0.spliterator();
      assertNotSame(range0, range2);
      assertFalse(range0.equals((Object)range2));
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 325L);
      Range range4 = Range.of(918L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.981496299371932
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 393L, (-9223372036854775808L));
      Range range4 = Range.of((-442L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.08154207882582
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-359L));
      Range.Builder range_Builder0 = new Range.Builder((-277L), 782L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1008L);
      range_Builder1.copy();
      Range range1 = Range.of((-277L));
      Range range2 = Range.ofLength(782L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range range3 = range2.intersection(range0);
      range_Builder1.copy();
      range3.spliterator();
      assertTrue(range3.isEmpty());
      
      Object object0 = new Object();
      long long0 = range1.getEnd();
      assertEquals((-277L), long0);
      
      Range.Builder range_Builder2 = new Range.Builder();
      Long long1 = new Long((-277L));
      range2.equals(range_Builder1);
      assertFalse(range2.isEmpty());
      
      Range range4 = Range.of(770L, 1008L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8578674656095813
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range2.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder(range4);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 21L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.458054830067992
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(1561L, 1561L);
      range0.split(1561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.160857953486718
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(1L);
      range_Builder1.expandEnd(1L);
      range2.isSubRangeOf(range0);
      Range range4 = Range.of((-32768L), 21L);
      range0.complement(range4);
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range_Builder1.shift(0L);
      Range range5 = Range.parseRange("[ 1 .. 1 ]/0B", range_CoordinateSystem1);
      range5.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.parseRange("MCTP+a", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse MCTP+a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7795097798596125
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range0.iterator();
      range0.spliterator();
      range_Builder2.expandBegin(2147483647L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1897L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8461401980551537
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      range_Builder0.expandBegin((-937L));
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      Range range3 = Range.of(2147483647L);
      boolean boolean0 = range2.isSubRangeOf(range3);
      assertFalse(range3.isEmpty());
      assertTrue(range2.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9713189871646635
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      long long0 = new Long(2147483647L);
      Range range2 = range1.intersection(range0);
      range1.equals("");
      Range range3 = Range.of((-3616L));
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8005452912005664
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.contractBegin(2147483647L);
      range_Builder0.shift(0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Long long0 = new Long((-129L));
      range1.equals(long0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem0, 2226L, 327L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7906070793896487
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range3.asRange();
      Range range4 = Range.of((-476L));
      boolean boolean0 = range2.endsBefore(range1);
      assertNotSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.771786345562051
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("uxv8bXS", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse uxv8bXS into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6243412174818843
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = Range.ofLength(1L);
      range0.getBegin();
      Range.of(255L);
      range0.spliterator();
      Range.of((-2272L));
      long long0 = 127L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-442L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6932756245743037
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      range1.split(2147483647L);
      range0.intersection(range1);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(127L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.73004771676854
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-1L), 1947L);
      Range range1 = Range.of(1947L);
      range0.startsBefore(range1);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      long long0 = (-1490L);
      // Undeclared exception!
      try { 
        range0.split((-1490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9433676533358173
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, (-1053L), 0L);
      boolean boolean0 = range1.equals(range2);
      assertSame(range2, range3);
      
      Range.Builder range_Builder0 = new Range.Builder(range4);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range5 = Range.of(range_CoordinateSystem1, (-1053L), 21L);
      Range range6 = Range.ofLength(127L);
      boolean boolean1 = range6.isSubRangeOf(range5);
      assertFalse(boolean1 == boolean0);
      assertNotSame(range5, range4);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.545865340023698
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.isEmpty();
      Range range2 = range_Builder0.build();
      range2.getEnd();
      range2.intersection(range1);
      range2.equals(range1);
      Range.of(1L, 1L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-3125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("RESIDUE_BASED", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RESIDUE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7341230233614775
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      range1.getLength();
      range0.getBegin();
      range1.endsBefore(range2);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3031168113373814
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      long long0 = 3502L;
      Range.ofLength(3502L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.860661471421213
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 821L, 5809L);
      Range.ofLength(5809L);
      Range range0 = Range.of(9223372036854775316L);
      Range.of(range_CoordinateSystem0, 821L, 5809L);
      range0.spliterator();
      Range range1 = Range.of((-442L));
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.ofLength(9223372036854775316L);
      assertFalse(range2.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775316L, long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6352674844619624
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(1561L, 1561L);
      range0.split(1561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1562L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.770073506781555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L, 0L);
      range0.spliterator();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2738245227550617
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(5721L);
      Range.of(21L);
      Range range1 = Range.of(9223372036854775632L);
      long long0 = range1.getBegin();
      assertEquals(9223372036854775632L, long0);
      
      Range range2 = Range.of(1845L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.744962488231548
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      long long0 = 0L;
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(1274L);
      range_Builder1.contractBegin(2147483647L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range1.intersects(range0);
      Range.Comparators.values();
      String string0 = "";
      range_Builder1.build();
      range0.toString();
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7462697910836047
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1920L), 1L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      
      Range range3 = Range.of(821L);
      assertFalse(range3.isEmpty());
      
      Range.of(range_CoordinateSystem1, 821L, 5331L);
      Range range4 = Range.of((-492L));
      assertNotSame(range4, range2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.7226010617765035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of((-476L), (-109L));
      Range range1 = Range.of((-476L));
      range1.intersection(range0);
      long long0 = 21L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 21L, 2847L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-109L), (-476L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.470448058966748
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 176L;
      Range.of(range_CoordinateSystem0, 176L, 176L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(176L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1956L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.743111758806309
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(2147483647L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem3, 2147483647L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.627503948762349
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyByteRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.095601753568239
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(2147483647L);
      Range range0 = Range.ofLength(1274L);
      Range range1 = Range.ofLength(1274L);
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range range3 = Range.of(range_CoordinateSystem0, (-972L), 3225L);
      range0.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem1);
      range1.startsBefore(range2);
      Object object0 = new Object();
      Range.of(range_CoordinateSystem0, 4612L, 4612L);
      range0.asRange();
      Range.of((-889L));
      range3.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.131089865790073
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of((-476L), (-128L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-442L));
      range_Builder1.expandBegin((-476L));
      Range range3 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range4 = Range.of(0L);
      assertFalse(range4.isEmpty());
      
      range_Builder0.expandEnd(0L);
      Range range5 = Range.ofLength(4294967295L);
      range5.isSubRangeOf(range2);
      Range.of(400L, 4294967295L);
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range1.intersects(range0);
      Range range6 = Range.of((-9223372036854775808L));
      range6.getBegin();
      Object object0 = new Object();
      boolean boolean1 = range1.isSubRangeOf(range6);
      assertSame(range1, range3);
      assertNotSame(range1, range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.478680543331222
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-476L), (-476L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-476L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.882300620004012
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-608L), 1L);
      String string0 = "1";
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-713L), (-713L));
      range1.isSubRangeOf(range2);
      range_Builder0.copy();
      range_Builder0.contractEnd(1L);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("1", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.233745164440903
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of((-476L));
      Range.of((-128L));
      Range range1 = Range.of((-476L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.717217246945313
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      range1.split(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyByteRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2625L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = 821L;
      Range.Builder range_Builder0 = new Range.Builder(9968L, 9968L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9968L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.851128503194165
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of((-475L));
      Range.Builder range_Builder0 = new Range.Builder(1189L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(1000L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      boolean boolean0 = range2.equals(range1);
      assertTrue(range2.isEmpty());
      assertFalse(boolean0);
      
      Range range3 = Range.of(0L);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.650711269457763
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.shift(0L);
      Object object0 = new Object();
      range_Builder0.contractBegin(1L);
      range2.equals(object0);
      range_Builder1.copy();
      range1.isSubRangeOf(range2);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.077261739233318
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(1274L);
      Range range1 = Range.ofLength(1274L);
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range range3 = Range.of(range_CoordinateSystem0, (-972L), 3225L);
      boolean boolean0 = range0.endsBefore(range3);
      boolean boolean1 = range1.startsBefore(range2);
      assertSame(range2, range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Range.of(2224L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1274L, 4294965572L);
      Range range4 = Range.of(2147483648L);
      assertFalse(range4.isEmpty());
      
      Range range5 = range_Builder1.build();
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9819974036206536
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      long long0 = range1.getLength();
      assertEquals(2147483647L, long0);
      
      range1.endsBefore(range0);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      range1.spliterator();
      Range range3 = Range.of((-442L));
      boolean boolean0 = range3.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.137327223435199
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L);
      long long0 = range0.getEnd();
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.680105627772182
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem2);
      long long0 = range1.getEnd();
      assertFalse(range1.isEmpty());
      assertEquals(0L, long0);
      
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range3 = Range.of(0L);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6259642084263364
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(1274L);
      Range range1 = Range.ofLength(1274L);
      range0.isSubRangeOf(range0);
      range0.spliterator();
      Range range2 = range1.asRange();
      range1.endsBefore(range1);
      // Undeclared exception!
      try { 
        range2.split((-2147483939L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.445049519655863
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.ofLength(125L);
      range0.split(125L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.038951288708
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2240L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.660358642268735
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      long long0 = 2147485216L;
      Range range0 = Range.of(2147485216L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range_Builder0.contractEnd((-1L));
      Range range1 = Range.ofLength(2130L);
      Range range2 = Range.of(0L, 0L);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.6056996737706273
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of(1561L, 1561L);
      range0.split(1561L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1561L, (-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.402942013307257
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.of((-359L));
      range0.isSubRangeOf(range0);
      Range.of((-359L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.788277708080535
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of((-476L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 21L, 127L);
      boolean boolean0 = range2.isSubRangeOf(range3);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.159333949227909
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 2 .. 2 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.of(1L);
      range_Builder1.expandEnd(1L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.of((-32768L), 21L);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range_Builder1.shift(0L);
      Range.parseRange("[ 2 .. 2 ]/RB");
      Range range4 = range_Builder1.build();
      //  // Unstable assertion: assertTrue(range4.equals((Object)range2));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.8623576881693538
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of((-476L));
      Range range1 = Range.of((-476L));
      range0.intersection(range1);
      range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(400L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 227L, 820L);
      Long long1 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range2.spliterator();
      Range.ofLength(653L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4399724567765175
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 65535L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6786104077158903
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(2147483648L);
      range_Builder0.contractBegin(2147483648L);
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3861827060295
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = 2295L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2295L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("RESIDUE_BASED", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RESIDUE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=4.1657571324387135
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L);
      range0.spliterator();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(861L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774987L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.of((-3478L));
      range_Builder1.expandEnd(4294967295L);
      range1.isSubRangeOf(range2);
      Range range3 = Range.of((-32768L), 474L);
      range3.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775807L);
      range3.intersects(range4);
      Range.of(1845L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1025L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.096685297953766
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Iterator<Long> iterator0 = range0.iterator();
      range0.spliterator();
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.of(1L);
      range_Builder1.expandEnd(1L);
      range2.isSubRangeOf(range0);
      Range range3 = Range.of((-32768L), 21L);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      boolean boolean0 = range0.intersects(range2);
      Range range4 = Range.of(21L);
      range4.equals(iterator0);
      boolean boolean1 = range2.isSubRangeOf(range3);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3413L), (-3413L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.9898876047832625
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd(255L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(255L);
      range_Builder2.contractEnd(1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.ofLength(4294965496L);
      Range range3 = range1.intersection(range0);
      range3.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range range4 = Range.of(range_CoordinateSystem0, 1274L, 3225L);
      range3.endsBefore(range2);
      range4.isEmpty();
      Object object0 = new Object();
      Range.of(857L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294965496L, (-1568L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.746386370025292
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range range0 = Range.of((-476L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      assertFalse(range2.isEmpty());
      
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 21L, 127L);
      Range range3 = Range.of((-476L));
      assertSame(range3, range2);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=4.050306346027961
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(2147483647L);
      Range range2 = range_Builder1.build();
      range2.isSubRangeOf(range0);
      range1.complement(range0);
      boolean boolean0 = range2.intersects(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range3 = Range.of(4208L);
      range3.equals((Object) null);
      range1.isSubRangeOf(range3);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=4.034105784315008
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(1274L);
      range_Builder1.contractBegin(2147483647L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      boolean boolean0 = range1.intersects(range0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1568L), 2147483647L);
      Range range3 = range0.asRange();
      range1.isSubRangeOf(range3);
      Range range4 = Range.of((-1568L));
      boolean boolean1 = range4.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range5 = range2.intersection(range3);
      assertSame(range3, range5);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7820505792169623
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      long long0 = 0L;
      range_Builder0.contractEnd(0L);
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=4.075359507891322
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range range0 = Range.of((-359L));
      Range.Builder range_Builder0 = new Range.Builder((-277L), 782L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1008L);
      range_Builder1.copy();
      Range.of((-277L));
      Range range1 = Range.ofLength(782L);
      range1.intersection(range0);
      range0.spliterator();
      Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 1282L);
      Range range2 = Range.of(9983L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.8800266348978147
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      range_Builder0.expandBegin((-937L));
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      Range.of(2147483647L);
      Range range3 = Range.of(255L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6514606173944077
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range range0 = Range.of((-493L), (-128L));
      Range.of((-493L));
      Range.of(21L);
      Range range1 = Range.of((-1L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.5125169912124776
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.shift(0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.of(1L, (-9223372036854774729L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.541209923416266
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range range0 = Range.of((-359L));
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1957L), 1273L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder((-359L), 1L);
      long long0 = 1956L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1445L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2295L, 2295L);
      long long1 = (-1348L);
      range_Builder0.contractEnd((-1348L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1348L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.6077780526231717
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 821L, 5809L);
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 2224L);
      Range range0 = Range.of(3605L);
      assertFalse(range0.isEmpty());
      
      Range range1 = range_Builder0.build();
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.677749582159139
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(861L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = range_Builder0.contractBegin(861L);
      range_Builder4.shift((-128L));
      Object object0 = new Object();
      Range.Builder range_Builder5 = new Range.Builder();
      Long long0 = new Long(2147483647L);
      Object object1 = new Object();
      Range range0 = Range.of((-1922L));
      assertFalse(range0.isEmpty());
  }
}
