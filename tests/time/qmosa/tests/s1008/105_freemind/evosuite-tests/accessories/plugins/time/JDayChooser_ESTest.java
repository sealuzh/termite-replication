/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:11:43 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.image.IndexColorModel;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.text.Format;
import java.text.NumberFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.MenuElement;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandler;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1815978647431673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      jDayChooser0.paintImmediately(2604, 61449, 2604, 2604);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      systemColor0.getColorSpace();
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setDay(264);
      jDayChooser0.getMinSelectableDate();
      Locale locale0 = null;
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2345278685325436
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.getActionMap();
      jDayChooser0.getMaximumSize();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay(0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getMaximumSize();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.initDecorations();
      jDayChooser0.setDayBordersVisible(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "Wq/PL#";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.186822878775106
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMonth(48);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.16477807491006
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      float[] floatArray0 = new float[3];
      jDayChooser0.getActionMap();
      Color.RGBtoHSB(37, (-45), (-45), floatArray0);
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2193), 0, (-1863), 37, 605, (-387));
      mockGregorianCalendar0.clear();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.16480169407465
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getMaximumSize();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay(Integer.MAX_VALUE);
      jDayChooser0.setForeground(color0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.272676816337691
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, (-726), 0, 'Z');
      jDayChooser0.getClientProperty(color0);
      keyEvent0.setSource((Object) null);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setEnabled(false);
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = JComponent.getDefaultLocale();
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      int int0 = 2693;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2693);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2358503374208434
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getMaximumSize();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("9xj<SM]uu$j0Q%!?AxF", (-923.8780265887796), (-923.8780265887796));
      jDayChooser0.setDecorationBackgroundVisible(false);
      MockDate mockDate0 = new MockDate(0, 49, (-440), 0, 3039, 210);
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      jDayChooser_DecoratorButton0.setFocusCycleRoot(true);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9xj<SM]uu$j0Q%!?AxF";
      stringArray0[1] = "9xj<SM]uu$j0Q%!?AxF";
      stringArray0[2] = "day";
      stringArray0[3] = "9xj<SM]uu$j0Q%!?AxF";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.240292978874181
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = JComponent.getDefaultLocale();
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 349, 0, 7, 0);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2411052120076524
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.getSundayForeground();
      HashMap<Format.Field, Integer> hashMap0 = new HashMap<Format.Field, Integer>();
      Font font0 = new Font(hashMap0);
      jDayChooser0.setFont(font0);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 205);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      int int0 = (-80);
      ActionEvent actionEvent0 = new ActionEvent(locale0, (-80), "");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1337783790681435
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.BLACK;
      jDayChooser0.setSundayForeground(color0);
      Locale locale0 = new Locale("day");
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMonth(48);
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      Color color0 = Color.CYAN;
      int[] intArray0 = new int[6];
      intArray0[0] = 960;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 960;
      intArray0[3] = 960;
      intArray0[4] = 960;
      intArray0[5] = 960;
      BigInteger bigInteger0 = BigInteger.ZERO;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(960, 960, intArray0, 960, 0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1920, 1920, 10, (-826), 'N');
      KeyEvent.getExtendedKeyCodeForChar(1);
      int int0 = 430;
      keyEvent0.setKeyCode(430);
      jDayChooser0.keyTyped(keyEvent0);
      ElemCopy elemCopy0 = new ElemCopy();
      ImageHandler imageHandler0 = null;
      // Undeclared exception!
      try { 
        elemCopy0.getDocumentElement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      Object object0 = new Object();
      long long0 = 0L;
      int int0 = (-1996);
      ActionEvent actionEvent0 = new ActionEvent(object0, 278, "day", 0L, (-1996));
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getDefaultButton();
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      JYearChooser jYearChooser0 = new JYearChooser();
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 1815, false);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION;
      focusEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      FocusEvent focusEvent1 = new FocusEvent(jYearChooser0, 1815, false);
      focusEvent1.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.X;
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 7, "year");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Component$AWTTreeLock cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      int int0 = 27;
      int int1 = 42;
      char char0 = ':';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", true);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(icon0);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      JMenuItem jMenuItem0 = new JMenuItem("x", 361);
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removePropertyChangeListener("28", (PropertyChangeListener) null);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0587048806759154
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.170852679829979
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color.getColor("Metal", color0);
      color0.darker();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9, 0, 0, 1, 'Z');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.transferFocusUpCycle();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "6I*: ZF%.vCA6_=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 6I*: ZF%.vCA6_=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.16480169407465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getMaximumSize();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("?M]?", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.setForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      mockSimpleDateFormat0.setNumberFormat(numberFormat0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.updateUI();
      jDayChooser0.getMinSelectableDate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(90, stringArray0, stringArray0, stringArray0, stringArray0, (IBindingFactory) null);
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("day", "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      jYearChooser0.firePropertyChange("day", 2459, 2459);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.firePropertyChange("EJsuK`Hc\"", false, false);
      String string0 = "*8hX";
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      int int0 = 10161;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-3992L), 916, 10161, '\"');
      KeyEvent.getKeyText((-5399));
      jDayChooser0.keyReleased(keyEvent0);
      MockInstant.now();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      String string0 = "X;R[f!MOiA1\"?Q#~C4r";
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = null;
      try {
        xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fRecognizedFeatures
         //
         verifyException("org.apache.xerces.parsers.XML11NonValidatingConfiguration", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
