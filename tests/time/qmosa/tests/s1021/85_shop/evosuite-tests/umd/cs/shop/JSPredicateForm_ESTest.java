/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 07:46:48 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator1);
      StringReader stringReader1 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.listIterator();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm1);
      jSTerm0.firstElement();
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(1741L);
      System.setCurrentTimeMillis(1978L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("fgSggT],>dwG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1452583831));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-1452583831), (-1452583831));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-4));
      jSTerm0.spliterator();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(494);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("E(oEUt[C>8'^o}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.clonePF();
      JSTerm jSTerm2 = new JSTerm();
      jSPredicateForm0.firstElement();
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis(3716L);
      System.setCurrentTimeMillis(3716L);
      System.setCurrentTimeMillis(1392L);
      jSTerm1.print();
      jSTerm1.print();
      assertFalse(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2945451658448959
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line :");
      jSTerm0.iterator();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("Line :");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.clear();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(41);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(41);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      System.setCurrentTimeMillis(765L);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(17, stringBuffer0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8599672810355049
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line :");
      jSTerm0.iterator();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("Line :");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(381L);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(2571L);
      jSTerm0.equals(jSPredicateForm0);
      System.setCurrentTimeMillis(2753L);
      System.setCurrentTimeMillis(2571L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.makeConstant();
      System.setCurrentTimeMillis(281L);
      System.setCurrentTimeMillis(281L);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElement("not");
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSTerm0.add((Object) jSTerm0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ei n9");
      StringReader stringReader1 = new StringReader("dZNPTs%");
      StringReader stringReader2 = new StringReader(")P[tzA1");
      char[] charArray0 = new char[23];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[0] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'U';
      charArray0[8] = 'n';
      stringReader1.read(charArray0);
      StringReader stringReader3 = new StringReader("dZNPTs%");
      stringReader3.read(charArray0);
      stringReader0.ready();
      stringReader0.skip(7);
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(1795L);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(1795L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.makeFunction();
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      char[] charArray0 = new char[10];
      charArray0[1] = '!';
      charArray0[2] = 'W';
      charArray0[3] = '4';
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      char[] charArray0 = new char[10];
      StringReader stringReader0 = new StringReader("Line : ");
      stringReader0.read(charArray0);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("ing");
      stringReader1.skip(891L);
      stringReader0.close();
      StringReader stringReader2 = new StringReader(".I6=VlTSg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis(716L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("U#");
      stringReader0.read(charArray0);
      stringReader1.ready();
      stringReader1.skip(0L);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7871671362877786
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line :");
      StringReader stringReader0 = new StringReader("Line :");
      jSTerm0.iterator();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader1 = new StringReader("Line :");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSSubstitution0.spliterator();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clear();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm1.matches(jSPredicateForm0);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSPredicateForm1);
      jSTerm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution4);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm2.replaceAll(unaryOperator0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      jSPredicateForm3.matches(jSPredicateForm1);
      jSTerm1.clonePF();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.797701254015762
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line :");
      StringReader stringReader0 = new StringReader("Line :");
      jSTerm0.iterator();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("Line :");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSSubstitution0.spliterator();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clear();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSPredicateForm1.matches(jSPredicateForm0);
      jSTerm0.matches(jSPredicateForm1);
      System.setCurrentTimeMillis(269L);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution4);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.applySubstitutionPF(jSSubstitution2);
      jSPredicateForm0.matches(jSPredicateForm5);
      JSSubstitution jSSubstitution5 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution5.fail());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      assertEquals("[Line :, [Line :]]", jSPredicateForm6.toString());
      assertNotSame(jSPredicateForm1, jSPredicateForm3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "@not");
      jSTerm0.firstElement();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElement("not");
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution2.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line : ");
      jSTerm0.add((Object) jSTerm0);
      char[] charArray0 = new char[10];
      charArray0[1] = '!';
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) "Line : ");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Line :");
      StringReader stringReader0 = new StringReader("Line :");
      jSTerm0.iterator();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) "Line :");
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = new StringReader("f!D$B^'");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.add((Object) "L+N[gpw47.Z{w2eG");
      objectArray0[0] = (Object) "not";
      jSTerm0.add((Object) "not");
      Object object0 = new Object();
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9231367675469941
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Ei =9");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.print();
      jSPredicateForm0.print();
      jSTerm0.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = jSPredicateForm1.matches((JSPredicateForm) jSTerm0);
      jSPredicateForm0.iterator();
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader(" . ");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSSubstitution1.spliterator();
      jSPredicateForm2.matches(jSPredicateForm1, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.clear();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      JSJshopVars.greaterT = 509;
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSPredicateForm2.matches(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.add((Object) "not");
      objectArray0[0] = (Object) "not";
      jSTerm0.add((Object) "not");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gjk(q\"DEVt4,?}\"S");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm0.add((Object) "not");
      objectArray0[0] = (Object) "not";
      jSTerm0.add((Object) "not");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      jSTerm0.sort(comparator0);
      jSSubstitution0.add((Object) "rNq);SgpSJV4 $}h_(@");
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.sort(comparator2);
      streamTokenizer0.parseNumbers();
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.sort(comparator3);
      jSPredicateForm1.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.quoteChar((-1163709147));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parallelStream();
      streamTokenizer0.quoteChar((-1614351475));
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis((-1614351475));
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("fgSggT],>dwG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1452583831));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-1452583831), (-1452583831));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-4));
      jSTerm0.spliterator();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(494);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm1.lastElement();
      jSTerm1.add((Object) "not");
      streamTokenizer2.slashStarComments(true);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[6];
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.quoteChar((-1361));
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.nval = (double) (-4);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.spliterator();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3765L);
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution1 = jSTerm2.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) streamTokenizer1);
      jSTerm0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSJshopVars.verticalL = (-4);
      jSPredicateForm0.toStr();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[6];
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.nval = (double) (-4);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer0.wordChars(1, (-1183));
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChar((-1183));
      jSTerm1.spliterator();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.commentChar((-1213));
      jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer1.slashStarComments(true);
      JSJshopVars.equalT = (-1);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ei n9");
      StringReader stringReader1 = new StringReader("dZNPTs%");
      StringReader stringReader2 = new StringReader(")P[tzA1");
      char[] charArray0 = new char[9];
      StringReader stringReader3 = new StringReader("ubZKY=Y7-?x");
      stringReader3.ready();
      stringReader3.read(charArray0);
      StringReader stringReader4 = new StringReader("+kgn2Q;>vFtoCo");
      stringReader3.read(charArray0);
      StringReader stringReader5 = new StringReader(")P[tzA1");
      stringReader4.read(charArray0);
      stringReader5.ready();
      char[] charArray1 = new char[3];
      charArray1[0] = '[';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader5);
      streamTokenizer1.ordinaryChars(9, 9);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader4.markSupported();
      streamTokenizer0.slashStarComments(false);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      StringReader stringReader6 = new StringReader("3.0");
      assertFalse(stringReader6.equals((Object)stringReader1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElement("not");
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution2.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer(96);
      linkedList0.add(integer1);
      Integer integer2 = new Integer((-3));
      linkedList0.add(integer1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.removeAll(jSPredicateForm0);
      System.setCurrentTimeMillis(765L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.quoteChar((-1163709147));
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars((-4), (-1));
      streamTokenizer2.whitespaceChars(109, (-4));
      streamTokenizer0.whitespaceChars((-1471), (-1295));
      stringReader0.read();
      streamTokenizer0.nval = (double) 1;
      streamTokenizer2.commentChar((-1989));
      streamTokenizer2.commentChar((-1163709147));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-363));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[6];
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.nval = (double) 6;
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      streamTokenizer0.quoteChar(32);
      jSTerm1.standardizerTerm();
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2997L));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(stringBuffer0);
      jSPredicateForm0.removeElement(stringBuffer0);
      jSSubstitution0.add((Object) null);
      jSPredicateForm0.removeAll(jSSubstitution0);
      jSPredicateForm0.addAll(0, (Collection) jSSubstitution0);
      JSJshopVars.semicolon = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'W';
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator1);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.add((Object) comparator0);
      // Undeclared exception!
      try { 
        jSPredicateForm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$1601639115 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "not";
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noS");
      jSTerm0.firstElement();
      jSTerm0.firstElement();
      jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-955L));
      System.setCurrentTimeMillis((-955L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      Object object0 = new Object();
      streamTokenizer1.whitespaceChars(109, (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.commentChar((-1442799604));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noS");
      jSTerm0.firstElement();
      jSTerm0.firstElement();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement("noS");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution0);
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) "OdZ:pfWX/BN~j");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution4);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'W';
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(96);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer0);
      Integer integer1 = new Integer(2679);
      linkedList0.add(integer0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.setSize(1789);
      StringReader stringReader0 = new StringReader("ei n9");
      StringReader stringReader1 = new StringReader("dZNPTs%");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      stringReader0.read(charArray0);
      StringReader stringReader3 = new StringReader(" x&G@l+\"{,>i)[(l");
      char[] charArray1 = new char[1];
      charArray1[0] = 'n';
      stringReader3.read(charArray1);
      stringReader2.ready();
      stringReader2.skip(0L);
      stringReader3.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "@not");
      jSTerm0.firstElement();
      jSTerm0.add((Object) "@not");
      jSTerm0.firstElement();
      jSTerm0.add((Object) "@not");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) streamTokenizer1);
      jSTerm0.firstElement();
      System.setCurrentTimeMillis(239L);
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-204L));
      System.setCurrentTimeMillis(239L);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ei n9");
      StringReader stringReader1 = new StringReader("dZNPTs%");
      StringReader stringReader2 = new StringReader(")P[tzA1");
      char[] charArray0 = new char[9];
      StringReader stringReader3 = new StringReader("ubZKY=Y7-?x");
      stringReader3.ready();
      stringReader3.read(charArray0);
      StringReader stringReader4 = new StringReader("+kgn2Q;>vFtoCo");
      stringReader3.read(charArray0);
      StringReader stringReader5 = new StringReader(")P[tzA1");
      stringReader4.read(charArray0);
      stringReader5.ready();
      StringReader stringReader6 = new StringReader("2F'h)~Dj(!`4rK*Z )Z");
      jSPredicateForm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      char[] charArray0 = new char[2];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1975));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      jSPredicateForm0.removeAll(linkedList0);
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.quoteChar((-1163709147));
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      streamTokenizer2.ttype = 1;
      streamTokenizer1.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars((-4), (-1));
      streamTokenizer2.whitespaceChars(109, (-4));
      streamTokenizer0.whitespaceChars((-1471), (-1295));
      stringReader0.read();
      streamTokenizer0.nval = (double) 1;
      streamTokenizer2.commentChar((-1989));
      streamTokenizer2.commentChar((-1163709147));
      stringReader0.read();
      streamTokenizer1.parseNumbers();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("E=jbIo$S#");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rNq);SgpSJV4 $}h_(@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.quoteChar((-1163709147));
      streamTokenizer0.parseNumbers();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      streamTokenizer2.ttype = 1;
      streamTokenizer1.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars((-4), (-1));
      streamTokenizer2.whitespaceChars(109, (-4));
      streamTokenizer0.whitespaceChars((-1471), (-1295));
      stringReader0.read();
      streamTokenizer0.nval = (double) 1;
      streamTokenizer2.commentChar((-1989));
      streamTokenizer2.commentChar((-1163709147));
      stringReader0.read();
      streamTokenizer1.parseNumbers();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSTerm0.removeAll(linkedList0);
      System.setCurrentTimeMillis(27L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
