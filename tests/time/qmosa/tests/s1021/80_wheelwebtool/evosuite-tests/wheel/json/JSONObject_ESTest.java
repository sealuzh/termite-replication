/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:56:16 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iscompareTo", false);
      String string0 = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(boolean0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2341318910876438
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("wheel.json.JSONArray");
      JSONObject.quote((String) null);
      Object object0 = JSONObject.NULL;
      try { 
        Double.valueOf("wheel.json.JSONArray");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7644873003668833
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      String string0 = "not";
      stringArray0[0] = "not";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      String string1 = "ZjK^";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7550787361143083
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject2 = jSONObject0.put("false", 1491);
      jSONObject1.names();
      jSONObject2.optString((String) null, "jTV)$9E{J]DHz");
      Object object1 = new Object();
      jSONObject2.accumulate("false", object1);
      JSONObject jSONObject3 = jSONObject2.put("7#z!BF~b=}{I_QD)h7", (Collection) null);
      jSONObject0.isNull("<");
      Object object2 = new Object();
      jSONObject0.has("*in<MpmPWoux&P_");
      jSONObject1.opt("#?EB4i");
      try { 
        jSONObject3.getInt("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9027485105471467
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject2 = jSONObject0.put("false", 1491);
      jSONObject1.names();
      jSONObject2.optString((String) null, "jTV)$9E{J]DHz");
      Object object1 = new Object();
      jSONObject2.accumulate("false", object1);
      jSONObject2.put("7#z!BF~b=}{I_QD)h7", (Collection) null);
      jSONObject0.isNull("<");
      Object object2 = new Object();
      JSONObject.doubleToString((-435.9954732));
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8253655043352248
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean.valueOf("$");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iscompareTo", false);
      Float float0 = new Float(Double.NaN);
      Float.min(1.0F, 1.0F);
      Float.max((-1775.9342F), 1.0F);
      Float.max((-1775.9342F), 1.0963515F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6926994887130524
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = ":/t,8J+jT^b\\_e!d";
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.optString("not", "g+jr");
      Object object0 = new Object();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1741208536521337
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optLong("s;", 0L);
      JSONObject jSONObject2 = jSONObject0.put(",\n", 9);
      jSONObject1.toString();
      String string0 = "iscompare";
      jSONObject1.toString(9);
      JSONObject jSONObject3 = jSONObject1.put("x{L\"a\"-v~|", (Object) jSONObject2);
      jSONObject2.keys();
      jSONObject3.put("not", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(9);
      stringWriter0.append((CharSequence) "{}");
      jSONObject1.write(stringWriter1);
      Writer writer0 = jSONObject2.write(stringWriter0);
      jSONObject1.write(writer0);
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.372858697005692
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iscompareTo", false);
      Integer.getInteger("iscompareTo", 123);
      Integer integer0 = new Integer(123);
      JSONObject jSONObject1 = jSONObject0.append("cle", integer0);
      jSONObject1.optJSONArray("cle");
      Byte byte0 = new Byte((byte) (-120));
      Short short0 = new Short((byte)1);
      JSONObject.valueToString("\r", 123, 123);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("cle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of cle
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.631547931279231
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      jSONObject0.optInt("iscopyValueOf", 32);
      jSONObject0.put("g+jr", (Map) hashMap0);
      JSONObject.quote("';xKC");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("F3yl\"> ~n");
      try { 
        jSONObject1.getInt("iscopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscopyValueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.431598246403216
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("wa");
      JSONObject jSONObject0 = new JSONObject((Object) "\"wa\"");
      jSONObject0.toString(13);
      JSONTokener jSONTokener0 = new JSONTokener("{\n             \"java.lang.String@0000000004\": [\n                          java.lang.Byte@0000000018,\n                          java.lang.Byte@0000000019,\n                          java.lang.Byte@0000000020,\n                          java.lang.Byte@0000000021\n             ],\n             \"java.lang.String@0000000015\": \"java.lang.Class@0000000016\",\n             \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {
         //              \"java.lang.String@0000000004\": [
         //                           java.lang.Byte@0000000018,
         //                           java.lang.Byte@0000000019,
         //                           java.lang.Byte@0000000020,
         //                           java.lang.Byte@0000000021
         //              ],
         //              \"java.lang.String@0000000015\": \"java.lang.Class@0000000016\",
         //              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003
         // }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7072489764220014
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.accumulate("rZV.#i)", boolean0);
      jSONObject0.put("istoHexString", (Collection) linkedList0);
      jSONObject0.isNull("istoHexString");
      Object object0 = new Object();
      JSONObject.doubleToString(0.0);
      jSONObject0.toString(88, 88);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.888607513003509
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      String string0 = jSONObject1.optString("not", "g+jr");
      Object object0 = new Object();
      jSONObject1.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      String string1 = jSONObject1.toString(13, 123);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9315854938562476
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject2 = jSONObject0.put("false", 1491);
      jSONObject1.names();
      jSONObject2.optString((String) null, "jTV)$9E{J]DHz");
      Object object1 = new Object();
      jSONObject2.accumulate("false", object1);
      jSONObject2.put("7#z!BF~b=}{I_QD)h7", (Collection) null);
      jSONObject0.isNull("<");
      Object object2 = new Object();
      String string0 = JSONObject.doubleToString((-435.9954732));
      String string1 = jSONObject0.toString((-62164681), (-62164681));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1588975271257596
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      JSONObject.testValidity("g+jr");
      Byte byte0 = new Byte((byte) (-33));
      Long long0 = new Long(0L);
      Long.compareUnsigned((-1L), 324L);
      JSONObject jSONObject1 = jSONObject0.putOpt("g+jr", (Object) null);
      jSONObject1.optInt("cop", (-1090));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2908200606809133
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      jSONObject0.names();
      stringArray0[1] = "";
      stringArray0[2] = "] not found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject.getNames(jSONObject1);
      jSONObject0.optLong("v^S@?WVD@uMp", 1L);
      JSONObject jSONObject2 = jSONObject1.put("VB+", 9);
      jSONObject1.toString();
      jSONObject0.toString(9);
      JSONObject jSONObject3 = jSONObject1.put("iscompare", (Object) stringArray0[0]);
      jSONObject0.keys();
      JSONObject jSONObject4 = jSONObject3.put("{\"java.lang.String@0000000005\":java.lang.Integer@0000000006}", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(9);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "v^S@?WVD@uMp");
      Writer writer0 = jSONObject2.write(stringWriter2);
      jSONObject4.write(writer0);
      jSONObject1.names();
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.717280336376866
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.quote("wa");
      JSONObject jSONObject0 = new JSONObject((Object) "\"wa\"");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"wa\"";
      stringArray0[1] = "\"wa\"";
      stringArray0[2] = "wa";
      stringArray0[4] = "\"wa\"";
      stringArray0[5] = "wa";
      stringArray0[6] = "\"wa\"";
      stringArray0[7] = "\"wa\"";
      stringArray0[8] = "\"wa\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("\"wa\"", 2165);
      jSONObject2.optString("isreplaceAll", "\"wa\"");
      Object object0 = new Object();
      jSONObject1.names();
      JSONObject jSONObject3 = jSONObject1.accumulate("\"wa\"", (Object) null);
      jSONObject3.names();
      try { 
        jSONObject2.getLong("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.119426605603026
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$1", 1491);
      jSONObject1.optLong("wheel.json.JSONObject$1");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g+jr";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "wheel.json.JSONObject$1";
      JSONObject.getNames((Object) jSONObject2);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "[]";
      JSONObject jSONObject4 = jSONObject1.put("val", (-28));
      jSONObject2.names();
      jSONObject3.optString("wheel.json.JSONObject$1", "val");
      Object object1 = new Object();
      JSONObject jSONObject5 = jSONObject1.accumulate("wheel.json.JSONObject$1", jSONObject2);
      jSONObject1.optBoolean("val", false);
      jSONObject4.names();
      jSONObject5.isNull("g+jr");
      JSONObject.testValidity(jSONObject3);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7831651446316683
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONArray";
      Short short0 = new Short((short)2085);
      JSONObject.valueToString("wheel.json.JSONArray");
      JSONObject.quote("cf6teG{=$o/Du");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("cf6teG{=$o/Du", "wheel.json.JSONArray");
      int int0 = 9;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((short)2085);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2085] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.put("ioR>", (Map) hashMap0);
      jSONObject1.put("_Q^ p]", true);
      String string0 = JSONObject.valueToString((Object) null, (-2384), 47);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.073761012616111
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      JSONObject.quote("g+jr");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("g+jr", 8192);
      try { 
        jSONObject0.getJSONArray("otx2n9:1mvEW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"otx2n9:1mvEW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9683434794855148
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      Integer integer0 = new Integer((short) (-1023));
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Map) hashMap0);
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9271776633243958
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      int int0 = 32;
      jSONObject0.optInt("ac", 8192);
      JSONTokener jSONTokener0 = new JSONTokener("F3yl\"> ~n");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of F3yl\"> ~n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5559470913862425
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      Float float0 = new Float(0.0);
      Float.max(1663.0F, 1663.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.262436762135496
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.toString(11);
      JSONTokener jSONTokener0 = new JSONTokener("w(ppKfPJ:ZHkY'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of w(ppKfPJ:ZHkY'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8099599313398733
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      JSONObject jSONObject1 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.append("wheel.json.JSONTokener", "not");
      Double double0 = new Double(8192);
      JSONObject.getNames((Object) double0);
      StringWriter stringWriter0 = new StringWriter(994);
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject1.names();
      StringWriter stringWriter1 = new StringWriter(8192);
      stringWriter0.write(101);
      jSONObject0.write(writer0);
      try { 
        jSONObject1.get("g+jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+jr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0, 3063, (-6));
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      String string0 = "wheel.json.JSONArray";
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      String string1 = "<";
      int int0 = 1491;
      JSONObject jSONObject1 = new JSONObject();
      String string2 = "false";
      JSONObject jSONObject2 = jSONObject0.put("false", 1491);
      jSONObject1.names();
      try { 
        jSONObject2.accumulate((String) null, "false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.203091016406272
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.max(1663.0F, 1663.0F);
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)395);
      Object object1 = new Object();
      JSONObject.getNames(object1);
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.optString((String) null, "isreplaceAll");
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      Long long0 = new Long((-1033L));
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(long0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9608905407094879
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "ym>Z";
      jSONObject1.put("ym>Z", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("ym>Z", false);
      try { 
        jSONObject2.getJSONObject("ym>Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ym>Z\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iswait", false);
      Integer integer0 = Integer.getInteger("Null key.", 35);
      try { 
        jSONObject0.append("iswait", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[iswait] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8235216348945507
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.remove("log");
      jSONObject1.optLong("log");
      jSONObject0.isNull("log");
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONArray("Null pointer");
      jSONArray0.optInt((-1003), 0);
      Byte byte0 = new Byte((byte)1);
      JSONObject.valueToString(jSONArray0, (byte)1, (-1003));
      jSONObject1.put("7", 0.0);
      Object object0 = new Object();
      JSONObject.getNames((Object) "log");
      JSONArray jSONArray1 = jSONObject2.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5971667788083437
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.max(1663.0F, 1663.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(jSONObject0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "wheel.json.JSONObject@0000000001");
      jSONObject0.write(stringWriter1);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
      
      jSONObject0.toString(3);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9172742253872226
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.optString("not", "g+jr");
      StringWriter stringWriter0 = new StringWriter(994);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject2.getLong("I9!Nf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I9!Nf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9111497930776107
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 1491);
      String string0 = "g+jr";
      jSONObject1.optLong("");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject0.put("wheel.json.JSONArray", 1491);
      jSONObject0.names();
      jSONObject3.optString("Expected '", "");
      Object object0 = new Object();
      jSONObject1.accumulate("g+jr", object0);
      jSONObject3.optBoolean("", false);
      jSONObject2.names();
      jSONObject3.isNull("");
      Integer integer0 = new Integer(1491);
      JSONObject.testValidity(integer0);
      try { 
        jSONObject1.getLong("WC<CmR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WC<CmR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0670188852591505
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8241);
      String[] stringArray0 = new String[5];
      stringArray0[2] = "Null key.";
      stringArray0[3] = "Null key.";
      stringArray0[4] = "Null key.";
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)32);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-5632), 2);
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1113454208085973
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("g+jr", (Map) hashMap0);
      jSONObject1.put("g+jr", (double) 8192);
      jSONObject0.optDouble("g+jr", (-441.5008289422087));
      jSONObject0.optDouble("g+jr", (-3602.0589573));
      Boolean boolean0 = new Boolean("$!/R'");
      try { 
        Double.valueOf("g+jr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4237984775210544
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      String string0 = "wheel.json.JSONArray";
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "";
      int int0 = 1491;
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("wheel.json.JSONArray", "");
      jSONObject1.optLong("g+lr");
      stringArray0[3] = "wheel.json.JSONArray";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optLong(",\n");
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      Float float0 = new Float((double) 0L);
      JSONObject.numberToString(float0);
      JSONObject.quote("");
      JSONObject jSONObject4 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer((-3112));
      String[] stringArray0 = new String[3];
      int int0 = (-1741);
      Integer.compare((-3112), (-1741));
      Integer.getInteger("wheel.json.JSONArray", integer0);
      stringArray0[0] = ":17sLel";
      stringArray0[1] = "/K$]?q`a";
      stringArray0[2] = "K8tceo3O]oybGyWIY";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.remove(":17sLel");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(116);
      Integer.compareUnsigned(62, (-3112));
      Integer.getInteger("M<ShmY-!9l\"}$i", integer1);
      linkedList0.addLast(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Object) "/K$]?q`a");
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.put((String) null, (-3112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.16000987417804
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iscompareTo", false);
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("ZjK^", false);
      jSONObject1.optJSONObject(">osjX,dO|1w");
      try { 
        jSONObject1.getString("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4035683150869844
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("y,=ogr^Ww'dsAi", 32);
      jSONObject0.optDouble("F3yl\"> ~n");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("_=", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1008724535282015
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2085);
      JSONObject.valueToString("wheel.json.JSONArray");
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Integer.getInteger("]]_?7Okq]uj3LDIaF[", 2);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("]]_?7Okq]uj3LDIaF[", jSONArray0);
      jSONObject2.optJSONArray("istoString");
      byte byte0 = (byte)102;
      Byte byte1 = new Byte((byte)102);
      JSONObject.valueToString(jSONObject1);
      try { 
        jSONObject2.put("\"java.lang.String@0000000002\"", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5689653252356863
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = "wheel.json.JSONArray";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string1 = "gettriWm";
      JSONObject jSONObject1 = jSONObject0.put("gettriWm", (Collection) linkedList0);
      jSONObject0.remove("in");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-36));
      linkedList1.add(integer0);
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 0;
      jSONArray0.optInt(0, (-36));
      Object object0 = new Object();
      JSONObject.valueToString(jSONObject1);
      jSONObject0.keys();
      jSONObject0.optBoolean("wheel.json.JSONObject@0000000001", true);
      jSONObject1.optString("gettriWm", "gettriWm");
      jSONObject0.getJSONArray("gettriWm");
      try { 
        jSONObject1.getBoolean("wheel.json.JSONArray@0000000006");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000006\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6500513957169134
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject2 = jSONObject0.put("false", 1491);
      JSONObject.valueToString((Object) null);
      jSONObject1.names();
      jSONObject2.optString((String) null, "jTV)$9E{J]DHz");
      Object object1 = new Object();
      jSONObject2.accumulate("false", object1);
      jSONObject0.isNull("<");
      jSONObject2.optLong("h\"_5\"gu>UV=/Hm 0061", (-3280L));
      JSONObject jSONObject3 = jSONObject1.put("", (double) 1491);
      Object object2 = jSONObject3.opt("gettoHexString");
      assertNull(object2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2458176828681067
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject1.optString("not", "g+jr");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      jSONObject3.optBoolean("g+jr", true);
      jSONObject2.names();
      jSONObject3.isNull("'q03^cOafkkEWw{q");
      JSONObject.testValidity((Object) null);
      Byte byte0 = new Byte((byte) (-33));
      Long long0 = new Long((-585L));
      Long.compareUnsigned((-1L), 972L);
      JSONObject jSONObject4 = jSONObject3.putOpt("not", long0);
      jSONObject4.optLong("2:RCx", 972L);
      jSONObject3.optInt("g+jr", (-1090));
      jSONObject4.toJSONArray(jSONArray0);
      jSONObject1.getString("not");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4981423022637577
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1068), 58);
      String[] stringArray0 = new String[4];
      String string0 = "wheel.json.JSONArray";
      stringArray0[0] = "wheel.json.JSONArray";
      Short short0 = new Short((short)2085);
      JSONObject.valueToString("wheel.json.JSONArray");
      int int0 = 9;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((short)2085);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2085] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.531892697476894
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      int int0 = 1491;
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double(1491);
      JSONObject jSONObject2 = jSONObject0.append("R 1T0Z$FSvKPw", double0);
      jSONObject2.optLong("wheel.json.JSONArray");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "g+lr";
      stringArray0[2] = "R 1T0Z$FSvKPw";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "R 1T0Z$FSvKPw";
      stringArray0[5] = "R 1T0Z$FSvKPw";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.optLong(",\n");
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      Float float0 = new Float((double) 0L);
      JSONObject.numberToString(double0);
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject5 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-2448));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2448] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.012648213605587
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "TQ<iV,.>`";
      jSONObject0.optDouble("TQ<iV,.>`");
      jSONObject0.isNull("\b");
      jSONObject0.optDouble("TQ<iV,.>`", (-1894.357391));
      jSONObject0.optInt("\b", 0);
      try { 
        jSONObject0.getInt("TQ<iV,.>`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TQ<iV,.>`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.152688612638742
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("y,=ogr^Ww'dsAi", 32);
      assertEquals(32, int0);
      
      double double0 = jSONObject0.optDouble("F3yl\"> ~n");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("F3yl\"> ~n");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3313300281106963
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      stringArray0[2] = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.put("wheel.json.JSONArray", true);
      jSONObject0.optInt("A JSONArray text must start with '['", 225);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = jSONObject0.get("");
      assertEquals(1491, object0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.287235243759113
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 2079L);
      jSONObject0.remove((String) null);
      String string0 = "\\u";
      jSONObject0.optString(string0);
      jSONObject0.optInt("");
      jSONObject0.optInt("", (-26713449));
      JSONObject.quote("");
      jSONObject0.optDouble("F3yl\"> ~n");
      try { 
        jSONObject0.getInt("~N5W@XD,i2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~N5W@XD,i2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0373169770528543
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject1.optString("not", "g+jr");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      jSONObject3.optBoolean("g+jr", true);
      JSONArray jSONArray1 = jSONObject2.names();
      jSONObject3.optInt("g+jr", 8192);
      JSONObject jSONObject4 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject4.optDouble((String) null);
      try { 
        jSONObject4.getInt(":/t,8J+jT^b_e!d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":/t,8J+jT^b_e!d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("+&?O9>P_]HAv", false);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1973037333559553
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Short short0 = new Short((short) (-1985));
      JSONObject jSONObject2 = jSONObject0.accumulate("g+jr", short0);
      JSONObject jSONObject3 = jSONObject2.put("?oZ5I", (Collection) linkedList0);
      jSONObject0.toString();
      jSONObject2.isNull("{RM|/c.");
      Object object0 = new Object();
      JSONObject.doubleToString((-598.0198));
      jSONObject1.toString(12, (int) (short) (-1985));
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject3.optInt("g+jr");
      assertEquals((-1985), int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.909552933607322
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n/ot";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.optString("n/ot", "g+jr");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      jSONObject2.names();
      jSONObject2.put("g+jr", (long) 123);
      try { 
        jSONObject3.getLong("g+jr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+jr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7238004602164385
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "AYY-mcx($88p>\\2}V";
      JSONObject jSONObject1 = jSONObject0.put("AYY-mcx($88p>\u0002}V", 900L);
      String string1 = "_5*xQC}?* 62}^o3BX";
      try { 
        jSONObject1.get("_5*xQC}?* 62}^o3BX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_5*xQC}?* 62}^o3BX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.020459078224503
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float.max(1663.0F, 1663.0F);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      String string0 = "\\u";
      stringArray0[0] = string0;
      JSONObject.valueToString("@4%", 2073, 435);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Expected a ',' or ']'", (-313L));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6339776483456645
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject0.put("TQ<iV,.>`", (Map) hashMap0);
      String string0 = "log";
      jSONObject1.remove("log");
      jSONObject1.optLong("log");
      jSONObject0.isNull("log");
      HashMap<Short, Byte> hashMap1 = new HashMap<Short, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) null);
      String string1 = "wai";
      JSONObject jSONObject3 = jSONObject1.put("wai", true);
      try { 
        jSONObject3.get("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5022666320900813
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.accumulate("rZV.#i)", boolean0);
      JSONObject jSONObject1 = jSONObject0.put("istoHexString", (Collection) linkedList0);
      jSONObject0.isNull("istoHexString");
      Object object0 = new Object();
      JSONObject.doubleToString(0.0);
      jSONObject1.getString("istoHexString");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject.doubleToString((-2610.5));
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.optJSONArray((String) null);
      double double0 = (-2610.5);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1849866651070124
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-195));
      JSONObject.valueToString(short0);
      JSONObject jSONObject1 = jSONObject0.put("<", 1491);
      jSONObject1.names();
      jSONObject0.optString("false", "#yV_4`eS4/b");
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.accumulate("", "java.lang.Short@0000000002");
      jSONObject1.isNull((String) null);
      jSONObject2.optLong("", 0L);
      jSONObject2.put("", (-4254.921105028902));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = "] not found.";
      stringArray0[1] = "] not found.";
      String string1 = "";
      stringArray0[2] = "";
      stringArray0[3] = "48Py&#wTS0{)-\"";
      stringArray0[4] = "\b";
      stringArray0[5] = "JSONArray[";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.206311628322536
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("", object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("![%3C=j^\" x:k*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"![%3C=j^\\\" x:k*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3937921361333925
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 8192;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      jSONObject0.remove("not");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-36));
      linkedList0.add(integer0);
      linkedList1.addAll((Collection<? extends Integer>) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt(0, (-1332));
      Object object0 = new Object();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.keys();
      jSONObject0.optBoolean("not", false);
      jSONObject0.optString("not", "wheel.json.JSONObject@0000000001");
      try { 
        jSONObject0.getJSONArray("c>'- F3)hKQN5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"c>'- F3)hKQN5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      Boolean.valueOf("V/`g./t0je<");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("u5N", true);
      Float float0 = new Float(428.91254);
      JSONObject jSONObject1 = jSONObject0.put("ZjK^", true);
      jSONObject1.optJSONObject(">osjX,dO|1w");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">osjX,dO|1w";
      stringArray0[1] = "u5N";
      stringArray0[2] = "ZjK^";
      stringArray0[3] = "V/`g./t0je<";
      stringArray0[4] = "ZjK^";
      stringArray0[5] = ">osjX,dO|1w";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject2.getString("ZjK^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZjK^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("islogicalOr", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = new Boolean("islogicalOr");
      String string0 = jSONObject0.optString("Re?hWj~80", "Unclosed comment");
      assertEquals("Unclosed comment", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.224018253388071
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Integer.getInteger("A JSONArray text must start with '['", 1491);
      JSONObject jSONObject2 = jSONObject0.append("wheel.json.JSONArray", object0);
      jSONObject0.optJSONArray("W^&Y!,");
      Byte byte0 = new Byte((byte)0);
      JSONObject.valueToString("", 1491, 2073);
      jSONObject2.put("\r", (double) (byte)1);
      Object object1 = new Object();
      String[] stringArray1 = JSONObject.getNames(object1);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.268974782457768
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject0.remove("\r");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Boolean.logicalOr(false, true);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      jSONObject1.put("|3O'Q6Fh zZ6[F5", (Collection) linkedList2);
      jSONObject0.isNull("getlogicalAnd");
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.4295976198950404
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = Integer.getInteger("Null key.", 35);
      JSONObject jSONObject1 = jSONObject0.append("iswait", integer0);
      jSONObject0.optJSONArray("\r");
      Byte byte0 = new Byte((byte)1);
      JSONObject.valueToString(byte0, 2073, (byte)1);
      jSONObject1.put("not", 0.0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.263772669324549
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "RaKfVs[:[=UY A";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      hashMap0.put("sH</oT5qj", jSONObject0);
      jSONObject0.optDouble("RaKfVs[:[=UY A");
      int int0 = 79;
      jSONObject0.optInt("Wvnb'}D", 79);
      String string1 = "\\f";
      try { 
        jSONObject0.getJSONArray("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5962415040614455
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X)#@";
      String string0 = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("X)#@", 531L);
      boolean boolean0 = new Boolean("X)#@");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      Boolean boolean1 = Boolean.TRUE;
      linkedList0.add(boolean1);
      Boolean boolean2 = Boolean.valueOf("");
      linkedList1.add(boolean2);
      jSONObject0.put("", (Collection) linkedList1);
      JSONObject.valueToString(jSONObject0, 1973, 1973);
      JSONArray jSONArray0 = null;
      JSONObject jSONObject1 = jSONObject0.append("X)#@", "JSON does not allow non-finite numbers.");
      String string1 = "\\u";
      try { 
        jSONObject1.getString(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1535325434136583
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("ym>Z", (Map) hashMap0);
      JSONObject.valueToString(jSONObject2, 2073, 2073);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8241);
      JSONObject.quote("~`mP\"Gd");
      Object object0 = JSONObject.NULL;
      try { 
        Double.valueOf("getlogicalOr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0394945578328674
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getString("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.33704758099806
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "g+jr";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = ":/t,8J+jT^b\\_e!d";
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      try { 
        jSONObject2.getLong(".y~#2 zI^oy[Z*f2+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".y~#2 zI^oy[Z*f2+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7538155554873507
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.remove("in");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("KL3K,JL_]%n", boolean0);
      Boolean.logicalOr(true, true);
      Long.getLong("] is not a JSONObject.");
      Boolean boolean1 = Boolean.TRUE;
      jSONObject1.optDouble("KL3K,JL_]%n");
      jSONObject1.getString("KL3K,JL_]%n");
      hashMap0.put((Long) null, boolean1);
      jSONObject0.optLong("log");
      String string0 = "JSONArray initial value should be a string or collection or array.";
      jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      HashMap<Short, Byte> hashMap1 = new HashMap<Short, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject2.getBoolean("gettriWm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettriWm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.024586002746287
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      jSONObject1.optLong("g+jr");
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "[]";
      jSONObject2.put("wheel.json.JSONArray", 0);
      jSONObject2.names();
      jSONObject2.optString("[]", "[]");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject2.accumulate("[]", object0);
      jSONObject3.optBoolean("", false);
      jSONObject2.names();
      jSONObject1.isNull("'q03^cOafkkEWw{q");
      JSONObject.testValidity("'q03^cOafkkEWw{q");
      try { 
        jSONObject2.getLong("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8606055912406045
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      jSONArray0.optInt((-1003));
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "log";
      jSONObject1.remove("log");
      jSONObject1.optLong("log");
      jSONObject0.isNull("log");
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optDouble("TOlNt!n@");
      JSONObject jSONObject3 = jSONObject1.put("wai", true);
      jSONObject3.getBoolean("wai");
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getDouble(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.6033611031424653
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.accumulate("rZV.#i)", boolean0);
      jSONObject0.put("istoHexString", (Collection) linkedList0);
      boolean boolean1 = jSONObject0.isNull("istoHexString");
      Short short0 = new Short((short) (-771));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "istoHexString";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "rZV.#i)";
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(3, jSONObject1.length());
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.456117947165377
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("z,tXg>ColDBp!", false);
      String string0 = "is";
      jSONObject1.put("s~[/4@[zs)", 1643);
      Integer.getInteger("is", 35);
      jSONObject2.append("iswait", "z,tXg>ColDBp!");
      jSONObject0.optJSONArray("Null key.");
      Byte byte0 = new Byte((byte)1);
      Object object0 = JSONObject.NULL;
      try { 
        Double.valueOf("is");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.032968909054993
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Expected '");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "not";
      stringArray0[3] = "not";
      stringArray0[4] = "not";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("UZR!DU\u0001'Zv.%#", 123);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.optString("", "}19#BB8=: kN");
      Object object0 = new Object();
      jSONObject0.accumulate("", "UZR!DU\u0001'Zv.%#");
      jSONObject2.optBoolean((String) null, true);
      JSONArray jSONArray1 = jSONObject2.names();
      jSONObject2.optInt("wz,&", 45);
      JSONObject jSONObject3 = jSONArray0.toJSONObject(jSONArray1);
      jSONObject1.optDouble("JSONArray initial value should be a string or collection or array.");
      try { 
        jSONObject3.getInt("5M=d+#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5M=d+#}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 2099.169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.23864638530972
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ym>Z", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("_Q^ p]", true);
      JSONObject.valueToString(jSONObject2, 2073, 2073);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.4680513026785817
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONArray", "");
      jSONObject1.optLong("wheel.json.JSONArray");
      Integer.getInteger("d", 1491);
      jSONObject2.append("^er>S*00NH=P{YOfc2z", "ug");
      jSONObject2.optJSONArray("OV8T+^qo]4)Bo'1");
      Byte byte0 = new Byte((byte)1);
      JSONObject.valueToString("", 354, 32);
      jSONObject0.put("not", 2769.7970216);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0564431912942776
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("g+jr");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not";
      stringArray0[1] = "g+jr";
      stringArray0[2] = "g+jr";
      stringArray0[3] = "g+jr";
      stringArray0[4] = "g+jr";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put(":/t,8J+jT^b_e!d", 123);
      jSONObject0.names();
      jSONObject1.optString("not", "g+jr");
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.accumulate("g+jr", ":/t,8J+jT^b_e!d");
      jSONObject3.optBoolean("g+jr", true);
      jSONObject2.names();
      jSONObject3.isNull("'q03^cOafkkEWw{q");
      JSONObject jSONObject4 = jSONObject0.put("g+jr", 123);
      jSONObject1.names();
      jSONObject0.optString("LHwK8G9", (String) null);
      Object object1 = new Object();
      jSONObject4.accumulate(":/t,8J+jT^b_e!d", jSONObject2);
      jSONObject3.names();
      try { 
        jSONObject3.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.048243038386791
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X)#@";
      String string0 = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("X)#@", 531L);
      jSONObject0.optBoolean("X)#@", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      jSONObject0.optInt("", 32);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Integer integer0 = new Integer(32);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3681760546548376
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      hashMap0.put(long0, (Boolean) null);
      JSONObject jSONObject2 = jSONObject0.put("ym>Z", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.replace(long0, boolean0);
      JSONObject.valueToString(jSONObject2, 2073, 2073);
      try { 
        jSONObject0.getDouble("ym>Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ym>Z\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.180575530592888
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("g+jr", (-3602.0589573));
      Boolean boolean0 = new Boolean("$!/R'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.311677653616267
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = "y,=ogr^Ww'dsAi";
      Boolean.valueOf("uIa-G^YU05rO");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      String string1 = "\\r";
      jSONObject0.put("\r", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-1523), (-1523));
      JSONArray jSONArray1 = null;
      Double double0 = new Double(1973);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.3289394993915424
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("istoHexString", (-1L));
      jSONObject0.optInt("", 22);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optDouble("2p0baDtg3 ");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8681215280890284
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float.max(1663.0F, 1663.0F);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Short@0000000004.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONArray("java.lang.Short@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000004.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6455022342629488
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("+&?O9>P_]HAv", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append(" of ", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.369960722984757
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString("ym>Z", 2073, 2073);
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ApC14D^Nt%X$CI\"";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "";
      double double0 = Double.NaN;
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("isnotifyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isnotifyAll
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(716);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "null";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "get";
      stringArray0[3] = "P@";
      stringArray0[4] = "*9dbF";
      stringArray0[5] = "isvalueOf";
      stringArray0[6] = "A JSONArray text must start with '['";
      stringArray0[7] = "issum";
      stringArray0[8] = "uOMwZBzIB!j";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("6/&q?yLk$HZ,|<l", (Object) "P@");
      assertEquals(1, jSONObject0.length());
  }
}
