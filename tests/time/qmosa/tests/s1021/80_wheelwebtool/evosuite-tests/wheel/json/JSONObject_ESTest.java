/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 07:22:02 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("e]GGv-&*/fM", (-2849L));
      assertEquals((-2849L), long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\r", (Collection) linkedList0);
      jSONObject0.remove("\r");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("|)Q:t<XS=98^\"o*", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      int int0 = jSONObject1.optInt("");
      assertEquals(1491, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      Object object0 = jSONObject1.opt("");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("false", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-522));
      jSONObject0.append("?#I\"~(OQnhF0T", integer0);
      boolean boolean0 = jSONObject0.has("?#I\"~(OQnhF0T");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      long long0 = jSONObject1.getLong("");
      assertEquals(1491L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      int int0 = jSONObject1.getInt("");
      assertEquals(1491, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("fale", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("fale", "fale");
      Object object0 = jSONObject1.get("fale");
      assertEquals("fale", object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("va", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 1973, (-2029));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1491, 1491);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(24);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((int) (byte) (-8));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.quote("sum");
      assertEquals("\"sum\"", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-1395.1));
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Unclosed comment", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "3");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000004\": []}", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)45);
      hashMap0.put((Object) null, byte0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nd", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "wheel.json.JSONArray");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("0", (long) 1973);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Jf ", 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", 0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iNF}i)0ckQ~HL~!>1XV", (-1003));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-2991.29009446));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2099.0572521077274);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.optString("W", (String) null);
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "{}");
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("X)#@", 531L);
      assertEquals(531L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-2849L));
      assertEquals((-2849L), long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt(stringArray0[1], (-1000));
      assertEquals((-1000), int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, 796);
      assertEquals(796, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("", 120);
      assertEquals(120, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      int int0 = jSONObject0.optInt(stringArray0[1]);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("fale", stringArray0);
      double double0 = jSONObject0.optDouble("fale", (double) 1155L);
      assertEquals(1155.0, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble((String) null, (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("|3O'Q6Fh zZ6[F5", (-1322.731));
      assertEquals((-1322.731), double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Short short0 = new Short((short)117);
      JSONObject jSONObject0 = new JSONObject(short0);
      double double0 = jSONObject0.optDouble("fSRG%SI`3Ru{c8");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("fale", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean(stringArray0[4], true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("-zqk5Z<qA8@L");
      assertNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte)70);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1496));
      assertEquals("-1496", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 14, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4791328074296435
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.putOpt("istoString", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      try { 
        jSONObject0.put(stringArray0[1], 1491);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double((-226.7782454172));
      hashMap0.put(double0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4511211368306685
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean("\"java.lang.String@0000000005\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000005\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4184836619456564
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-2991.29009446));
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("5nk[hJ_1/WV(@k!-(", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 40, 778);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      String string0 = JSONObject.valueToString(boolean0, 734, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 24, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.317688301004166
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9007519312291443
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("X)#@", "JSON does not allow non-finite numbers.");
      String string0 = JSONObject.valueToString(jSONObject1, 1973, 1973);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8489752603543634
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject0, (-1691), 40);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(330, (-677));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0679804844711245
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("Q<cCG-iDY-}a", stringArray0);
      Float float0 = new Float((-380.0F));
      JSONObject jSONObject1 = jSONObject0.putOpt("s?", float0);
      jSONObject0.append("jTV)$9E{J]DHz", "jTV)$9E{J]DHz");
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2148896539491205
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONArray0.put(823, (Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(824, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4107511765662584
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getJSONObject("]j1^\u0000oOZSAs:|/8']U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]j1^\\u0000oOZSAs:|/8']U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.8222900060250078
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#", 330);
      assertEquals(330, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5448917773784117
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONArray("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.9525127468791601
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6310786296750122
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[9];
      stringArray0[5] = "`Ytf>";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("2`_{J4Qkku).vn", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      String string0 = jSONObject1.optString("", "");
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-1395.1));
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getgetLong");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Unclosed comment");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1491);
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(1491.0, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8032982878044421
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-1003));
      jSONArray0.optInt((-1003), 0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("{}", (Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.append("cle", jSONArray1);
      Short short0 = new Short((short)53);
      String string0 = JSONObject.valueToString(short0, 0, (short)53);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9189413091216165
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("'%9jkWw^l01ID'`(", (double) 0.0F);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3730039128771998
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("is", 1491);
      long long0 = jSONObject0.optLong("is");
      assertEquals(2, jSONObject0.length());
      assertEquals(1491L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" at character ", jSONObject0);
      long long0 = jSONObject0.optLong(" at character ");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7667150919484005
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = new Double(3305.911055858287);
      jSONObject0.putOpt("", double0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("] not found.", (Collection) linkedList0);
      int int0 = jSONObject0.optInt("] not found.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("false", stringArray0);
      jSONObject0.accumulate("false", "false");
      boolean boolean0 = jSONObject0.optBoolean("false", true);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.7677281666160187
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("fale", stringArray0);
      jSONObject0.accumulate("fale", "fale");
      boolean boolean0 = jSONObject0.optBoolean("fale", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2619.13296254452);
      assertEquals("2619.13296254452", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-522));
      jSONObject0.append("![%3C=j^x:k*", "![%3C=j^x:k*");
      JSONObject jSONObject1 = jSONObject0.append("![%3C=j^x:k*", integer0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.301348304734199
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5155540995816876
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("\r", 2099.6336892497748);
      try { 
        jSONObject1.append("\r", "\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\r] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("wheel.json.JSONArray", "wheel.json.JSONArray");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      JSONObject jSONObject2 = jSONObject0.accumulate("", "");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{wC{#AZ /'oWp_W?3;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {wC{#AZ /'oWp_W?3;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("] not found.", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull("] not found.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.7841758925702789
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.7215439037069582
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0, (-1691), 40);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt("|_nfRDE#nE3z]", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7279646653096474
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("lj", 2);
      boolean boolean1 = jSONObject0.optBoolean("lj", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("?#I\"~(OQnhF0T");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("R");
      assertEquals("", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("fale");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of fale
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("'%9jkWw^l01ID'`(", (double) 0.0F);
      jSONObject1.getInt("'%9jkWw^l01ID'`(");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.remove("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject0.getJSONArray("wheel.json.JSONArray");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("?#I\"~(OQnhF0T");
      assertFalse(boolean0);
  }
}
