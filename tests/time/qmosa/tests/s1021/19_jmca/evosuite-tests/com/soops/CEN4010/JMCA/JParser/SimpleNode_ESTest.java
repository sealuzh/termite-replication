/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:41:04 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4597234124548493
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(">");
      arrayList0.retainAll(simpleNode0.identifiers);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString();
      simpleNode0.toString();
      arrayList0.add(0, ">");
      simpleNode0.jjtClose();
      simpleNode1.toString();
      Node node0 = simpleNode0.parent;
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode1.toString();
      simpleNode0.toString();
      simpleNode0.toString("CompilationUnit : >");
      simpleNode0.toString("CompilationUnit : >");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("Y=k4", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8064670140320753
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "ExtendsList";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ExtendsList");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      String string1 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      arrayList0.retainAll(simpleNode0.identifiers);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString();
      simpleNode0.toString();
      arrayList0.add(0, "");
      simpleNode0.jjtClose();
      simpleNode1.toString();
      Node node0 = simpleNode0.parent;
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode1.toString("CompilationUnit : ");
      simpleNode1.toString("");
      simpleNode0.toString("<U\"{^|-|YV@GJ#mn");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
      simpleNode0.jjtGetChild(0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5031358370452128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.identifiers.add("<");
      arrayList0.add(">=");
      arrayList0.add(">=");
      arrayList0.retainAll(simpleNode0.identifiers);
      arrayList0.add(">=");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString("l$A{9T8/");
      simpleNode0.toString();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      simpleNode1.identifiers = arrayList1;
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      arrayList0.replaceAll(unaryOperator0);
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode1.toString(">=");
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.488052702470729
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtClose();
      simpleNode0.jjtClose();
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      simpleNode0.toString("<U\"{^N-|YV@GJ4mnCompilationUnit");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      JavaParser javaParser0 = new JavaParser("MultiplicativeExpression");
      simpleNode0.parser = javaParser0;
      StringReader stringReader0 = new StringReader("<U\"{^N-|YV@GJ4mnCompilationUnit");
      stringWriter0.flush();
      simpleNode0.toString("\"enum\"");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      simpleNode0.jjtAddChild(simpleNode0, 3726);
      simpleNode0.jjtGetNumChildren();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtGetChild(3726);
      simpleNode0.jjtGetParent();
      StringWriter stringWriter2 = stringWriter0.append('4');
      // Undeclared exception!
      simpleNode0.dump("*gt", stringWriter2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.560937990303869
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ExtendsList");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(">");
      arrayList0.retainAll(simpleNode0.identifiers);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString();
      simpleNode0.toString();
      arrayList0.add(0, ">");
      simpleNode0.jjtClose();
      simpleNode1.toString();
      Node node0 = simpleNode0.parent;
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode1.toString(">");
      simpleNode0.toString("<U\"{^|-|YV@GJ#mn");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode0.jjtGetChild(0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode2;
      simpleNode2.children = nodeArray0;
      SimpleNode simpleNode3 = (SimpleNode)simpleNode1.jjtGetChild(0);
      assertNotSame(simpleNode3, simpleNode0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8022748482222584
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("#");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.retainAll(simpleNode0.identifiers);
      arrayList0.add("\"new\"");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      ArrayList<String> arrayList1 = simpleNode1.identifiers;
      simpleNode1.identifiers = arrayList1;
      simpleNode0.toString("Y=k4");
      simpleNode0.jjtClose();
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode1.toString("\"IK&-kkUUXC8#k@G");
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter(1);
      simpleNode1.parent = (Node) simpleNode0;
      stringWriter0.close();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode1, 1);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
      
      simpleNode1.jjtGetNumChildren();
      Node node1 = simpleNode1.jjtGetParent();
      assertEquals(2, node1.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7230344616436266
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("#");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.retainAll(simpleNode0.identifiers);
      arrayList0.add("\"new\"");
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.toString("Y=k4");
      simpleNode0.jjtClose();
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString("\"IK&-kkUUXC8#k@G");
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.170483763523242
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|eV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("%~o?5p8s(KK", stringWriter0);
      JavaParser javaParser0 = new JavaParser("MultiplicativeExpression");
      simpleNode0.parser = javaParser0;
      simpleNode0.toString((String) null);
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.jjtAddChild((Node) null, 1642);
      StringWriter stringWriter2 = new StringWriter(1642);
      stringWriter2.close();
      simpleNode0.dump("<U\"{^N-|YV@GJ4mnCompilationUnit", stringWriter1);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1305));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1305
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.372049101956355
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1442));
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtAddChild((Node) null, 0);
      Node node0 = simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtSetParent(node0);
      simpleNode0.jjtClose();
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.dump("&", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2730);
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2730
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 2474;
      SimpleNode simpleNode0 = new SimpleNode(2474);
      Node node0 = null;
      simpleNode0.setIdentifier("KNzm");
      simpleNode0.jjtSetParent((Node) null);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = null;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = null;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      String string0 = "*ge";
      StringWriter stringWriter0 = new StringWriter(2474);
      StringWriter stringWriter1 = stringWriter0.append('V');
      // Undeclared exception!
      try { 
        simpleNode0.dump("*ge", stringWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2474
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6105981585090816
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.dump("*fWpZ/Cr2-J&Lq*\"jU", stringWriter0);
      JavaParser javaParser1 = new JavaParser("q.akXvm&k2NB4(9n");
      StringReader stringReader0 = new StringReader(">=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, (-6254807));
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 4, (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParser javaParser2 = new JavaParser(javaParser1.token_source);
      SimpleNode simpleNode2 = new SimpleNode((-1));
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.15133290117123
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      simpleNode0.id = 0;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtClose();
      simpleNode0.jjtAddChild((Node) null, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -598
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-340));
      simpleNode0.parent = null;
      simpleNode0.jjtAddChild((Node) null, 1924);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(1925, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8001397057851696
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("MultiplicativeExpression");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|eV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("*fWpZ/Cr2-J&Lq*\"jU", stringWriter0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        dataInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParser0.ReInit(javaParserTokenManager0);
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'V';
      charArray0[4] = '3';
      charArray0[5] = 'l';
      charArray0[6] = 'U';
      charArray0[7] = 'a';
      charArray0[8] = '\\';
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.toString("GSD1YmOtV");
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      StringReader stringReader0 = new StringReader("<U\"{^N-|YV@GJ4mn");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.toString("&&");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.close();
      JavaParser javaParser1 = new JavaParser("MultiplicativeExpression");
      StringReader stringReader1 = new StringReader("*fWpZ/Cr2-J&Lq*\"jU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager1);
      SimpleNode simpleNode1 = new SimpleNode((-134512519));
      simpleNode0.jjtAddChild(simpleNode1, 4793);
      simpleNode1.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-134512519));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134512519
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.662389272587388
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtClose();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("#j");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.add("\"IK&-kkUUXC8#k@G");
      arrayList0.retainAll(simpleNode0.identifiers);
      arrayList0.add("\"new\"");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.toString("Y=k4");
      simpleNode0.toString();
      arrayList0.add(0, "\"IK&-kkUUXC8#k@G");
      simpleNode0.jjtClose();
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      arrayList0.parallelStream();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtOpen();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode1.toString("\"IK&-kkUUXC8#k@G");
      simpleNode0.jjtOpen();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString("<U\"{^N-|YV@GJ4mn");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("6 !m.R#FTT/Q^=U)w&", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode1, 1);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-1);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1442));
      // Undeclared exception!
      try { 
        simpleNode0.toString("e\"'1xr_:(o");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1442
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-19);
      SimpleNode simpleNode0 = new SimpleNode((-19));
      StringReader stringReader0 = new StringReader("&&");
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-19));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Annotation");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("@QPkq?8~N{2tBDn");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1114);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
