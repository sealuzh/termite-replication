/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:04:18 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8949386579598944
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(143L);
      Range range1 = Range.of((-1L));
      Range.ofLength(0L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(144L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder((-37L), (-37L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1L));
      Range range2 = range_Builder1.build();
      range_Builder1.shift(143L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.198132499614047
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Object object0 = new Object();
      Long long1 = new Long(9223372036854774259L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-1099L));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2081L, 9223372036854774259L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range2.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854774259L, long2);
      
      range2.startsBefore(range0);
      range0.intersects(range1);
      List<Range> list0 = range1.split(2034L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      assertEquals(0, list2.size());
      
      range2.complementFrom(list1);
      assertFalse(list1.equals((Object)list2));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1459983229767676
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = (-9223372036854710272L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6055256357012015
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Long long0 = new Long(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range1 = range_Builder1.build();
      range_Builder0.shift((-331L));
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range_Builder1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6892095197354795
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1388L));
      Range range1 = Range.of((-1388L), 4294967295L);
      boolean boolean0 = range0.intersects(range1);
      Range range2 = Range.of((-1813L), 1L);
      Range range3 = Range.of((-3240L));
      long long0 = range2.getEnd();
      long long1 = range3.getLength();
      assertTrue(long1 == long0);
      
      Long long2 = new Long(202L);
      boolean boolean1 = range2.equals(long2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.029506521764897
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(87L);
      range0.spliterator();
      Range range1 = Range.of(87L, 87L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      List<Range> list1 = range0.split(87L);
      range1.complementFrom(list1);
      range0.complement(range1);
      range0.endsBefore(range1);
      Range.of((-1L), 127L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.004151566076825
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(127L);
      long long0 = range0.getBegin();
      assertEquals(127L, long0);
      
      Range range1 = Range.of((-128L));
      List<Range> list0 = range1.complement(range0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      range1.isSubRangeOf(range0);
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.576409852808887
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder((-31672L), (-1104L));
      long long0 = 3670L;
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L, (-1104L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-9223372036854775808L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 3670L, 2147483647L);
      range_Builder1.expandBegin((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1104 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.182038846614358
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483641L);
      Long long0 = new Long(3675L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483641L);
      range_Builder0.expandBegin(3675L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.contractEnd(2147483641L);
      List<Range> list0 = range0.split(2147483641L);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3764058124683003
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.909827343531605
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      Range range1 = Range.of(1302L);
      List<Range> list0 = range1.complement(range0);
      range1.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range.of(255L);
      Range range2 = Range.of(1302L, 1302L);
      range2.split(1302L);
      // Undeclared exception!
      try { 
        range2.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6761652627770585
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.of(4294967295L);
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L, 255L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L, 9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-261L));
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-369L), 255L);
      long long1 = 1L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem1, 4294967295L, 86L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.08484478697791
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      range0.isEmpty();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-1600L));
      List<Range> list0 = range1.split(30L);
      assertTrue(list0.contains(range1));
      
      range0.intersection(range1);
      range_Builder0.contractEnd((-5364L));
      Range range2 = Range.ofLength(30L);
      List<Range> list1 = range2.split(1390L);
      Range.of(1985L, 1985L);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.contains(range2));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5442037167715057
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertSame(range0, range1);
      
      Object object0 = new Object();
      Long long1 = new Long((-1L));
      Range range2 = Range.of(621L, 919L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Range range3 = Range.of(919L);
      assertFalse(range3.isEmpty());
      
      range2.equals("a\"]");
      assertNotSame(range2, range3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.588323324505336
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertSame(range0, range1);
      
      Object object0 = new Object();
      Long long1 = new Long((-1L));
      Range range2 = Range.of(621L, 880L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Range range3 = Range.of(880L);
      assertNotSame(range3, range2);
      
      Range range4 = Range.ofLength(183L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.863296937536777
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(31L);
      Range range1 = Range.of(31L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      long long0 = new Long(31L);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7433730171173663
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(143L);
      Range.of(143L);
      Range range1 = Range.of(143L);
      Long long0 = new Long(143L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(0L);
      List<Range> list0 = range2.split(1L);
      range2.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.517696500984776
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-59L), (-59L));
      Range range1 = Range.of((-59L));
      List<Range> list0 = new LinkedList<Range>();
      range0.intersects(range1);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7232466590799933
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4478L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-1L));
      range1.split(4478L);
      Long long0 = new Long(2224L);
      assertEquals(2224L, (long)long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.392474707139005
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-9223372036854710272L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854710272 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6647008730261907
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      range1.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.45722898149983
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-9223372036854710272L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3599562939111154
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean0);
      assertSame(range1, range0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4492805312214125
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(0L, 31L);
      long long0 = range0.getEnd();
      assertEquals(31L, long0);
      
      Range range1 = Range.of(31L);
      long long1 = range1.getEnd();
      assertEquals(31L, long1);
      
      long long2 = range1.getLength();
      assertEquals(1L, long2);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8454718605587797
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      range0.getBegin();
      Range range1 = Range.of((-2818L));
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range1.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = null;
      // Undeclared exception!
      try { 
        range0.split((-2818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7176007042172357
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-1269L));
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      range0.equals((Object) null);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3245651352257855
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775807L);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      long long0 = (-31775L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.split((-31775L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6913819045010605
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-1L));
      Range range1 = Range.of((-1L));
      range1.split(2147483647L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1097L), (-660L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.342103715501825
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of(9223372036854775807L);
      long long0 = (-32768L);
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of((-2213L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6498480979937904
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L), 1993L);
      range0.getBegin();
      Range range1 = Range.ofLength(4294967295L);
      range1.getLength();
      range0.startsBefore(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.538826241174837
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.Builder range_Builder0 = new Range.Builder(230L, 4478L);
      long long0 = 1130L;
      Range.Builder range_Builder1 = new Range.Builder(809L, 1130L);
      range_Builder0.expandBegin(1130L);
      range_Builder1.build();
      long long1 = 2839L;
      Range.of(2839L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.868834442390385
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), (-1269L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range range1 = Range.of((-625L));
      boolean boolean1 = range1.startsBefore(range0);
      boolean boolean2 = range1.isSubRangeOf(range0);
      assertTrue(boolean2 == boolean1);
      
      List<Range> list0 = range0.split(121L);
      range1.complementFrom(list0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6778738216492513
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(3231L, 5264L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 5264L, 5264L);
      range1.isSubRangeOf(range0);
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(3231L, 387L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.707897032153783
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-16L));
      Range range1 = Range.of((-16L), 255L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 32770L, 9223372036854771132L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), 809L);
      range0.isEmpty();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.228541593541635
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = (-1L);
      Range.of(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-4677L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4678 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5106656440495367
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-9223372036854710272L));
      long long0 = new Long((-9223372036854710272L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854710272 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.35589949877927
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 31L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 31L);
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 230L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1743L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.613219356531673
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = (-32768L);
      Range.of((-32768L));
      Range.of((-32768L), 1L);
      // Undeclared exception!
      try { 
        Range.of((-2213L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1398345496569178
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.991601983124467
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 31L);
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      range1.complement(range0);
      Range range2 = Range.of(0L, 2897L);
      boolean boolean0 = range2.endsBefore(range1);
      Object object0 = new Object();
      boolean boolean1 = range2.isSubRangeOf(range2);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = range1.asRange();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7930460761980473
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range range1 = Range.of((-1L));
      Range.of(65535L, 65535L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("DEPARTURE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.DEPARTURE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2347908424299905
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.of((-1L));
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      Long long0 = new Long(32767L);
      Object object0 = new Object();
      Range range2 = Range.of((-1L));
      range2.isSubRangeOf(range0);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.518141035587074
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4294967295L;
      long long2 = 9223372034707292162L;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372034707292162L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5549878304670393
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 31L);
      Range range1 = Range.of(1L, 31L);
      range1.spliterator();
      Range range2 = Range.of(1L, 2903L);
      boolean boolean0 = range2.endsBefore(range1);
      Object object0 = new Object();
      boolean boolean1 = range2.isSubRangeOf(range2);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = range1.asRange();
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.639836958980417
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1269L), 809L);
      range0.isEmpty();
      List<Range> list0 = range0.split(809L);
      assertFalse(list0.contains(range0));
      assertEquals(3, list0.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3891188032707174
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(0L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.470547621976241
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967285L);
      Range range1 = Range.of((-9223372036854710272L));
      long long0 = new Long((-9223372036854710272L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.102306881756827
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long1);
      
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      range_Builder0.expandBegin(3675L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.contractEnd(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertTrue(list1.isEmpty());
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=4.125085470887125
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(127L);
      Range range2 = Range.of(1739L);
      List<Range> list0 = range0.complement(range2);
      range0.isSubRangeOf(range1);
      range2.complementFrom(list0);
      long long0 = 5263L;
      range0.split(5263L);
      range1.complementFrom(list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.ofLength(5263L);
      range3.complement(range2);
      Range range4 = Range.ofLength(1739L);
      range4.endsBefore(range1);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(5263L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3029639303737817
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.startsBefore(range1);
      boolean boolean2 = range1.intersects(range0);
      assertFalse(boolean2 == boolean1);
      assertSame(range1, range0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9264551170375404
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(3231L);
      Range range1 = Range.of(3231L, 3231L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 3231 ]/RB", string0);
      
      Range range2 = range0.intersection(range0);
      Range.CoordinateSystem.values();
      boolean boolean0 = range2.intersects(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range3 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range4 = Range.of(3231L);
      List<Range> list0 = range4.complement(range0);
      assertSame(range4, range3);
      assertSame(range0, range2);
      assertFalse(range4.isEmpty());
      assertTrue(list0.contains(range3));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3562694580837458
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 809L;
      long long1 = 4478L;
      Range range0 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long2 = (-1097L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1857L, 230L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.6767592916387284
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      Range.of(1776L, 4294967295L);
      range0.getLength();
      Long long1 = new Long(557L);
      Long.getLong("org.jcvi.jillion.core.Ranges", long1);
      Long.max(9223372036854775807L, (-32768L));
      Object object1 = new Object();
      range0.equals(long0);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long2 = new Long(2080L);
      range0.equals(long2);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-557L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.980240438113827
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.of(4294967295L);
      range2.spliterator();
      Range range3 = Range.of((-9L), 1242L);
      String string0 = range3.toString();
      //  // Unstable assertion: assertEquals("[ -9 .. 1242 ]/0B", string0);
      
      Range range4 = range1.intersection(range0);
      range3.intersects(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertNotSame(range2, range4);
      //  // Unstable assertion: assertTrue(list0.contains(range4));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(range2.equals((Object)range4));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(87L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6400735933938067
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 14L, 14L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range0.split(14L);
      long long0 = range0.getEnd();
      assertEquals(14L, long0);
      
      Range range1 = Range.of(14L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.7795766708905854
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4478L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range1.getBegin(range_CoordinateSystem0);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1270L), (-2L));
      Range.Builder range_Builder1 = new Range.Builder((-1270L), 230L);
      range_Builder1.expandBegin((-1097L));
      Range range2 = range_Builder0.build();
      range_Builder1.expandBegin(32767L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem2, 2147479973L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.561646400471878
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 2686L;
      Range.Builder range_Builder0 = new Range.Builder(2686L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(2686L);
      range_Builder0.copy();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.9322827043729953
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(143L);
      Range.of(143L);
      Range range1 = Range.of((-1L));
      Range range2 = Range.ofLength(143L);
      range1.intersection(range2);
      range1.iterator();
      Long long0 = new Long(143L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-774L), 32767L);
      range_Builder0.copy();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("xt", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse xt into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.7848288744951106
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      Range range2 = Range.of((-1L));
      Long long0 = new Long(990L);
      Object object0 = new Object();
      Range range3 = Range.of((-1L), 1776L);
      long long1 = range3.getLength();
      assertEquals(1778L, long1);
      
      Object object1 = new Object();
      Object object2 = new Object();
      range3.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals(object4);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.872145448801643
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Long long0 = new Long(1549L);
      Range.Builder range_Builder0 = new Range.Builder(1549L, (long) long0);
      Range.Builder range_Builder1 = new Range.Builder((-9223372036854775808L), (-1097L));
      range_Builder0.expandBegin(4441L);
      Range range1 = range_Builder1.build();
      range_Builder1.expandBegin((-2903L));
      Range range2 = Range.of((-1493L), 2147483647L);
      Range.ofLength(2052L);
      range1.getBegin();
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.893043798875838
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1498L), 2893L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(3675L, 2147483647L);
      range0.equals(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem1);
      Object object0 = new Object();
      range2.isSubRangeOf(range0);
      Object object1 = new Object();
      range2.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1498L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.936524404071337
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of((-575L), (-575L));
      Long long0 = new Long(1121L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1498L), (-575L));
      range1.intersection(range0);
      Range range2 = Range.of((-1498L), 1121L);
      Long long1 = new Long((-1498L));
      range2.equals(long1);
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder((-1097L), (-575L));
      range_Builder1.expandEnd(1050L);
      range_Builder1.expandBegin((-32768L));
      Range range3 = range_Builder0.build();
      range3.complement(range1);
      Range.Builder range_Builder2 = range_Builder1.shift((-3811L));
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd((-1318L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5441051423586702
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Long long0 = new Long(3675L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(3675L);
      long long1 = 0L;
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.shift(2147483647L);
      range_Builder2.contractEnd((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.8242223487350264
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 3231L;
      Range range0 = Range.ofLength(3231L);
      Range range1 = Range.of(3231L, 3231L);
      Range range2 = range0.intersection(range0);
      Range.CoordinateSystem.values();
      range2.intersects(range0);
      List<Range> list0 = range1.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandBegin((-2882L));
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.301215416668689
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 974L, 4775L);
      // Undeclared exception!
      try { 
        Range.of(974L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.8397525870207554
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(87L);
      range0.spliterator();
      List<Range> list0 = range0.split(87L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 87L, 87L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8345475461412395
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range range1 = Range.of((-1L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(1762L, 2274L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandBegin(1310L);
      range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder0.shift(1310L);
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(2274L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.71534685814408
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(87L);
      range0.spliterator();
      Range range1 = Range.of(87L, 87L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.574107451206729
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range range1 = Range.of(2274L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range1.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range2));
      assertSame(range1, range2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1398345496569178
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(4294967290L);
      long long0 = new Long(4294967290L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 990L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2723430600772674
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(4294967290L);
      Long long0 = new Long(4294967290L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getBegin();
      Range.of(4294967290L);
      // Undeclared exception!
      try { 
        Range.of((-724L), (-3307L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 1343L;
      Range.of(1343L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.663127306368913
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      range0.spliterator();
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2628L), 1L);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3474300863521744
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      boolean boolean1 = range1.equals(long0);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean0);
      assertSame(range1, range0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.66683128176642
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7061720393026913
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(4294967295L);
      Range.of((-9223372036854710272L));
      long long1 = new Long(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2034L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 1343L;
      Range.of(1343L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.7314862498998025
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Long long0 = new Long(1549L);
      Range.Builder range_Builder0 = new Range.Builder(1549L, (long) long0);
      Range.Builder range_Builder1 = new Range.Builder((-1097L), (-1097L));
      range_Builder0.expandBegin(4441L);
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-2903L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.build();
      range_Builder0.shift((-154L));
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(230L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7283826294198947
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 790L;
      Range range1 = Range.of(790L);
      range_Builder0.expandEnd(1993L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder2 = new Range.Builder(1993L, 1993L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long1 = 1953L;
      range_Builder1.shift(1953L);
      range1.getLength();
      range_Builder1.shift((-3251L));
      range_Builder1.expandBegin(790L);
      // Undeclared exception!
      try { 
        range0.split((-3251L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4584655061627694
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.Builder range_Builder0 = new Range.Builder(230L, 4478L);
      Range.Builder range_Builder1 = new Range.Builder(809L, 1130L);
      range_Builder0.expandBegin(1130L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 809L, 9223372036854775683L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.expandBegin(809L);
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem2, 468L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4248346982479627
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1549L, 1549L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.split(872L);
      Long long0 = new Long(1549L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(1343L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1344L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2818L), (-2818L));
      range_Builder0.copy();
      range_Builder0.shift((-2818L));
      range_Builder0.contractBegin((-2147483648L));
      range_Builder0.expandEnd(1083L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.477967530853504
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long(1L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range_Builder0.expandBegin(1L);
      Range range0 = Range.of(28L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.581032360214905
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2818L), (-2818L));
      range_Builder0.contractBegin((-2818L));
      range_Builder0.shift(255L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.parseRange("xt", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse xt into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5071729890843186
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-2818L), (-2818L));
      range_Builder0.shift((-2818L));
      range_Builder0.copy();
      Range range0 = Range.of(range_CoordinateSystem0, (-2818L), (-2818L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5751909646376516
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-1L));
      Long long0 = new Long(990L);
      Object object0 = new Object();
      Range range2 = Range.of((-2147483648L));
      range2.isSubRangeOf(range1);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.7872315129223355
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(87L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.of(777L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-16L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.789740914736237
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(143L);
      Range range1 = Range.ofLength(143L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L));
      Long long0 = new Long(143L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range3 = Range.of((-1348L), 3207L);
      long long1 = range3.getLength();
      assertEquals(4556L, long1);
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range2.equals(object3);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.31960229264352
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.of(0L, (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2598L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5290244572766025
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = (-9223372036854710272L);
      Range.of((-9223372036854710272L));
      range0.getLength();
      long long1 = 32767L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854710272L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4576633869013826
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-590L), 87L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(15L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2274L, 15L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.468344115536969
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 809L, 4478L);
      Range.Builder range_Builder0 = new Range.Builder(230L, 4478L);
      Range.Builder range_Builder1 = new Range.Builder(809L, 1130L);
      Range.Builder range_Builder2 = new Range.Builder(1130L, 1130L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, 809L, 9223372036854775683L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.expandBegin(809L);
      range_Builder4.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_CoordinateSystem2, 468L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6015208876540936
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(1762L, 2274L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandBegin(1310L);
      range_Builder0.build();
      range_Builder0.shift(1310L);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.242703796582508
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of(76L);
      // Undeclared exception!
      try { 
        Range.parseRange("A0Ob.a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse A0Ob.a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
