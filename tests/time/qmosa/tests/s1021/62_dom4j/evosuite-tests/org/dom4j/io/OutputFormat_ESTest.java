/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:25:47 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.757813823398559
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator("-suppressDeclaration");
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "P]c";
      stringArray0[3] = ">6^@eKwE:A{";
      stringArray0[4] = null;
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.getNewLineAfterNTags();
      assertEquals("-suppressDeclaration", outputFormat0.getLineSeparator());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.684020927119534
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      OutputFormat.createCompactFormat();
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("k:Qj^eGtna:_");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[0] = "";
      stringArray0[2] = "Gj@!,$933G3`aJN.c|";
      stringArray0[3] = "Gj@!,$933G3`aJN.c|";
      stringArray0[4] = "Gj@!,$933G3`aJN.c|";
      stringArray0[5] = "Gj@!,$933G3`aJN.c|";
      stringArray0[6] = "k:Qj^eGtna:_";
      outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat outputFormat1 = new OutputFormat("(agUa<ncosa\"", true, stringArray0[1]);
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.getEncoding();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5624532771352593
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("M]`0U+.");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.setIndent(true);
      outputFormat0.getEncoding();
      OutputFormat outputFormat2 = new OutputFormat("UTF-8");
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = string0;
      stringArray0[4] = "M]`0U+.";
      stringArray0[5] = "UTF-8";
      stringArray0[6] = "M]`0U+.";
      stringArray0[7] = "UTF-8";
      outputFormat2.parseOptions(stringArray0, 1);
      outputFormat1.getEncoding();
      outputFormat0.setIndent("-omitEncoding");
      outputFormat1.setIndent("UTF-8");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("-indentSize");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Gj@!,$933G3`aJN.c|";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "T_p]&NCn<~2/m";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"T_p]&NCn<~2/m\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8520036034276512
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags((-180));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(" ");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("-indentSize");
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(3393);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.getNewLineAfterNTags();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9394552656987938
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.setEncoding("y/gs");
      outputFormat0.setEncoding("I}=jh\"$>;");
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = new OutputFormat("-xhtmlEiM\"[");
      outputFormat1.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat1.setSuppressDeclaration(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "I}=jh\"$>;";
      stringArray0[1] = "-expandEmpty(agUa<ncosa\";";
      stringArray0[2] = "-expandEmpty(agUa<ncosa\";";
      stringArray0[3] = "-expandEmpty(agUa<ncosa\";";
      stringArray0[4] = "I}=jh\"$>;";
      stringArray0[5] = "-expandEmpty(agUa<ncosa\";";
      stringArray0[6] = "y/gs";
      stringArray0[7] = "-expandEmpty(agUa<ncosa\";";
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertTrue(outputFormat1.isExpandEmptyElements());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.853253087436612
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.setLineSeparator(" ");
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(1494);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setLineSeparator("n&po_!~frF@dx");
      outputFormat0.setIndent((String) null);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1603159682381894
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "EiM\"[";
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setIndent("0EnT {Y@t$[");
      outputFormat1.setLineSeparator(",4H'xrVwbq,Ef_");
      outputFormat1.setIndent("s4%Z.vUnf77");
      outputFormat1.setAttributeQuoteCharacter('\'');
      assertEquals("s4%Z.vUnf77", outputFormat1.getIndent());
      
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setAttributeQuoteCharacter('\'');
      outputFormat2.getAttributeQuoteCharacter();
      char char0 = outputFormat2.getAttributeQuoteCharacter();
      assertEquals('\'', char0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1579247678555973
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("k&&hn$");
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags((-3252));
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k&&hn$";
      stringArray0[1] = "Dxc";
      stringArray0[2] = "(agUa<ncosa\";";
      stringArray0[3] = "P]c";
      stringArray0[4] = "Dxc";
      stringArray0[5] = "(agUa<ncosa\";";
      outputFormat0.parseOptions(stringArray0, 1658);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true);
      outputFormat0.setIndent("(agUa<ncosa\";");
      assertEquals((-3252), outputFormat0.getNewLineAfterNTags());
      
      int int0 = outputFormat1.getNewLineAfterNTags();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7894678696691564
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("am");
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("k:Qj^eGtna:_");
      outputFormat0.setEncoding("-xhtml");
      outputFormat0.setLineSeparator("v-hvT Xx>w");
      outputFormat0.setIndent("am");
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent((String) null);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("v-hvT Xx>w", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.396698565561851
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("");
      String string1 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string1);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator((String) null);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "-xhtml(agUa<ncosa\";";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-newlines";
      outputFormat0.setNewLineAfterDeclaration(false);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-1970753886));
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.parseOptions(stringArray0, 346);
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1147498264472473
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat1.setLineSeparator(string0);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat2.setIndentSize(0);
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat0.setIndent("4=>Bv]&qwzB");
      outputFormat1.setIndentSize(1);
      outputFormat1.setIndent(true);
      outputFormat2.getIndent();
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-1440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1440
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9237738987163575
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("d/H<q.rT7GcEZ7");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = new OutputFormat("EiM\"[", true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.setIndent("k:Qj^eGtna:_");
      outputFormat1.setEncoding((String) null);
      outputFormat0.setLineSeparator("EiM\"[");
      outputFormat0.isXHTML();
      outputFormat1.setNewLineAfterNTags(97);
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "k:Qj^eGtna:_";
      stringArray0[1] = "k:Qj^eGtna:_";
      stringArray0[2] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.461295680421684
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("");
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "-xhtml(agUa<ncosa\";";
      outputFormat0.parseOptions(stringArray0, 1);
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat1.setIndent("\fl68Fr!(L");
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("nso'tS");
      assertEquals("nso'tS", outputFormat0.getIndent());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7119868780749976
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setNewLineAfterNTags(0);
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(agUa<ncosa\";";
      stringArray0[1] = "(agUa<ncosa\";";
      stringArray0[2] = "(agUa<ncosa\";";
      stringArray0[3] = "(agUa<ncosa\";";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.isNewLineAfterDeclaration();
      outputFormat2.setExpandEmptyElements(true);
      outputFormat3.setLineSeparator("\n");
      outputFormat1.setExpandEmptyElements(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat1.isTrimText();
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isPadText());
      
      outputFormat2.setExpandEmptyElements(false);
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.370021585359375
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.isTrimText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(false);
      outputFormat1.setIndent(false);
      outputFormat1.setIndent("-indent");
      outputFormat1.setEncoding("");
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat1.isNewlines();
      outputFormat1.getIndent();
      outputFormat1.setIndentSize((-1));
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setIndent("");
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      outputFormat1.isXHTML();
      outputFormat1.setEncoding("-indent");
      assertEquals("", outputFormat1.getIndent());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(false);
      assertEquals("  ", outputFormat2.getIndent());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0318395825095052
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      outputFormat0.setNewLineAfterNTags(0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat1.getLineSeparator();
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      outputFormat2.setExpandEmptyElements(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat2.isTrimText();
      outputFormat1.getLineSeparator();
      outputFormat2.setExpandEmptyElements(true);
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.013407031384264
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setPadText(false);
      outputFormat1.setXHTML(false);
      outputFormat0.setLineSeparator("");
      outputFormat1.setIndent(false);
      outputFormat1.setIndent("");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(false);
      outputFormat0.setNewLineAfterNTags(39);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("khn$");
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "P]c";
      stringArray0[2] = "P]c";
      stringArray0[3] = "Dxc";
      stringArray0[4] = "Dxc";
      stringArray0[5] = ")I";
      stringArray0[6] = "(agUa<ncosa\";";
      stringArray0[7] = "(agUa<ncosa\";";
      stringArray0[8] = "khn$";
      outputFormat0.parseOptions(stringArray0, 77);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("khn$", outputFormat0.getLineSeparator());
      assertEquals(39, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("nso'tSO", false, "nso'tSO");
      assertFalse(outputFormat0.isXHTML());
      assertEquals("nso'tSO", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("nso'tSO", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nso'tSO";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.parseOptions(stringArray0, 3721);
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.parseOptions(stringArray0, 3721);
      OutputFormat outputFormat3 = new OutputFormat("7a^F", true);
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isTrimText());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertEquals(0, outputFormat3.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertEquals("7a^F", outputFormat3.getIndent());
      assertFalse(outputFormat3.isPadText());
      assertFalse(outputFormat3.isXHTML());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertTrue(outputFormat3.isNewlines());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      
      outputFormat2.setIndent((String) null);
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertTrue(outputFormat2.isTrimText());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isPadText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0932778307142526
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("=ly4^>_}", true);
      outputFormat0.setLineSeparator("85bVd{hc2JKV");
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.isTrimText();
      outputFormat0.getEncoding();
      outputFormat0.setNewlines(true);
      outputFormat1.setTrimText(false);
      outputFormat2.setTrimText(false);
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat2.isNewlines();
      outputFormat1.setIndent(true);
      outputFormat2.setIndentSize(0);
      outputFormat3.setNewlines(false);
      outputFormat1.setEncoding("85bVd{hc2JKV");
      OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.218508142310594
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("");
      String[] stringArray0 = new String[0];
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat1.setLineSeparator(string0);
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat0.setXHTML(true);
      outputFormat2.setIndentSize(0);
      outputFormat2.setTrimText(false);
      outputFormat2.parseOptions(stringArray0, 1);
      outputFormat1.isNewlines();
      outputFormat1.setTrimText(true);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setExpandEmptyElements(false);
      outputFormat1.setPadText(false);
      assertEquals("\\uT\"58/%g<H r%om;", outputFormat1.getLineSeparator());
      
      outputFormat3.setExpandEmptyElements(false);
      outputFormat2.setExpandEmptyElements(true);
      assertTrue(outputFormat2.isExpandEmptyElements());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setEncoding("l3laJo0SAX4ezb Hmj");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.getEncoding();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l3laJo0SAX4ezb Hmj";
      stringArray0[1] = "l3laJo0SAX4ezb Hmj";
      stringArray0[2] = "l3laJo0SAX4ezb Hmj";
      stringArray0[3] = "`9=9-m5.";
      stringArray0[4] = "l3laJo0SAX4ezb Hmj";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2907));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2907
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8542306045431616
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~";
      stringArray0[1] = "Un>%'";
      int int0 = outputFormat0.parseOptions(stringArray0, 4207);
      assertEquals(4207, int0);
      
      outputFormat0.setNewlines(true);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
      
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals('\"', char0);
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals("\n", outputFormat1.getLineSeparator());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.155834175521103
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`'FVyS29o", false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndentSize(1);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.getIndent();
      outputFormat0.isPadText();
      assertEquals(" ", outputFormat0.getIndent());
      
      outputFormat1.setIndent(true);
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setEncoding("");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3041));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3041
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[7];
      outputFormat0.setLineSeparator("(+@d[=x");
      stringArray0[0] = "";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[1] = "Gw+ulwYUt3s\"{Vw";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "P}8;";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(false);
      stringArray0[4] = "";
      stringArray0[5] = "B]fD";
      stringArray0[6] = "$0xt\f>g5;6|K.X";
      outputFormat0.parseOptions(stringArray0, 2103);
      outputFormat0.isPadText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      outputFormat0.isTrimText();
      outputFormat0.getIndent();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("  ", string0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("nso'tSO", false, "nso'tSO");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nso'tSO";
      stringArray0[1] = "nso'tSO";
      outputFormat0.setIndent(false);
      stringArray0[2] = "nso'tSO";
      outputFormat0.setIndentSize((-1454205877));
      outputFormat0.setLineSeparator("-expandEmpty-xhtmlEiM\"[");
      stringArray0[3] = "nso'tSO";
      outputFormat0.setIndentSize((-1953996946));
      stringArray0[4] = "nso'tSO";
      outputFormat0.setIndent("nso'tSO");
      stringArray0[5] = "nso'tSO";
      stringArray0[6] = "-expandEmpty-newlines";
      stringArray0[7] = "nso'tSO";
      stringArray0[8] = "nso'tSO";
      outputFormat0.setNewlines(false);
      assertEquals("-expandEmpty-xhtmlEiM\"[", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      int int0 = outputFormat1.parseOptions(stringArray0, 496);
      assertEquals(496, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7906679823987566
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = "\\uT\"58/%g<H r%om;";
      outputFormat0.setLineSeparator(string0);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("k:Qj^eGtna:_");
      outputFormat0.setIndentSize((-1178));
      outputFormat0.setIndent("-suppressDeclaration");
      assertEquals("k:Qj^eGtna:_", outputFormat0.getLineSeparator());
      
      outputFormat1.setIndent("-suppressDeclaration");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "~`ALXj*4d";
      stringArray0[2] = "";
      stringArray0[4] = "0k6pr}n#\"";
      stringArray0[5] = "";
      OutputFormat outputFormat0 = new OutputFormat("BHB");
      outputFormat0.setOmitEncoding(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1750
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("", outputFormat0.getIndent());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "~`ALXj*4d";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "0k6pr}n#\"";
      stringArray0[5] = "";
      stringArray0[6] = "0k6pr}n#\"";
      OutputFormat outputFormat0 = new OutputFormat("moiJ%");
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2148149644182196
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("nso'tSO", false, "nso'tSO");
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("nso'tSO", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nso'tSO";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.parseOptions(stringArray0, 3721);
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isPadText());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isNewlines());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isTrimText());
      
      OutputFormat outputFormat3 = new OutputFormat("^vu?t8o=eM-");
      outputFormat3.parseOptions(stringArray0, 0);
      assertEquals("^vu?t8o=eM-", outputFormat3.getIndent());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isTrimText());
      assertFalse(outputFormat3.isXHTML());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isPadText());
      assertEquals("UTF-8", outputFormat3.getEncoding());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2025479938812857
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-newlines";
      OutputFormat.createPrettyPrint();
      outputFormat0.parseOptions(stringArray0, 3721);
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h##iAk7PuK");
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertEquals("h##iAk7PuK", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("k&&hn$");
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(agUa<ncosa\";";
      stringArray0[1] = "~RmRE G.aJH";
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 577);
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals("k&&hn$", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.704355559998282
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("J3`*8");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[3] = " ";
      outputFormat0.setIndentSize((-1625766955));
      stringArray0[4] = "J3`*8";
      outputFormat0.getEncoding();
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("J3`*8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.653317359009716
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat2.getIndent());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertTrue(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isPadText());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertEquals("\n", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.403403494240142
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags(577);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("P]c");
      outputFormat0.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("~RmRE G.aJH");
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator("  ");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat1.isSuppressDeclaration();
      outputFormat1.isTrimText();
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat outputFormat2 = new OutputFormat("~RmRE G.aJH", true);
      outputFormat2.setIndent(false);
      outputFormat2.setPadText(false);
      outputFormat1.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals(577, outputFormat0.getNewLineAfterNTags());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0533214504847934
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("EiM\"[");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setEncoding("zf.X.|L[JHx{I8P\"H9");
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(1494);
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k:Qj^eGtna:_";
      stringArray0[8] = "k:Qj^eGtna:_";
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("k:Qj^eGtna:_");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isTrimText();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(true);
      assertEquals("zf.X.|L[JHx{I8P\"H9", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1040026700508068
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("am");
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setLineSeparator("&J'thCIeIqa");
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat1.isTrimText();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat1.setPadText(false);
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndentSize(301);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(true);
      assertEquals("                                                                                                                                                                                                                                                                                                             ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[gIOr(D ", false, "");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals("[gIOr(D ", outputFormat0.getIndent());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^A{svyYLT";
      stringArray0[1] = "-padText";
      int int0 = outputFormat0.parseOptions(stringArray0, 4);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(4, int0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("(agUa<");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\\)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
