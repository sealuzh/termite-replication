/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:55:55 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.AttributeList;
import org.xml.sax.DTDHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isIgnoreComments();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        dispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getXMLReader();
      Reader reader0 = null;
      String string0 = "file://";
      String string1 = "*fO|:3j|?|:`\\HJQn";
      try { 
        MockURI.URI("file://", "file://", "file://", 3062, "file://", "file://", "*fO|:3j|?|:`HJQn");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: file://://file:%2F%2F@[file://]:3062file://?file://#*fO%7C:3j%7C?%7C:%60HJQn
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = "~jzx[";
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity((String) null, (String) null);
      DefaultDocument defaultDocument0 = new DefaultDocument((String) null);
      try { 
        sAXReader0.read("*YR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/*YR (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/*YR (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3912895020830147
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.setValidation(true);
      File file0 = MockFile.createTempFile("//tmp/#document0#document", "#document");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      sAXReader0.getDocumentFactory();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity("namespace::*[name()='']");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.isValidating();
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-661L));
      try { 
        sAXReader0.read((Reader) stringReader0, "Q1CD");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      parserAdapter0.setErrorHandler(defaultHandler0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      parserAdapter0.setEntityResolver(sAXContentHandler0);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.installXMLFilter(parserAdapter0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      boolean boolean1 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement((String) null, (AttributeList) null);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl2);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.setDocumentLocator(locatorImpl0);
      xMLFilterImpl1.getErrorHandler();
      xMLFilterImpl1.setErrorHandler(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.removeHandler((String) null);
      sAXReader1.setIgnoreComments(true);
      Object object0 = new Object();
      SAXReader sAXReader2 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader2.setProperty((String) null, locatorImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      QName qName0 = namespaceStack0.getQName((String) null, "~f*E}f;L2Lez*aNM\"o", "N");
      qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.setFeature("http://xml.org/sax/features/validation", true);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("+YMi7lCa");
      stringReader0.close();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.isValidating();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("2*fWpZ/Cr2-J&L", "//tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []");
      defaultHandler2_0.resolveEntity("2*fWpZ/Cr2-J&L", "</+C~22XjSRSjdT");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8863990313046046
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      String string0 = "4C!A\"AnvBKl/!]UtjsY";
      String string1 = "org.dom4j.util.UserDataAttribute";
      QName qName0 = namespaceStack0.getQName("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY", "org.dom4j.util.UserDataAttribute");
      DocumentFactory documentFactory1 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory1, true);
      QName.get("org.dom4j.util.UserDataAttribute", (Namespace) null, "org.dom4j.util.UserDataAttribute");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.createXMLReader();
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.createDefaultEntityResolver("#k@G");
      QName.get("NEEvb6oX1[gf", (Namespace) null);
      sAXReader0.setValidation(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      URI uRI0 = MockURI.URI("g$chlH2,V#W~/U:Jw*");
      // Undeclared exception!
      try { 
        MockURI.toURL(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "/";
      StringReader stringReader0 = new StringReader("/");
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isValidating();
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.386821486362355
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("Given node cannot be a child of document", "");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startDocument();
      xMLFilterImpl0.skippedEntity("Given node cannot be a child of document");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.541882203661472
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.setDTDHandler((DTDHandler) null);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      String string0 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "//tmp/M{X;0", 2570, "dLiG;v>|gG", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4990104312963832
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("Given node cannot be a child of document", "");
      HandlerBase handlerBase0 = new HandlerBase();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.removeHandler((String) null);
      sAXReader0.setIgnoreComments(true);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("O_#Sa!8r");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class O_#Sa!8r not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.startDocument();
      xMLFilterImpl2.skippedEntity(")l5X.,GcI^Ub4");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(xMLReader0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.removeHandler("Error on line ");
      sAXReader0.setIgnoreComments(false);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("Error on line ", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Error on line ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockURL.getFileExample();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.removeHandler("og.doG4j.~ree.FlyweightPromessingInstruction");
      sAXReader0.removeHandler("p<");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.408641287701287
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setValidation(false);
      File file0 = MockFile.createTempFile("#document", "#document");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("}a7+8rD0", "}a7+8rD0", "}a7+8rD0");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      byte[] byteArray0 = new byte[6];
      qName0.getQualifiedName();
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      File file0 = MockFile.createTempFile("//tmp/Bar?uog0#document", "zgy");
      MockFile mockFile0 = new MockFile(file0, "//tmp/#document0#document");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getEncoding();
      sAXReader0.isStripWhitespaceText();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      QName qName0 = namespaceStack0.getQName("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY", "org.dom4j.util.UserDataAttribute");
      DocumentFactory documentFactory1 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory1, true);
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      defaultDocumentFactory0.createAttribute((Element) null, "Given node cannot be a child of document", "Given node cannot be a child of document");
      sAXReader0.setStripWhitespaceText(true);
      Object object0 = new Object();
      qName0.toString();
      try { 
        sAXReader0.setProperty("'B*%XqZq-I7,@E^", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ''B*%XqZq-I7,@E^' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.isIgnoreComments();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      defaultDocumentFactory0.createQName("nUt^FE^;V{9");
      String string0 = "";
      pruningDispatchHandler0.addHandler("", (ElementHandler) null);
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        pruningDispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "Given node cannot be a child of document";
      QName qName0 = defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      defaultDocumentFactory0.createAttribute((Element) null, "Given node cannot be a child of document", "Given node cannot be a child of document");
      sAXReader0.setStripWhitespaceText(true);
      String string1 = "'B*%XqZq-I7,@E^";
      Object object0 = new Object();
      qName0.toString();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.setStripWhitespaceText(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        pruningDispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getXMLFilter();
      sAXReader0.createDefaultEntityResolver("Validation not supported for XMLReader: ");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createQName("//tmp/v0b^~*aC]0Error on line ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      String string0 = "Error on line ";
      HandlerBase handlerBase1 = new HandlerBase();
      HandlerBase handlerBase2 = new HandlerBase();
      handlerBase2.startElement("v#", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl2.setErrorHandler(defaultHandler2_0);
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl3);
      sAXReader0.setMergeAdjacentText(false);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = null;
      sAXReader0.addHandler("$.g6Rmuna+dJ/G(gjx", pruningDispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.startDocument();
      String string1 = "%%Z&VxSm";
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, xMLFilterImpl2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.startDocument();
      xMLFilterImpl0.skippedEntity(")l5X.,GcI^Ub4");
      try { 
        sAXReader0.read("!/4F5v<R\"_6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: !/4F5v<R\"_6 Nested exception: no protocol: !/4F5v<R\"_6
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("//tmp/http:/xml.org/sax/properties/declaration-handler0$AI4", "//tmp/Bar?uog0#document", 4510, "//tmp/Bar?uog0#document", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getDTDHandler();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(parserAdapter0);
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("Y8X");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Y8X not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.440537754390608
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      QName qName0 = namespaceStack0.getQName("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY");
      DocumentFactory documentFactory1 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory1, true);
      QName.get("4C!A\"AnvBKl/!]UtjsY", (Namespace) null, "4C!A\"AnvBKl/!]UtjsY");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      XMLReader xMLReader1 = sAXReader0.createXMLReader();
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.createDefaultEntityResolver("#k@G");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader1);
      xMLFilterImpl0.startDocument();
      xMLFilterImpl0.skippedEntity("http://xml.org/sax/features/validation");
      try { 
        sAXReader0.read("Xyx;y~>Y9-6--5e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: Xyx;y~>Y9-6--5e Nested exception: no protocol: Xyx;y~>Y9-6--5e
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "-o+s68-d<@!p^+~xO";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Given node cannot be a child of document");
      sAXReader_SAXEntityResolver0.resolveEntity("Error on line ", "http://xml.org/sax/features/string-interning");
      HandlerBase handlerBase2 = new HandlerBase();
      handlerBase2.resolveEntity("//tmp/org.dom4j.util.UserDataAttribute0org.dom4j.tree.NamespaceStack@4 Stack: []", " [Comment: \"");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", ",");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "Given node cannot be a child of document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      Namespace namespace0 = Namespace.get("//tmp/v0b^~*aC]0Error on line ");
      QName.get("B9'pQ/p0", namespace0);
      sAXReader0.setValidation(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(parserAdapter1);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter1);
      parserAdapter0.getErrorHandler();
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl1.setErrorHandler(handlerBase0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter2);
      sAXReader0.createContentHandler(parserAdapter1);
      StringReader stringReader0 = new StringReader("nXYp)9B");
      stringReader0.reset();
      try { 
        sAXReader1.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.367177423073482
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.getParent();
      xMLFilterImpl2.setParent(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.processingInstruction("Z)Ee", "Z)Ee");
      xMLFilterImpl4.startDocument();
      xMLFilterImpl2.skippedEntity("Z)Ee");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("%%Z&VxSm", "%%Z&VxSm");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("vCz;^P#'/|$zF@xj$[O", (String) null);
      DefaultDocument defaultDocument0 = new DefaultDocument("vCz;^P#'/|$zF@xj$[O");
      try { 
        sAXReader0.read("vCz;^P#'/|$zF@xj$[O");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: vCz;^P#'/|$zF@xj$[O Nested exception: no protocol: vCz;^P#'/|$zF@xj$[O
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5054434290955876
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getParent();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.processingInstruction("Z)Ee", "vCz;^P#'/|$zF@xj$[O");
      xMLFilterImpl2.startDocument();
      String string0 = "%%Z&VxSm";
      xMLFilterImpl2.skippedEntity((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("-o+s68-d<@!p^+~xO");
      sAXReader_SAXEntityResolver0.resolveEntity("%%Z&VxSm", "%%Z&VxSm");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("%%Z&VxSm", "//tmp/Bar?uog0#document");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.processingInstruction("Z)Ee", "vCz;^P#'/|$zF@xj$[O");
      xMLFilterImpl2.startDocument();
      xMLFilterImpl2.skippedEntity((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("-o+s68-d<@!p^+~xO");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("%%Z&VxSm", "%%Z&VxSm");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("%%Z&VxSm", "//tmp/Bar?uog0#document");
      HandlerBase handlerBase1 = new HandlerBase();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.setErrorHandler(handlerBase1);
      sAXReader0.getErrorHandler();
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/e`GMc)vRu?ivM>PMKf0org.dom4j.util.IndexedElement", "//tmp/e`GMc)vRu?ivM>PMKf0org.dom4j.util.IndexedElement");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5364537201793294
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      namespaceStack0.getQName("4C!A\"AnvBKl8/!]UtjsY", "4C!A\"AnvBKl8/!]UtjsY", "org.dom4j.util.UserDataAttribute");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      QName.get("org.dom4j.util.UserDataAttribute", (Namespace) null, "org.dom4j.util.UserDataAttribute");
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      XMLReader xMLReader1 = sAXReader0.createXMLReader();
      XMLReader xMLReader2 = sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setIgnoreComments(false);
      QName.get("NEEvb6oX1[gf", (Namespace) null);
      sAXReader0.setValidation(false);
      MockFile.createTempFile("org.dom4j.util.UserDataAttribute", "org.dom4j.tree.NamespaceStack@4 Stack: []");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader2);
      xMLFilterImpl0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLReader0);
      xMLFilterImpl1.setErrorHandler((ErrorHandler) null);
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      sAXReader1.createContentHandler(xMLReader1);
      StringReader stringReader0 = new StringReader("org.dom4j.util.UserDataAttribute");
      StringReader stringReader1 = new StringReader("Kc4+LZ<[\"pYl23d/nC");
      stringReader1.read();
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("//tmp/M{X;0", "Wq", 190, "//tmp/M{X;0", uRLStreamHandler0);
      sAXReader0.setEncoding("//tmp/M{X;0");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl2.startDocument();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getDTDHandler();
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("66>vcV>.<2<-g", "QcHd0AQp99Br@CoEs7", (String) null);
      qName0.getDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.read("//tmp/tmp/#document0#document0#document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/tmp/#document0#document0#document Nested exception: no protocol: //tmp/tmp/#document0#document0#document
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "Given node cannot be a child of document";
      QName qName0 = defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("Given node cannot be a child of document", "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      qName0.getQualifiedName();
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string1 = "ELEMENT_NODE";
      StringReader stringReader0 = new StringReader("ELEMENT_NODE");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPathFilter("/", (VariableContext) simpleVariableContext0);
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":{>ASG$I");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3336670288259223
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.skippedEntity("%%Z&VxSm");
      try { 
        sAXReader0.read("%%Z&VxSm");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: %%Z&VxSm Nested exception: no protocol: %%Z&VxSm
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      QName.get("4C!A\"AnvBKl/!]UtjsY", (Namespace) null, "4C!A\"AnvBKl/!]UtjsY");
      MockFile mockFile0 = new MockFile((File) null, "P");
      MockFile mockFile1 = new MockFile("4C!A\"AnvBKl/!]UtjsY", "4C!A\"AnvBKl/!]UtjsY");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("org.dom4j.tree.NamespaceStack@4 Stack: []", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class org.dom4j.tree.NamespaceStack@4 Stack: [] not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.490152484626175
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5213864941505775
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SAXReader sAXReader1 = new SAXReader();
      String string0 = null;
      try { 
        sAXReader1.read((InputStream) mockFileInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.334527382023145
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl2);
      StringReader stringReader0 = new StringReader("Error on line ");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("Error on line ");
      stringReader1.reset();
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("+YMi7lCa");
      stringReader0.close();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.setXMLReaderClassName("hnAnVa1C1Aw");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class hnAnVa1C1Aw not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "Given node cannot be a child of document";
      defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "Given node cannot be a child of document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.removeHandler("Error on line ");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(parserAdapter0);
      HandlerBase handlerBase1 = new HandlerBase();
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("66>vcVE.<2<-g");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 66>vcVE.<2<-g Nested exception: no protocol: 66>vcVE.<2<-g
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      QName qName0 = defaultDocumentFactory0.createQName("");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEntityResolver(defaultHandler0);
      StringReader stringReader0 = new StringReader("Error on line ");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.startElement("Error on line ", attributeListImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setValidation(false);
      MockFile.createTempFile("#document", "Error on line ");
      documentFactory0.createDocument();
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl2.startDocument();
      xMLFilterImpl1.skippedEntity((String) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader1.read("//tmp/Bar?uog0#document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7ca5b9ea Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7ca5b9ea Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("Given node cannot be a child of document");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("Given node cannot be a child of document", "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      qName0.getQualifiedName();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "";
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
