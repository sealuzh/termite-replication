/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:59:47 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Comparator;
import java.util.Random;
import java.util.Stack;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.54386172328002
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC((-2));
      logitBoost0.setNumIterations(12);
      logitBoost0.setShrinkage(16);
      int int0 = evaluation0.m_NumFolds;
      HTML hTML0 = new HTML();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      evaluation0.getClassPriors();
      evaluation0.pctUnclassified();
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1451908575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1451908575
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setUseResampling(false);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      AbstractClassifier.makeCopies(logitBoost0, 14);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "setNumFolds";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("(E!|rzGzRpV4zX[%YeA", instances0, 21, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: (E!|rzGzRpV4zX[%YeA
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.987337279385195
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC((-2));
      logitBoost0.setNumIterations(2);
      logitBoost0.setShrinkage((-1.7976931348623157E308));
      int int0 = evaluation0.m_NumFolds;
      HTML hTML0 = new HTML();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      evaluation0.getClassPriors();
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.514266084345717
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      instances0.lastIndexOf(testInstances0);
      int int0 = 510;
      evaluation0.numFalsePositives((-1));
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.toSummaryString();
      double double1 = evaluation0.m_Correct;
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.recall(496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 496
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6981959367774992
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      evaluation0.areaUnderPRC(7);
      LogitBoost logitBoost0 = new LogitBoost();
      int int0 = 19;
      logitBoost0.setNumIterations(19);
      logitBoost0.setShrinkage((-1));
      Evaluation.makeOptionString(logitBoost0, true);
      Bagging bagging0 = new Bagging();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString(false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      mockFileInputStream0.close();
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0144864535881952
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominal(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(1);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities1 = bagging0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      testInstances0.setRelationalClassFormat(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6592064301268135
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.addNumericTrainClass(0.0, 510);
      evaluation0.areaUnderPRC(12);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setNumIterations((-1758));
      logitBoost0.setShrinkage(2.0);
      int int0 = evaluation0.m_NumFolds;
      HTML hTML0 = new HTML();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation0.pctUnclassified();
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getTechnicalI\formation");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      Stack<CheckOptionHandler> stack0 = new Stack<CheckOptionHandler>();
      evaluation0.getDiscardPredictions();
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      double double0 = 1318.29;
      evaluation0.addNumericTrainClass((-3517.0), 0.22499999403953552);
      BallTree ballTree0 = new BallTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(109);
      SparseInstance sparseInstance1 = new SparseInstance(21);
      try { 
        ballTree0.nearestNeighbour(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.trueNegativeRate(3306);
      try { 
        Evaluation.handleCostOption("^O\"", 3306);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8691566096526486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominal((-155537894));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(12);
      Evaluation.makeOptionString(logitBoost0, false);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelationalClassFormat(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString(true);
      evaluation0.toMatrixString("toSource");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.KBInformation();
      evaluation1.getRevision();
      try { 
        Evaluation.handleCostOption("I?$e#~YCo)O9#,8", (-155537894));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass(Double.NaN, 388.0);
      BallTree ballTree0 = new BallTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(989);
      try { 
        ballTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".bsi");
      evaluation0.truePositiveRate(510);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3445985270987784
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      LogitBoost logitBoost0 = new LogitBoost();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.areaUnderPRC(12);
      logitBoost0.setNumIterations(16);
      logitBoost0.setShrinkage(300.0);
      int int0 = evaluation0.m_NumFolds;
      instances0.enumerateAttributes();
      Evaluation.makeOptionString(logitBoost0, true);
      AbstractClassifier.makeCopies(logitBoost0, 1);
      evaluation0.numInstances();
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.952613526255512
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numFalsePositives(510);
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.toSummaryString();
      double double1 = evaluation0.m_Correct;
      evaluation0.toMatrixString();
      evaluation0.recall(0);
      Evaluation.makeOptionString((Classifier) null, false);
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9116803871197643
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      evaluation0.areaUnderPRC(7);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setNumIterations(19);
      logitBoost0.setShrinkage((-1));
      Evaluation.makeOptionString(logitBoost0, true);
      Bagging bagging0 = new Bagging();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString(true);
      evaluation0.toMatrixString("=== Summary ===\n\nTotal Number of Instances                0     \n");
      evaluation0.SFEntropyGain();
      evaluation0.numTrueNegatives(7);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 7, (Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5423965218148186
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      BallTree ballTree0 = new BallTree(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.numFalseNegatives(266);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numInstances();
      HTML hTML0 = new HTML();
      instances1.lastIndexOf(hTML0);
      textDirectoryLoader0.setOutputFilename(true);
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      double[] doubleArray1 = evaluation0.makeDistribution(0.0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.365102420123048
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(12);
      logitBoost0.setNumIterations(16);
      logitBoost0.setShrinkage((-2257.3));
      int int0 = evaluation0.m_NumFolds;
      assertEquals(1, int0);
      
      HTML hTML0 = new HTML();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation.makeOptionString(logitBoost0, true);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0760891679690494
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setUseResampling(false);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      AbstractClassifier.makeCopies(logitBoost0, 14);
      evaluation0.weightedRecall();
      double double0 = evaluation0.precision(6);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6533947674590759
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9653504036437637
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setNumIterations(4268);
      LogitBoost logitBoost1 = new LogitBoost();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m@Z4&0ncrezjnf");
      evaluation0.areaUnderPRC((-2));
      logitBoost0.setNumIterations(491);
      logitBoost1.setShrinkage(1616.407);
      int int0 = evaluation0.m_NumFolds;
      instances0.enumerateAttributes();
      Evaluation.makeOptionString(logitBoost0, true);
      Logistic logistic0 = new Logistic();
      AbstractClassifier.makeCopies(logistic0, 4268);
      evaluation0.numInstances();
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8566307325453293
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numFalsePositives(510);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.m_Correct;
      evaluation0.toMatrixString();
      evaluation0.recall(484);
      double double2 = evaluation0.falseNegativeRate((-355));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(484);
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8566307325453293
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.numFalsePositives(510);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.m_Correct;
      evaluation0.toMatrixString();
      double double3 = evaluation0.recall(0);
      double double4 = evaluation0.falseNegativeRate(510);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.numTrueNegatives(510);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0440351251351476
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC((-1));
      Evaluation.makeOptionString(logitBoost0, false);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelationalClassFormat(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.toSummaryString(false);
      evaluation1.toMatrixString("toSource");
      evaluation1.toMatrixString();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation0.KBInformation();
      evaluation0.incorrect();
      evaluation1.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation0.recall((-981));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -981
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5837007639017773
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.areaUnderROC(1536);
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setUseResampling(false);
      double double0 = evaluation0.falseNegativeRate((byte)5);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7135278823521747
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.addNumericTrainClass((-1), (-29.9));
      BallTree ballTree0 = new BallTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(42);
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.679088518599767
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(12);
      logitBoost0.setNumIterations(16);
      logitBoost0.setShrinkage((-2257.3));
      int int0 = evaluation0.m_NumFolds;
      HTML hTML0 = new HTML();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double1 = evaluation0.weightedAreaUnderPRC();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      evaluation0.getClassPriors();
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.850546114362873
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(12);
      logitBoost0.setNumIterations(16);
      logitBoost0.setShrinkage((-2257.3));
      int int0 = evaluation0.m_NumFolds;
      Evaluation.makeOptionString(logitBoost0, false);
      Bagging bagging0 = new Bagging();
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString(false);
      evaluation0.toMatrixString("=== Summary ===\n\nTotal Number of Instances                0     \n");
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numTrueNegatives((-199));
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5066008697876985
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      BallTree ballTree0 = new BallTree(instances0);
      int int0 = 84;
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      HTML hTML0 = new HTML();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toMatrixString();
      testInstances0.getWords();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.156728522883616
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toMatrixString();
      evaluation0.toMatrixString("@relation");
      double double0 = evaluation0.m_Correct;
      evaluation1.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation1.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5637660374856477
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.setCharSet("getTechnicalInformation");
      textDirectoryLoader1.getDataSet();
      double double1 = evaluation0.numFalseNegatives(20);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.numInstances();
      assertEquals(0.0, double2, 0.01);
      
      KStar kStar0 = new KStar();
      instances0.lastIndexOf(kStar0);
      textDirectoryLoader1.setOutputFilename(false);
      double double3 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double3, double0, 0.01);
      
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3392578028897733
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC((-437));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setNumIterations(8);
      logitBoost0.setShrinkage(0.0);
      int int0 = evaluation0.m_NumFolds;
      Evaluation.makeOptionString(logitBoost1, true);
      Bagging bagging0 = new Bagging();
      double double0 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      AbstractClassifier.makeCopies(logitBoost1, 8);
      evaluation1.precision((-1466));
      String string1 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      int int0 = 20;
      textDirectoryLoader0.getDataSet();
      evaluation0.numFalseNegatives(20);
      double double0 = evaluation0.m_Correct;
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5468783145319054
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      BallTree ballTree0 = new BallTree(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.m_NumTrainClassVals = 84;
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.numFalseNegatives(266);
      evaluation0.numInstances();
      HTML hTML0 = new HTML();
      textDirectoryLoader0.setOutputFilename(false);
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.getClassPriors();
      double double2 = evaluation1.falseNegativeRate((-813));
      assertEquals(double2, double0, 0.01);
      
      evaluation2.numInstances();
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6405886065129436
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setNumIterations(4268);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      logitBoost0.setShrinkage((-3517.84542313));
      int int0 = evaluation0.m_NumFolds;
      Evaluation.makeOptionString(logitBoost0, false);
      Bagging bagging0 = new Bagging();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelationalClassFormat(instances0);
      CoverTree coverTree0 = new CoverTree();
      testInstances0.getOptions();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-346.88391803006), doubleArray0);
      try { 
        coverTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.562026907050865
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC(12);
      logitBoost0.setNumIterations(16);
      logitBoost0.setShrinkage((-2257.3));
      int int0 = evaluation0.m_NumFolds;
      assertEquals(1, int0);
      
      HTML hTML0 = new HTML();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.getClassPriors();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.856630732545329
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.numFalsePositives(510);
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      evaluation0.toSummaryString();
      double double2 = evaluation0.m_Correct;
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double3 = evaluation0.recall(0);
      double double4 = evaluation0.falseNegativeRate(510);
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.rootMeanSquaredError();
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7639310609248384
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.getDataSet();
      evaluation0.numFalseNegatives(20);
      evaluation0.numInstances();
      instances0.lastIndexOf(evaluation0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.rootMeanPriorSquaredError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation.makeOptionString(additiveRegression0, true);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1642);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1642);
      doubleArray0[4] = (double) 20;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      try { 
        evaluation0.toMatrixString("T");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.570656341161927
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.areaUnderPRC((-437));
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost0.setNumIterations(8);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.rootMeanPriorSquaredError();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation.makeOptionString(additiveRegression0, false);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 443.09;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      String string0 = evaluation0.toMatrixString("@data");
      assertEquals("@data\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3187595766450033
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominal((-155537894));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      LogitBoost logitBoost0 = new LogitBoost();
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation.makeOptionString(logitBoost0, false);
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      double double1 = evaluation0.m_SumPriorEntropy;
      Bagging bagging1 = new Bagging();
      Capabilities capabilities1 = bagging1.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelationalClassFormat(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double2 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      Evaluation.makeOptionString(bagging1, false);
      double double3 = evaluation0.falsePositiveRate((-1));
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9959149597043582
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = (double) (-1);
      evaluation0.SFMeanEntropyGain();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Instances instances1 = null;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0081371475869743
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("getTechnicalInformation");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      evaluation0.falseNegativeRate(122);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.857907871753503
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.truePositiveRate(510);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.m_Correct;
      evaluation0.toMatrixString();
      double double2 = evaluation0.recall(0);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.falseNegativeRate(510);
      evaluation0.totalCost();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9025325686415733
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.toCumulativeMarginDistributionString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-197112209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4837866179880006
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.toClassDetailsString("Cost matrix not compatible with data!");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1788));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.035754728630011
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      double[] doubleArray0 = new double[4];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@data";
      stringArray0[6] = ".arff";
      stringArray0[7] = "@relation";
      stringArray0[1] = "@data";
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomial0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#.PD_F4E_j^ R";
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "   <-- classified as\n";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      try { 
        Evaluation.evaluateModel((String) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1987926481569326
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      int int0 = 510;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toMatrixString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }
}
