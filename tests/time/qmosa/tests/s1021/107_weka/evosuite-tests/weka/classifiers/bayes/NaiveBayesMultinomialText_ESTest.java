/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:29:46 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.StringReader;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.KernelEstimator;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.117056153264466
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(0);
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 0);
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      MockFile.createTempFile("bB<T^^", "");
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      String[] stringArray0 = new String[5];
      nullStemmer0.getRevision();
      stringArray0[0] = "";
      stringArray0[1] = "bB<T^^";
      stringArray0[2] = "bB<T^^";
      stringArray0[3] = "";
      stringArray0[4] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.97426835191566
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1333.0);
      NaiveBayesMultinomialText.main(stringArray0);
      doubleArray0[1] = 0.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B]~$N6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.listOptions();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 1587;
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1631.85640192762, doubleArray0);
      double double0 = naiveBayesMultinomialText0.m_t;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}\n";
      stringArray0[1] = "-";
      stringArray0[2] = "Class for constructing a forest of random trees.\n\nFor more information see: \n\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "H9fi`Bc";
      stringArray0[6] = "{2R=QUi";
      stringArray0[7] = "z({1iXDW";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8697312363893506
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ")";
      stringArray0[3] = "";
      stringArray0[4] = "0B+Y*KBxIzVj";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      stringArray0[5] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText1.m_stopwordsFile = file0;
      naiveBayesMultinomialText1.tokenizerTipText();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText1.m_useStopList = true;
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      sGDText0.reset();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 2137.6774486063;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2137.6774486063;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2137.6774486063;
      doubleArray0[8] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2137.6774486063, doubleArray0);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setPeriodicPruning((-2221));
      MockFile mockFile0 = new MockFile("rLGQp^", "If true, ignores all words that are on the stoplist.");
      MockFile mockFile1 = new MockFile("rLGQp^");
      naiveBayesMultinomialText0.setUseStopList(true);
      mockFile1.setReadable(true);
      mockFile0.getCanonicalPath();
      StringReader stringReader0 = new StringReader("z[/1oc)p80bL-");
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals((-2221), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.915516477764594
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-254.62674));
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning(1587);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.358199718017325
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning(1587);
      MockFile.createTempFile("Failed to instantiate class for classification output: ", "Failed to instantiate class for classification output: ");
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText1.m_stopwordsFile;
      MockFile mockFile1 = new MockFile(mockFile0, "Failed to instantiate class for classification output: ");
      mockFile1.setExecutable(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      MockFile mockFile2 = new MockFile("n{mQ3q'[C%=>2p>", "n{mQ3q'[C%=>2p>");
      naiveBayesMultinomialText2.getUseWordFrequencies();
      String[] stringArray0 = naiveBayesMultinomialText2.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setUseADTree(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n{mQ3q'[C%=>2p>");
      bayesNet0.getMeasure("");
      Discretize discretize0 = bayesNet0.m_DiscretizeFilter;
      naiveBayesMultinomialText2.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("cql7Bz9q");
      Instances instances0 = testInstances0.getData();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle numeric class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1631.85640192762;
      doubleArray0[1] = (double) 1587;
      doubleArray0[2] = 1631.85640192762;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(1631.85640192762);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3298467099249383
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      intArray0[1] = 3069;
      intArray0[2] = 3069;
      intArray0[3] = 1587;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 0;
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.m_normalize = true;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "9p]a\"c";
      stringArray0[2] = "";
      stringArray0[3] = "9p]a\"c";
      stringArray0[4] = "-tokenizer";
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile(":Qq\"xiQ-~Y<<b(ylU6)", "", file0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(260.41674);
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStopwords((File) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, intArray0, 3741);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.toString((Attribute) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
      naiveBayesMultinomialText0.toString();
      BayesNet bayesNet0 = new BayesNet();
      naiveBayesMultinomialText0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(945.83695097, (int[]) null, 3069);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3069;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3069, (int[]) null, (-1637));
      // Undeclared exception!
      try { 
        denseInstance0.classIsMissing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0539205510024243
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setPeriodicPruning((-110));
      String string0 = "rLGQp^";
      File file0 = MockFile.createTempFile("rLGQp^", "rLGQp^");
      MockFile mockFile0 = new MockFile("rLGQp^");
      mockFile0.setReadable(true);
      mockFile0.getCanonicalPath();
      mockFile0.setExecutable(true);
      naiveBayesMultinomialText0.setStopwords(file0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-110);
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.368373327680306
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.m_normalize = true;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "9p]a\"c";
      stringArray0[2] = "";
      stringArray0[3] = "9p]a\"c";
      stringArray0[4] = "-tokenizer";
      stringArray0[5] = "\":;";
      stringArray0[6] = "9p]a\"c";
      stringArray0[7] = "o},M&_`[)1";
      stringArray0[8] = "-tokenizer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Quote parse error.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2644.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "1;@";
      stringArray0[2] = "B2>";
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning((-299));
      naiveBayesMultinomialText1.pruneDictionary();
      assertEquals((-299), naiveBayesMultinomialText1.getPeriodicPruning());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(0);
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 0);
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      File file0 = MockFile.createTempFile("bB<T^^", "");
      naiveBayesMultinomialText0.setStopwords(file0);
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.toURL();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getStopwords();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "bB<T^^", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("?6Q(!");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      mockFile0.toURL();
      naiveBayesMultinomialText0.normTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile.createTempFile("?6Q(!", "The norm of the instances after normalization.", file0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(662.36406);
      assertEquals(662.36406, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.255837266190757
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      intArray0[1] = 3069;
      intArray0[2] = 3069;
      intArray0[3] = 1587;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coverTree4.setMeasurePerformance(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      MockFile mockFile0 = new MockFile("weka.classifiers.bayes.NaiveBayesMultinomialText$Count", "<K0<");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      System.setCurrentTimeMillis(1587);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1631.85640192762;
      doubleArray0[1] = (double) 1587;
      doubleArray0[2] = 1316.22194360105;
      doubleArray0[3] = 1631.85640192762;
      DenseInstance denseInstance0 = new DenseInstance(1631.85640192762, doubleArray0);
      double double0 = naiveBayesMultinomialText0.m_t;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("?6Q(!");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.pruneDictionary();
      Stopwords stopwords0 = new Stopwords();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      stopwords0.remove("");
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      mockFile0.setReadOnly();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ")Q1VP";
      stringArray0[1] = "}c$";
      stringArray0[2] = "w2v4-K41;$8'";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ")Q1VP";
      stringArray0[7] = "";
      NullStemmer.main(stringArray0);
      NullStemmer nullStemmer1 = new NullStemmer();
      nullStemmer1.getRevision();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      stopwords0.is("R.C. Holte");
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("The LNorm to use for document length normalization.");
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-254.62674));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-W";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      coverTree0.getTechnicalInformation();
      coverTree0.setMeasurePerformance(false);
      CoverTree coverTree3 = new CoverTree();
      coverTree3.setMeasurePerformance(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7204225901862604
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-483.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.1;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The minimum number of instances per leaf.";
      stringArray0[1] = "$Revision: 9122 $";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "637-649";
      stringArray0[3] = "-lowercase";
      stringArray0[4] = ">Kx^S!";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, int0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.900582294455071
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U&DLu");
      String string2 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string2);
      
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray0.length);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile.createTempFile("Failed to instantiate class for classification output: ", "");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Failed to instantiate class for classification output: ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-994.099306169);
      doubleArray0[1] = 1631.85640192762;
      doubleArray0[2] = 1215.0;
      doubleArray0[4] = 1631.85640192762;
      doubleArray0[4] = 1631.85640192762;
      doubleArray0[5] = 1631.85640192762;
      doubleArray0[6] = 1215.0;
      doubleArray0[7] = 1215.0;
      doubleArray0[8] = 1215.0;
      DenseInstance denseInstance0 = new DenseInstance(1631.85640192762, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(5.7, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = 1.0E-12;
      SGDText sGDText0 = new SGDText();
      sGDText0.getStopwords();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      SGDText sGDText1 = new SGDText();
      sGDText1.reset();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4400879742965103
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Enumeration<Option> enumeration0 = new WordTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.m_probOfClass = null;
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)25;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte)25;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getStopwords();
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string2);
      
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2644.0;
      doubleArray0[1] = 2644.0;
      doubleArray0[2] = 2644.0;
      doubleArray0[3] = 2644.0;
      doubleArray0[4] = 2644.0;
      doubleArray0[5] = 2644.0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1;@";
      stringArray0[1] = "1;@";
      stringArray0[2] = "";
      stringArray0[3] = "1;@";
      stringArray0[4] = "1;@";
      stringArray0[5] = "1;@";
      stringArray0[6] = "1;@";
      stringArray0[7] = "1;@";
      stringArray0[8] = "1;@";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      coverTree2.setMeasurePerformance(false);
      coverTree1.setMeasurePerformance(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1631.85640192762;
      doubleArray0[1] = (double) 1587;
      doubleArray0[2] = 1631.85640192762;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "=o6r-8XXQ";
      stringArray0[2] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 696;
      doubleArray0[1] = (double) 696;
      doubleArray0[2] = (double) 696;
      DenseInstance denseInstance0 = new DenseInstance(696, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(696);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HJ:kHSM-R8");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1631.85640192762;
      doubleArray0[1] = (double) 1587;
      doubleArray0[2] = 1631.85640192762;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setNorm((-5330.011388));
      stringArray0[1] = "=o6r-8XXQ";
      stringArray0[2] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 3024.72233726;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.classifiers.bayes.NaiveBayesMultinomialText$Count";
      stringArray0[1] = "ppEC";
      stringArray0[2] = "awfully";
      stringArray0[3] = "{Q G_5U6_,";
      stringArray0[4] = "z";
      stringArray0[5] = "O9*";
      stringArray0[6] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      stringArray0[7] = "#\"a0*tQ.E;HNT";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(3024.72233726);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      Tokenizer.runTokenizer(tokenizer0, stringArray0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      assertEquals(3024.72233726, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8838344050018887
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j0fn>z HQ01_-\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-741.57887659482);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The norm of the instances after normalization.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.useStopListTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1398));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.31400451463465
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "J. Shavlik");
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      intArray0[1] = 3069;
      intArray0[2] = 3069;
      intArray0[3] = 1587;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      regressionByDiscretization0.getTechnicalInformation();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "~}7Bd");
      coverTree0.setMeasurePerformance(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      naiveBayesMultinomialText0.listOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1631.85640192762;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      doubleArray0[1] = (double) 1587;
      doubleArray0[2] = 1631.85640192762;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "=o6r-8XXQ";
      stringArray0[2] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.958884453170918
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      MockFile mockFile0 = new MockFile("gT*");
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(2302);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(2302, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.915516477764594
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.setNorm((-254.62674));
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning(1587);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8662503630761926
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      intArray0[1] = 3069;
      intArray0[2] = 3069;
      intArray0[3] = 1587;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 403);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel1.getKernelMatrixFile();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStopwords(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText2.setPeriodicPruning(1587);
      assertEquals(1587, naiveBayesMultinomialText2.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4798345650381015
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-110));
      File file0 = MockFile.createTempFile("The norm of the instances after normalization.", "Failed to instantiate class for classification output: ");
      boolean boolean0 = naiveBayesMultinomialText0.m_useStopList;
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      naiveBayesMultinomialText0.m_periodicP = (-110);
      bayesNet0.getMeasure(":");
      Discretize discretize0 = bayesNet0.m_DiscretizeFilter;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals((-110), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.838619887132379
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setPeriodicPruning((-110));
      File file0 = MockFile.createTempFile("rLGQp^", "rLGQp^");
      file0.setReadable(true);
      file0.getCanonicalPath();
      file0.setExecutable(true);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      MockFile.createTempFile("\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(use -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n", "\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(use -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "rLGQp^";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals((-110), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.973278742811256
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 441.0;
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(441.0);
      naiveBayesMultinomialText0.m_norm = 3.0;
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(441.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }
}
