/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:04:13 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.041623327382373
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize1 = new Discretize("Test");
      discretize1.m_MakeBinary = true;
      discretize1.getOptions();
      discretize1.getCapabilities();
      discretize1.getAttributeIndices();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis(1496L);
      discretize0.listOptions();
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 68;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-";
      stringArray0[1] = "Description.props";
      stringArray0[2] = "Gy~_ x'F5W.dcr=&<8";
      stringArray0[3] = "(bn]6F)";
      stringArray0[4] = " | ";
      stringArray0[5] = "";
      stringArray0[6] = "`imTN5z)dcmsNqhuqmE";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6394103374619213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    double[]\t\tvalues;\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Test");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Discretize discretize0 = new Discretize("Test");
      discretize0.m_UseEqualFrequency = false;
      discretize0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = true;
      int int0 = 4111;
      int int1 = 1208;
      discretize0.getCapabilities();
      int[] intArray0 = new int[8];
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.067429551657355
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("/>kZyd\"#L@<|a<x=", linkedList0, protectedProperties0);
      Attribute attribute1 = attribute0.copy("o*|C:*GsX");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("", arrayList0, 2040);
      SystemInUtil.addInputLine("@data");
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.attributeIndicesTipText();
      attribute1.setStringValue(".arff");
      discretize0.setOptions((String[]) null);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("5", (-1073741822));
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("/>kZyd\"#L@<|a<x=", linkedList0, protectedProperties0);
      Attribute attribute2 = attribute1.copy("o*|C:*GsX");
      arrayList0.add(attribute2);
      Instances instances0 = new Instances("", arrayList0, 2040);
      SystemInUtil.addInputLine("@data");
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      Discretize discretize1 = new Discretize("relational");
      String string1 = discretize1.binsTipText();
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", string1);
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    double[]\t\tvalues;\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(-inf-");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      Discretize discretize0 = new Discretize(",(bn]6F)");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize(" KB");
      discretize0.useBinNumbersTipText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = " KB";
      stringArray0[2] = "++$6Vi6C";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 2344);
      SystemInUtil.addInputLine(".arff");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("vt\".X", linkedList0, protectedProperties0);
      Attribute attribute1 = attribute0.copy((String) null);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("<-Q*V4MUe^b", arrayList1, 168);
      SystemInUtil.addInputLine("@data");
      discretize0.setInputFormat(instances0);
      attribute1.setStringValue("(");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1561.1234;
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      discretize0.setMakeBinary(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      Locale.getISOCountries();
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      discretize0.getCutPoints(3560);
      discretize0.setUseEqualFrequency(false);
      discretize0.setFindNumBins(true);
      int[] intArray0 = new int[3];
      intArray0[0] = 3560;
      intArray0[1] = 3560;
      intArray0[2] = 3481;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getRevision();
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = "07C0r2-uWX@KV.5\"";
      stringArray0[2] = "07C0r2-uWX@KV.5\"";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[4] = "07C0r2-uWX@KV.5\"";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = (double) 77;
      doubleArray0[2] = (double) 77;
      SparseInstance sparseInstance0 = new SparseInstance(77, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize(" KB");
      discretize0.useBinNumbersTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", linkedList0, protectedProperties0);
      attribute0.copy("qTOf");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 4108);
      SystemInUtil.addInputLine("numeric");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at KB
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1561.1234;
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      discretize0.setMakeBinary(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = true;
      int int0 = 0;
      discretize0.getBinRangesString(0);
      discretize0.setDesiredWeightOfInstancesPerInterval(0);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      int int1 = 3547;
      Discretize discretize1 = new Discretize();
      discretize1.getCutPoints(0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-102.4550964497529), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      Locale.getISOCountries();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String string1 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", string1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      sparseInstance0.dataset();
      boolean boolean0 = discretize0.m_FindNumBins;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/>kZyd\"#L@<|a<x=";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      discretize0.getBinRangesString(79);
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      Discretize discretize1 = new Discretize();
      Filter filter0 = Filter.makeCopy(discretize0);
      Filter.runFilter(filter0, stringArray0);
      String string1 = discretize0.binsTipText();
      assertEquals("Number of bins.", string1);
      
      String string2 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string2);
      
      Discretize discretize2 = new Discretize("Test");
      assertFalse(discretize2.getMakeBinary());
      assertFalse(discretize2.getFindNumBins());
      assertEquals(10, discretize2.getBins());
      assertFalse(discretize2.getUseBinNumbers());
      assertFalse(discretize2.getUseEqualFrequency());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize1.getCutPoints(102);
      String string3 = discretize1.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 102;
      intArray0[1] = 102;
      intArray0[2] = 102;
      intArray0[3] = 79;
      intArray0[4] = 79;
      discretize1.setAttributeIndicesArray(intArray0);
      String string4 = discretize1.useEqualFrequencyTipText();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string4);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("]BFkNvTyEE,C)3");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1507292779537686
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)125;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "???");
      Discretize discretize0 = new Discretize("lP-}$yl^Q*x'j<WB.-");
      discretize0.m_IgnoreClass = true;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      discretize0.attributeIndicesTipText();
      assertTrue(discretize0.getIgnoreClass());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("o");
      Range range0 = new Range("o");
      range0.getInvert();
      range0.getRanges();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = 0.0;
      discretize0.setDesiredWeightOfInstancesPerInterval(2430);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCutPoints((-3543));
      Discretize discretize1 = new Discretize("/ia`z9BdDcjj#KV");
      discretize1.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-3543));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("o");
      Range range0 = new Range("o");
      range0.getInvert();
      range0.getRanges();
      String[] stringArray0 = new String[1];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      boolean boolean0 = true;
      discretize0.m_IgnoreClass = true;
      range0.getInvert();
      range0.getRanges();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 600;
      doubleArray0[3] = (double) 600;
      doubleArray0[4] = (double) 600;
      doubleArray0[5] = 1.7976931348623157E308;
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("vt\".X", linkedList0, protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) linkedList0, locale_FilteringMode0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("relational");
      protectedProperties5.replace(object0, (Object) attribute1, (Object) arrayList2);
      Attribute attribute2 = new Attribute("real", linkedList0, protectedProperties5);
      attribute0.setStringValue("'B");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "o";
      Discretize discretize0 = new Discretize("o");
      Range range0 = new Range("o");
      range0.getInvert();
      range0.getRanges();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2430;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2430;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      String string1 = binarySparseInstance1.toString((-102));
      SystemInUtil.addInputLine(string0);
      Attribute attribute0 = new Attribute(string1);
      sparseInstance0.value(attribute0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("07C0r2-uWX@KV.5\"");
      discretize0.setFindNumBins(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = "07C0r2-uWX@KV.5\"";
      stringArray0[2] = "07C0r2-uWX@KV.5\"";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[4] = "07C0r2-uWX@KV.5\"";
      stringArray0[5] = "07C0r2-uWX@KV.5\"";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = (double) 77;
      doubleArray0[2] = (double) 77;
      SparseInstance sparseInstance0 = new SparseInstance(77, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemInUtil.addInputLine("|@qiWQOE95':VHYM");
      Discretize discretize0 = new Discretize("|@qiWQOE95':VHYM");
      discretize0.globalInfo();
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "]BFkNvuTyEE,C)3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EXO");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EXO");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]BFkNvuTyEE,C)3");
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize(":Qj^eGtna:_");
      discretize0.getUseEqualFrequency();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize1 = new Discretize("");
      String[] stringArray0 = discretize1.getOptions();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.setOutputFormat();
      discretize0.setInvertSelection(false);
      int int0 = (-1879048189);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1879048189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    double[]\t\tvalues;\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "    double[]\t\tvalues;\n");
      Discretize discretize0 = new Discretize("/mM1eg");
      discretize0.setUseEqualFrequency(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "    double[]\t\tvalues;\n";
      discretize0.setOptions(stringArray0);
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize(" KB");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = " KB";
      stringArray0[2] = "++$6Vi6C";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[4] = "07C0r2-uWX@KV.5\"";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize();
      String string1 = discretize1.binsTipText();
      assertEquals("Number of bins.", string1);
      
      Discretize discretize2 = new Discretize();
      Discretize discretize3 = new Discretize();
      String string2 = discretize3.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string2);
      
      String string3 = discretize3.findNumBinsTipText();
      assertFalse(discretize3.getFindNumBins());
      assertFalse(discretize3.getMakeBinary());
      assertFalse(discretize3.getUseEqualFrequency());
      assertEquals((-1.0), discretize3.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string3);
      assertEquals(10, discretize3.getBins());
      assertFalse(discretize3.getUseBinNumbers());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("4~\"[AwbZ$1AKu");
      Range range0 = new Range();
      range0.toString();
      range0.setRanges("Hj=rZ>J}G{62)-Iae");
      discretize0.toString();
      discretize0.setBins(1228);
      assertEquals(1228, discretize0.getBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("/>kZyd\"#L@<|a<x=", linkedList0, protectedProperties0);
      Attribute attribute1 = attribute0.copy("o*|C:*GsX");
      arrayList0.add(attribute1);
      discretize0.getCapabilities();
      discretize0.getCapabilities();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis(1);
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("yR,^xLHg\"T7vG!;@@l");
      discretize0.getInvertSelection();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lP-}$yl^Q*x'j<WB.-");
      Discretize discretize0 = new Discretize("/>kZyd\"#L@<|a<x=");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "/>kZyd\"#L@<|a<x=";
      stringArray1[2] = "weka/core/Capabilities.props";
      stringArray1[3] = "/>kZyd\"#L@<|a<x=";
      stringArray1[4] = "/>kZyd\"#L@<|a<x=";
      stringArray1[5] = "/>kZyd\"#L@<|a<x=";
      stringArray1[6] = "/>kZyd\"#L@<|a<x=";
      discretize0.setOptions(stringArray1);
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "???");
      Discretize discretize0 = new Discretize("lP-}$yl^Q*x'j<WB.-");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1879048189));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SystemInUtil.addInputLine("o");
      Locale.setDefault(locale_Category0, locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Discretize discretize1 = new Discretize("p7\"DB\"P}z3R8.(UZ0Iq");
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseBinNumbers());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("07C0r2-uWX@KV.5\"");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseBinNumbers(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("o");
      Range range0 = new Range("o");
      range0.getInvert();
      range0.getRanges();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute("o", linkedList0, protectedProperties3);
      Discretize discretize2 = new Discretize("string");
      Locale.getISOCountries();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 68;
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      discretize0.setOutputFormat();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("U$Ij=c-u~YrMLJs");
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("RFf]/LX=6jkU_");
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1105.6986337751907;
      doubleArray1[1] = (-271.15339264027);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-271.15339264027);
      doubleArray2[1] = 1105.6986337751907;
      doubleArray2[2] = 1105.6986337751907;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1105.6986337751907;
      doubleArray3[1] = (-271.15339264027);
      doubleArray3[2] = 1105.6986337751907;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1105.6986337751907;
      doubleArray4[1] = (-271.15339264027);
      doubleArray4[2] = (-271.15339264027);
      doubleArray4[3] = 1132.705;
      doubleArray4[4] = 1.2;
      doubleArray4[5] = 1105.6986337751907;
      doubleArray4[6] = 1105.6986337751907;
      doubleArray4[7] = 1105.6986337751907;
      doubleArray4[8] = (-271.15339264027);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1132.705;
      doubleArray5[1] = 1.2;
      doubleArray5[2] = (-271.15339264027);
      doubleArray5[3] = 1132.705;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-271.15339264027);
      doubleArray6[1] = 1827.4;
      doubleArray6[2] = (-271.15339264027);
      doubleArray6[3] = 1132.705;
      doubleArray6[4] = 1.2;
      doubleArray6[5] = (-271.15339264027);
      doubleArray6[6] = (-271.15339264027);
      doubleArray6[7] = (-271.15339264027);
      doubleArray6[8] = (-271.15339264027);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 1827.4;
      doubleArray8[1] = 1132.705;
      doubleArray8[2] = 1827.4;
      doubleArray8[3] = 1.2;
      doubleArray8[4] = 1827.4;
      doubleArray8[5] = 1.2;
      doubleArray8[6] = 3060.946409;
      doubleArray8[7] = (-271.15339264027);
      doubleArray8[8] = 1827.4;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 3060.946409;
      doubleArray9[1] = 1105.6986337751907;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("8964", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      Discretize discretize0 = new Discretize("]BFkNvuTyEE,C)3");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("vt\".X", linkedList0, protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) linkedList0, locale_FilteringMode0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("relational");
      protectedProperties5.replace(object0, (Object) attribute1, (Object) arrayList2);
      Attribute attribute2 = new Attribute("real", linkedList0, protectedProperties5);
      attribute0.setStringValue("'B");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "real";
      stringArray0[3] = "vt\".X";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize("07C0r2-uWX@KV.5\"");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "07C0r2-uWX@KV.5\"";
      stringArray0[1] = "07C0r2-uWX@KV.5\"";
      stringArray0[2] = "07C0r2-uWX@KV.5\"";
      stringArray0[3] = "07C0r2-uWX@KV.5\"";
      stringArray0[4] = "07C0r2-uWX@KV.5\"";
      stringArray0[5] = "07C0r2-uWX@KV.5\"";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = (double) 77;
      doubleArray0[2] = (double) 77;
      SparseInstance sparseInstance0 = new SparseInstance(77, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }
}
