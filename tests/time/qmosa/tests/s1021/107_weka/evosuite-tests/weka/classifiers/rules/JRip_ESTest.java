/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:04:08 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.964, doubleArray0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip0.getRevision();
      jRip0.getCheckErrorRate();
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.getEvaluationMeasure();
      Attribute attribute0 = new Attribute("");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      jRip_NumericAntd0.value = (double) 1;
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_NumericAntd0.covers(binarySparseInstance0);
      double double0 = jRip_NumericAntd1.getSplitPoint();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.582995873983552
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.getEvaluationMeasure();
      Attribute attribute0 = new Attribute("");
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd1.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      JRip jRip3 = new JRip();
      String string0 = jRip3.getRevision();
      assertEquals("8118", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_NominalAntd0.covers(binarySparseInstance0);
      boolean boolean2 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(1L, jRip2.getSeed());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertTrue(jRip2.getUsePruning());
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(3, jRip2.getFolds());
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(0.05);
      jRip0.setUsePruning(false);
      jRip0.setMinNo(519.793704);
      String string0 = jRip0.globalInfo();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute(string0, list0, 913);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("296-304", arrayList0, 3);
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk();
      StringReader stringReader0 = new StringReader("-Y");
      Remove remove0 = new Remove();
      jRip0.seedTipText();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2724);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      jRip_NominalAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("*@J@A$_QG%D[&ym&d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // *@J@A$_QG%D[&ym&d not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-1197.34273727));
      jRip0.setDebug(true);
      jRip0.getOptimizations();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      Attribute attribute0 = new Attribute("`}5f,F+t=&nw|tjS", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      //  // Unstable assertion: assertEquals((-1197.34273727), jRip0.getMinNo(), 0.01);
      //  // Unstable assertion: assertEquals(117, set0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s,SYIy$b&P";
      AbstractClassifier.runClassifier(decisionTable1, stringArray0);
      DecisionTable decisionTable2 = new DecisionTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(0.0, (Instances) null, 0.0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.708946356277848
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\nDeleting rules to decrease DL of the whole ruleset ...";
      stringArray0[1] = "==================================\n";
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-O <number of runs>", arrayList0, 31);
      jRip_RipperRule0.prune(instances0, true);
      Attribute attribute0 = new Attribute("==================================\n");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("/N7", protectedProperties0);
      jRip_NumericAntd0.cover = (-1401.35);
      attribute0.addStringValue(attribute1, 3);
      jRip_NumericAntd0.splitData(instances0, 0.0, 1359.10622);
      LWL lWL0 = new LWL();
      lWL0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(22);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.covers(binarySparseInstance0);
      JRip jRip1 = new JRip();
      jRip0.getRevision();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "BSGRHL})9GH+Z#66t";
      stringArray0[2] = "-S";
      stringArray0[3] = "@cDfAK";
      stringArray0[4] = "";
      stringArray0[5] = "ocRtMj8VI,";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@cDfAK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7578996213295177
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w3Uo'");
      AbstractClassifier.makeCopy(jRip0);
      Attribute attribute0 = new Attribute("\nNumber of Rules : ");
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip1.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals(3, jRip1.getFolds());
      assertFalse(jRip1.getDebug());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, (-2464));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jRip_NumericAntd1.copy();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jRip_RipperRule0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      predicate2.or(predicate5);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeIf(predicate5);
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_NumericAntd1.copy();
      jRip0.seedTipText();
      jRip_NumericAntd2.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.optimizationsTipText();
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7068564921190186
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\nDeleting rules to decrease DL of the whole ruleset ...";
      stringArray0[1] = "==================================\n";
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-O <number of runs>", arrayList0, 31);
      jRip_RipperRule0.prune(instances0, true);
      Attribute attribute0 = new Attribute("==================================\n");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0.0, 1359.10622);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(34);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.getRevision();
      jRip_NumericAntd0.splitData(instances0, 4, 34);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.getCheckErrorRate();
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk();
      StringReader stringReader0 = new StringReader("necessary");
      Remove remove0 = new Remove();
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("}!: 12EToE~\"MfQ~", arrayList0, (-2448));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet0 = new BayesNet();
      jRip_RipperRule0.size();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-68);
      doubleArray0[1] = (double) (-68);
      doubleArray0[2] = (double) (-68);
      int[] intArray0 = new int[6];
      intArray0[0] = (-68);
      intArray0[1] = (-1719);
      JRip.main((String[]) null);
      intArray0[2] = (-1719);
      jRip_RipperRule0.setConsequent((-1719));
      assertEquals((-1719.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      intArray0[3] = (-1719);
      intArray0[2] = (-68);
      intArray0[5] = (-68);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 3682);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule2.hasAntds();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      StringReader stringReader0 = new StringReader("necessary");
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.439720770839918
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-1681.6552769479);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 5;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int[] intArray0 = new int[9];
      intArray0[0] = (-68);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 5;
      intArray0[4] = (-1719);
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = 1;
      intArray0[8] = 5;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0, intArray0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 4;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 5;
      int[] intArray0 = new int[9];
      intArray0[0] = (-68);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 5;
      intArray0[4] = (-1719);
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = 1;
      intArray0[8] = 5;
      Attribute attribute0 = new Attribute(".bsi");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => .bsi=", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string1 = jRip0.minNoTipText();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("The minimum total weight of the instances in a rule.", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      predicate2.or(predicate0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jRip_RipperRule0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      predicate2.or(predicate5);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null);
      attribute0.copy("@relation");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 6.7, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOLanguages();
      Remove remove0 = new Remove();
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether pruning is performed.", string0);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = null;
      stringArray0[6] = "^nvMOv4)H*";
      try { 
        jRip1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      jRip0.optimizationsTipText();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.size();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("8118");
      assertTrue(linkedList0.contains(string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8118";
      stringArray0[2] = "\nPruning the rule ...";
      stringArray0[3] = "VwyTQobIhQ$/t=";
      Attribute.main(stringArray0);
      jRip_RipperRule0.getRevision();
      jRip0.toString();
      String string1 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      boolean boolean0 = false;
      Attribute attribute0 = new Attribute("Zk=sp1Tx=");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1622.08, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hi&rc");
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      IBk iBk0 = new IBk();
      StringReader stringReader0 = new StringReader("necessary");
      Remove remove0 = new Remove();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("}!: 12EToE~\"MfQ~", arrayList0, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, long0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(0.0);
      jRip0.setUsePruning(true);
      jRip0.setFolds(5);
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      intArray0[8] = 116;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1437);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance2.attributeSparse(1839);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      jRip0.setSeed(2L);
      double double0 = (-1707.3);
      jRip0.setMinNo((-1707.3));
      jRip0.enumerateMeasures();
      jRip0.toString();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("_xfYw84XlfImFcs>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // _xfYw84XlfImFcs> not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.getEvaluationMeasure();
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("': infoGain = ");
      attribute0.setWeight(0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      DecisionTable decisionTable0 = new DecisionTable();
      Hashtable<Object, String> hashtable0 = null;
      // Undeclared exception!
      try { 
        decisionTable0.printFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.DecisionTable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(439L);
      jRip0.setCheckErrorRate(true);
      Utils.SMALL = (-715.9480386520619);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("'3 @!Npl2Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '3 @!Npl2Y not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(")\n", linkedList0, 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate3.or(predicate2);
      linkedList0.removeIf(predicate3);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      linkedList0.add("(useAccuray? ");
      JRip.NumericAntd jRip_NumericAntd2 = (JRip.NumericAntd)jRip_NumericAntd1.copy();
      assertEquals(Double.NaN, jRip_NumericAntd2.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAttrValue(), 0.01);
      
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(")\n <= NaN", string1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertNotSame(jRip_NumericAntd0, object0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string2 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string2);
      
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      String string3 = jRip0.foldsTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string3);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip1.getMinNo();
      AbstractClassifier.makeCopy(jRip1);
      BallTree ballTree0 = new BallTree();
      double double0 = 2190.818728950566;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2190.818728950566;
      DenseInstance denseInstance0 = new DenseInstance(2190.818728950566, doubleArray0);
      BallTree ballTree1 = new BallTree();
      DenseInstance denseInstance1 = null;
      try {
        denseInstance1 = new DenseInstance((-4636));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("necessary");
      Remove remove0 = new Remove();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("necessary", arrayList0, 31);
      Attribute attribute0 = new Attribute(".arff");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0, 0.0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      LWL lWL0 = new LWL();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("F");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode2);
      attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1553.16859, (-691.006353589498));
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 0.0;
      jRip0.setMinNo(0.0);
      jRip0.enumerateMeasures();
      jRip0.toString();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("JRIP: No model built yet.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JRIP: No model built yet. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attributeSparse(73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3041.05);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[3] = 2;
      intArray0[6] = 2;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0, intArray0, 1);
      AbstractClassifier.makeCopy(decisionTable0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean1 = jRip0.getUsePruning();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean1 == boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-1681.6552769479);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 3;
      int[] intArray0 = new int[9];
      intArray0[0] = (-68);
      intArray0[1] = 2;
      doubleArray0[1] = (double) 2;
      intArray0[3] = 5;
      intArray0[4] = (-1719);
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[2] = 1;
      intArray0[8] = 5;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0, intArray0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      decisionTable0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      jRip0.setOptimizations(76);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("weka.classifiers.rules.JRip", "\t--> ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccuRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-7);
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 0;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      jRip0.setMinNo(0.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~A}+");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getFolds();
      jRip0.getUsePruning();
      jRip0.debugTipText();
      jRip0.debugTipText();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      jRip_RipperRule0.size();
      Attribute attribute0 = new Attribute("Zk=sp1Tx=");
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule1.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("necessary");
      Remove remove0 = new Remove();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LWL lWL0 = new LWL();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList1);
      Locale locale0 = Locale.forLanguageTag("F");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode2);
      Attribute attribute0 = new Attribute((String) null, list0, 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = (-50);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2538.65271034392), intArray0, (-68));
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-639.40118), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=====================================\n";
      stringArray0[1] = "\nDeleting rules to decrease DL of the whole ruleset ...";
      stringArray0[2] = "=====================================\n";
      Capabilities capabilities0 = jRip1.getCapabilities();
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      stringArray0[3] = "=====================================\n";
      jRip1.setOptions(stringArray0);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      predicate2.or(predicate0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jRip_RipperRule0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      predicate2.or(predicate5);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeIf(predicate5);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("line.separator");
      jRip0.seedTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.optimizationsTipText();
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      try { 
        jRip1.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      StringReader stringReader0 = new StringReader("necessary");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("necessary");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // necessary not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
