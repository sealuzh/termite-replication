/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 07:45:12 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?M1SmF");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 6, "{|Nq\"\"X4PN~LaY5");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tableillegal colum0 type format:");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("L^^vV", (String) null, "Abds`l.>B0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 8, "replication.slave.mode");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("REPLICATION.SLAVE.MODE", stringBuilder0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null, .null", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DBSchema dBSchema0 = new DBSchema("callselect intollegal colum0 type format:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callselect intollegal colum0 type format:", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", true, stringArray0);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop table\" PRIMARY KEY (, , , , )", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("'|'");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("Kp", stringArray0, "n6g6|f)", (String) null, stringArray0);
      assertEquals("left join n6g6|f) as null on Kp.null = null.null and Kp.null = null.null and Kp.null = null.null and Kp.null = null.null and Kp.null = null.null and Kp.null = null.null and Kp.null = null.null and Kp.null = null.null", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("delete", stringArray0, (String) null, ";-", stringArray0);
      assertEquals("left join null as ;- on delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null and delete.null = ;-.null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("0QuwWiV=fvi`(", (String[]) null, "0QuwWiV=fvi`(", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("ci?@{1", stringArray0, "C#6aBM0 BoPu`<GQV", "m+0It]yvNt6s`g7=V", stringArray0);
      assertEquals("left join C#6aBM0 BoPu`<GQV as m+0It]yvNt6s`g7=V on ", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "alter index", "`in:2", stringArray0);
      assertEquals("left join alter index as `in:2 on null.null = `in:2.null and null.null = `in:2.null and null.null = `in:2.null", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "Ash9Iz*O;Iq:T1", stringArray0);
      assertEquals("left join  as Ash9Iz*O;Iq:T1 on .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null and .null = Ash9Iz*O;Iq:T1.null", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("6s/37Nv67kl3+NbZ", "Ev1M|CLS$Y,", stringArray0, (String) null, "K!|dc,uN*Cu~K'", stringArray0);
      assertEquals("6s/37Nv67kl3+NbZ join null as K!|dc,uN*Cu~K' on Ev1M|CLS$Y,.null = K!|dc,uN*Cu~K'.null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join(",B)", "{", stringArray0, "{", ",B)", stringArray0);
      assertEquals(",B) join { as ,B) on ", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("PARENT");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("5");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("k:Lkg(VK", stringArray0, "4>b5/|Em=.", "r>", stringArray0);
      assertEquals("4>b5/|Em=. as r> on ", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null and .null = .null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("X{2", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT X{2 FOREIGN KEY (, , , , , , ) REFERENCES null(, , , , , , )", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("iy4uf6*gZUD;n");
      SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("iy4uf6*gZUD;n and ", stringBuilder0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "alter materialized viewselect * from", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Unknown constraint type: ", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*GS@ZM})");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(=]j#", defaultDBTable0, (DBDataType) null, (Integer) 22, (Integer) 20);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6037479613474844
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF";
      stringArray0[2] = "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF";
      String string0 = SQLUtil.leftJoin("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", stringArray0, "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", stringArray0);
      // Undeclared exception!
      SQLUtil.normalize(string0, true);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("execute", stringArray0, "drop indexycy.nk", "0QuwWiV=fvi`(", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter tabledeletezuwl", stringArray0, "<THakOC~oMNf{?*", "=f", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("0GJyClColR):]", "0GJyClColR):]", (String[]) null, "0GJyClColR):]", "*der:2", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.join("- 0", "PURE_JAVA", stringArray0, "iv7NX{mA7Jl/}o\"V.\"j", stringArray0[5], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("zUQ qoJ!{d>lBo6L~u", (String[]) null, "w&uhF6S", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, (String) null, "KJ8F.z@%n,Gg5z^", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "D1wx1J<w7*QsEE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter tableillegal colum0 type format:", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnListWithTableName("|x-UM@UUO4-V", stringArray0);
      assertEquals("|x-UM@UUO4-V.null, |x-UM@UUO4-V.null, |x-UM@UUO4-V.null, |x-UM@UUO4-V.null, |x-UM@UUO4-V.null, |x-UM@UUO4-V.null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("*GS@ZM})");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("`ed^5'26m,gktpvik", true);
      assertEquals("` ed ^ 5 '26m,gktpvik'", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = SQLUtil.normalize("%EJe\"wn", true);
      assertEquals("% EJe \"wn\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = SQLUtil.normalize("(7Ti,oi;[-", false);
      assertEquals("(7Ti, oi ; [ -", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.normalize("n)r XHw,", true);
      assertEquals("n) r XHw,", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = SQLUtil.normalize("cJy{@BS^/rumcB", false);
      assertEquals("cJy { @ BS ^ / rumcB", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.removeComments("PARENT");
      assertEquals("PARENT", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";]@TF|#UeR?XA3BY#G", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint ;]@TF|#UeR?XA3BY#G", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "replication.slave.dbname", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT replication.slave.dbname ", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[ELECT * FRRO ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[ELECT * FRRO ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("[ELECT * FRRO CONSTRAINT \"[ELECT * FRRO \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[ELECT * FRRO ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[ELECT * FRRO ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("[ELECT * FRRO ", stringBuilder1.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONTAINERID");
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , ) REFERENCES CONTAINERID(, , , , , , , , )", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";]@TF|#UeR?XA3BY#G", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("null.;]@TF|#UeR?XA3BY#G", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("e)");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("e)", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("$J!%e@eSRk>$ry9Uusd");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("$J!%e@eSRk>$ry9Uusd", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("TV_{{K{u$+SIhQgB");
      SQLUtil.addRequiredCondition("DG*{]5", stringBuilder0);
      assertEquals("TV_{{K{u$+SIhQgB and DG*{]5", stringBuilder0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition("?M1SmF", stringBuilder0);
      assertEquals("?M1SmF", stringBuilder0.toString());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.join("", "B]K(0OTdy@B0ahpPx", stringArray0, "", "42Z24", stringArray0);
      assertEquals(" as 42Z24 on B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null and B]K(0OTdy@B0ahpPx.null = 42Z24.null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  UNIQUE (, , , , , , )", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "L^^vV", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , )", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callselect intollegal colum0 type format:");
      assertNull(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deletezuwl");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM (3)");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableillegal colum0 type format:");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Character character0 = Character.valueOf('|');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'|'", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1128, "?e80l@iKfH<?");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" /* ", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("?E80L@IKFH<?(2,2)", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(57, "SELECT * FROM ");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L^^vV", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("L^^vV SELECT * FROM (0) NOT NULL", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(57, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L^^vV", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("L^^vV (3) NULL", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PARENT", (DBTable) null, (-1929), "PARENT");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("PARENT", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(57, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("L^^vV", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("L^^vV, L^^vV, L^^vV, L^^vV, L^^vV, L^^vV, L^^vV", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputText rowOutputText0 = new RowOutputText("SELECT * FROM ", "LIz.", "B[[Qn)N8QcZX:m%I", false, "Bb 06X^6&^HVU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.5445996236821669
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.normalize("\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(string0, (DBTable) null, 7, "\u0001\t\u0001\uFFFF\u0001A\u0001L\u0001A\u0003\uFFFF\u0001C\u0002E\u0001N\u0001A\u0001N\u0001A\u0001N\u0002A\u0001E\u0001A\u0001E\u0001A\u0001D\u0001N\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0002=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001L\u0001C\u0001A\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001H\u0001X\u0001C\u0001L\u0001A\u0001O\u0001F\u0001$\u0001F\u0001Y\u0002$\u0001T\u0001R\u0001I\u0002$\u0001X\u0002N\u0001A\u0001W\u0001N\u0001F\u0001S\u0001F\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001B\u0001L\u0001$\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001M\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0001O\u0002A\u0001$\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001$\u0001A\u0002\uFFFF\u0001F\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0002E\u0001I\u0001E\u0001B\u0001$\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001$\u0001U\u0001C\u0001\uFFFF\u0001E\u0002$\u0001N\u0001Q\u0001E\u0001$\u0001T\u0001$\u0001T\u0001R\u0001E\u0001M\u0001E\u0001A\u0002K\u0001$\u0001A\u0001O\u0001E\u0001$\u0001G\u0001S\u0001R\u0001B\u0001$\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001$\u0001E\u0001C\u0001$\u0001E\u0001$\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001I\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001$\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002$\u0002A\u0001E\u0003$\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001$\u0001D\u0002$\u0001\uFFFF\u0001L\u0001R\u0001$\u0001\uFFFF\u0001E\u0001T\u00012\u0001$\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001$\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002$\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001$\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002$\u0001E\u0001G\u0001$\u0001A\u0001S\u0001$\u0001T\u0001$\u0001\uFFFF\u0001E\u0002\uFFFF\u0001$\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001$\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001$\u0001A\u0001_\u0001N\u0001$\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001$\u0002\uFFFF\u0001I\u0001N\u0001E\u0001$\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001$\u0001R\u0002\uFFFF\u0001$\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001R\u0001A\u0001$\u0001M\u0001\uFFFF\u0001N\u0001E\u0001$\u0001L\u0001\uFFFF\u0001R\u0001P\u0001$\u0001\uFFFF\u0001A\u0002$\u0001E\u0001I\u0001O\u0001$\u0001S\u0001$\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001$\u0001\uFFFF\u0002$\u0001I\u0001E\u0001$\u0001\uFFFF\u00012\u0001\uFFFF\u0001$\u0001N\u0001$\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001$\u0001\uFFFF\u0001E\u0001$\u0001T\u0001$\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001T\u0001\uFFFF\u0001$\u0001E\u0002$\u0001S\u0001L\u0001$\u0001O\u0001I\u0001S\u0001N\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001$\u0001S\u0001I\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF\u0002$\u0001\uFFFF\u0001L\u0001O\u0001E\u0002$\u0002\uFFFF\u0003$\u0001\uFFFF\u0001$\u0001O\u0001$\u0004\uFFFF\u0001$\u0001N\u0001$\u0006\uFFFF\u0001N\u0002\uFFFF\u0001$\u0001\uFFFF\u0001$\u0001\uFFFF\u0001$\u0002\uFFFF");
      defaultDBColumn0.setDefaultValue("Asa<psRCs@L}[{[Wq#");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T#2zLjQ3v.i7I*%(");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("T#2zLjQ3v.i7I*%(", defaultDBTable0, (-932), "T#2zLjQ3v.i7I*%(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: T#2zLjQ3v.i7I*%(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "replication.slave.dbname", true, stringArray0);
      String string0 = SQLUtil.substituteMarkers("call", "Y&]1b_5i<=Vm2e?1qQ8", dBPrimaryKeyConstraint0);
      assertEquals("call", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "org.h2.command.ddl.CreateTrigger", "an6{");
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "r]gYO>yEV<1w?./|h", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT r]gYO>yEV<1w?./|h UNIQUE (, , , , , , )", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
