/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:27:09 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.Writer;
import java.util.List;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6026079953955388
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, defaultDBTable0, stringArray0);
      defaultDBTable0.addIndex(dBUniqueIndex0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      SQLUtil.isDML("callycy.nk");
      SQLUtil.mutatesDataOrStructure("index null");
      VersionNumber.valueOf("}DCM9(~DSmb MVu]");
      SQLUtil.isDML("u@FLJ\"`Bc?]");
      SQLUtil.mutatesStructure("u@FLJ\"`Bc?]");
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(dBNonUniqueIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.mutatesStructure("SQL");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("alter session");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(796, 4);
      streamTokenizer0.resetSyntax();
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1836725700280097
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isQuery("a1lter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[14];
      stringArray0[0] = "drop materialzed viewname=";
      stringArray0[1] = "a1lter session";
      stringArray0[2] = "drop materialzed viewname=";
      stringArray0[3] = "drop materialzed viewname=";
      stringArray0[4] = "drop materialzed viewname=";
      stringArray0[5] = "drop materialzed viewname=";
      stringArray0[6] = "drop materialzed viewname=";
      stringArray0[7] = "a1lter session";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a1lter session", false, stringArray0);
      SQLUtil.normalize("}bwof9**z;w.ostz\"", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop materialzed viewname=", false, dBUniqueConstraint0);
      defaultDBTable1.addIndex(dBUniqueIndex0);
      dBUniqueConstraint0.addColumnName("drop materialzed viewname=");
      SQLUtil.typeAndName(dBUniqueConstraint0);
      SQLUtil.isDML("unique constraint a1lter session");
      SQLUtil.mutatesDataOrStructure("}bwof9**z;w.ostz\"");
      VersionNumber.valueOf("drop materialzed viewname=");
      SQLUtil.isDML("a1lter session");
      SQLUtil.mutatesStructure("drop materialzed viewname=");
      SQLUtil.isProcedureCall("}DCM9(~DSmb MVu]");
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("drop materialzed viewname=", (String) null, stringArray0, "a1lter session", "drop materialzed viewname=", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.341986108168706
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exec] data leaf table:", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      dBUniqueIndex0.setDoc("exec] data leaf table:");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, (-2713), "SELECT * FROM ");
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      DBTrigger dBTrigger0 = new DBTrigger("", (DBSchema) null);
      defaultDBColumn0.setName("create unique index");
      dBUniqueIndex0.isIdentical(dBTrigger0);
      DBDataType.getInstance(6, "i)w");
      SQLUtil.isDML("create unique index");
      SQLUtil.mutatesStructure("exec] data leaf table:");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "SELECT * FROM ";
      SQLUtil.join("42Z24", "i)w", stringArray0, "create unique index", ".", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isQuery("alter session");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.396192256542781
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.join("inner", "YuNS5T*cj?\"350*", stringArray0, (String) null, "YuNS5T*cj?\"350*", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("renamealter materialized view");
      VersionNumber.valueOf("alter tableupdateu@flj\"`bc?]");
      SQLUtil.isDML("exec");
      SQLUtil.mutatesStructure("(");
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "inner", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5131939972990156
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "qeRyZ";
      stringArray0[1] = "0.";
      stringArray0[2] = ".lock.db";
      stringArray0[3] = "updateu@flj\"`bc?]";
      stringArray0[4] = "r]gYO>yEV<1w?./$h";
      stringArray0[5] = "updateu@flj\"`bc?]";
      String string0 = "insert";
      SQLUtil.join("r]gYO>yEV<1w?./$h", ".lock.db", stringArray0, "insert", "OW", stringArray0);
      String string1 = null;
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("updateu@flj\"`bc?]");
      String string2 = ".P=*\\d@L*RySdow\"";
      VersionNumber.valueOf(".P=*d@L*RySdow\"");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.677324441152832
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "':SvgD{b7";
      SQLUtil.removeComments("Object");
      SQLUtil.removeComments(" NULL");
      SQLUtil.leftJoin(" NULL", stringArray0, "w4regz6i(ee:n", "Object", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "usxlSf,out|:sh6iW";
      SQLUtil.mutatesDataOrStructure("call");
      VersionNumber versionNumber0 = VersionNumber.valueOf("Object");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("^d8LPB5bQv<N6", "k3rPh2T6", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("drop indexname=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '^d8LPB5bQv<N6'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("SELECT * FROM ", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("exec] data leaf table:", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.702861977846002
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select intocreate materialized view$.g6rmuna+dj/g(gjx";
      String string0 = SQLUtil.renderColumnListWithTableName("select intocreate materialized view$.g6rmuna+dj/g(gjx", stringArray0);
      assertEquals("select intocreate materialized view$.g6rmuna+dj/g(gjx.select intocreate materialized view$.g6rmuna+dj/g(gjx", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(select intocreate materialized view$.g6rmuna+dj/g(gjx)", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intocreate materialized view$.g6rmuna+dj/g(gjx.select intocreate materialized view$.g6rmuna+dj/g(gjx");
      assertFalse(boolean0);
      
      VersionNumber.valueOf("BLOB");
      boolean boolean1 = SQLUtil.isDML("qi");
      Boolean boolean2 = SQLUtil.mutatesStructure("create tablename=");
      assertFalse(boolean2.equals((Object)boolean1));
      
      String string2 = SQLUtil.join("select intocreate materialized view$.g6rmuna+dj/g(gjx", "qi", stringArray0, "select intocreate materialized view$.g6rmuna+dj/g(gjx", (String) null, stringArray0);
      assertEquals("select intocreate materialized view$.g6rmuna+dj/g(gjx join select intocreate materialized view$.g6rmuna+dj/g(gjx as null on qi.select intocreate materialized view$.g6rmuna+dj/g(gjx = null.select intocreate materialized view$.g6rmuna+dj/g(gjx", string2);
      
      Boolean boolean3 = SQLUtil.mutatesStructure("BT<2V8d\"&\"#Gedb%");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("$o`97? or Skipping HASH JOIN because there are no hash key columns", stringBuilder0.toString());
      
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("null.drop materialized view", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ";-";
      String string1 = "log recover";
      DBTable dBTable0 = null;
      String string2 = "(";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(";-", (DBTable) null, 1498, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("");
      Boolean boolean0 = new Boolean("5'+IFeS87Nv");
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, dBTable0, stringArray0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      SQLUtil.isDML("callycy.nk");
      SQLUtil.substituteMarkers("", "updatenull", stringArray0[3]);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4606190724466974
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0V&", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setDoc("vVs[gFSSX>nDwtXLE");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";YNpe_6Ov {2>", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("Cannot find parameter with the specified position.", false, dBTable0, stringArray0);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      assertNotNull(string0);
      assertEquals("unique constraint 0V&", string0);
      
      SQLUtil.isDML("}G");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      VersionNumber.valueOf("drop materialized vieworg.dataene.sql");
      SQLUtil.isDML("u 6o[xXM");
      Boolean boolean1 = SQLUtil.mutatesStructure("drop materialized vieworg.dataene.sql");
      assertTrue(boolean1);
      
      boolean boolean2 = SQLUtil.isProcedureCall("callorg.dataene.sql");
      assertTrue(boolean2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.751273597885415
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.normalize("create materialized view$.g6rmuna+dj/g(gjx", false);
      SQLUtil.normalize("create unique index", false);
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("dqPD", "r]gYO>yEV<1w?./|h", (String[]) null, ">v@1(J87w)L}7u:d", "rename", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "c?$,Dv";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c?$,Dv";
      stringArray0[1] = "c?$,Dv";
      SQLUtil.innerJoin((String) null, stringArray0, "g3H?hK0iA6y&)4=N_du", "c?$,Dv", stringArray0);
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Hj", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pos: ", (DBSchema) null);
      String string1 = "SG<BXxB7so=}_T\"";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "SG<BXxB7so=}_T\"";
      stringArray1[1] = "%Di`s`;idSc-sX^Oz-";
      stringArray1[2] = "Hj";
      stringArray1[3] = "c?$,Dv";
      stringArray1[4] = "pos: ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Hj", stringArray1, "a;lh>JN9Z!6LN", "y&U[Ym^_SHxNx", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4902259998997436
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = " name=";
      Boolean boolean0 = SQLUtil.mutatesStructure(" name=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" name=");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "- ";
      String string1 = "truncatepk?>.gzltq\"au]s/ g-";
      stringArray0[1] = "truncatepk?>.gzltq\"au]s/ g-";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "- ", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("truncatepk?>.gzltq\"au]s/ g-");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("truncatepk?>.gzltq\"au]s/ g-", true, defaultDBTable0, stringArray0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      SQLUtil.isDML("truncatepk?>.gzltq\"au]s/ g-");
      SQLUtil.substituteMarkers("truncatepk?>.gzltq\"au]s/ g-", "YzySlh`}FLkomWF", boolean0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.mutatesStructure(" name=");
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("] data leaf table:", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SELECT * FROM ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PRIMARY KEY ", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("truncate");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("o(:$d;T*Kn.JNpsE", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("renameupdateu@flj\"`bc?]", true, defaultDBTable0, stringArray0);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      SQLUtil.typeAndName(dBUniqueIndex0);
      SQLUtil.isDML("index o(:$d;T*Kn.JNpsE");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9296784005546699
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      String string0 = "!!?]s$f[E\\";
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("Skipping HASH JOIN because there are no hash key columns");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "?1N>m)tB`O~_k ,";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SELECT * FROM ", (String[]) null, "VALUE = ", "?1N>m)tB`O~_k ,", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6965715316770367
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("r]gYO>yEV<1w?./|h", false);
      SQLUtil.removeComments(":!pT7vlO4H");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop materialized view";
      SQLUtil.removeComments(":!pT7vlO4H");
      String[] stringArray1 = new String[0];
      SQLUtil.leftJoin("create unique index", stringArray1, "drop materialized view", "{?JAu2WA7", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      VersionNumber versionNumber0 = VersionNumber.valueOf("{?JAu2WA7");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("(@tEni", "r ] gYO > yEV < 1w ?./ | h", versionNumber0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "IS_NULL ");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread2, 0L, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4933251790517077
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.mutatesStructure(" name=");
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = " name=";
      stringArray0[1] = "}Bwof9**z;w.OsTz\"";
      stringArray0[2] = "}Bwof9**z;w.OsTz\"";
      stringArray0[3] = " name=";
      SQLUtil.join(" name=", "}Bwof9**z;w.OsTz\"", stringArray0, "create materialized view$.g6rmuna+dj/g(gjx", " name=", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("}Bwof9**z;w.OsTz\"");
      VersionNumber.valueOf((String) null);
      SQLUtil.isDML("create materialized view$.g6rmuna+dj/g(gjx");
      SQLUtil.mutatesStructure(" name=");
      SQLUtil.join((String) null, "qi", stringArray0, "qi", "}Bwof9**z;w.OsTz\"", stringArray0);
      SQLUtil.mutatesStructure("}Bwof9**z;w.OsTz\"");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4768214908993054
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ubo-r/U&2TpL)-AG~";
      stringArray0[1] = "Ubo-r/U&2TpL)-AG~";
      SQLUtil.innerJoin("Ubo-r/U&2TpL)-AG~", stringArray0, "Another process was faster", "QQ=`f4{d$&.V", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-fJ{?sv", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Ubo-r/U&2TpL)-AG~ = 'Ubo-r/U&2TpL)-AG~' AND Ubo-r/U&2TpL)-AG~ = 'Ubo-r/U&2TpL)-AG~'", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      SQLUtil.parseColumnTypeAndSize("Ubo-r/U&2TpL)-AG~");
      SQLUtil.mutatesStructure("$.g6Rmuna+dJ/G(gjx");
      SQLUtil.normalize("QQ=`f4{d$&.V", true);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("Another process was faster as QQ=`f4{d$&.V on Ubo-r/U&2TpL)-AG~.Ubo-r/U&2TpL)-AG~ = QQ=`f4{d$&.V.Ubo-r/U&2TpL)-AG~ and Ubo-r/U&2TpL)-AG~.Ubo-r/U&2TpL)-AG~ = QQ=`f4{d$&.V.Ubo-r/U&2TpL)-AG~");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '}';
      charArray0[2] = '4';
      charArray0[3] = '\\';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      charArray0[6] = ',';
      charArray0[7] = 'n';
      StringBuilder stringBuilder3 = stringBuilder2.insert(2, charArray0);
      StringBuilder stringBuilder4 = stringBuilder3.append(951L);
      // Undeclared exception!
      try { 
        stringBuilder4.replace(2, (-116), "$.g6Rmuna+dJ/G(gjx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > end
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9683206107781572
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(" name=");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] data leaf table:";
      stringArray0[1] = " name=";
      stringArray0[2] = "callycy.nk";
      stringArray0[3] = null;
      stringArray0[4] = "callycy.nk";
      stringArray0[5] = "callycy.nk";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " name=", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("mZNoLMWM");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[3], false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("mZNoLMWM", false, dBPrimaryKeyConstraint1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, false, dBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBNonUniqueIndex0);
      assertNotNull(string0);
      assertEquals("index null", string0);
      
      boolean boolean1 = SQLUtil.isDML("mZNoLMWM");
      assertFalse(boolean1);
      
      Object object0 = new Object();
      String string1 = SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \" name=\" PRIMARY KEY (] data leaf table:,  name=, callycy.nk, , callycy.nk, callycy.nk)", string1);
      
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" name=", defaultDBTable0, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" name=,  name=,  name=,  name=,  name=,  name=", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8973520027539594
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDDL("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "resultSetHoldability";
      stringArray0[1] = "resultSetHoldability";
      String string0 = "(r@f";
      SQLUtil.leftJoin("resultSetHoldability", stringArray0, "(r@f", "resultSetHoldability", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "(r@f";
      stringArray1[2] = "(r@f";
      stringArray1[3] = "(r@f";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("resultSetHoldability", stringArray1, "", "", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      SQLUtil.innerJoin((String) null, stringArray0, "name", "calla[", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4719808035790245
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.mutatesStructure("");
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBTable dBTable0 = null;
      int int0 = (-1929);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("log recover", (DBTable) null, (-1929), "log recover");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4423659933400472
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      StringBuilder stringBuilder0 = new StringBuilder("drop materialized view");
      SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", defaultDBTable0, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", defaultDBTable0, (-2389), " NOT Z(3,0) NULL");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ff", true, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Z", defaultDBTable0, (-2389), "ff");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      assertEquals("drop materialized view or Skipping HASH JOIN because there are no hash key columns or Skipping HASH JOIN because there are no hash key columns", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ff ", stringBuilder1.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3618126909669286
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DataStore dataStore0 = new DataStore("alteY index");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      VersionNumber.valueOf("&14SG|E!5CyB\n:=");
      boolean boolean1 = SQLUtil.isDML("_SYSTEM");
      SQLUtil.mutatesStructure("[XqhYRes!v*O-_l0Zi2");
      Boolean boolean2 = SQLUtil.mutatesStructure("");
      assertTrue(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";-", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";-", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.substituteMarkers("alter materialized viewname=", "'nocompres", (Object) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ";-");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "alter materialized viewname=");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      String string0 = "t=Hj?JRQ#}c$U,n[8w2";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("alter materialized viewname=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'alter materialized viewname=' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.032319389918913
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";-";
      stringArray0[1] = ";-";
      stringArray0[2] = ";-";
      stringArray0[3] = ";-";
      stringArray0[4] = ";-";
      stringArray0[5] = ";-";
      stringArray0[7] = ";-";
      String string0 = null;
      SQLUtil.innerJoin(";-", stringArray0, "c?$,Dv", (String) null, stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("<H", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y&U[Ym^_SHxNx", (DBSchema) null);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "<H";
      stringArray1[1] = "c?$,Dv as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.;- = null.;-";
      stringArray1[2] = "c?$,Dv";
      SQLUtil.normalize("c?$,Dv as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.;- = null.;-", true);
      int int0 = (-2589);
      DBDataType dBDataType0 = DBDataType.getInstance((-2589), "create materialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1944070123505537
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      
      DBDataType dBDataType0 = DBDataType.getInstance(2299, " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("  NOT(0,3) NULL", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!!?]s$f[E", false, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      Integer integer3 = RawTransaction.ABORT;
      defaultDBColumn0.getForeignKeyConstraint();
      String string1 = SQLUtil.normalize("  NOT(0,3) NULL", false);
      assertEquals("NOT (0, 3) NULL", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = null;
      stringArray1[1] = "callycy.nk";
      stringArray1[2] = null;
      stringArray1[3] = "yLMGJ=v:_Tn<Dw/MH|T";
      stringArray1[4] = "_f";
      stringArray1[5] = "<2 nSc_^eozf0z";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[1], true, defaultDBTable0, stringArray1, defaultDBTable0, (String[]) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7181998864275512
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      TableContainer tableContainer0 = new TableContainer("!!?]s$f[E");
      tableContainer0.getTable("LSX^BcRJ>|Qg");
      DBDataType dBDataType0 = DBDataType.getInstance(2299, " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      defaultDBColumn0.toString();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintTableDescriptor((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exec] data leaf table:", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, (-2713), "SELECT * FROM ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      DBTrigger dBTrigger0 = new DBTrigger("", (DBSchema) null);
      defaultDBColumn0.setName("create unique index");
      dBUniqueIndex0.isIdentical(dBTrigger0);
      DBDataType dBDataType0 = DBDataType.getInstance(6, "i)w");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.COMMIT;
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(",D`aaDtL", defaultDBTable0, dBDataType0, integer0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "z]%`~{j", true, stringArray0);
      DBDataType.getInstance(6, "mh_R[7w'Xs^ZTb");
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.FALSE;
      String string1 = "lJi8ik/";
      String string2 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.208849196389684
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "SELECT * FROM ";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", true, dBTable0, stringArray0, dBTable0, stringArray0);
      SQLUtil.substituteMarkers("SELECT * FROM ", "SELECT * FROM ", dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , ^^vV, ^^vV) REFERENCES null(SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM , ^^vV, ^^vV)");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("t=Hj?JRQ#}c$U,n[8w2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 't=Hj?JRQ#}c$U,n[8w2' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9258931734303184
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] data leaf table:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callycy.nk", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, dBTable0, stringArray0);
      dBTable0.addIndex(dBUniqueIndex0);
      String string0 = SQLUtil.typeAndName(dBNonUniqueIndex0);
      assertNotNull(string0);
      assertEquals("index null", string0);
      
      SQLUtil.isDML("callycy.nk");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("index null");
      assertNull(boolean0);
      
      VersionNumber.valueOf("}DCM9(~DSmb MVu]");
      SQLUtil.isDML("u@FLJ\"`Bc?]");
      SQLUtil.mutatesStructure("u@FLJ\"`Bc?]");
      boolean boolean1 = SQLUtil.isProcedureCall("] data leaf table:");
      assertFalse(boolean1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT callycy.nk PRIMARY KEY (, , , , , ] data leaf table:)", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create tableycy.nk";
      stringArray0[1] = "GDS Exception. ";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = " Zn&yyRi%E]\"13>f";
      stringArray0[4] = "'NOCOMPRESS'";
      stringArray0[5] = "callycy.nk";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("(n(>iG/E]%ofd");
      SQLUtil.isDDL("drop materialized view");
      TableContainer tableContainer0 = new TableContainer("callycy.nk");
      tableContainer0.getTable("drop materialized view");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("alter materialized viewycy.nk", true, (DBTable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2052732897559393
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter index");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      VersionNumber.valueOf(" AND ");
      boolean boolean1 = SQLUtil.isDML(" and ");
      Boolean boolean2 = SQLUtil.mutatesStructure("_SYSTEM");
      assertFalse(boolean2);
      
      Boolean boolean3 = SQLUtil.mutatesStructure("alter table");
      assertFalse(boolean3.equals((Object)boolean1));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6865419347488353
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "^^vV";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, dBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.substituteMarkers("SELECT * FROM ", "SELECT * FROM ", dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV) REFERENCES null(SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV)", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV) REFERENCES null(SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV)");
      stringBuilder0.append((CharSequence) "SELECT * FROM ");
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.columnReferencedBy("SELECT * FROM ", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      boolean boolean0 = SQLUtil.isDML("XWnxnUq7oWGbH");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3822194921698756
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("!!?]s$f[E");
      tableContainer0.getTable("LSX^BcRJ>|Qg");
      DBDataType dBDataType0 = DBDataType.getInstance(2299, " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.DropViewConstantAction", (DBTable) null, 2299, "org.apache.derby.impl.sql.compile.ColumnDefinitionNode");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("_:rAgi(vO%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '_:rAgi(vO%' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2063429307255236
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "^^vV";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^^vV";
      stringArray0[5] = "^^vV";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^^vV", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, dBTable0, stringArray0, dBTable0, stringArray0);
      SQLUtil.substituteMarkers("SELECT * FROM ", "SELECT * FROM ", dBForeignKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV) REFERENCES null(SELECT * FROM , ^^vV, SELECT * FROM , SELECT * FROM , ^^vV, ^^vV)");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("t=Hj?JRQ#}c$U,n[8w2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 't=Hj?JRQ#}c$U,n[8w2' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3442530999419526
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("drop materialized view", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      assertEquals("$o`97? or drop materialized view", stringBuilder0.toString());
      
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("drop materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Uf.,N", false, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" NOT,  NOT,  NOT", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.858405168823904
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exec] data leaf table:", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SELECT * FROM ", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, (-2713), "SELECT * FROM ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      DBTrigger dBTrigger0 = new DBTrigger("", (DBSchema) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S?%7");
      defaultDBColumn0.setName("create unique index");
      dBUniqueIndex0.isIdentical(dBTrigger0);
      DBDataType.getInstance(6, "i)w");
      boolean boolean0 = SQLUtil.isDML("create unique index");
      Boolean boolean1 = SQLUtil.mutatesStructure("exec] data leaf table:");
      assertTrue(boolean1.equals((Object)boolean0));
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"exec] data leaf table:\" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3110204811135167
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("!!?]s$f[E");
      tableContainer0.getTable("LSX^BcRJ>|Qg");
      DBDataType dBDataType0 = DBDataType.getInstance(2299, " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.DropViewConstantAction", (DBTable) null, 2299, "org.apache.derby.impl.sql.compile.ColumnDefinitionNode");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("_:rAgi(vO%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '_:rAgi(vO%' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " from shutdown hook";
      stringArray0[1] = " from shutdown hook";
      stringArray0[2] = " from shutdown hook";
      SQLUtil.renderColumnListWithTableName(" from shutdown hook", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1553659796953863
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      SQLUtil.isDDL("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "resultSetHoldability";
      stringArray0[1] = "resultSetHoldability";
      String string1 = "(r@f";
      SQLUtil.leftJoin("resultSetHoldability", stringArray0, "(r@f", "resultSetHoldability", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = "J ";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("J ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?ed", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      DBTrigger dBTrigger0 = new DBTrigger("left join (r@f as resultSetHoldability on resultSetHoldability.resultSetHoldability = resultSetHoldability.resultSetHoldability and resultSetHoldability.resultSetHoldability = resultSetHoldability.resultSetHoldability", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      dBCatalog1.getSchema("resultSetHoldability");
      SQLUtil.typeAndName(dBCatalog1);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "CLOB";
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("08Icj6LG~", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1497, "alter sessionobject");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1497
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{YJfT*q", true, stringArray0);
      String string1 = "replication.slave.mode";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{YJfT*q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, 8, "replication.slave.mode");
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      dBUniqueIndex0.isIdentical(dBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "org.apache.derby.impl.sql.execute.DropViewConstantAction";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.ColumnDefinitionNode", dBTable0, 1055, "w{YJfT*q");
      // Undeclared exception!
      try { 
        dBTable0.getColumn("org.apache.derby.impl.sql.execute.DropViewConstantAction");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'org.apache.derby.impl.sql.execute.DropViewConstantAction' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[7] = "0";
      SQLUtil.removeComments("0");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("<", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y&U[Ym^_SHxNx", (DBSchema) null);
      String[] stringArray1 = new String[18];
      stringArray1[0] = "<";
      stringArray1[2] = "0";
      stringArray1[2] = "SG<BXxB7so=}_T\"";
      stringArray1[3] = "y&U[Ym^_SHxNx";
      stringArray1[4] = "3E:HPhIW3MQHoF`Idw@";
      stringArray1[5] = "y&U[Ym^_SHxNx";
      stringArray1[6] = "c?$,Dv";
      stringArray1[7] = "c?$,Dv";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{YJfT*q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      int int0 = 8;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, 8, "replicatio2.lave.mode");
      defaultDBColumn0.setNullable(true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = "Gjk(q\"DEVt4,?}\"S";
      defaultDBColumn0.setDoc("Gjk(q\"DEVt4,?}\"S");
      dBUniqueIndex0.isIdentical(dBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.addRequiredCondition("", stringBuilder0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("replicatio2.lave.mode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = ";-";
      stringArray0[1] = ";-";
      stringArray0[2] = ";-";
      stringArray0[5] = ";-";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[6] = ";-";
      stringArray0[7] = ";-";
      SQLUtil.innerJoin(";-", stringArray0, "?$wD$", (String) null, stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("<H", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y&U[Ym^_SHxNx", (DBSchema) null);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "<H";
      stringArray1[1] = "?$wD$ as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.null = null.null and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.null = null.null";
      stringArray1[2] = "SG<BXxB7so=}_T\"";
      stringArray1[3] = "y&U[Ym^_SHxNx";
      stringArray1[4] = "3E:HPhIW3MQHoF`Idw@";
      stringArray1[5] = "y&U[Ym^_SHxNx";
      stringArray1[6] = "<H";
      stringArray1[7] = "?$wD$";
      SQLUtil.leftJoin(";-", stringArray1, "%Di`s`;idSc-sX^Oz-", "<H", stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("?$wD$ as null on ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.null = null.null and ;-.;- = null.;- and ;-.;- = null.;- and ;-.;- = null.;- and ;-.null = null.null and ;-.null = null.null", "3E:HPhIW3MQHoF`Idw@", "kpiau@*}|=aRS");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1565923152267876
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "':SvgD{b7";
      stringArray0[2] = "Object";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Unknown constraint type: ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        DBDataType.getInstance("EwPRvH3+my.[Adaxw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = ";-";
      stringArray0[1] = ";-";
      stringArray0[2] = ";-";
      stringArray0[6] = ";-";
      stringArray0[4] = ";-";
      stringArray0[5] = ";-";
      stringArray0[6] = ";-";
      stringArray0[7] = ";-";
      SQLUtil.innerJoin(";-", stringArray0, "c?$,Dv", (String) null, stringArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(";-", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("HK,Aa,En.$`UGOQ[5_", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("3E:HPhIW3MQHoF`Idw@", stringArray0, ";-", "y&U[Ym^_SHxNx", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.945928577776465
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLUtil.normalize("r]gYO>yEV<1w/|h", false);
      String string0 = ":!pT7vlO4H";
      SQLUtil.normalize("r ] gYO > yEV < 1w / | h", false);
      SQLUtil.normalize("r ] gYO > yEV < 1w / | h", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6161405509542
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("Skipping HASH JOIN because there are no hash key columns");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), " NOT");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      tableContainer0.setOwner(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "$o`97?", false, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition(" NOT", stringBuilder0);
      assertEquals("$o`97? or Skipping HASH JOIN because there are no hash key columns and  NOT", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("", "", stringArray0, "", (String) null, stringArray0);
      String string0 = "org.postgresql.jdbc2.AbstractJdbc2Clob";
      SQLUtil.join("w4ReGz6I(EE:n", " as null on ", stringArray0, "org.postgresql.jdbc2.AbstractJdbc2Clob", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("w4ReGz6I(EE:n join org.postgresql.jdbc2.AbstractJdbc2Clob as null on ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: w4ReGz6I(EE:n join org.postgresql.jdbc2.AbstractJdbc2Clob as null on 
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("org.antlr.runtime.Token");
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      String string0 = "insertcallycy.nk";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.antlr.runtime.Token");
      int int0 = 41;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBTable dBTable0 = null;
      int int0 = (-1929);
      constraintDescriptorList0.getConstraintDescriptorList(true);
      constraintDescriptorList0.add((Object) "log recover");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("log recover", (DBTable) null, (-1929), "log recover");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.521860342989916
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "create materialized view$.g6rmuna+dj/g(gjx";
      stringArray1[1] = "updateu@flj\"`bc?]";
      stringArray1[2] = "org.dataene.SQL";
      stringArray1[3] = "create materialized view$.g6rmuna+dj/g(gjx";
      stringArray1[4] = "org.dataene.SQL";
      stringArray1[5] = "qeRyZ";
      stringArray1[6] = "updateu@flj\"`bc?]";
      stringArray1[7] = "org.dataene.SQL";
      stringArray1[8] = "org.dataene.SQL";
      SQLUtil.join("create materialized view$.g6rmuna+dj/g(gjx", "org.dataene.SQL", stringArray0, "qeRyZ", "updateu@flj\"`bc?]", stringArray1);
      String[] stringArray2 = new String[9];
      stringArray2[0] = "create materialized view$.g6rmuna+dj/g(gjx";
      stringArray2[1] = "org.dataene.SQL";
      stringArray2[2] = "org.dataene.SQL";
      stringArray2[3] = "org.dataene.SQL";
      stringArray2[4] = "updateu@flj\"`bc?]";
      stringArray2[5] = "create materialized view$.g6rmuna+dj/g(gjx";
      stringArray1[6] = null;
      SQLUtil.renderColumnNames(stringArray2);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("org.dataene.SQL");
      assertNull(boolean0);
      
      VersionNumber.valueOf("I$r)`xV}2R[*$D");
      SQLUtil.isQuery("updateu@flj\"`bc?]");
      SQLUtil.mutatesStructure("a[)z*@w>ipo");
      SQLUtil.join("updjmegShrt8", "(create materialized view$.g6rmuna+dj/g(gjx, org.dataene.SQL, org.dataene.SQL, org.dataene.SQL, updateu@flj\"`bc?], create materialized view$.g6rmuna+dj/g(gjx, , , )", stringArray2, "org.dataene.SQL", "BLOB", stringArray2);
      SQLUtil.mutatesStructure("qeRyZ");
      SQLUtil.isDML("Cannot instantiate connection class ");
      Boolean boolean1 = SQLUtil.mutatesStructure("LIST");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6816006127256955
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "':SvgD{b7";
      stringArray0[2] = "Object";
      SQLUtil.leftJoin("':SvgD{b7", stringArray0, (String) null, "inlined: ", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("Object");
      String string0 = "(";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("(", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("log recover", (DBTable) null, (-1929), "log recover");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.sum((-1929), (-1929));
      Integer integer1 = new Integer((-548804085));
      DBDataType dBDataType0 = DBDataType.getInstance((-1840700267), "");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, dBDataType0, (Integer) null, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("log recover", true, "drop materialized view", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("", "", stringArray0, "", (String) null, stringArray0);
      SQLUtil.join("w4ReGz6I(EE:n", " as null on ", stringArray0, "org.postgresql.jdbc2.AbstractJdbc2Clob", (String) null, stringArray0);
      String string0 = "execw{yjft*q";
      SQLUtil.isQuery("execw{yjft*q");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.214294028951937
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber.valueOf("L)");
      SQLUtil.isQuery("PRIMARY KEY ");
      SQLUtil.mutatesStructure("L)");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop tableupdateu@flj\"`bc?]";
      stringArray0[1] = "BLOB";
      SQLUtil.join("create materialized viewupdateu@flj\"`bc?]", "drop tableupdateu@flj\"`bc?]", stringArray0, " ADD ", "aG-.Tm FmA'T|b", stringArray0);
      SQLUtil.mutatesStructure("a[)z*@w>ipo");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized views[me");
      defaultDBTable0.getPrimaryKeyConstraint();
      int int0 = 1089;
      StringBuilder stringBuilder0 = new StringBuilder(1089);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$o`97?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Skipping HASH JOIN because there are no hash key columns", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      String string0 = "renamealter materialized view";
      TableContainer tableContainer0 = new TableContainer("renamealter materialized view");
      tableContainer0.getTable("Skipping HASH JOIN because there are no hash key columns");
      DBDataType dBDataType0 = DBDataType.getInstance((-1551), "Z");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", defaultDBTable0, (-2389), " NOT Z(3,0) NULL");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("]O\"Gf2qM>'j-#x(G6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ']O\"Gf2qM>'j-#x(G6' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w{YJfT*q", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT w{YJfT*q PRIMARY KEY ()", string0);
  }
}
