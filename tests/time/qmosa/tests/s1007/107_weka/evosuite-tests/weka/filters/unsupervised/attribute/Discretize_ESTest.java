/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:59:02 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.Sourcable;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("Logging started");
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.326719837562711
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "of";
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize2 = new Discretize();
      discretize2.setIgnoreClass(true);
      discretize2.getOptions();
      discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4133905704336045
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("'B2of2'");
      discretize0.attributeIndicesTipText();
      Discretize.main((String[]) null);
      discretize0.m_NumBins = (-720);
      discretize0.setMakeBinary(true);
      discretize0.setOutputFormat();
      discretize0.setMakeBinary(true);
      System.setCurrentTimeMillis((-798L));
      discretize0.getOptions();
      assertEquals((-720), discretize0.getBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(220L);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 220L;
      discretize0.setFindNumBins(true);
      discretize0.setBins((-2738));
      discretize0.setUseEqualFrequency(true);
      discretize0.getBins();
      Discretize discretize1 = new Discretize("first-last");
      try { 
        Filter.makeCopies(discretize1, (-2738));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q>K/+Bcll/");
      SystemInUtil.addInputLine("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      Discretize discretize0 = new Discretize("q>K/+Bcll/");
      discretize0.getBinRangesString((-227));
      System.setCurrentTimeMillis((-2113396603));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("// Timestamp: ", arrayList0, 10);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Attribute attribute0 = new Attribute("of", "", protectedProperties0);
      attribute0.value(3891);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 3);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("-");
      discretize0.makeBinaryTipText();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1.0);
      int int0 = 77;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5582463479552224
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      discretize0.m_FindNumBins = true;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "of";
      stringArray0[1] = "of";
      stringArray0[2] = "of";
      stringArray0[3] = "of";
      stringArray0[5] = "\"nn30;-L|5.;6)n";
      discretize0.getOptions();
      stringArray0[6] = "of";
      AllFilter allFilter0 = new AllFilter();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2160));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance(4.6, doubleArray0);
      AllFilter allFilter0 = new AllFilter();
      int int0 = 79;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(86);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      Filter.makeCopy(discretize0);
      discretize0.m_DefaultCols = "!";
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3342.0), (int[]) null, (-465));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SystemInUtil.addInputLine("-R <col1,col2-col4,...>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Revision: 8964 $");
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      String string1 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string1);
      
      discretize0.getCapabilities();
      String string2 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string2);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int[] intArray0 = new int[7];
      intArray0[0] = 710;
      intArray0[1] = (-312);
      intArray0[2] = 104;
      intArray0[3] = (-1952257859);
      intArray0[4] = 710;
      intArray0[5] = 104;
      intArray0[6] = 710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2574.180073), intArray0, 735);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("AUB_h", (String) null, protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("aOZNtkr$", arrayList0, 60);
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getInvertSelection();
      System.setCurrentTimeMillis(506L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3649222119756566
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = false;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "c!o[");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getBinRangesString(0);
      discretize0.m_DefaultCols = "BEJ2>'X;";
      discretize0.getRevision();
      discretize0.getCapabilities();
      discretize0.m_DesiredWeightOfInstancesPerInterval = Double.NaN;
      int int0 = 0;
      discretize0.getRevision();
      discretize0.setMakeBinary(false);
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      discretize0.m_NumBins = 0;
      discretize0.setInvertSelection(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/s[\"qve9u kuG";
      stringArray0[1] = "N$B0`_lggKL>Ji(j&c_";
      stringArray0[2] = "/s[\"qve9u kuG";
      stringArray0[3] = "-";
      stringArray0[4] = "";
      stringArray0[5] = "N$B0`_lggKL>Ji(j&c_";
      stringArray0[6] = "first-last";
      stringArray0[7] = "";
      discretize0.getUseEqualFrequency();
      stringArray0[8] = "hFn/HQ%>yY;k&kD0h";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("l3!$L<-:7R5?*4^");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      discretize0.setFindNumBins(false);
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 735;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 735);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 735;
      doubleArray0[1] = (double) 1037;
      doubleArray0[2] = (double) (-312);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1037;
      doubleArray0[5] = (double) (-1952257872);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1037, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = new int[4];
      intArray0[0] = (-930);
      intArray0[1] = (-1155);
      intArray0[2] = 0;
      intArray0[3] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("r!7n5CB'AkryF&:u");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      Range range0 = new Range();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1L);
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 89;
      Instances instances0 = new Instances("2rC)B'&L", arrayList0, 89);
      Filter.wekaStaticWrapper(allFilter0, "2rC)B'&L", instances0, instances0);
      discretize0.getBinRangesString((-2013265917));
      discretize0.getUseBinNumbers();
      double double0 = (-1614.6057995507);
      int[] intArray0 = new int[6];
      intArray0[0] = 89;
      intArray0[1] = (-2013265917);
      intArray0[2] = (-2013265917);
      intArray0[3] = 89;
      intArray0[4] = 89;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int[] intArray0 = new int[7];
      intArray0[0] = 710;
      intArray0[1] = (-312);
      intArray0[2] = 104;
      intArray0[3] = (-1952257872);
      intArray0[4] = 710;
      intArray0[5] = 104;
      intArray0[6] = 710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(104, intArray0, (-1952257872));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) (-312);
      doubleArray0[1] = (-2574.180073);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("8964", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0661111600950606
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|O.PV*\"F:";
      stringArray0[1] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[2] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[3] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[4] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[5] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[6] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[7] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      Discretize.main(stringArray0);
      discretize0.getBins();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-604.635953);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use bin numbers rather than ranges for discretized attributes.");
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1961762832549665
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = false;
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.setInvertSelection(true);
      discretize0.setOptions((String[]) null);
      int int0 = (-1431655763);
      int[] intArray0 = new int[8];
      intArray0[0] = 104;
      intArray0[1] = 710;
      intArray0[2] = 77;
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("Logging started");
      discretize0.getBins();
      discretize0.setBins((-1379));
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("Use bin numbers rather than ranges for discretized attributes.");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1262);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 638;
      intArray0[4] = 0;
      Discretize discretize0 = new Discretize("[Fc,CoD61iHf");
      discretize0.setMakeBinary(true);
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getBinRangesString(0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "of";
      stringArray0[1] = "of";
      stringArray0[2] = "of";
      stringArray0[3] = "of";
      stringArray0[4] = "of";
      stringArray0[5] = "\"nn30;-L|5.;6)n";
      stringArray0[6] = "of";
      stringArray0[7] = "of";
      stringArray0[8] = "of";
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "of";
      Discretize discretize0 = new Discretize("of");
      discretize0.setFindNumBins(true);
      discretize0.m_FindNumBins = true;
      String[] stringArray0 = new String[9];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("of");
      discretize0.getCutPoints(1412);
      DenseInstance denseInstance0 = new DenseInstance(2);
      Discretize discretize1 = new Discretize("of");
      denseInstance0.s_numericAfterDecimalPoint = 1037;
      // Undeclared exception!
      try { 
        discretize1.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.setAttributeIndices("Number of bins.");
      discretize0.getCutPoints(10);
      DenseInstance denseInstance0 = new DenseInstance(10);
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2028178998);
      intArray0[1] = 0;
      intArray0[2] = (-2028178998);
      intArray0[3] = 10;
      intArray0[4] = (-2028178998);
      intArray0[5] = 10;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 67;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(9.223372036854776E18, (double[]) null, intArray0, (-2028178998));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("weka.core.SparseInstance");
      discretize0.getAttributeIndices();
      int int0 = 95;
      discretize0.useBinNumbersTipText();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[1] = "weka.core.SparseInstance";
      stringArray0[2] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[4] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      try { 
        discretize1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      discretize0.getAttributeIndices();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 79);
      instances0.iterator();
      try { 
        Filter.wekaStaticWrapper((Sourcable) null, "", (Instances) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
