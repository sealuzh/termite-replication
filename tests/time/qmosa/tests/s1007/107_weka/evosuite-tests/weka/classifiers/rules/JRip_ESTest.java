/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:12:07 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getScript();
      locale1.getScript();
      locale1.getUnicodeLocaleAttributes();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nVgHD";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-N <num>", arrayList0, 2009);
      Attribute attribute0 = new Attribute("-N <num>", instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Attribute attribute1 = new Attribute("T6F;D]'Jf`", 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute2 = new Attribute("string", list0, protectedProperties1);
      attribute2.setWeight(300.0);
      arrayList0.add(attribute2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute3 = new Attribute("/q:Nc7LI0qKX$UbH.", instances0, protectedProperties0);
      arrayList0.add(attribute3);
      jRip_NumericAntd0.splitData(instances0, (-99.0), 4);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getScript();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[cnGn");
      locale1.getScript();
      locale1.getUnicodeLocaleAttributes();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("", "", 98);
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => =", string0);
      
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule1.hasAntds();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      String string1 = jRip_NumericAntd1.toString();
      assertEquals(" <= NaN", string1);
      
      double double0 = jRip_NumericAntd1.getAttrValue();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.ROOT;
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_RipperRule0.setConsequent(5);
      Instances instances0 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = 3392.31040529107;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 5;
      doubleArray0[5] = (double) 4;
      doubleArray0[7] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-99.0), doubleArray0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_RipperRule0.setConsequent((-528.88563925));
      Instances instances0 = null;
      double[] doubleArray0 = new double[0];
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", arrayList0, 6);
      arrayList0.add("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      arrayList0.add("-N <min. weights>");
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      assertFalse(arrayList0.contains(string0));
      
      arrayList0.add("JRIP: No model built yet.");
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getScript();
      locale1.getScript();
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 634);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, (-2.0), 2311.369281);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      Instances instances0 = bayesNet0.m_Instances;
      JRip jRip1 = new JRip();
      BayesNet bayesNet1 = new BayesNet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("4&q#,>f,", linkedList0, (-4724));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.198051792436285
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",v";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[1] = ",v";
      stringArray0[2] = ",v";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      jRip0.usePruningTipText();
      jRip0.getUsePruning();
      jRip0.optimizationsTipText();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(819.0201366032649, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"<!%-z6GSSkZb{vifH");
      Attribute attribute0 = new Attribute("", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Attribute attribute1 = new Attribute("*0,6UD%~kGg4{(El");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string0);
      
      double double0 = jRip_NumericAntd0.getAccu();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.ROOT;
      locale2.getScript();
      locale2.getScript();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      locale2.getUnicodeLocaleAttributes();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1472.0675708191488;
      doubleArray0[1] = 1472.0675708191488;
      doubleArray0[2] = 1472.0675708191488;
      doubleArray0[4] = 1472.0675708191488;
      doubleArray0[5] = 1472.0675708191488;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1472.0675708191488, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, (-45));
      attribute0.equalsMsg(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      Instances instances0 = bayesNet0.m_Instances;
      JRip jRip1 = new JRip();
      BayesNet bayesNet1 = new BayesNet();
      jRip0.listOptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-1.0), (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      jRip0.getUsePruning();
      jRip0.getTechnicalInformation();
      Attribute attribute0 = new Attribute("#c.&Kye(;kmQ", 711);
      attribute0.addStringValue("^#,Yo]hzy5g");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "@end";
      stringArray0[2] = "numeric";
      stringArray0[3] = "string";
      String string0 = "weka.classifiers.rules.JRip$RipperRule";
      stringArray0[4] = "weka.classifiers.rules.JRip$RipperRule";
      stringArray0[5] = "@attribute";
      stringArray0[6] = "~st_Ml{_[nlw\"Aj";
      stringArray0[7] = "#c.&Kye(;kmQ";
      Attribute.main(stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      jRip_NominalAntd0.copy();
      double double0 = 3858.089254;
      // Undeclared exception!
      try { 
        jRip0.getMeasure("weka.classifiers.rules.JRip$RipperRule");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka.classifiers.rules.JRip$RipperRule not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("V%;oEqRJ)rLTr}7Mf5", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      attribute0.toString();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      jRip0.globalInfo();
      jRip0.enumerateMeasures();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getCheckErrorRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3129.37820112504;
      doubleArray0[1] = (-626.9);
      doubleArray0[2] = (-626.9);
      doubleArray0[3] = (-1176.604103);
      doubleArray0[4] = (-626.9);
      DenseInstance denseInstance0 = new DenseInstance(3129.37820112504, doubleArray0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      int int0 = 79;
      jRip0.setOptimizations(79);
      jRip0.enumerateMeasures();
      jRip0.checkErrorRateTipText();
      jRip0.debugTipText();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Locale locale0 = Locale.CHINESE;
      locale0.getScript();
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 1472.0675708191488;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1472.0675708191488, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("certain", arrayList0, 1);
      ClassOrder classOrder0 = new ClassOrder();
      attribute0.equalsMsg(classOrder0);
      jRip1.minNoTipText();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      assertEquals(1472.0675708191488, sparseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "Can't install package ";
      DecisionTable decisionTable0 = new DecisionTable();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      decisionTable0.m_entries = hashtable0;
      IBk iBk0 = decisionTable0.m_ibk;
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip2.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Specify range of nominal values to act on. This is a comma separated list of attribute indices (numbered from 1), with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, (-4724));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA_FRENCH;
      Attribute attribute0 = new Attribute("", "");
      Attribute.typeToString(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      Attribute attribute1 = new Attribute("j-VJ|:ys8AR");
      Attribute attribute2 = new Attribute("real", "");
      attribute2.addStringValue("@O\"WGEVkA~");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute3 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute3);
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion. <= NaN", string1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.ROOT;
      locale2.getScript();
      locale2.getScript();
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1422);
      Attribute attribute0 = new Attribute("$Revision: 8118 $", instances0);
      JRip jRip0 = new JRip();
      locale2.getDisplayName();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4959144560641855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.ROOT;
      locale2.getScript();
      locale2.getScript();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      locale2.getUnicodeLocaleAttributes();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1472.0675708191488;
      doubleArray0[1] = 1472.0675708191488;
      doubleArray0[2] = 1472.0675708191488;
      doubleArray0[3] = 1472.0675708191488;
      doubleArray0[4] = 1472.0675708191488;
      doubleArray0[5] = 1472.0675708191488;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1472.0675708191488, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, (-45));
      jRip0.setFolds((-2474));
      arrayList0.add("@attribute");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("relational");
      jRip_NominalAntd0.covers(binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0, 1775.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", protectedProperties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9453839199650615
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[2];
      jRip0.enumerateMeasures();
      stringArray0[0] = "";
      stringArray0[1] = "#u3Xiw}Ce2amdt_u&{";
      jRip0.setOptions(stringArray0);
      jRip0.getOptimizations();
      jRip0.getOptimizations();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("vUCPV0q[%K)(", 2);
      jRip0.getCapabilities();
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip_NominalAntd0.getAccuRate();
      jRip0.getOptimizations();
      jRip0.setDebug(true);
      JRip.main(stringArray0);
      jRip_RipperRule0.setConsequent((-3790.974965));
      assertEquals((-3790.974965), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("4&q#,>f,", linkedList0, (-4724));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[1] = 68;
      intArray0[2] = 1626;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(168.5832670741384, intArray0, 0);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass(168.5832670741384, (Instances) null, 1626, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("lowercase", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("8}VxE@", list0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      int int0 = 0;
      Attribute attribute0 = new Attribute("", "", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      boolean boolean0 = jRip0.getDebug();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[3];
      intArray0[0] = 3564;
      intArray0[1] = 68;
      intArray0[2] = 1626;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(168.5832670741384, intArray0, 0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3616.076));
      jRip_RipperRule0.setConsequent(22.0);
      jRip_RipperRule0.getConsequent();
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = 1572.7460068089338;
      jRip_RipperRule0.getRevision();
      DenseInstance denseInstance0 = new DenseInstance(1572.7460068089338, doubleArray0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1929.424672189483);
      jRip_RipperRule0.copy();
      assertEquals(1929.424672189483, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Instances instances0 = null;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 227;
      intArray0[1] = 21;
      intArray0[2] = 255;
      intArray0[3] = 455;
      intArray0[4] = (-260);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-3397);
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[9];
      SparseInstance sparseInstance0 = new SparseInstance(21, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("@data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @data not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.133820697512222
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[1] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[2] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[3] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[4] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[5] = "Poster papers of the 9th European Conference on Machine Learning";
      stringArray0[6] = "Poster papers of the 9th European Conference on Machine Learning";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String[] stringArray1 = jRip0.getOptions();
      jRip0.setMinNo(55.13952);
      jRip0.setOptions(stringArray1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 55.13952;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 55.13952;
      doubleArray0[3] = 55.13952;
      doubleArray0[4] = 55.13952;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-604);
      intArray0[4] = 0;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(64.0, doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass((-1445.3822164), (Instances) null, 6, 55.13952);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("n*.4bXjn68JR;j+J%z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n*.4bXjn68JR;j+J%z not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.globalInfo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<String> arrayList0 = new ArrayList<String>(4240);
      double[] doubleArray0 = new double[9];
      System.setCurrentTimeMillis(656L);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int[] intArray0 = new int[2];
      intArray0[0] = (-337);
      intArray0[1] = 810;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1401.24645821819, intArray0, (-832));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(" => ", arrayList0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getScript();
      locale1.getScript();
      locale0.getScript();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertTrue(set0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "Can't install package ";
      DecisionTable decisionTable0 = new DecisionTable();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "as=5 ";
      jRip0.setOptions(stringArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(15.04, doubleArray0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(69.158, doubleArray0);
      jRip_RipperRule0.covers(denseInstance0);
      jRip_RipperRule0.hasAntds();
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance1 = new DenseInstance((-1575.1298941852178), doubleArray1);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance(denseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      intArray0[0] = 227;
      intArray0[1] = 21;
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      jRip0.setSeed(21);
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      int int0 = 2176;
      try { 
        coverTree0.kNearestNeighbours((Instance) null, 2176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8118";
      stringArray0[1] = "8118";
      stringArray0[2] = "8118";
      stringArray0[3] = "8118";
      stringArray0[4] = "8118";
      stringArray0[5] = "8118";
      JRip.main(stringArray0);
      String string1 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string1);
      
      String string2 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether pruning is performed.", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<String> arrayList0 = new ArrayList<String>(4223);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      jRip0.listOptions();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }
}
