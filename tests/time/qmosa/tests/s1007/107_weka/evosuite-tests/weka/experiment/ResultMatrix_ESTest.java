/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:35:52 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.219090085773794
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 1;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getColName(977);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.getVisibleRowCount();
      resultMatrixPlainText0.clearHeader();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.meanPrecTipText();
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
      
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(2637, 97, 5325);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.735989886765697
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.WIN_STRING = "set terminal x11\n";
      resultMatrixCSV0.getShowAverage();
      resultMatrixCSV0.WIN_STRING = "(";
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixCSV0.m_RowNames = stringArray0;
      int int0 = (-1054);
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((-1054), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.8252723317983457
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[10];
      intArray1[0] = (-2667);
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      resultMatrixPlainText0.setShowAverage(true);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.isAverage(2);
      resultMatrixHTML0.clearHeader();
      resultMatrixPlainText0.padString("v", 239, false);
      resultMatrixPlainText0.setCount(0, 1220.8163469346391);
      assertTrue(resultMatrixPlainText0.getShowAverage());
      
      resultMatrixPlainText0.setShowAverage(false);
      resultMatrixHTML0.toStringKey();
      resultMatrixPlainText0.getDefaultPrintColNames();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixPlainText0.getDefaultMeanWidth();
      assertTrue(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8130165423354447
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.m_EnumerateColNames = true;
      resultMatrixHTML0.addHeader("8034", "");
      resultMatrixHTML0.toString();
      resultMatrixHTML0.getShowStdDev();
      resultMatrixHTML0.padString("_{i`H[|R~J?Xz", 0);
      resultMatrixHTML0.getRowName(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[2] = 3081;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 2;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.setStdDevWidth(2);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.getMean(1149, 3);
      assertEquals(2, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevWidth());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9200163598054907
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 600.0;
      doubleArray0[3] = 1.0;
      resultMatrixLatex0.toStringSummary();
      resultMatrixCSV0.setRowName(1, "");
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setSignificanceWidth(516);
      resultMatrixGnuPlot0.setColNameWidth(0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(267, 26, 746);
      resultMatrixLatex0.getColHidden((-1746));
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9456637125165055
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 292;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 600.0;
      doubleArray0[3] = 1.0;
      resultMatrixLatex0.toStringSummary();
      resultMatrixCSV0.setRowName(1, "");
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColNameWidth(0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 0);
      resultMatrixLatex0.setShowStdDev(false);
      assertEquals(2, resultMatrixLatex0.getMeanWidth());
      
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8440494889956263
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.m_EnumerateColNames = true;
      resultMatrixHTML0.addHeader("8034", "");
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toString();
      resultMatrixHTML0.getShowStdDev();
      resultMatrixHTML0.padString("_{i`H[|R~J?Xz", 0);
      resultMatrixHTML0.getRowName(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      resultMatrixCSV0.setMeanPrec(4360);
      resultMatrixHTML0.toStringMatrix();
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getMean(0, 12);
      assertEquals(4360, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.754656980598247
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 95);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.m_CountWidth = 2;
      resultMatrixPlainText0.padString("#set ylabel \"Accuracy in %\"\n", 2);
      resultMatrixPlainText0.setShowAverage(false);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      resultMatrixHTML0.toStringRanking();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.clearSummary();
      resultMatrixHTML0.isAverage(512);
      resultMatrixHTML1.clearHeader();
      resultMatrixHTML0.m_StdDevPrec = 97;
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.padString("$oNJ", (-2667), true);
      resultMatrixPlainText1.setCount(512, 0.0);
      resultMatrixPlainText0.setShowAverage(false);
      resultMatrixHTML0.toStringKey();
      resultMatrixPlainText1.getDefaultPrintColNames();
      // Undeclared exception!
      try { 
        resultMatrixHTML1.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2888024150737896
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[8][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray2[2] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec(1);
      int int0 = (-2075);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSize((-887), (-3465));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.869069306665694
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 600.0;
      doubleArray0[3] = 1.0;
      resultMatrixLatex0.toStringSummary();
      resultMatrixCSV0.setRowName(278, " ");
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColNameWidth((-2852));
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(746, 2, 2780);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.0314492222692
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = (-1);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 97;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 0;
      intArray3[1] = (-1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.setShowAverage(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColOrder(intArray2);
      resultMatrixGnuPlot0.getAverage((-933));
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.toStringKey();
      resultMatrixPlainText1.getDefaultSignificanceWidth();
      resultMatrixPlainText1.globalInfo();
      resultMatrixPlainText0.removeFilterNameTipText();
      resultMatrixGnuPlot0.padString("[", (-1), false);
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixGnuPlot0.getMean(1, 0);
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9995912466089196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      int[] intArray0 = new int[2];
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.setColOrder(intArray0);
      resultMatrixGnuPlot0.getAverage(2);
      resultMatrixPlainText0.toStringKey();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText1.getDefaultSignificanceWidth();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText1.removeFilterNameTipText();
      resultMatrixGnuPlot0.padString("*", 4368, false);
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixGnuPlot0.getMean(2, 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Whether to remove the classname package prefixes from the filter names in datasets.";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4320796609059196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[8][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 2;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 1);
      resultMatrixCSV0.setMeanPrec((-1));
      String string0 = resultMatrixCSV0.getColName(1);
      assertNull(string0);
      
      resultMatrixCSV0.setRowOrder(intArray5);
      resultMatrixCSV0.getMean(79, 0);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8668901581304813
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.m_EnumerateColNames = true;
      resultMatrixHTML0.addHeader("8034", "");
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toString();
      resultMatrixHTML0.getShowStdDev();
      resultMatrixHTML0.padString("_{i`H[|R~J?Xz", 0);
      resultMatrixHTML0.getRowName(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 3081;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 2;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.setStdDevWidth(2);
      resultMatrixHTML0.toStringHeader();
      boolean boolean0 = resultMatrixCSV0.getDefaultRemoveFilterName();
      assertEquals(2, resultMatrixCSV0.getStdDevWidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4033703926473517
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevWidth = 5;
      resultMatrixCSV0.m_StdDevWidth = 1873;
      resultMatrixCSV0.setSignificance(0, 0, 0);
      resultMatrixCSV0.getColNameWidth();
      resultMatrixCSV0.rowNameWidthTipText();
      int int0 = resultMatrixCSV0.getDefaultStdDevPrec();
      assertEquals(2, int0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1873;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 5;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 1873;
      intArray3[1] = 5;
      intArray3[2] = 1873;
      intArray3[3] = 1;
      intArray3[4] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 1672;
      intArray4[4] = 1873;
      intArray4[5] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      intArray5[0] = 1873;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = 1;
      intArray6[3] = 1873;
      intArray6[4] = 1672;
      intArray6[5] = 1;
      intArray6[6] = 2;
      intArray6[7] = 1873;
      intArray6[8] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 1873;
      intArray7[1] = 1672;
      intArray7[2] = 835;
      intArray7[3] = 0;
      intArray7[4] = 5;
      intArray7[5] = 1672;
      intArray7[6] = 1;
      intArray7[7] = 5;
      intArray0[6] = intArray7;
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2852024312961516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[7];
      resultMatrixPlainText0.m_MeanWidth = 0;
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.setRowName((-723), (String) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.setColNameWidth(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(resultMatrixGnuPlot1);
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1253.537971281;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 2;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 2;
      doubleArray5[5] = (double) 0;
      doubleArray0[4] = doubleArray5;
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixGnuPlot2.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      
      resultMatrixGnuPlot0.setSignificance(0, 344, 1780);
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4456296962634063
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2866, 0);
      resultMatrixGnuPlot0.WIN_STRING = "Qm02(";
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.m_SignificanceWidth = 0;
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4188449779812977
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[8][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 2;
      intArray3[4] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setMeanPrec(0);
      resultMatrixCSV0.getColName(0);
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.m_RowNameWidth = 2;
      resultMatrixCSV0.setRowOrder(intArray3);
      resultMatrixCSV0.getMean((-1), 2);
      resultMatrixCSV0.rowNameWidthTipText();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2864104071942344
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 2;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 819;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = 2;
      intArray5[4] = 2;
      intArray5[5] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 0;
      intArray6[1] = 2;
      intArray6[2] = 2;
      intArray6[3] = 1;
      intArray6[4] = (-3978);
      intArray6[5] = (-1);
      intArray6[6] = 1149;
      intArray6[7] = 819;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = 819;
      intArray7[1] = (-3978);
      intArray7[2] = (-3978);
      intArray0[6] = intArray7;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.LEFT_PARENTHESES = "";
      resultMatrixGnuPlot0.listOptions();
      resultMatrixGnuPlot0.trimString("\"U?keEie])Hf", (-766));
      resultMatrixGnuPlot0.printRowNamesTipText();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-1252), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.281605848690576
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3, 3);
      resultMatrixHTML0.getDisplayName();
      String string0 = resultMatrixHTML0.padString("{iW&~^Z", 3, true);
      assertEquals("{iW", string0);
      
      boolean boolean0 = resultMatrixHTML0.getRemoveFilterName();
      assertFalse(boolean0);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(3, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(3, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1270250306320966
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3, 3);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixSignificance0.m_StdDevWidth = (-3713);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3713);
      doubleArray0[1] = (-1881.38);
      doubleArray0[2] = (-1095.629);
      doubleArray0[3] = 1434.23698467;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-3713);
      resultMatrixSignificance0.m_Counts = doubleArray0;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.setShowStdDev(false);
      resultMatrixLatex0.clear();
      resultMatrixSignificance0.setColHidden((-3713), true);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1904073435153335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDevWidth((-2012));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 45;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 2;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.globalInfo();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.getDefaultEnumerateRowNames();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.removeFilterName("Whether to show the row with averages.");
      assertEquals("Whether to show the row with averages.", string0);
      
      resultMatrixPlainText0.getDisplayName();
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5905490347205644
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2399, 0);
      resultMatrixLatex0.removeFilterName((String) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.setCountWidth(2406);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      resultMatrixGnuPlot0.m_ColNames = stringArray0;
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.setShowAverage(false);
      assertEquals(2406, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.473674032910633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = (-1);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 97;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 0;
      intArray3[1] = (-1);
      intArray3[2] = 1;
      intArray3[3] = 2;
      intArray3[4] = (-1);
      intArray3[5] = 2;
      intArray3[6] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 2;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 97;
      intArray4[6] = 1;
      intArray4[7] = (-1);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      resultMatrixCSV0.m_Significance = intArray0;
      int[] intArray6 = new int[9];
      intArray6[0] = 0;
      intArray6[1] = 2;
      resultMatrixCSV0.setMeanPrec((-1));
      intArray6[2] = (-397);
      intArray6[3] = 0;
      intArray6[4] = 2;
      String string0 = resultMatrixCSV0.getColName(0);
      assertEquals("[1]", string0);
      assertNotNull(string0);
      
      intArray6[5] = 0;
      intArray6[6] = 1;
      intArray6[7] = 1;
      resultMatrixCSV0.m_ColOrder = intArray6;
      intArray6[8] = 2;
      resultMatrixCSV0.setRowOrder(intArray6);
      resultMatrixCSV0.getMean(2, 2);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.869069306665694
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 26;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 600.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 292;
      doubleArray2[1] = 600.0;
      doubleArray2[2] = (double) 26;
      doubleArray2[3] = (double) 292;
      doubleArray2[4] = (double) 26;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 292;
      doubleArray2[7] = (double) 2;
      doubleArray0[1] = doubleArray2;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.setRowName(1, "(");
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[1];
      resultMatrixGnuPlot0.setColNameWidth(629);
      intArray0[0] = 746;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(1, (-1440), 2);
      resultMatrixGnuPlot0.globalInfo();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.208676515886898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 2;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 1;
      intArray4[1] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 2;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.002461704512725
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.m_EnumerateColNames = true;
      resultMatrixHTML0.addHeader("8034", "The maximum width for the row names (0 = optimal).");
      resultMatrixHTML0.toString();
      resultMatrixHTML0.getShowStdDev();
      resultMatrixHTML0.padString("_{i`H[|R~J?Xz", 0);
      resultMatrixHTML0.getRowName(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.isStdDev(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.doubleToString(0.0, 0);
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getDisplayRow(50);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "row0";
      stringArray0[4] = "v";
      stringArray0[5] = "_{i`H[|R~J?Xz";
      stringArray0[6] = "*";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2913789160859594
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = 45;
      resultMatrixHTML0.getRowName(45);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.trimString((String) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7366683045438
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 32);
      resultMatrixPlainText0.m_StdDevPrec = 0;
      resultMatrixPlainText0.setShowAverage(false);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.clearSummary();
      int int0 = 2929;
      resultMatrixHTML0.isAverage(2929);
      resultMatrixHTML0.clearHeader();
      resultMatrixPlainText0.padString("# contains the data for the plot\n", 26, true);
      resultMatrixPlainText0.setCount((-362), 0);
      resultMatrixPlainText0.setShowAverage(true);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(0, 2);
      resultMatrixHTML1.toStringKey();
      resultMatrixPlainText0.getDefaultPrintColNames();
      // Undeclared exception!
      try { 
        resultMatrixHTML1.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.861565959590908
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 26;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 600.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.setRowName(10, "");
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColNameWidth(10);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance((-2517), (-1304), 292);
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.777324789661271
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDevWidth((-4798));
      resultMatrixLatex0.toString();
      resultMatrixLatex0.setStdDevWidth(1682);
      String[][] stringArray0 = new String[1][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = " ";
      stringArray1[1] = "$\bullet$";
      stringArray1[2] = " ";
      stringArray1[3] = "(";
      stringArray1[4] = ")";
      stringArray1[5] = "\begin{table}[thb]\ncaption{label{labelname}Table Caption}\n\footnotesize\n{centering \begin{tabular}{lr}\n\\\nhline\nDataset & (1)\\\nhline\nrow0 &    \\\nhline\nmulticolumn{2}{c}{$circ$, $\bullet$ statistically significant improvement or degradation}\\\nend{tabular} \footnotesize par}\nend{table}\n";
      stringArray1[6] = "$\bullet$";
      stringArray1[7] = "$circ$";
      stringArray0[0] = stringArray1;
      resultMatrixLatex0.getColSize(stringArray0, (-4798), true, true);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8059199726522435
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string0);
      
      resultMatrixCSV0.setRowNameWidth(26);
      resultMatrixCSV0.enumerateRowNamesTipText();
      resultMatrixCSV0.getColOrder();
      int int0 = resultMatrixCSV0.getMeanWidth();
      assertEquals(0, int0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowOrder((int[]) null);
      resultMatrixLatex0.getDefaultColNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.setColNameWidth(0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(267, 2, 0);
      resultMatrixCSV0.getSignificanceWidth();
      resultMatrixGnuPlot0.setRowName((-1146), "ldjv~^KZ");
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.8378150337491275
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 32);
      int[] intArray0 = new int[1];
      resultMatrixPlainText0.m_StdDevPrec = 0;
      resultMatrixPlainText0.toStringKey();
      intArray0[0] = 0;
      resultMatrixPlainText0.m_ColNameWidth = 10;
      resultMatrixPlainText0.m_EnumerateColNames = false;
      resultMatrixPlainText0.m_PrintColNames = false;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.getShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_StdDevWidth = 32;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.getVisibleRowCount();
      resultMatrixPlainText0.clearHeader();
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.meanPrecTipText();
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setSignificance(0, 10, 0);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2377885523998797
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.stdDevWidthTipText();
      resultMatrixHTML0.listOptions();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3927699732496284
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = (-18);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 2;
      intArray0[8] = 0;
      resultMatrixSignificance0.m_RowOrder = intArray0;
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.setRowName((-1875), "");
      resultMatrixSignificance0.listOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2719, 2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.141583292590702
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.showAverageTipText();
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      intArray1[7] = 1;
      intArray1[8] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 2;
      intArray4[1] = 2;
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = 1;
      intArray4[5] = 2;
      intArray4[6] = 0;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 2;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 2;
      intArray6[3] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 0;
      intArray7[1] = 2;
      intArray7[2] = 0;
      intArray7[3] = 1;
      intArray7[4] = (-835);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 2;
      intArray8[1] = 50;
      intArray8[2] = 2;
      intArray8[3] = 0;
      intArray8[4] = 1;
      intArray8[5] = 1119;
      intArray0[7] = intArray8;
      resultMatrixHTML0.m_Wins = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      double double0 = resultMatrixHTML0.getMean(2, 3382);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.018998901134466
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 2);
      resultMatrixSignificance0.isStdDev(0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(17, 0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixSignificance1);
      resultMatrixCSV1.doubleToString(Double.NaN, 861);
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getDefaultShowAverage();
      resultMatrixCSV1.getDisplayRow(1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Na
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      ResultMatrixSignificance.main(stringArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.61813690244599
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setMeanWidth(0);
      resultMatrixSignificance0.setEnumerateColNames(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixSignificance0.doubleToString(0, 2);
      resultMatrixCSV0.clearSummary();
      resultMatrixCSV0.isAverage(1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "0.00";
      stringArray0[3] = "*";
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 501.886462;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-275.006);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 501.886462;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (-1230.248);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-275.006);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-1230.248);
      doubleArray3[3] = (-1230.248);
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 3481.03543671;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (-275.006);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (-275.006);
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = 612.2951458517414;
      doubleArray5[4] = (double) 2;
      doubleArray5[5] = 501.886462;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = 1655.984329756;
      doubleArray5[8] = 3481.03543671;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (-1.0);
      doubleArray0[5] = doubleArray6;
      resultMatrixCSV0.m_Mean = doubleArray0;
      stringArray0[4] = "0.00";
      resultMatrixCSV0.m_ColNames = stringArray0;
      resultMatrixSignificance0.setMeanPrec(902);
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.padString(" ", 1, false);
      resultMatrixCSV0.getRowOrder();
      resultMatrixSignificance0.toStringKey();
      resultMatrixCSV0.getPrintColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.921091812595558
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      resultMatrixLatex0.setMeanWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 1;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getColName(977);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 292);
      resultMatrixCSV1.setMeanPrec(2);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV2.getColName(2);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 122;
      intArray0[3] = 26;
      resultMatrixCSV1.setRowOrder(intArray0);
      double double0 = resultMatrixCSV0.getMean((-1146), 347);
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4004461730548674
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = (-1841);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 97;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[20];
      intArray3[0] = 0;
      intArray3[1] = (-1841);
      intArray3[2] = 1;
      intArray3[3] = 2;
      intArray3[4] = (-1841);
      intArray3[5] = 2;
      intArray3[6] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 2;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 97;
      intArray4[6] = 1;
      intArray4[7] = (-1841);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      resultMatrixCSV0.m_Significance = intArray0;
      int[] intArray6 = new int[9];
      intArray6[0] = 0;
      intArray6[1] = 2;
      resultMatrixCSV0.setMeanPrec(1);
      intArray6[2] = (-397);
      intArray6[3] = 0;
      intArray6[4] = 2;
      resultMatrixCSV0.getColName((-23));
      intArray6[5] = 0;
      intArray6[6] = 1;
      intArray6[7] = 1;
      resultMatrixCSV0.m_ColOrder = intArray6;
      intArray6[8] = 2;
      resultMatrixCSV0.setRowOrder(intArray6);
      resultMatrixCSV0.getMean(2, 2);
      assertEquals(1, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.382909071329
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = (-1);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 97;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 0;
      intArray3[1] = (-1);
      intArray3[2] = 1;
      intArray3[3] = 2;
      intArray3[4] = (-1);
      intArray3[5] = 2;
      intArray3[6] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 2;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 97;
      intArray4[6] = 1;
      intArray4[7] = (-1);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      resultMatrixCSV0.m_Significance = intArray0;
      int[] intArray6 = new int[9];
      intArray6[0] = 0;
      intArray3[5] = 2;
      resultMatrixCSV0.setMeanPrec((-1));
      intArray6[2] = (-397);
      intArray6[3] = 0;
      intArray6[4] = 2;
      String string0 = resultMatrixCSV0.getColName(29);
      assertNull(string0);
      
      intArray6[5] = 0;
      intArray6[6] = 1;
      intArray6[7] = 1;
      resultMatrixCSV0.m_ColOrder = intArray6;
      intArray6[8] = 2;
      resultMatrixCSV0.setRowOrder(intArray6);
      double double0 = resultMatrixCSV0.getMean(0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.191524505922819
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      resultMatrixPlainText0.getColName(968);
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      resultMatrixPlainText0.m_RowHidden = booleanArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.setCountWidth((-2320));
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(1, (-2320));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3165004284655124
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[2];
      intArray1[0] = (-2667);
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      resultMatrixPlainText0.setShowAverage(true);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.clearSummary();
      resultMatrixPlainText0.getColName((-237));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setCountWidth(6);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 1);
      Vector<Object> vector0 = new Vector<Object>();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.toStringSummary();
      resultMatrixPlainText0.showStdDevTipText();
      assertTrue(resultMatrixPlainText0.getShowAverage());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.271485077337738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 32);
      int[] intArray0 = new int[1];
      resultMatrixPlainText0.m_StdDevPrec = 0;
      resultMatrixPlainText0.toStringKey();
      intArray0[0] = 0;
      resultMatrixPlainText0.m_ColNameWidth = 10;
      resultMatrixPlainText0.m_EnumerateColNames = false;
      resultMatrixPlainText0.m_PrintColNames = false;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.getShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_StdDevWidth = 32;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      resultMatrixLatex0.setCountWidth(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 224);
      Vector<Object> vector0 = new Vector<Object>();
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV((-2984), 224);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.098841236795937
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      resultMatrixSignificance0.setSignificance((-918), 37, (-918));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.clearSummary();
      resultMatrixCSV0.setSignificance(37, 2, 79);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.assign(resultMatrixCSV0);
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-918), 40);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.624392334164226
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(25, 25);
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[1];
      intArray1[0] = 25;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 25;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = 2;
      intArray4[2] = 1;
      intArray0[3] = intArray4;
      resultMatrixPlainText0.m_Wins = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toArray();
      resultMatrixGnuPlot0.clear();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8494356606163773
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      resultMatrixCSV0.m_RankingLosses = intArray0;
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.getOptions();
      int int0 = 26;
      resultMatrixCSV0.setRowNameWidth(26);
      resultMatrixCSV0.enumerateRowNamesTipText();
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.getMeanWidth();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.getStdDevPrec();
      resultMatrixCSV0.enumerateColNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      resultMatrixCSV0.clearSummary();
      resultMatrixSignificance0.m_RowOrder = null;
      resultMatrixSignificance0.getSummaryTitle(2592);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 1888);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.8829439673197355
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.padString("", 292, true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.setMeanPrec(1);
      resultMatrixLatex0.m_SignificanceWidth = (-397);
      resultMatrixCSV0.getColName(1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-397);
      intArray0[2] = (-1);
      intArray0[3] = (-3149);
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getMean(289, 1);
      resultMatrixCSV0.getRowName(1);
      assertEquals((-397), resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9185803852177035
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowNameWidth(26);
      resultMatrixCSV0.enumerateRowNamesTipText();
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.getMeanWidth();
      assertEquals(26, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowOrder((int[]) null);
      resultMatrixLatex0.getDefaultColNameWidth();
      resultMatrixLatex0.enumerateRowNamesTipText();
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.556285853412856
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 32);
      int[] intArray0 = new int[1];
      resultMatrixPlainText0.m_StdDevPrec = 0;
      resultMatrixPlainText0.toStringKey();
      intArray0[0] = 0;
      resultMatrixPlainText0.m_ColNameWidth = 10;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 32);
      resultMatrixHTML0.getRowName(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.getCount(1);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setSize(10, 40);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixCSV0.getColName(841);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9989413717786624
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 95);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixPlainText0.padString("#set ylabel \"Accuracy in %\"\n", 2);
      resultMatrixPlainText0.setShowAverage(false);
      resultMatrixGnuPlot0.setColOrder((int[]) null);
      resultMatrixGnuPlot0.getAverage((-1));
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.removeFilterNameTipText();
      resultMatrixGnuPlot0.padString("Whether to remove the classname package prefixes from the filter names in datasets.", (-1332), false);
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixGnuPlot0.getMean(0, 2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      stringArray0[1] = "Whether to remove the classname package prefixes from the filter names in datasets.";
      stringArray0[2] = ")";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.93529228962603
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[7];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 2;
      resultMatrixGnuPlot0.m_StdDevPrec = 0;
      intArray0[2] = 2;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      stringArray0[0] = "p5iuY;Sr6";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      resultMatrixGnuPlot0.setRowNameWidth(2177);
      resultMatrixGnuPlot0.toArray();
      stringArray0[5] = "v";
      stringArray0[6] = "";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.setRowNameWidth(839);
      resultMatrixGnuPlot0.getCountWidth();
      resultMatrixGnuPlot0.getDisplayCol(0);
      resultMatrixGnuPlot0.getColName(0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.getColOrder();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
  }
}
