/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:57:45 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.837517843350227
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement((-3160));
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization optimization1 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = optimization1.new DynamicIntArray(0);
      optimization_DynamicIntArray1.getRevision();
      optimization_DynamicIntArray1.addElement((-3160));
      optimization_DynamicIntArray1.getRevision();
      Optimization optimization2 = mock(Optimization.class, CALLS_REAL_METHODS);
      optimization_DynamicIntArray0.addElement((-4480));
      Optimization.DynamicIntArray optimization_DynamicIntArray2 = optimization2.new DynamicIntArray(2);
      optimization_DynamicIntArray2.size();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(614, 14, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 12;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      optimization_DynamicIntArray2.removeAllElements();
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(3, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5288126818826366
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement((-3160));
      assertEquals(1, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.size();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(518, 12, (-3160));
      double[] doubleArray0 = new double[3];
      weka.core.matrix.Matrix matrix1 = matrix0.sqrt();
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      Optimization optimization1 = mock(Optimization.class, CALLS_REAL_METHODS);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Optimization.solveTriangle(matrix1, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement((-2741));
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization optimization1 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = optimization1.new DynamicIntArray(2);
      optimization_DynamicIntArray1.size();
      int int0 = 12;
      int int1 = 614;
      int int2 = 14;
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray1.removeElementAt(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(2279, 0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2279;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-722);
      doubleArray0[3] = (double) 2279;
      doubleArray0[4] = (-460.9905559493282);
      doubleArray0[5] = (double) 0;
      double[][] doubleArray1 = new double[8][9];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-52.0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 0, 0);
      int[] intArray0 = new int[4];
      weka.core.matrix.Matrix matrix1 = matrix0.getMatrix(intArray0, intArray0);
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      matrix0.transpose();
      matrix0.toString();
      weka.core.matrix.Matrix matrix2 = matrix0.getMatrix(intArray0, intArray0);
      weka.core.matrix.Matrix matrix3 = new weka.core.matrix.Matrix(0, 0);
      matrix0.transpose();
      matrix0.setMatrix(0, 0, 0, 0, matrix1);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Optimization.solveTriangle(matrix2, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {(-52.0)}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-52.0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 0, 0);
      int[] intArray0 = new int[4];
      weka.core.matrix.Matrix matrix1 = matrix0.getMatrix(intArray0, intArray0);
      matrix1.toString();
      weka.core.matrix.Matrix matrix2 = new weka.core.matrix.Matrix(doubleArray1, 0, 0);
      matrix2.getMatrix(intArray0, intArray0);
      weka.core.matrix.Matrix matrix3 = new weka.core.matrix.Matrix(64, 0);
      weka.core.matrix.Matrix matrix4 = matrix1.transpose();
      Optimization.solveTriangle(matrix4, doubleArray0, false, (boolean[]) null);
      Random.setNextRandom(7);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      assertEquals(0, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(39);
      optimization_DynamicIntArray0.elementAt(0);
      int int0 = optimization_DynamicIntArray0.elementAt(0);
      assertEquals(1, optimization_DynamicIntArray0.size());
      assertEquals(39, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1185.5843);
      doubleArray0[1] = (-2030.4);
      doubleArray0[2] = 1.0000000001164153;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 5589.0;
      doubleArray0[6] = (-786.0);
      doubleArray0[7] = (-4118.27);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-52.0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 0, 0);
      int[] intArray0 = new int[4];
      weka.core.matrix.Matrix matrix1 = matrix0.getMatrix(intArray0, intArray0);
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      matrix0.clone();
      matrix0.transpose();
      matrix0.toString();
      matrix0.getMatrix(intArray0, intArray0);
      weka.core.matrix.Matrix matrix2 = new weka.core.matrix.Matrix(0, 0);
      weka.core.matrix.Matrix matrix3 = matrix0.transpose();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      matrix0.setMatrix(0, 0, 0, 0, matrix1);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      Random.setNextRandom(200);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix3, doubleArray2, false, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, (boolean[]) null);
      int int0 = 3320;
      StringWriter stringWriter0 = new StringWriter(3320);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char char0 = 'r';
      StringBuffer stringBuffer1 = stringBuffer0.append('r');
      stringWriter0.append((CharSequence) stringBuffer1);
      int int1 = 8;
      int int2 = 527;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer1, 527, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, (boolean[]) null);
      int int0 = 3320;
      StringWriter stringWriter0 = new StringWriter(3320);
      stringWriter0.close();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char char0 = 'r';
      StringBuffer stringBuffer1 = stringBuffer0.append('r');
      stringWriter0.append((CharSequence) stringBuffer1);
      stringWriter0.flush();
      int int1 = 8;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer1, 527, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, (boolean[]) null);
      int int0 = 3320;
      StringWriter stringWriter0 = new StringWriter(3320);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char char0 = 'r';
      StringBuffer stringBuffer1 = stringBuffer0.append('r');
      stringWriter0.append((CharSequence) stringBuffer1);
      int int1 = 8;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer1, 7, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
