/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:03:21 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.593467574097195
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1842177144);
      intArray0[3] = (-1842177144);
      intArray0[4] = (-1842177144);
      intArray0[5] = (-1114383320);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 14);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      evaluation0.falseNegativeRate((-1098));
      evaluation0.useNoPriors();
      XML xML0 = new XML();
      evaluation0.weightedAreaUnderROC();
      evaluation0.toSummaryString(true);
      String string0 = evaluation0.toMatrixString((String) null);
      assertEquals("null\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7236185137418776
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0);
      evaluation0.toSummaryString(".arff", false);
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.priorEntropy();
      evaluation0.getHeader();
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation0.areaUnderPRC(0);
      evaluation0.getRevision();
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 99.0;
      doubleArray0[2] = (-619.2094168);
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = (-1219.3);
      doubleArray0[6] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 0, 801.3199);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.081832189904483
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0);
      evaluation0.toSummaryString(".arff", false);
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.priorEntropy();
      evaluation0.getHeader();
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation0.areaUnderPRC(0);
      evaluation0.getRevision();
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.m_Incorrect;
      double double3 = evaluation0.SFMeanEntropyGain();
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.totalCost();
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.numFalseNegatives(32);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1842177144);
      intArray0[3] = (-1842177144);
      intArray0[4] = (-1842177144);
      intArray0[5] = (-1114383320);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 14);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.numFalsePositives(108);
      evaluation0.getHeader();
      try { 
        evaluation0.evaluateModelOnce(2176.94, (Instance) sparseInstance2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2176
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3380022668565514
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-686L));
      MockRandom mockRandom1 = new MockRandom();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      IBk.main(stringArray0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostMatrix.parseMatlab("W^#,Yo]h");
      SparseInstance sparseInstance0 = new SparseInstance(2056);
      evaluation0.matthewsCorrelationCoefficient(2056);
      try { 
        evaluation0.updateStatsForPredictor(0.0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.683415970764676
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      double double1 = evaluation0.priorEntropy();
      evaluation0.getHeader();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertNotEquals(double2, double1, 0.01);
      
      evaluation0.areaUnderPRC(18);
      evaluation0.setPriors(instances0);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5775311676724026
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-694L));
      MockRandom mockRandom1 = new MockRandom();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kmd,zi;4";
      IBk.main(stringArray0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      AbstractClassifier.makeCopies(multiClassClassifier0, 3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      Instances instances0 = testInstances0.generate("kmd,zi;4");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(2418);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = 'v';
      charArray0[2] = '/';
      charArray0[3] = '%';
      charArray0[4] = 'D';
      charArray0[5] = 'E';
      charArray0[6] = 'v';
      charArray0[7] = '%';
      charArray0[8] = 'v';
      evaluation1.num2ShortID(1442, charArray0, 3);
      textDirectoryLoader1.listOptions();
      System.setCurrentTimeMillis(289L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.559956513676124
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      XML xML0 = new XML();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      evaluation0.falseNegativeRate((-1137));
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.useNoPriors();
      XML xML1 = new XML();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(2418);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1494), charArray0, 18);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1842177144);
      intArray0[3] = (-1842177144);
      intArray0[4] = (-1842177144);
      intArray0[5] = (-1114383320);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 14);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.useNoPriors();
      XML xML0 = new XML();
      evaluation0.areaUnderROC(1372);
      double double0 = evaluation0.numTruePositives(3525);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7683794877382015
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 0;
      Evaluation.handleCostOption("", 0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = 1019;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IBk iBk0 = new IBk(0);
      iBk0.pruneToK(instances0, doubleArray0, 1019);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringNoWeight();
      evaluation0.correct();
      try { 
        Evaluation.handleCostOption("globalInfo", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTruePositives(2418);
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(1675, charArray0, (-2767));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6772330114786933
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("+g", 0);
      instances0.sort(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[1] = "real";
      stringArray0[2] = "relational";
      stringArray0[3] = "@end";
      stringArray0[4] = "numeric";
      stringArray0[5] = "string";
      stringArray0[6] = "date";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "KNNTipText");
      Evaluation.main(stringArray0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3163250291918374
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom((-686L));
      evaluation0.weightedAreaUnderROC();
      evaluation0.useNoPriors();
      MockRandom mockRandom1 = new MockRandom(3318L);
      instances0.getRevision();
      evaluation0.priorEntropy();
      Instances instances2 = evaluation0.getHeader();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.areaUnderPRC(108);
      evaluation1.toClassDetailsString();
      evaluation0.setPriors(instances0);
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9855083852774116
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      Evaluation.main(stringArray0);
      evaluation0.toSummaryString(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation1.matthewsCorrelationCoefficient(2);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.477543127504883
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      double double0 = (-1219.3);
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.priorEntropy();
      evaluation0.m_MissingClass = Double.NaN;
      evaluation0.getHeader();
      evaluation0.KBMeanInformation();
      evaluation0.weightedMatthewsCorrelation();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8285881292940838
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      double double0 = (-1219.3);
      evaluation0.m_MissingClass = Double.NaN;
      evaluation0.getHeader();
      evaluation0.KBMeanInformation();
      evaluation0.weightedMatthewsCorrelation();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.weightedFMeasure();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-3100.4077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1494), (char[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.253686332051354
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0L);
      instances0.getRevision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, intArray0, (-710));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(80);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9186";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "";
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      stringArray0[4] = ".cost";
      Evaluation.main(stringArray0);
      String string1 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string1);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.unweightedMicroFmeasure();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1360414599491286
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      evaluation0.toClassDetailsString();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      int[] intArray0 = new int[8];
      intArray0[0] = (-3150);
      intArray0[1] = 6;
      intArray0[2] = (-3150);
      intArray0[3] = (-3150);
      intArray0[4] = 6;
      intArray0[5] = (-3150);
      intArray0[6] = 6;
      intArray0[7] = (-3966);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 115);
      SGD sGD0 = new SGD();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.equals((Object) null);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) bayesNet0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.18764948447737
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(1580);
      assertEquals(0.0, double0, 0.01);
      
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.kappa();
      textDirectoryLoader0.listOptions();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3150);
      intArray0[1] = 16;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 1580;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, intArray0, 6);
      SGD sGD0 = new SGD();
      double double1 = evaluation0.m_SumSqrPredicted;
      evaluation0.equals((Object) null);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1842177144);
      intArray0[1] = 14;
      intArray0[2] = 14;
      SparseInstance sparseInstance0 = new SparseInstance(14, doubleArray0, intArray0, 5);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance2);
      evaluation0.numFalsePositives(107);
      evaluation0.getHeader();
      evaluation0.matthewsCorrelationCoefficient(14);
      boolean boolean0 = evaluation0.equals(sparseInstance1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1060076826024265
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Bagging bagging0 = new Bagging();
      String[] stringArray0 = new String[0];
      bagging0.enumerateMeasures();
      AbstractClassifier.runClassifier(bagging0, stringArray0);
      String[] stringArray1 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) bagging0, stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.Bagging:
         // 
         // -P
         // \tSize of each bag, as a percentage of the
         // \ttraining set size. (default 100)
         // -O
         // \tCalculate the out of bag error.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.REPTree)
         // 
         // Options specific to classifier weka.classifiers.trees.REPTree:
         // 
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf (default 2).
         // -V <minimum variance for split>
         // \tSet minimum numeric class variance proportion
         // \tof train variance for split (default 1e-3).
         // -N <number of folds>
         // \tNumber of folds for reduced error pruning (default 3).
         // -S <seed>
         // \tSeed for random data shuffling (default 1).
         // -P
         // \tNo pruning.
         // -L
         // \tMaximum tree depth (default -1, no maximum)
         // -I
         // \tInitial class value count (default 0)
         // -R
         // \tSpread initial count over all class values (i.e. don't use 1 per value)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.126661202793882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.numInstances();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7810405096736122
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      costMatrix0.toString();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      
      evaluation1.useNoPriors();
      assertEquals(Double.NaN, evaluation1.SFEntropyGain(), 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.060090903840557
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives((-23));
      assertEquals(0.0, double0, 0.01);
      
      textDirectoryLoader0.listOptions();
      evaluation0.toMatrixString(".bsi");
      evaluation0.setDiscardPredictions(false);
      evaluation0.setPriors(instances0);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(82);
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = 'o';
      charArray0[3] = 'E';
      charArray0[4] = '<';
      charArray0[5] = '>';
      charArray0[6] = '%';
      charArray0[7] = 'p';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1130713547), charArray0, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("+g", 0);
      instances0.sort(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[2] = "relational";
      stringArray0[3] = "@end";
      stringArray0[4] = "numeric";
      stringArray0[5] = "string";
      stringArray0[6] = "date";
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      evaluation0.num2ShortID(3, charArray0, 34);
      evaluation0.useNoPriors();
      XML xML0 = new XML();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.258919948925899
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Incorrect Multi-Instance format, must be 'NOMINAL att, RELATIONAL att, CLASS att'!");
      instances0.iterator();
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.areaUnderPRC((-1));
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.setPriors(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedRecall();
      evaluation0.weightedRecall();
      evaluation0.makeDistribution(Double.NaN);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.091934165660664
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-686L));
      MockRandom mockRandom1 = new MockRandom();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      IBk.main(stringArray0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostMatrix.parseMatlab("W^#,Yo]h");
      SparseInstance sparseInstance0 = new SparseInstance(2056);
      try { 
        evaluation0.evaluateModelOnce((double) 2056, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2056
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4104464784046917
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FOC";
      stringArray0[1] = "wp]/8'36r";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = "9186";
      stringArray0[5] = "9186";
      IBk.main(stringArray0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostMatrix.parseMatlab("wp]/8'36r");
      SparseInstance sparseInstance0 = new SparseInstance(1354);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.245653959218979
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      evaluation0.priorEntropy();
      Instances instances1 = evaluation0.getHeader();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("globalInfo", linkedList0, (-1461032992));
      instances1.setClass(attribute0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC(0);
      evaluation0.toClassDetailsString();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3498.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-206797271);
      intArray0[1] = 450;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1842177144);
      SparseInstance sparseInstance0 = new SparseInstance(3911.440966, doubleArray0, intArray0, 0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.18788297517727
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(15);
      textDirectoryLoader0.listOptions();
      Attribute attribute0 = new Attribute("K&B Information Score              ", (-2045));
      instances0.sort(attribute0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC(463);
      evaluation0.toClassDetailsString();
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.245653959218979
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      evaluation0.setDiscardPredictions(true);
      instances1.getRevision();
      evaluation0.priorEntropy();
      Instances instances2 = evaluation0.getHeader();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC((-1432));
      evaluation0.toClassDetailsString();
      evaluation0.setPriors(instances2);
      double double0 = evaluation0.m_Incorrect;
      try { 
        CostMatrix.parseMatlab("9Pt>xdb:\"c5+F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.255744796435741
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.priorEntropy();
      evaluation0.getHeader();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC(0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0274277432994814
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("+g", 0);
      instances0.sort(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[2] = "relational";
      stringArray0[3] = "@end";
      stringArray0[4] = "numeric";
      stringArray0[5] = "string";
      stringArray0[6] = "date";
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      String string0 = evaluation0.num2ShortID(3, charArray0, 34);
      assertEquals("                              ssss", string0);
      
      textDirectoryLoader0.listOptions();
      String string1 = evaluation0.toClassDetailsString("nfr\"iGj%E5!T!rz2o");
      assertEquals("nfr\"iGj%E5!T!rz2o\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.16832182666851
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.handleCostOption("", 0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1842177144);
      SparseInstance sparseInstance0 = new SparseInstance((-1842177144), doubleArray0, intArray0, (-1842177144));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.245653959218979
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.getRevision();
      evaluation0.m_SumKBInfo = (-1219.3);
      evaluation0.priorEntropy();
      evaluation0.getHeader();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC(18);
      String string0 = evaluation0.toClassDetailsString();
      evaluation0.setPriors(instances0);
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3678.1);
      doubleArray0[1] = (-3678.1);
      doubleArray0[2] = (-3678.1);
      doubleArray0[3] = (-3678.1);
      doubleArray0[4] = (-3678.1);
      SparseInstance sparseInstance0 = new SparseInstance((-3678.1), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LT:'}[";
      stringArray0[1] = "Base classifier should be OptionHandler.";
      textDirectoryLoader0.setOptions(stringArray0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      XML xML0 = new XML();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3678
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.769238734794076
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-694L));
      MockRandom mockRandom1 = new MockRandom();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kmd,zi;4";
      IBk.main(stringArray0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      AbstractClassifier.makeCopies(multiClassClassifier0, 3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      Instances instances0 = testInstances0.generate("kmd,zi;4");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(189.35887459118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 189
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom3 = new MockRandom((-2123L));
      MockRandom mockRandom4 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8L;
      doubleArray0[1] = (double) (-2123L);
      doubleArray0[2] = (double) (-1842177144);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1842177144);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, (-57), 99.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -57
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5667624889006824
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(15);
      textDirectoryLoader0.listOptions();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.priorEntropy();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      double double4 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.trueNegativeRate(15);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      evaluation0.setPriors(instances0);
      double double6 = evaluation0.numFalsePositives((-3160));
      assertEquals(double6, double3, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.189114685942572
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      bayesNetArray0[2] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[3] = bayesNet2;
      BayesNet bayesNet3 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.priorEntropy();
      evaluation0.getHeader();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.areaUnderPRC(46);
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2160.0), doubleArray0, intArray0, 1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      evaluation0.priorEntropy();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7530498316978935
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom(0L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      evaluation0.KBInformation();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, intArray0, (-710));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(80);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-413.743626896), (double[]) null, intArray0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[2] = bayesNet2;
      BayesNet bayesNet3 = new BayesNet();
      bayesNetArray0[3] = bayesNet3;
      BayesNet bayesNet4 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "";
      stringArray0[3] = "getTechnicalInformation";
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      intArray0[1] = 18;
      intArray0[2] = 6;
      intArray0[3] = (-297);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3498.0), intArray0, 108);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) bayesNet2, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0651980013175937
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      bayesNetArray0[2] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[3] = bayesNet2;
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.weightedFMeasure();
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = null;
      AbstractClassifier.runClassifier((Classifier) null, (String[]) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      instances0.stream();
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2176.94;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1846193343);
      intArray0[6] = 0;
      intArray0[7] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1842177144);
      intArray0[3] = (-1842177144);
      intArray0[4] = (-1842177144);
      intArray0[5] = (-1114383320);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 14);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(28);
      costMatrix0.toString();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      textDirectoryLoader0.setOptions((String[]) null);
      textDirectoryLoader0.getDataSet();
      XML xML0 = new XML();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-941.97500350897);
      doubleArray0[1] = (double) 2;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~e<Sqy#Up*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "if (((String) i[");
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      iBk0.pruneToK((Instances) null, doubleArray0, 1019);
      SparseInstance sparseInstance0 = new SparseInstance(28);
      sparseInstance0.toStringNoWeight();
      try { 
        Evaluation.handleCostOption("~e<Sqy#Up*", 3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"if\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5595681168349125
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[2] = bayesNet2;
      BayesNet bayesNet3 = new BayesNet();
      bayesNetArray0[3] = bayesNet3;
      BayesNet bayesNet4 = new BayesNet();
      bayesNetArray0[4] = bayesNet4;
      BayesNet bayesNet5 = new BayesNet();
      bayesNetArray0[5] = bayesNet5;
      BayesNet bayesNet6 = new BayesNet();
      bayesNetArray0[6] = bayesNet6;
      BayesNet bayesNet7 = new BayesNet();
      bayesNetArray0[7] = bayesNet7;
      BayesNet bayesNet8 = new BayesNet();
      bayesNetArray0[8] = bayesNet8;
      instances0.toArray(bayesNetArray0);
      double double0 = evaluation0.numTruePositives((-23));
      assertEquals(0.0, double0, 0.01);
      
      textDirectoryLoader0.listOptions();
      evaluation0.toMatrixString(".bsi");
      evaluation0.errorRate();
      double double1 = evaluation0.falsePositiveRate((-181));
      double double2 = evaluation0.weightedMatthewsCorrelation();
      double double3 = evaluation0.truePositiveRate(3536);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double[] doubleArray0 = new double[0];
      evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.452103738516266
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSqrErr = (-1590.6467173129795);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Attribute attribute0 = new Attribute(".arff", 118);
      instances0.sort(attribute0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "integer";
      Evaluation.main(stringArray0);
      String string0 = evaluation1.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[2] = bayesNet2;
      BayesNet bayesNet3 = new BayesNet();
      bayesNetArray0[3] = bayesNet3;
      BayesNet bayesNet4 = new BayesNet();
      bayesNetArray0[4] = bayesNet4;
      BayesNet bayesNet5 = new BayesNet();
      bayesNetArray0[5] = bayesNet5;
      BayesNet bayesNet6 = new BayesNet();
      bayesNetArray0[6] = bayesNet6;
      BayesNet bayesNet7 = new BayesNet();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = ".arff";
      stringArray0[4] = "";
      MockRandom mockRandom0 = new MockRandom(18);
      try { 
        evaluation0.crossValidateModel(".bsi", (Instances) null, 16, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet[] bayesNetArray0 = new BayesNet[9];
      BayesNet bayesNet0 = new BayesNet();
      bayesNetArray0[0] = bayesNet0;
      BayesNet bayesNet1 = new BayesNet();
      bayesNetArray0[1] = bayesNet1;
      BayesNet bayesNet2 = new BayesNet();
      bayesNetArray0[2] = bayesNet2;
      BayesNet bayesNet3 = new BayesNet();
      bayesNetArray0[3] = bayesNet3;
      BayesNet bayesNet4 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      iBk0.pruneToK((Instances) null, doubleArray0, (-3304));
      SparseInstance sparseInstance0 = new SparseInstance(4);
      sparseInstance0.toStringNoWeight();
      try { 
        Evaluation.handleCostOption("getClass", (-3304));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      IBk iBk0 = new IBk();
      // Undeclared exception!
      try { 
        iBk0.getMeasure("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         // Synopsis for weka.classifiers.bayes.NaiveBayesMultinomial:
         // 
         // Class for building and using a multinomial Naive Bayes classifier. For more information see,
         // 
         // Andrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.
         // 
         // The core equation for this classifier:
         // 
         // P[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)
         // 
         // where Ci is class i and D is a document. not supported (NearestNeighbourSearch)
         //
         verifyException("weka.core.neighboursearch.NearestNeighbourSearch", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "fy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
