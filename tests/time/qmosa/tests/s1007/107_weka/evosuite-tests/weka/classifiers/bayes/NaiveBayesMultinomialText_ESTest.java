/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:25:58 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.PART;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.estimators.PoissonEstimator;
import weka.filters.unsupervised.attribute.ReplaceMissingValues;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(2.0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[2];
      intArray0[0] = (-789);
      intArray0[1] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-32.15710577), doubleArray0, intArray0, (-734));
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I8|D[$d/?pAdA!M");
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9005822944550714
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 19.0;
      doubleArray0[1] = 19.0;
      doubleArray0[2] = 19.0;
      doubleArray0[3] = 19.0;
      doubleArray0[4] = 19.0;
      doubleArray0[5] = 19.0;
      doubleArray0[6] = 19.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(19.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.getCapabilities();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.getCapabilities();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("NHo");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.316890517520653
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "org.tartarus.snowball";
      stringArray0[2] = "org.tartarus.snowball.ext";
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Random.setNextRandom((-647));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9367788093754044
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("org.tartarus.snowball");
      naiveBayesMultinomialText0.setPeriodicPruning(200);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.pruneDictionary();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer1.stem("P*{I]x?");
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P*{I]x?";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[3] = "org.tartarus.snowball.ext";
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("P*{I]x?");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      assertEquals(200, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setPeriodicPruning((-621));
      naiveBayesMultinomialText0.setLNorm((-293.0));
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getLNorm();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[3] = "The stemming algorithm to use on the words.";
      stringArray0[4] = "9122";
      stringArray0[5] = "The stemming algorithm to use on the words.";
      stringArray0[6] = "9122";
      stringArray0[7] = "9122";
      stringArray0[8] = "If true then document length is normalized according to the settings for norm and lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.tartarus.snowball.ext";
      PART pART0 = new PART();
      pART0.getCapabilities();
      ReplaceMissingValues replaceMissingValues0 = new ReplaceMissingValues();
      Capabilities capabilities0 = replaceMissingValues0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Vei2D?W)T(r<s#5>zj");
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.845130460022488
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getOptions();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      PART pART0 = new PART();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractClassifier.makeCopy(serializedClassifier0);
      Capabilities capabilities0 = pART0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      pART0.getCapabilities();
      Instances instances0 = testInstances0.generate("The independent probability of a class\n");
      Option option0 = new Option(".bsi", "weka/core/Capabilities.props", (-2), ".arff");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) option0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      instances0.removeIf(predicate3);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-115);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-115);
      doubleArray0[1] = (-530.505104);
      doubleArray0[2] = (double) (byte) (-115);
      doubleArray0[3] = (double) (byte) (-115);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = (int) (byte) (-115);
      intArray0[3] = (int) (byte) (-115);
      SparseInstance sparseInstance0 = new SparseInstance(3351.1, doubleArray0, intArray0, (-3500));
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2764135111059383
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = new String[4];
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      stringArray0[0] = "Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "The stemming algorithm to use on the words.";
      stringArray0[3] = "-tokenizer";
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -tokenizer option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-115);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0299923865413194
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.m_periodicP = (-1837);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_t = (-2246.46747615559);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      assertEquals((-1837), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getPeriodicPruning();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9005822944550714
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setNorm((byte)1);
      naiveBayesMultinomialText0.m_leplace = 3993.00297883;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getTokenizer();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      try { 
        linearNNSearch0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.63263049877407
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)24;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("E9Y@,");
      naiveBayesMultinomialText0.setPeriodicPruning((-2037));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stem("P*{I]x?");
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "p*{i]x?";
      stringArray0[1] = "E9Y@,";
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[3] = "E9Y@,";
      stringArray0[4] = "p*{i]x?";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-2037), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-53);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) nGramTokenizer0;
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(478.72, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.861378820099868
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.stemmerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.getOptions();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-4090));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.392304243276106
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = serializedClassifier0.getOptions();
      serializedClassifier0.getModelFile();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("G(~!PA~[U(N,O");
      naiveBayesMultinomialText1.setStopwords(mockFile0);
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractClassifier.makeCopy(serializedClassifier0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`rIIDp`1";
      stringArray0[1] = "<54{/x'o;$T9\"";
      stringArray0[2] = "amongst";
      stringArray0[3] = "-P";
      stringArray0[4] = "<54{/x'o;$T9\"";
      stringArray0[5] = "`rIIDp`1";
      stringArray0[6] = "`rIIDp`1";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<54{/x'o;$T9\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      naiveBayesMultinomialText0.setNorm(2884.3978212574098);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 846.162;
      doubleArray0[1] = 846.162;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0001;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(846.162, doubleArray0);
      try { 
        coverTree0.kNearestNeighbours(sparseInstance0, (-2059));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = (-1639.2555865628299);
      naiveBayesMultinomialText0.setNorm((-1639.2555865628299));
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_wordsPerClass = null;
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.useStopListTipText();
      int[] intArray0 = new int[6];
      intArray0[0] = 14;
      intArray0[1] = 744;
      intArray0[2] = (-2006);
      intArray0[3] = 3206;
      intArray0[4] = 2259;
      intArray0[5] = 785;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getCapabilities();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer2.stemString("weka/core/Capabilities.props");
      iteratedLovinsStemmer0.stem("wek/cor/capabil.prop");
      DenseInstance denseInstance0 = new DenseInstance(1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1550.954317952248;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The stemming algorithm to use on the words.";
      naiveBayesMultinomialText0.setStopwords((File) null);
      stringArray0[1] = "weka.core.ManhattanDistance";
      stringArray0[2] = "The stemming algorithm to use on the words.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      File file1 = MockFile.createTempFile("~VlB~zA_", "~VlB~zA_", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1928);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[4];
      intArray0[0] = 1928;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 243.0;
      doubleArray0[1] = (-3642.5252555);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 429.2;
      doubleArray0[5] = (-1883.90549377865);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2854.778808061179;
      doubleArray0[8] = (-2643.98);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cbB?eD{Rt,g;_";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 787.396;
      int[] intArray0 = new int[1];
      intArray0[0] = (-522);
      SparseInstance sparseInstance0 = new SparseInstance(787.396, doubleArray0, intArray0, 110);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2002.8248502;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.setValueSparse(739, 2984.3547);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(763.2, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 739;
      intArray0[4] = 1;
      intArray0[5] = 739;
      intArray0[6] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(2984.3547, doubleArray0, intArray0, 1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setLNorm(4.0);
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getNorm();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-3913));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.97426835191566
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-53);
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string2 = naiveBayesMultinomialText1.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string2);
      
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      assertEquals(12, stringArray0.length);
      
      String string3 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string3);
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      int int0 = 200;
      naiveBayesMultinomialText1.setLNorm(5.0);
      naiveBayesMultinomialText1.setPeriodicPruning(200);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.119929656788734
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[1] = 122;
      intArray0[2] = 1;
      double[] doubleArray0 = new double[5];
      naiveBayesMultinomialText0.setUseStopList(true);
      doubleArray0[0] = (double) 122;
      intArray0[1] = 122;
      doubleArray0[2] = 2002.8;
      doubleArray0[3] = (double) 0;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText0.getRevision();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[3] = ";^mIS}'=[V# 0<n4";
      stringArray0[4] = "org.tartarus.snowball.ext";
      SnowballStemmer.main(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "org.tartarus.snowball.ext";
      stringArray1[1] = "";
      snowballStemmer0.setOptions(stringArray1);
      SnowballStemmer.listStemmers();
      snowballStemmer0.toString();
      snowballStemmer0.stemmerTipText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.LNormTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.047433925133046
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.m_t = 1.0;
      naiveBayesMultinomialText0.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText2.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-115);
      naiveBayesMultinomialText0.reset();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.globalInfo();
      iteratedLovinsStemmer0.stem("September");
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 3.0;
      doubleArray0[6] = (double) 122;
      doubleArray0[7] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      Attribute attribute0 = new Attribute("NaiveBayesMultinomialText: No model built yet.\n");
      binarySparseInstance0.value(attribute0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2002.8248502;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.setValueSparse(739, 2984.3547);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(763.2, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3500);
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 739;
      intArray0[4] = 1;
      intArray0[5] = 739;
      intArray0[6] = (-3500);
      SparseInstance sparseInstance0 = new SparseInstance(2984.3547, doubleArray0, intArray0, 1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseStopList();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 122;
      intArray0[2] = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 122;
      File file0 = naiveBayesMultinomialText0.getStopwords();
      file0.getAbsoluteFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.ManhattanDistance";
      stringArray0[2] = "weka.core.ManhattanDistance";
      stringArray0[4] = "weka.core.ManhattanDistance";
      stringArray0[5] = "weka.core.ManhattanDistance";
      stringArray0[6] = "weka.core.ManhattanDistance";
      stringArray0[7] = "weka.core.ManhattanDistance";
      stringArray0[8] = "weka.core.ManhattanDistance";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.m_periodicP = 0;
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1080642897181106
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      naiveBayesMultinomialText0.setMinWordFrequency(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[1] = 122;
      intArray0[2] = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 122;
      intArray0[1] = 122;
      doubleArray0[2] = 2002.8;
      doubleArray0[3] = (double) 0;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)15;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-85);
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte) (-85);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-586.95), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setValueSparse(3, 1121.621053);
      binarySparseInstance0.setValue(2490, (-2194.9866684));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0}g~";
      stringArray0[1] = "olM";
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Random.setNextRandom((byte)15);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.631353359565896
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.m_minWordP = (-1355.39086);
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*%f5AlN?5~k[";
      stringArray0[1] = "stemmer";
      stringArray0[2] = "";
      stringArray0[3] = "";
      naiveBayesMultinomialText0.listOptions();
      stringArray0[4] = "SQ(pSu'DdB.UTyWfLzw";
      stringArray0[5] = "ze+7&[)9[-[ws8y;";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis((-2125L));
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8498682811921308
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 415.1889108725891;
      doubleArray0[1] = 415.1889108725891;
      PART pART0 = new PART();
      Capabilities capabilities0 = pART0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      pART0.getCapabilities();
      Instances instances0 = testInstances0.generate("NaiveBayesMultinomialText: No model built yet.\n");
      Option option0 = new Option("NaiveBayesMultinomialText: No model built yet.\n", " ", (-1), "NaiveBayesMultinomialText: No model built yet.\n");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pART0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) pART0);
      predicate0.and(predicate2);
      predicate1.or(predicate0);
      instances0.removeIf(predicate2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.259263945228695
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 122;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 122;
      intArray0[1] = 1;
      doubleArray0[2] = 2002.8248502;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3443.0144834854464, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tUse word frequencies instead of binary bag of words.";
      stringArray0[1] = "{'ANhK1!'$Io";
      stringArray0[2] = ".*meD!z";
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      stringArray0[3] = "%+K|$dX:2>f";
      stringArray0[4] = "{'ANhK1!'$Io";
      stringArray0[5] = "";
      stringArray0[6] = "-stemmer";
      stringArray0[7] = ".*meD!z";
      stringArray0[8] = ".*meD!z";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-115);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-115);
      doubleArray0[1] = (-530.505104);
      doubleArray0[2] = (double) (byte) (-115);
      doubleArray0[3] = (double) (byte) (-115);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Gw_1YjUu_+TD|/";
      stringArray0[1] = "measureMax_points_visited";
      stringArray0[2] = "#YMS{)-EBH1#mi";
      stringArray0[3] = "U-w};CR/Q0/w";
      stringArray0[4] = "y`";
      stringArray0[5] = "";
      stringArray0[6] = "zRt";
      stringArray0[7] = "EafH[<?L[-yI5*WY6o";
      stringArray0[8] = "-lowercase";
      naiveBayesMultinomialText1.setOptions(stringArray0);
      Random.setNextRandom((byte) (-115));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = "`rIIDp`1";
      stringArray0[1] = "`rIIDp`1";
      stringArray0[2] = "<54{/x'o;$T9\"";
      stringArray0[3] = "The LNorm to use for document length normalization.";
      stringArray0[4] = "-P";
      stringArray0[5] = "";
      stringArray0[6] = "amongst";
      stringArray0[7] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("-tokenizer");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.setPeriodicPruning(200);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 200;
      doubleArray0[1] = (-624.30688539351);
      doubleArray0[2] = (double) 739;
      doubleArray0[3] = 2984.3547;
      doubleArray0[4] = 3343.94;
      doubleArray0[5] = 2984.3547;
      doubleArray0[6] = (-536.1973956151479);
      doubleArray0[7] = (double) 739;
      doubleArray0[8] = (double) 200;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-536.1973956151479), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance1.setValueSparse(406, 394.714087);
      binarySparseInstance1.setValue(2223, 1927.0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(200, naiveBayesMultinomialText0.getPeriodicPruning());
  }
}
