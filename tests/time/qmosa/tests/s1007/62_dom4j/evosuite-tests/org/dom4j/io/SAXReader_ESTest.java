/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:58:12 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Map;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMText;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.getEntityResolver();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.225155042985273
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      MockFile mockFile0 = new MockFile("the size: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("the size: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXReader");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      defaultDocumentFactory0.createText("nNPZ{MjON?7u");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      byteArrayInputStream0.reset();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.192118194633298
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      byteArrayInputStream0.reset();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3372717988650726
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("", (String) null, "|I$pbrI0]*j.]R4");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.isIncludeExternalDTDDeclarations();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      inputSource0.getByteStream();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.dom4j.factory");
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      xMLReaderAdapter0.characters(charArray0, (byte)5, (byte)0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5289116063865116
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl1);
      String string0 = "|l<";
      sAXReader0.setEncoding("|l<");
      sAXReader0.resetHandlers();
      sAXReader0.getEntityResolver();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      DefaultDocumentFactory.getInstance();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.isIgnoreComments();
      XMLReaderAdapter xMLReaderAdapter0 = null;
      try {
        xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // XMLReader must not be null
         //
         verifyException("org.xml.sax.helpers.XMLReaderAdapter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = true;
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEntityResolver(defaultHandler2_0);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      boolean boolean0 = true;
      SAXReader sAXReader2 = new SAXReader((XMLReader) null, true);
      MockFile mockFile0 = new MockFile("{=,YX#@@wQ<Hg");
      mockFile0.setReadOnly();
      mockFile0.setReadOnly();
      SAXReader sAXReader3 = new SAXReader((XMLReader) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader3.setStringInternEnabled(false);
      try { 
        sAXReader2.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4303387811182096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isIgnoreComments();
      sAXReader0.getEncoding();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "y";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("y", "y");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/yy (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/yy (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)4;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '9';
      charArray0[2] = 'n';
      xMLFilterImpl0.ignorableWhitespace(charArray0, (byte)7, (-173));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      defaultDocumentFactory0.createQName("xg'aLu>zumF'm2v'(k", "xg'aLu>zumF'm2v'(k");
      defaultDocumentFactory0.createQName("KB.JU^;KEfP", "KB.JU^;KEfP", "This Entity is read-only. It cannot be modified");
      StringReader stringReader0 = new StringReader("");
      sAXReader0.setEncoding("{|5Csyi0<A8&");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      String string0 = locator2Impl0.getXMLVersion();
      locator2Impl0.getXMLVersion();
      xMLReaderAdapter0.setDocumentLocator(locator2Impl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      MockFile mockFile0 = new MockFile("header");
      mockFile0.setReadOnly();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "header";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 880);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null, 17);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      pruningElementStack0.getPath();
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler(string0);
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setErrorHandler((ErrorHandler) null);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("the size: ", "the size: ");
      sAXReader_SAXEntityResolver0.uriPrefix = "the size: ";
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      QName qName0 = new QName((String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      ElementStack elementStack0 = new ElementStack(1151);
      sAXModifyElementHandler0.onStart(elementStack0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setErrorHandler(xMLFilterImpl0);
      ErrorHandler errorHandler0 = parserAdapter0.getErrorHandler();
      assertSame(errorHandler0, xMLFilterImpl0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.createDefaultEntityResolver("L^S/q1&h");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.535299319024928
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      SAXReader sAXReader2 = new SAXReader((XMLReader) null, true);
      String string0 = "";
      ElementHandler elementHandler0 = null;
      sAXReader2.addHandler("", (ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string1 = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      defaultDocumentFactory1.setXPathNamespaceURIs((Map<String, String>) null);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "comment()";
      String[] stringArray1 = new String[2];
      stringArray1[1] = "comment()";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray1, sAXModifyElementHandler0, 6);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      stringArray0[4] = "comment()";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("comment()");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(stringArray0[1], "");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler(" Stack: ", sAXModifyElementHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader1.setErrorHandler(xMLFilterImpl1);
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.setXPathNamespaceURIs((Map<String, String>) null);
      DOMText dOMText0 = new DOMText("TEXT_NODE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 17, (byte)0);
      byteArrayInputStream1.reset();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream1, " [Document: ame ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      defaultDocumentFactory0.createQName("KB.JU^;KEfP", "KB.JU^;KEfP", "This Entity is read-only. It cannot be modified");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      StringReader stringReader0 = new StringReader("Error on line ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      InputSource inputSource0 = new InputSource("rVEQ");
      inputSource0.getByteStream();
      String string0 = " [Attribute: name ";
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("NaN", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class NaN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createQName("A}3x7eXXO#(d?D5");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.io.SAXReader$SAXEntityResolver", "org.dom4j.io.SAXReader$SAXEntityResolver");
      QName qName0 = defaultDocumentFactory0.createQName("text()", (Namespace) dOMNamespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertSame(documentFactory1, documentFactory0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createProcessingInstruction("Namespace node may not be modified", "Namespace node may not be modified");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.removeHandler("Namespace node may not be modified");
      defaultDocumentFactory0.createQName("\"", "Namespace node may not be modified", "xml");
      try { 
        sAXReader0.read("xml");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/xml (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/xml (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLReaderAdapter0.setDocumentLocator(locatorImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      xMLReaderAdapter1.startElement("", "A document may only contain one root element: ", "A document may only contain one root element: ", attributes2Impl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.setProperty("iEG6U;KS", "A document may only contain one root element: ");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: iEG6U;KS
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      String string1 = "Error on line ";
      StringReader stringReader0 = new StringReader("Error on line ");
      stringReader0.skip(0L);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.createContentHandler((XMLReader) null);
      ElementStack elementStack0 = new ElementStack(1151);
      String[] stringArray0 = new String[0];
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 0 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.isIgnoreComments();
      sAXReader0.setMergeAdjacentText(false);
      defaultDocumentFactory0.createDocument("http://xml.org/sax/features/namespaces");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        dispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      InputSource inputSource0 = new InputSource("the size: ");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.setFeature("^", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '^' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEntityResolver();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "http://xml.org/sax/properties/lexical-handler";
      stringArray0[2] = "2i_7U6t+p4l`";
      stringArray0[3] = "_/rp=>+@\"qx+0%i";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "=},R&[0]^m<jcOd";
      stringArray0[7] = "";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getXMLVersion();
      locator2Impl0.getXMLVersion();
      MockFile mockFile0 = new MockFile("header");
      mockFile0.setReadOnly();
      mockFile0.setReadOnly();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement("$4KO_k'aui%BS,NF", "");
      defaultDocumentFactory0.createDocument("");
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("$4KO_k'aui%BS,NF");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class $4KO_k'aui%BS,NF not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QName qName0 = QName.get("", "", "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.removeHandler("");
      sAXReader0.getDocumentFactory();
      sAXReader0.getEncoding();
      sAXReader0.resetHandlers();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLReaderAdapter0.setDocumentLocator(locatorImpl0);
      ElementStack elementStack0 = new ElementStack(3893);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[m<A6lp5n";
      stringArray0[1] = "";
      stringArray0[2] = "P{|^ExZ;y";
      stringArray0[3] = "#T}+GH2v~`-j2";
      stringArray0[4] = "Entity";
      stringArray0[5] = "Hd^fjt(\"T}d";
      stringArray0[6] = " data: ";
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2);
      SAXParseException sAXParseException0 = new SAXParseException("qcL3@", locatorImpl0, (Exception) null);
      xMLFilterImpl2.fatalError(sAXParseException0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      InputSource inputSource0 = new InputSource();
      inputSource0.setByteStream((InputStream) null);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      QName qName0 = new QName("");
      Namespace namespace0 = new Namespace("", "q38(CON");
      QName.get("", namespace0);
      QName.get("", namespace0, "WVI]m9C");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.getEncoding();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = beanMetaData0.getQName(0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      xMLFilterImpl0.getDTDHandler();
      try { 
        sAXReader0.setFeature("the size: ", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: the size: 
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QName.get("", "", "");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      xMLReaderAdapter0.setDocumentLocator(locatorImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xMLReaderAdapter0.startElement("$#\"Q?3K^", "", "", attributes2Impl0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, true);
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@1c3c189c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@1c3c189c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setIgnoreComments(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'u';
      charArray0[2] = '\'';
      charArray0[3] = '*';
      xMLReaderAdapter0.ignorableWhitespace(charArray0, 47, 47);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(xMLFilterImpl1, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@23cf0a9d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3372717988650726
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getXMLVersion();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLReaderAdapter0.setDocumentLocator(locator2Impl0);
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      defaultDocumentFactory1.setXPathNamespaceURIs((Map<String, String>) null);
      defaultDocumentFactory1.createText(" [Document: name ");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "comment()";
      stringArray0[1] = " [Document: name ";
      stringArray0[2] = " [Document: name ";
      String[] stringArray1 = new String[2];
      stringArray1[0] = " [Document: name ";
      stringArray1[1] = "comment()";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray1, sAXModifyElementHandler0, 6);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      stringArray0[3] = " [Document: name ";
      stringArray0[4] = "comment()";
      stringArray0[5] = " [Document: name ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "comment()");
      stringArray0[6] = " [Document: name ";
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 1581);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setXMLReaderClassName("comment()");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class comment() not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      inputSource0.setPublicId((String) null);
      InputSource inputSource1 = new InputSource(byteArrayInputStream0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected byte 2 of 2-byte UTF-8 sequence.   Nested exception: Expected byte 2 of 2-byte UTF-8 sequence.  
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.uriPrefix = "xZ5A0~E3";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("xZ5A0~E3", "<;PSucKxNHFf");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("the size: ", (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.458063546965408
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.getEncoding();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "y";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("y", "y");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/yy (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/yy (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4194286881489733
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 7, (byte)6);
      byteArrayInputStream1.reset();
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl1, true);
      sAXReader2.setXMLFilter((XMLFilter) null);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream1, "M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document M~oH/1w<Qp@`jv.; : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.uriPrefix = "X";
      sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.setXPathNamespaceURIs((Map<String, String>) null);
      defaultDocumentFactory0.createText("nNPZ{MjON?7u");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid byte 2 of 2-byte UTF-8 sequence. Nested exception: Invalid byte 2 of 2-byte UTF-8 sequence.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      locator2Impl0.getXMLVersion();
      locator2Impl0.getXMLVersion();
      xMLReaderAdapter0.setDocumentLocator(locator2Impl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader sAXReader1 = new SAXReader(false);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      
      sAXReader1.setIncludeExternalDTDDeclarations(true);
      assertTrue(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      String string0 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
