/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:06:15 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.353200262489188
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTex");
      OutputFormat outputFormat1 = new OutputFormat("-expandEmpty'");
      outputFormat1.setIndent(false);
      outputFormat1.setPadText(false);
      outputFormat1.setIndent(true);
      outputFormat1.setPadText(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-newlines";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1416);
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = new OutputFormat("-newlines", false, "c(}P9C*'(]l/~A4h");
      outputFormat2.setIndent("-expandEmpty-expandEmptyEa~|t]GGD");
      assertEquals("-expandEmpty-expandEmptyEa~|t]GGD", outputFormat2.getIndent());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4001413060597834
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", false, "-expandEmpty'");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-1042));
      outputFormat0.setIndent("-expandEmpty'");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("5 ");
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indent";
      stringArray0[1] = "5 ";
      stringArray0[2] = "-expandEmpty'";
      stringArray0[3] = "5 ";
      stringArray0[4] = "}XY57]7Jg0[;#a:!3I";
      stringArray0[5] = "}XY57]7Jg0[;#a:!3I";
      stringArray0[6] = "5 ";
      stringArray0[7] = "5 ";
      stringArray0[8] = "5 ";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setIndent("-lineSeparator");
      assertEquals("-lineSeparator", outputFormat1.getIndent());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7183234086291423
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid attribute quote character (";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "UTF-8";
      stringArray1[1] = "-suppressDeclaration";
      stringArray1[2] = "Invalid attribute quote character (";
      stringArray1[3] = "Invalid attribute quote character (";
      stringArray1[4] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray1, 1);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent(true);
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setOmitEncoding(true);
      outputFormat2.parseOptions(stringArray1, 2);
      outputFormat0.isNewlines();
      outputFormat2.setTrimText(true);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("@dgCZ@7y<s|'Aku");
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String string0 = outputFormat3.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("-indentSize");
      boolean boolean0 = true;
      outputFormat0.setIndent(true);
      boolean boolean1 = true;
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = ",^8qq_S.c";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",^8qq_S.c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.27798419781738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml|5C#ki0O{e:?!5=5}w4", false);
      outputFormat0.setNewlines(true);
      outputFormat0.setXHTML(false);
      outputFormat0.setNewlines(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(766);
      outputFormat0.setLineSeparator("-xhtml|5C#ki0O{e:?!5=5}w4");
      outputFormat0.setTrimText(true);
      outputFormat0.setEncoding("-padText");
      outputFormat0.setIndent("-xhtml|5C#ki0O{e:?!5=5}w4");
      outputFormat0.setIndent("-xhtmlT6=g(++M%");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      outputFormat1.getEncoding();
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat1.getNewLineAfterNTags();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat1.getEncoding();
      assertEquals(766, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3704471964372424
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "Invalid attribute quote character (";
      stringArray0[2] = "UTF-8";
      outputFormat0.setOmitEncoding(true);
      stringArray0[3] = "UTF-8";
      stringArray0[4] = ")";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getEncoding();
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4571553450116514
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat((String) null);
      outputFormat1.isTrimText();
      assertFalse(outputFormat1.isOmitEncoding());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      outputFormat1.setOmitEncoding(true);
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.isOmitEncoding();
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertTrue(outputFormat1.isOmitEncoding());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7437009261328056
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setIndent((String) null);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(638);
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "-expandEmpty'";
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", false, "-expandEmpty'");
      int int0 = 0;
      outputFormat0.setIndentSize(0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-1628155117));
      outputFormat0.setNewLineAfterNTags((-1628155117));
      outputFormat0.setNewLineAfterNTags((-253));
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1<RC*";
      stringArray0[1] = "";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 41);
      outputFormat0.setXHTML(false);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-253), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("t8Y?%7u>/C)X");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(true);
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isTrimText();
      outputFormat0.isNewlines();
      OutputFormat outputFormat1 = new OutputFormat("hfXk");
      outputFormat1.setTrimText(false);
      outputFormat0.setNewlines(true);
      assertEquals("t8Y?%7u>/C)X", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.416613633929369
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-1042));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 5);
      outputFormat0.setIndentSize(5);
      outputFormat0.getEncoding();
      outputFormat0.setEncoding("");
      outputFormat0.setNewLineAfterNTags(5);
      outputFormat0.isPadText();
      outputFormat0.isNewlines();
      outputFormat0.setIndentSize(0);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getIndent();
      outputFormat0.isOmitEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewlines());
      
      outputFormat1.setNewlines(false);
      outputFormat1.setExpandEmptyElements(false);
      boolean boolean0 = outputFormat1.isNewLineAfterDeclaration();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0590159912711368
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "1C5&,m\"t&|*[9J>T2K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isOmitEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(true);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setExpandEmptyElements(true);
      assertTrue(outputFormat1.isPadText());
      
      outputFormat0.setEncoding("");
      outputFormat1.setPadText(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isXHTML();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isXHTML();
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setIndent("");
      outputFormat1.isOmitEncoding();
      outputFormat1.getNewLineAfterNTags();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.isExpandEmptyElements();
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1579247678555973
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-2440));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(true);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("}XY57]7Jg0[;#a:!3I");
      outputFormat0.setTrimText(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent(true);
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.isPadText();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1151439854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1151439854
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.442612015313732
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat((String) null);
      outputFormat1.setIndent(true);
      outputFormat0.setPadText(true);
      outputFormat2.setEncoding((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-xhtml<<yU\"";
      stringArray0[2] = "GZ0v+KZh?~Z}_";
      stringArray0[3] = "GZ0v+KZh?~Z}_";
      stringArray0[4] = "-xhtml<<yU\"";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat1.parseOptions(stringArray0, 0);
      OutputFormat.createCompactFormat();
      outputFormat0.setIndent(";CPyz1sfU0k^");
      assertEquals(";CPyz1sfU0k^", outputFormat0.getIndent());
      
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1449
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1526254461503203
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ea~|m]GrGD";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isNewlines();
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterNTags((-2699));
      outputFormat0.setNewlines(false);
      assertEquals((-2699), outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ea~|m]GrGD";
      stringArray0[2] = "Ea~|m]";
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.isXHTML();
      outputFormat1.isTrimText();
      OutputFormat outputFormat2 = new OutputFormat((String) null, false);
      outputFormat0.setPadText(false);
      outputFormat1.setXHTML(false);
      outputFormat0.isNewlines();
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(false);
      outputFormat1.setNewlines(false);
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", false, "-expandEmpty'");
      OutputFormat outputFormat1 = new OutputFormat("GZ0v+KZh?~Z}_");
      OutputFormat outputFormat2 = new OutputFormat("-padText");
      String[] stringArray0 = new String[6];
      OutputFormat outputFormat3 = new OutputFormat("-padText", false);
      // Undeclared exception!
      try { 
        outputFormat3.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.242894687106955
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      outputFormat0.parseOptions(stringArray0, 683);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewlines(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isPadText();
      outputFormat0.setEncoding("");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setEncoding("");
      outputFormat0.parseOptions(stringArray0, 683);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(false);
      outputFormat2.setEncoding("XbG{EG3T`8KD[(@");
      outputFormat0.getIndent();
      outputFormat2.getIndent();
      assertEquals("XbG{EG3T`8KD[(@", outputFormat2.getEncoding());
      
      outputFormat0.setIndent(true);
      assertEquals("", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(true);
      boolean boolean0 = outputFormat0.isTrimText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2265351295364386
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("bm!1T.S=%Lth");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(true);
      outputFormat0.isTrimText();
      outputFormat0.setOmitEncoding(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(true);
      outputFormat0.getIndent();
      outputFormat0.setIndent(true);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      assertEquals("bm!1T.S=%Lth", outputFormat0.getLineSeparator());
      
      outputFormat1.setTrimText(true);
      assertEquals("  ", outputFormat1.getIndent());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9315813157625517
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getIndent();
      outputFormat0.isPadText();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 1612);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize((-4544));
      outputFormat0.setNewLineAfterNTags(1713);
      outputFormat0.setLineSeparator("");
      outputFormat0.isOmitEncoding();
      outputFormat0.isXHTML();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals(1713, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTex");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimTex";
      stringArray0[1] = "-trimTex";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1243
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setLineSeparator("");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(638);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      String[] stringArray0 = new String[0];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9258637628751876
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h", false, "h");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-1042));
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(false);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("}XY57]7Jg0[;#a:!3I");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("}XY57]7Jg0[;#a:!3I");
      outputFormat0.setSuppressDeclaration(false);
      assertEquals("}XY57]7Jg0[;#a:!3I", outputFormat0.getIndent());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isOmitEncoding();
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-1042));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("-expandEmptyx*|-p`x}IWrb8P");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize((-863));
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7018954881400539
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      OutputFormat outputFormat1 = new OutputFormat((String) null);
      outputFormat0.setIndent(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-xhtml<<yU\"";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "GZ0v+KZh?~Z}_";
      stringArray0[4] = "-xhtml<<yU\"";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setTrimText(true);
      outputFormat1.setIndentSize(0);
      outputFormat1.setIndent("<P]+`&51=#7");
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertTrue(outputFormat1.isTrimText());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (");
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat1 = new OutputFormat("}expa&dEmpty", false, "Ckec7>JTt8O~HkJCy");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setEncoding("Cv3rSk-bG /=VZK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "Ea~|t]GGD";
      outputFormat2.parseOptions(stringArray0, 19);
      assertEquals("Cv3rSk-bG /=VZK", outputFormat2.getEncoding());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = new OutputFormat("Invalid attribute quote character (");
      assertFalse(outputFormat3.isExpandEmptyElements());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.506807702251549
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("");
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.457848345704652
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setXHTML(true);
      outputFormat1.isNewlines();
      assertTrue(outputFormat1.isNewlines());
      
      outputFormat0.isNewlines();
      outputFormat1.setNewlines(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[1] = "Z{b(P";
      stringArray0[2] = "h?SI&";
      stringArray0[3] = "Me(X";
      stringArray0[4] = "vC/flr2\"Xg";
      stringArray0[5] = "$g";
      stringArray0[6] = "z";
      stringArray0[7] = "";
      int int0 = outputFormat2.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.339017699567702
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-1350));
      outputFormat0.setNewLineAfterNTags(63);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndentSize(1641);
      outputFormat0.setLineSeparator("g\"61n>.y('~x-@Z");
      outputFormat0.isPadText();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("g\"61n>.y('~x-@Z");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("Iy[sDh\"U.s;Ij2");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("Iy[sDh\"U.s;Ij2");
      outputFormat1.setIndent("g\"61n>.y('~x-@Z");
      outputFormat0.setIndent(true);
      outputFormat0.setLineSeparator("O$Q,&+");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize((-1719));
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals("O$Q,&+", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("(QFOY@ PC<wZ$wMxS-r", false, "");
      outputFormat0.setIndent("-expandEmpty)");
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "Invalid attribute quote character (";
      stringArray0[4] = ")";
      OutputFormat outputFormat0 = new OutputFormat("j&.Zi:W8Qq:>[~@30", true);
      String[] stringArray1 = new String[0];
      outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("j&.Zi:W8Qq:>[~@30", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = new OutputFormat((String) null, false, "DABg!@!AT()iDr]");
      int int0 = outputFormat1.parseOptions(stringArray0, 1209);
      assertFalse(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertEquals("DABg!@!AT()iDr]", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals(1209, int0);
      assertFalse(outputFormat1.isPadText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (");
      String string0 = OutputFormat.STANDARD_INDENT;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = "Invalid attribute quote character (";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "  ";
      stringArray0[6] = "  ";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      stringArray0[8] = "  ";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("Invalid attribute quote character (", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Nk", true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (7)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("-trimText");
      outputFormat0.getAttributeQuoteCharacter();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (3)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
