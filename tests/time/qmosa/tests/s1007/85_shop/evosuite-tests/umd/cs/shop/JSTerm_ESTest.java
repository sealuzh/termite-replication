/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:22:50 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3872839993213795
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(") ");
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.test(") ");
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<String> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = predicate4.or(predicate2);
      predicate5.and(predicate2);
      predicate5.negate();
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.or(predicate6);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution3);
      predicate3.negate();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      predicate0.negate();
      Predicate<String> predicate1 = Predicate.isEqual((Object) null);
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.and(predicate3);
      predicate4.negate();
      predicate2.negate();
      predicate3.and(predicate4);
      predicate3.negate();
      predicate3.negate();
      predicate4.or(predicate3);
      predicate2.or(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      predicate5.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("+kx_M");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      jSTerm1.add((Object) null);
      predicate0.and(predicate4);
      predicate1.or(predicate6);
      predicate3.and(predicate1);
      predicate0.and(predicate6);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4192930591008177
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      predicate2.and(predicate1);
      jSTerm1.add((Object) null);
      Predicate<String> predicate7 = predicate0.and(predicate2);
      predicate3.or(predicate6);
      predicate6.and(predicate3);
      predicate7.and(predicate4);
      jSTerm0.isGround();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4378425273540523
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      Integer integer0 = new Integer((-393));
      StringReader stringReader0 = new StringReader("FJEoG*<R{|UelQYXS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      LinkedList<JSSubstitution> linkedList0 = new LinkedList<JSSubstitution>();
      jSTerm0.removeAll(linkedList0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?4FIu=nmiA|R^?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("min");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1075358969990727
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6248195459945145
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.addElement("7j~ECL*%B{7 w^");
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "7j~ECL*%B{7 w^");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isGround();
      jSTerm0.cloneT();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.499749809423553
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      boolean boolean0 = jSTerm2.isGround();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution4);
      StringReader stringReader1 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-1749L));
      boolean boolean1 = jSTerm3.isFunction();
      assertFalse(jSTerm3.isConstant());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6650927563911933
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.removeAllElements();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.381685410025984
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.negate();
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.or(predicate0);
      predicate3.negate();
      predicate0.or(predicate6);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) jSSubstitution1);
      predicate7.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("ti?@w|~3AW9v@I&_");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.497906491451203
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.setSize(46);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity((-39));
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      int int0 = (-393);
      Integer integer0 = new Integer((-393));
      jSSubstitution1.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.793881607620216
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSJshopVars.whiteSpace = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.call();
      Object object0 = jSTerm1.clone();
      jSSubstitution2.add(object0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.010406679963535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate1.and(predicate3);
      predicate0.negate();
      predicate0.and(predicate3);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader(";;>BO%#yor{");
      StringReader stringReader1 = new StringReader("JF;Hdd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      stringReader1.mark(2795);
      System.setCurrentTimeMillis(49L);
      jSTerm2.equals(jSTerm1);
      System.setCurrentTimeMillis((-1272L));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.733416752684407
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity((-39));
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isGround();
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7166334590959926
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nval = (double) 41;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.693094938853648
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution2);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Y||RrPq%c@_{sDw7ey");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("Y||RrPq%c@_{sDw7ey");
      StringReader stringReader2 = new StringReader(" iy(");
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm0.matches(jSTerm3);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) jSTerm1);
      predicate6.or(predicate7);
      predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate1.or(predicate1);
      predicate8.and(predicate2);
      Predicate<Object> predicate9 = predicate3.negate();
      jSTerm1.removeIf(predicate9);
      jSTerm0.makeVariable();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader0 = new StringReader("Vyh+9RlE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.pushBack();
      int int0 = 703;
      streamTokenizer0.ordinaryChars((-4075), 703);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate1.test(object0);
      predicate1.and(predicate3);
      Predicate<String> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = predicate4.and(predicate1);
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.negate();
      Predicate<String> predicate7 = predicate6.or(predicate5);
      predicate6.or(predicate7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) "ik#:");
      predicate8.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(",5TdNx{9^zKALaZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.221751559072405
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "@");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "@");
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate0.and(predicate4);
      predicate5.negate();
      predicate0.or(predicate2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate1);
      predicate0.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.or(predicate6);
      predicate8.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<JSSubstitution> predicate9 = Predicate.isEqual((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      predicate6.and(predicate3);
      Predicate<JSSubstitution> predicate10 = Predicate.isEqual((Object) jSSubstitution3);
      predicate10.or(predicate8);
      predicate6.negate();
      predicate9.or(predicate10);
      jSSubstitution3.clear();
      Predicate.isEqual((Object) jSSubstitution1);
      predicate7.negate();
      jSTerm1.removeIf(predicate9);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5723881867892913
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSJshopVars.whiteSpace = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.call();
      Object object0 = jSTerm1.clone();
      jSSubstitution2.add(object0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "(");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "(");
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.and(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      predicate3.or(predicate5);
      predicate0.or(predicate4);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.601826920936974
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution4.fail());
      
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2355868124807694
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.and(predicate2);
      predicate1.test(object0);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate0.and(predicate1);
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate0.negate();
      predicate5.or(predicate1);
      Predicate<String> predicate7 = predicate0.or(predicate6);
      predicate7.negate();
      Predicate<String> predicate8 = predicate7.negate();
      predicate8.or(predicate4);
      JSTerm jSTerm1 = jSTerm0.call();
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate0.and(predicate1);
      Predicate<String> predicate2 = predicate0.negate();
      Predicate<String> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      Predicate<Object> predicate8 = predicate7.or(predicate4);
      predicate8.and(predicate6);
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.69386505822215
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      predicate2.and(predicate1);
      Predicate<String> predicate7 = predicate0.and(predicate2);
      predicate3.or(predicate6);
      predicate6.and(predicate3);
      predicate7.and(predicate4);
      jSTerm0.isGround();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("error");
      StringReader stringReader1 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate3.and(predicate4);
      Predicate<String> predicate5 = predicate0.and(predicate2);
      predicate5.negate();
      predicate5.or(predicate5);
      predicate5.or(predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate6.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.290804340273652
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Object object1 = jSTerm1.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate0.and(predicate4);
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.and(predicate0);
      Predicate<String> predicate8 = predicate7.or(predicate4);
      Predicate<Object> predicate9 = predicate2.or(predicate4);
      Predicate<Object> predicate10 = predicate2.negate();
      predicate3.and(predicate2);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      predicate11.negate();
      jSTerm0.removeIf(predicate8);
      StringReader stringReader0 = new StringReader("zc)!-k0Y:c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.cloneT();
      System.setCurrentTimeMillis((-3160L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7232158593512388
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      StringReader stringReader1 = new StringReader("<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.isGround();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      StringReader stringReader2 = new StringReader("<");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-2903L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4908258599527016
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.addElement(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) "] ");
      Integer integer0 = new Integer((-393));
      jSSubstitution0.add((Object) "error");
      jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm0.standardizerTerm();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2793L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1766387771175175
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      String string0 = "7j~ECL*%B{7 w^";
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0978583933028268
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "BBpA^)) ";
      StringReader stringReader0 = new StringReader("BBpA^)) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(672);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      jSTerm1.isConstant();
      jSTerm0.isGround();
      jSTerm1.makeVariable();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[4] = (Object) jSSubstitution1;
      // Undeclared exception!
      try { 
        jSTerm1.get((-981));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -981
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.532322040073539
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      String string0 = "error";
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.whiteSpace = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.call();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate0.and(predicate3);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) null);
      predicate6.or(predicate7);
      predicate4.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate1.or(predicate8);
      predicate9.and(predicate2);
      Predicate<Object> predicate10 = predicate8.negate();
      jSTerm1.removeIf(predicate10);
      jSTerm0.makeVariable();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0063211141067643
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "qlN9@c-U4S>YPqV");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate1.negate();
      predicate3.test(predicate0);
      predicate2.and(predicate3);
      Predicate<String> predicate4 = predicate0.and(predicate1);
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate0.or(predicate6);
      predicate6.or(predicate7);
      predicate6.or(predicate4);
      Predicate.isEqual((Object) "qlN9@c-U4S>YPqV");
      StringReader stringReader0 = new StringReader(".8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution2);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Y||RrPq%c@_{sDw7ey");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(1445, 1937);
      jSTerm1.firstElement();
      Predicate.isEqual((Object) jSSubstitution3);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(1445);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution4.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.414769867213726
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity((-17));
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm3.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution2.retainAll(jSSubstitution0);
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Y||RrPq%c@_{sDw7ey");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(38, 1504);
      jSTerm0.firstElement();
      Predicate.isEqual((Object) jSSubstitution4);
      System.setCurrentTimeMillis(1380L);
      System.setCurrentTimeMillis(1504);
      jSTerm0.print();
      assertEquals("[(this Collection)]", jSTerm0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("749");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      boolean boolean0 = false;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3725345928583144
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm2.ensureCapacity(37);
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm4, (JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.get((-3467));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3467
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1553948077931833
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-2);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSJshopVars.plus = 2110;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add(0, (Object) jSSubstitution1);
      jSSubstitution0.ensureCapacity(2);
      assertEquals("[[]]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9862458545686048
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BBpA^)) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      stringReader0.read();
      streamTokenizer0.nextToken();
      jSTerm0.makeEval(true);
      stringReader0.mark(41);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.print();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E7=rnobY*5]X$g5k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("8d#{j");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '&';
      charArray0[2] = '9';
      charArray0[3] = 'p';
      charArray0[4] = '6';
      charArray0[5] = 't';
      charArray0[6] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      jSTerm0.forEach(consumer0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Expecting variable name in term");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) stringReader0);
      predicate1.and(predicate2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5218890888688006
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity((-39));
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7729918842016517
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm2.ensureCapacity(37);
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm4.matches(jSTerm4, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSSubstitution0.fail());
      
      JSTerm jSTerm5 = jSTerm2.call();
      assertFalse(jSTerm5.isVariable());
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm5.isConstant());
      
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm6 = jSTerm3.cloneT();
      assertEquals("[JSTerm:]", jSTerm3.toString());
      
      JSTerm jSTerm7 = jSTerm6.standardizerTerm();
      assertNotSame(jSTerm7, jSTerm6);
      assertFalse(jSTerm7.isEval());
      assertTrue(jSTerm7.isConstant());
      assertFalse(jSTerm7.isVariable());
      assertEquals("[JSTerm:]", jSTerm6.toString());
      assertNotSame(jSTerm3, jSTerm6);
      assertFalse(jSTerm7.isFunction());
      
      JSTerm jSTerm8 = jSTerm4.call();
      assertFalse(jSTerm8.isEval());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2865071652616695
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.addElement(jSTerm2);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(3287);
      jSSubstitution0.add((Object) integer1);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(null )", stringBuffer0.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.785115547999553
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("s%x)Z&DHZ?1PMgXu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars((-37), 56);
      jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.mark(56);
      System.setCurrentTimeMillis((-37));
      jSTerm1.isEmpty();
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.negate();
      predicate6.or(predicate5);
      Predicate<String> predicate7 = predicate6.or(predicate3);
      Predicate<String> predicate8 = predicate7.and(predicate5);
      Predicate<String> predicate9 = predicate8.and(predicate7);
      predicate5.negate();
      Predicate<String> predicate10 = predicate6.or(predicate4);
      predicate6.negate();
      Predicate<String> predicate11 = predicate7.and(predicate9);
      predicate11.and(predicate5);
      predicate0.or(predicate10);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2848);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("error");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      StringReader stringReader1 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("?");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
