/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:11:32 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2459711707011123
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{viUH367Bpc*>S0,SY";
      jSONObject0.optInt("{viUH367Bpc*>S0,SY", 13);
      jSONObject0.put("{viUH367Bpc*>S0,SY", (-3186L));
      StringWriter stringWriter0 = new StringWriter(9);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{viUH367Bpc*>S0,SY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {viUH367Bpc*>S0,SY
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8826099677788815
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{vifH36hBpc*>S0,SY";
      jSONObject0.optInt("{vifH36hBpc*>S0,SY", 13);
      JSONObject jSONObject1 = jSONObject0.put("{vifH36hBpc*>S0,SY", (-3202L));
      JSONObject.getNames((Object) jSONObject0);
      String string1 = "LR~%H54?6/'a_E&/b";
      boolean boolean0 = new Boolean("LR~%H54?6/'a_E&/b");
      jSONObject0.toString();
      jSONObject0.optJSONObject("ZLP=kQ<VV");
      JSONObject jSONObject2 = jSONObject1.put("LR~%H54?6/'a_E&/b", (-5224));
      jSONObject2.names();
      jSONObject2.getInt("LR~%H54?6/'a_E&/b");
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONArray("{\"java.lang.String@0000000005\":java.lang.Integer@0000000006,\"java.lang.String@0000000003\":java.lang.Long@0000000004}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000005\\\":java.lang.Integer@0000000006,\\\"java.lang.String@0000000003\\\":java.lang.Long@0000000004}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9949330697193686
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("no", (Object) "no");
      jSONObject1.optLong("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      jSONObject1.write(stringWriter0);
      jSONObject1.toString(91);
      jSONObject0.optInt("no", (-738));
      JSONObject.getNames(jSONObject1);
      JSONObject.quote("{\n                                                                                           \"java.lang.String@0000000008\": \"java.lang.String@0000000008\",\n                                                                                           \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                           \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                           \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject1.optInt(".N85g", 1405);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.put("no", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9001789714022213
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Jp)HLM*pk&)AzfS:#HY$", 1858L);
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optInt("wheel.json.JSONObject@0000000001");
      int int0 = 2;
      jSONObject1.toString(2, 2512);
      jSONObject0.toString(2, 1732);
      jSONObject0.toString();
      String string0 = "M~oH/1w<Qp@`jv.;";
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      try { 
        jSONObject2.get("Jp)HLM*pk&)AzfS:#HY$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jp)HLM*pk&)AzfS:#HY$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8692391794234435
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("!q=!d^<W");
      jSONObject0.optLong("ROdK9RZ", 0L);
      StringWriter stringWriter0 = new StringWriter(117);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "ROdK9RZ");
      stringWriter1.append((CharSequence) "ROdK9RZ");
      int int0 = jSONObject0.optInt("is");
      assertEquals(0, int0);
      
      jSONObject0.optString("is", "JSONObject[");
      jSONObject0.optBoolean("JSONObject[", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!q=!d^<W";
      stringArray0[1] = "JSONObject[";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "is";
      stringArray0[4] = "JSONObject[";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optString("ma", "!q=!d^<W");
      boolean boolean1 = jSONObject1.isNull("ma");
      assertFalse(boolean1 == boolean0);
      
      jSONObject0.optJSONObject("JSONObject[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2087011145829902
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Short short0 = new Short((short)42);
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) (short)42);
      hashMap0.put("false", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("false", 0L);
      linkedList0.add(jSONObject0);
      jSONObject1.optJSONArray("Gg~](]%g");
      jSONObject2.opt((String) null);
      String string0 = jSONObject1.optString("P]i1s", "Gg~](]%g");
      assertEquals(2, jSONObject0.length());
      assertEquals("Gg~](]%g", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7887767637752474
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)55);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "`mXB^j_.n{`$";
      Byte byte1 = new Byte((byte)55);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("p", 1820L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames(object0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>((byte)55, 1820L);
      Boolean boolean1 = new Boolean((String) null);
      hashMap0.put(jSONObject0, boolean1);
      jSONObject0.put("`mXB^j_.n{`$", (Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      jSONObject0.optInt(" qA$wR69iNrgp#4", 105);
      jSONObject0.toString(105);
      HashMap<JSONObject, Boolean> hashMap2 = new HashMap<JSONObject, Boolean>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2927477372687357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "{vifH36hBpc*>S0,SY";
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 111;
      jSONObject0.optInt("{vifH36hBpc*>S0,SY", 111);
      JSONObject jSONObject1 = jSONObject0.put("{vifH36hBpc*>S0,SY", (-1L));
      JSONObject.getNames(jSONObject1);
      String string1 = "LR~%H54?6/'a_E&/b";
      try { 
        jSONObject0.getBoolean("LR~%H54?6/'a_E&/b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LR~%H54?6/'a_E&/b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9011455178285503
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(648);
      JSONObject jSONObject1 = jSONObject0.accumulate("\b", integer0);
      jSONObject1.keys();
      jSONObject0.optInt("\b", (-1981));
      jSONObject0.length();
      JSONObject.numberToString(integer0);
      JSONObject.getNames((Object) jSONObject1);
      int int0 = jSONObject0.optInt("\b");
      assertEquals(1, jSONObject0.length());
      assertEquals(648, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.813621946677586
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      // Undeclared exception!
      jSONObject0.toString(1520, 1520);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.495395478166902
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jl)HM*pk&)AzfS:#HY$";
      String string1 = null;
      JSONObject.quote("JSONObject[");
      try { 
        jSONObject0.put("Jl)HM*pk&)AzfS:#HY$", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5646828511367463
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)55);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "`mXB^j_.n{`$";
      JSONObject jSONObject0 = new JSONObject("`mXB^j_.n{`$", stringArray0);
      Byte byte1 = new Byte((byte)55);
      jSONObject0.optDouble("p", 1274.1466513641);
      jSONObject0.optLong("p", 1820L);
      Boolean boolean0 = Boolean.FALSE;
      Object object1 = new Object();
      JSONObject.getNames(object1);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>((byte)55, 1820L);
      jSONObject0.put("`mXB^j_.n{`$", (Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      JSONObject.testValidity(boolean0);
      jSONObject0.optInt(" qA$wR69iNrgp#4", 105);
      HashMap<JSONObject, Boolean> hashMap2 = new HashMap<JSONObject, Boolean>();
      jSONObject0.put(",%-isN)Mo%p,DQ9Q=V", (Map) hashMap2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3605741823380555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((-1721.12));
      Float.isFinite((-2555.059F));
      Long long0 = new Long((-3634L));
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = "no";
      jSONObject0.put("no", (Object) long0);
      jSONObject0.optLong("");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4093014010018297
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hs>mM";
      stringArray0[1] = "hs>mM";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)3);
      jSONObject1.optDouble("hs>mM", 1501.328);
      jSONObject1.optLong(";phQmMSV9=({]P:", (-1208L));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) ";phQmMSV9=({]P:");
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>(46, (byte)17);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames((Object) "hs>mM");
      jSONObject1.optBoolean(",:]}/\"[{;=#", true);
      JSONObject jSONObject3 = new JSONObject("hs>mM", stringArray0);
      jSONObject3.optDouble("vD:m,%G6'|)<");
      jSONObject3.optString(";phQmMSV9=({]P:", "f$ieMYF-J/*ColX{$ts");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "hs>mM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.247401716135374
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("1508.081056", "1508.081056");
      jSONObject0.has("1508.081056");
      Float float0 = new Float((float) 1060);
      Float.sum(1060, 1060);
      Double.min(1060, 2120.0F);
      try { 
        jSONObject1.getBoolean("1508.081056");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1508.081056\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.699188330829247
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "?4b$>";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "hs>mM";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte)3);
      jSONObject1.optDouble("hs>mM", 1501.328);
      jSONObject1.optLong(";phQmMSV9=({]P:", (-1208L));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) null);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>(46, (byte)17);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap1);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      try { 
        jSONObject3.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.974482852963806
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      String string0 = ",\n";
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("]iH,3'", object0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("4n35", biFunction0);
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      jSONObject1.toString(0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.660763735666923
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.valueToString("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.optInt("JSONObject[");
      String string1 = "z@8va?VpPN{Ctus\"";
      jSONObject0.optLong("z@8va?VpPN{Ctus\"");
      jSONObject0.optDouble("z@8va?VpPN{Ctus\"");
      jSONObject0.names();
      jSONObject0.optString("\"java.lang.String@0000000002\"", "co");
      JSONTokener jSONTokener0 = new JSONTokener("z@8va?VpPN{Ctus\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of z@8va?VpPN{Ctus\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6394387676382474
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "\"JSONObject[\"");
      jSONObject0.optInt((String) null);
      jSONObject0.optString("{EX}o/Htr:fByM", "JSONObject[");
      jSONObject0.optBoolean("Substring bounds error", true);
      jSONObject0.optString("MZx.]U|t<?[", "f$ieMYF-J/*ColX{$ts");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("RhIE1=eL-Q|!W? >", false);
      jSONObject0.put("]LzO", (double) 0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.991636770555662
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "no";
      JSONObject jSONObject1 = jSONObject0.put("no", (Object) "no");
      jSONObject1.optLong("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      jSONObject1.write(stringWriter0);
      jSONObject1.toString(91);
      int int0 = (-738);
      jSONObject0.optInt("no", (-738));
      JSONObject.getNames(jSONObject1);
      jSONObject0.toString((-899));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 91, 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.493851277099074
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{vifH36hBpc*>S0,SY";
      jSONObject0.optInt("{vifH36hBpc*>S0,SY", 13);
      JSONObject jSONObject1 = jSONObject0.put("{vifH36hBpc*>S0,SY", (-3186L));
      JSONObject.getNames(jSONObject1);
      String string1 = "LR~%H54?6/'a_E&/b";
      try { 
        jSONObject1.getBoolean("{vifH36hBpc*>S0,SY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{vifH36hBpc*>S0,SY\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7732408115810476
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hs>mM";
      stringArray0[1] = "hs>mM";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.optInt("8@YaF@%y4CNB2,c9Q<S");
      JSONObject jSONObject2 = jSONObject0.put("Tm0:", (-3186L));
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optInt("9;HbVZ?^?^");
      jSONObject3.optString((String) null, "Tm0:");
      jSONObject0.optBoolean("Tm0:", true);
      jSONObject3.optString("f$ieMYF-J/*ColX{$ts", "getquote");
      jSONObject1.isNull("hs>mM");
      jSONObject0.optJSONObject((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4895359087015163
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)55);
      String string0 = "p";
      String[] stringArray0 = new String[10];
      stringArray0[0] = "`mXB^j_.n{`$";
      JSONObject jSONObject0 = new JSONObject("`mXB^j_.n{`$", stringArray0);
      Byte byte1 = new Byte((byte)55);
      jSONObject0.optDouble("p", 1274.1466513641);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("p", 1820L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames(object0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>((byte)55, 1820L);
      jSONObject1.put("`mXB^j_.n{`$", (Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      try { 
        jSONObject0.getDouble("`mXB^j_.n{`$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`mXB^j_.n{`$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Object) byte0);
      String string1 = "";
      jSONObject1.getInt("");
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4847604128618412
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jp)HM*pk&)AzfS:#HY$";
      String string1 = "JSONObject[";
      JSONObject.quote("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "\"JSONObject[\"");
      jSONObject0.optInt((String) null);
      String string2 = "{EX}o/Htr:fByM";
      jSONObject0.optString("{EX}o/Htr:fByM", "JSONObject[");
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.931999793126397
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("", (Map) hashMap0);
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      String string0 = "ic@CLR2xuRs";
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put((String) null, "");
      Long.valueOf(0L);
      jSONObject0.putOpt((String) null, "sZQD[^*oJN");
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4903821735027916
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "no";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.put("{vi;fH36hBpc*>S0,SY", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8528935755720175
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("", (Map) hashMap0);
      String string0 = hashMap0.put(",\n", ",\n");
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",\n";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "N's<K]'P-^^oZBJML";
      stringArray0[4] = null;
      stringArray0[5] = null;
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.put(string0, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5907840420543438
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("", "");
      jSONObject0.has("1508.081056");
      Float float0 = new Float((float) 1060);
      Float.sum((-780.94F), 1060);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9766893090132731
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "J`x/IR63z{;;xZB";
      JSONObject.quote("J`x/IR63z{;;xZB");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("J`x/IR63z{;;xZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of J`x/IR63z{;;xZB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.032584666567857
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",";
      int int0 = (-1577);
      jSONObject0.optInt(",", (-1577));
      Byte byte0 = new Byte((byte)3);
      String string1 = "V](^U";
      jSONObject0.optDouble("V](^U", 0.0);
      jSONObject0.optLong(";phQmMSV9=({]P:", (-913L));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) "V](^U");
      HashMap<JSONObject, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONObject, Object>((-1811), 2455.3F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1811
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7810345150559752
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0.00";
      stringArray0[1] = "0.00";
      stringArray0[2] = "0.00";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put(".", 1385);
      int int0 = jSONArray0.optInt((-1025), 1385);
      assertEquals(1385, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6401934578801076
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2692.152505539015);
      hashMap0.put((Double) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r*m=2hW0#6G47WD";
      int int0 = (-812);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-812), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.86596786896894
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      hashMap0.put(",:]}/\"[{;=#", (String) null);
      jSONObject1.optInt("000");
      jSONObject1.toString(0);
      jSONObject1.optString("^!,3psy*[yFWj/", "");
      Object object0 = jSONObject1.opt("wheel.json.JSONObject");
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2141575898966614
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jp)HM*pk&)AzfS:#HY$";
      String string1 = null;
      JSONObject.valueToString("Jp)HM*pk&)AzfS:#HY$");
      jSONObject0.optInt("_'WyuA8+Z");
      jSONObject0.toString(1520, 1520);
      jSONObject0.toString((-3663), 55);
      jSONObject0.toString();
      String string2 = "M~oH/1w<Qp@`jv.;";
      String string3 = null;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7455832943344118
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("", (-1490.0));
      JSONObject.valueToString((Object) null, 0, 0);
      try { 
        jSONObject0.getDouble("B?eD{Rt,g;_>`tHW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B?eD{Rt,g;_>`tHW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0898679648356437
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt(stringArray0[1]);
      jSONObject0.optLong(stringArray0[3]);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.290423648793401
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.valueToString("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      String string1 = null;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"java.lang.String@0000000002\"");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Jp)HM*pk&)AzfS:#HY$", 0, 0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.733040173832836
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "\"java.lang.String@0000000002\"");
      JSONObject jSONObject1 = jSONObject0.put("Jp)HM*pk&)AzfS:#HY$", (long) 0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optInt("?/x*l[h");
      jSONObject2.optString("9;HbVZ?^?^", (String) null);
      jSONObject0.optBoolean("9;HbVZ?^?^", true);
      jSONObject2.optString("'$(", (String) null);
      jSONObject0.isNull("wai");
      jSONObject1.optJSONObject("JSONObject[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1422L);
      Long long1 = new Long(1422L);
      hashMap0.put(long0, "J");
      Long.getLong("J", long1);
      hashMap0.put(long0, "J");
      jSONObject0.opt("J");
      jSONObject0.put("1508.081056.", true);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(long0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.794066092432805
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      int int0 = new Integer(1520);
      String string0 = jSONObject0.toString(1520, 1520);
      JSONObject.valueToString(string0, 1520, 1520);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", 0.0);
      try { 
        jSONObject1.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.412808002340831
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      String string0 = "p";
      stringArray0[0] = "p";
      String string1 = "`mXB^j_.n{`$";
      stringArray0[1] = "p";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      Byte byte2 = new Byte((byte)0);
      jSONObject0.put("`mXB^j_.n{`$", (Collection) null);
      jSONObject0.optLong("`mXB^j_.n{`$");
      try { 
        jSONObject0.getInt("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.850859031462347
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      jSONObject0.put(".", 0L);
      JSONObject.quote("");
      jSONObject0.toString();
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong(".");
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7194320716785927
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("no", (Object) "no");
      jSONObject1.optLong("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      jSONObject1.write(stringWriter0);
      int int0 = 91;
      jSONObject1.optDouble("");
      jSONObject0.names();
      String string0 = "co";
      jSONObject1.optString("no", "isdoubleToString");
      JSONTokener jSONTokener0 = new JSONTokener("isdoubleToString");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isdoubleToString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.930905529121227
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("JSONObject[");
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = new Integer(0);
      jSONObject0.optString("{EX}o/Htr:fByM", "JSONObject[");
      jSONObject0.optBoolean("Substring bounds error", true);
      try { 
        jSONObject0.getString("getgetNames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetNames\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5647187882946625
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put(",\n", ",\n");
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("4n35", biFunction0);
      hashMap0.put("ic@CLR2xuRs", "ic@CLR2xuRs");
      hashMap0.put("^!*y,3psy*[yFWj/", "");
      jSONObject1.optInt("4n35", 88);
      jSONObject0.append("|<F_`.\"El", object0);
      jSONObject0.optString((String) null, (String) null);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2650920914434334
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("J]/;^c4%3`._F7.a,");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("true");
      linkedList0.removeFirst();
      jSONObject0.put("J]/;^c4%3`._F7.a,", (Collection) linkedList0);
      jSONObject0.optDouble("true");
      String string0 = "DZjQ7RGP";
      jSONObject0.append("DZjQ7RGP", (Object) null);
      try { 
        jSONObject0.getBoolean("_f,Zu$v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_f,Zu$v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.978469632327687
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1422L);
      Long long1 = new Long(1422L);
      hashMap0.put(long0, "J");
      Long.getLong("J", long1);
      hashMap0.put(long0, "\r");
      jSONObject0.opt("J");
      JSONObject jSONObject1 = jSONObject0.put("1508.081056.", true);
      jSONObject1.remove("1508.081056.");
      jSONObject0.optDouble((String) null);
      hashMap0.put(long0, "J");
      jSONObject0.put(",<UjZ", (Collection) null);
      JSONObject.numberToString(long0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.803818305057598
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x8~V RSn{v");
      jSONObject0.optLong("x0$o2v=hC5");
      jSONObject0.optDouble("x0$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      jSONObject0.optInt("ma");
      jSONObject1.optString("ishashCode", "x0$o2v=hC5");
      boolean boolean0 = jSONObject0.optBoolean("par", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.362939034038495
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Short short0 = new Short((short)42);
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) (short)42);
      hashMap0.put("false", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("false", 0L);
      Byte byte0 = new Byte((byte)84);
      jSONObject2.append("", byte0);
      linkedList0.add(jSONObject0);
      jSONObject1.optJSONArray("Gg~](]%g");
      int int0 = jSONObject2.optInt("Gg~](]%g", 91);
      assertEquals(3, jSONObject0.length());
      assertEquals(91, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Number number0 = null;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(1422L);
      Long long1 = new Long(1422L);
      hashMap0.put(long0, "J");
      Long.getLong("J", long1);
      hashMap0.put(long0, "J");
      jSONObject0.opt("J");
      byte byte0 = (byte) (-12);
      Byte byte1 = new Byte((byte) (-12));
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7893467801672687
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.optString("");
      String string0 = "issum";
      JSONObject jSONObject1 = jSONObject0.putOpt("issum", "issum");
      String string1 = "Expected '";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.toString((-2407), (-857));
      jSONObject0.toString();
      try { 
        jSONObject0.get("y4'sspy-fTbI&<4w&5R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y4'sspy-fTbI&<4w&5R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Integer integer0 = new Integer(1253);
      JSONObject.valueToString(float0, 1253, 1253);
      JSONArray jSONArray0 = new JSONArray();
      Float float1 = new Float(1477.7966F);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>(101);
      Float float2 = new Float((-2199.2));
      Float.min(1253, (-2273.9778F));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Long long0 = new Long(1253);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>(2164, 2027);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8791202434280105
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.516847743831573
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("JSONObject[");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("Jp)HM*pk&)AzfS:#HY$", (-2043L));
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"java.lang.String@0000000002\"");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Jp)HM*pk&)AzfS:#HY$", 0, 0);
      stringWriter2.write("JSONObject[");
      jSONObject0.write(stringWriter2);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString((Object) null);
      jSONObject0.optInt((String) null, 1210);
      JSONArray jSONArray1 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "null";
      stringArray0[3] = "Jp)HM*pk&)AzfS:#HY$";
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.822303585565149
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Float float0 = new Float(1477.7966F);
      Float.max(1477.7966F, (-1820.597F));
      JSONObject.valueToString(float0, 1253, 1253);
      JSONObject jSONObject0 = new JSONObject();
      Float.max(1253, 1253);
      Short short0 = new Short((short)1539);
      JSONObject.valueToString(short0, 1253, 1253);
      Byte byte0 = new Byte((byte)110);
      Byte.toUnsignedLong((byte)110);
      jSONObject0.accumulate("java.lang.Float@0000000001", byte0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble(" of ", (double) 1253);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString((-161));
      String string0 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9124090685265656
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hs>mM";
      stringArray0[1] = "hs>mM";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte)3);
      double double0 = jSONObject1.optDouble("hs>mM", 1501.328);
      assertEquals(1501.328, double0, 0.01);
      
      long long0 = jSONObject1.optLong(";phQmMSV9=({]P:", (-1208L));
      assertEquals((-1208L), long0);
      
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) null);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>(46, (byte)17);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.optInt("hs>mM");
      assertEquals(0, int0);
      
      String string0 = jSONObject2.optString("ap", "A JSONArray text must start with '['");
      assertEquals("A JSONArray text must start with '['", string0);
      
      boolean boolean1 = jSONObject1.optBoolean("hs>mM", true);
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray1);
      
      boolean boolean2 = jSONObject2.isNull("Wyu@6^T3Qxo<6");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1508.081056.";
      stringArray0[1] = "0";
      stringArray0[2] = "RMe;N]$*?TRn";
      stringArray0[3] = "\u0000(67+";
      stringArray0[4] = "] is not a Boolean.";
      stringArray0[5] = "J_J`";
      stringArray0[6] = "Expected '";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2188409259044914
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-2095));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "flo";
      stringArray0[1] = "{";
      stringArray0[2] = "istoString";
      stringArray0[3] = "Null key.";
      stringArray0[4] = "java.lang.Float@00000000010";
      stringArray0[5] = "3";
      stringArray0[6] = "IV";
      stringArray0[7] = "|G}s$E";
      stringArray0[8] = "~s':Z;P.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject1.optDouble("3");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6604629283236583
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("{vifH36hBpc*>S0,SY", 13);
      Byte byte0 = new Byte((byte)3);
      String string0 = "OD\\<B0n,0\\u?V<m!";
      jSONObject0.optDouble(string0, (double) 13);
      jSONObject0.optLong("gettoUnsignedLong", 0L);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("k:Q}_4^:Eeh$w )-Vf.", false);
      jSONObject1.optInt("#J1Cj`S,b=[eV50 Xkw");
      jSONObject1.optString("Z5??cYYOEO$OH", (String) null);
      jSONObject1.optBoolean("wheel.json.JSONTokener", false);
      try { 
        jSONObject2.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7455832943344118
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      stringArray0[1] = "p";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte byte1 = new Byte((byte)0);
      jSONObject0.optDouble("`mXB^j_.n{`$", (double) (byte)0);
      jSONObject0.optLong("p", (long) (byte)0);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = 117;
      StringWriter stringWriter0 = new StringWriter(117);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.write("toS");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "toS", 2, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.032584666567857
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("{vifH36hBpc*>S0,SY", 13);
      Byte byte0 = new Byte((byte)3);
      String string0 = "OD\\<B0n,0\\u?V<m!";
      jSONObject0.optDouble(string0, (double) 13);
      String string1 = ";phQmMSV9=({]P:";
      jSONObject0.optLong("gettoUnsignedLong", 0L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      HashMap<JSONObject, Object> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONObject, Object>(13, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.617808159182962
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.optLong("PQ&\"7`kQ1$^");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      jSONObject0.has("2'");
      try { 
        jSONObject0.getLong("isintBitsToFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isintBitsToFloat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      short short0 = (short)42;
      Short short1 = new Short((short)42);
      JSONObject jSONObject0 = new JSONObject(short1);
      try { 
        jSONObject0.getJSONObject("Dbb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dbb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = ",";
      JSONTokener jSONTokener0 = new JSONTokener(",");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6385571224276863
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "ROdK9RZ";
      jSONObject0.put("ROdK9RZ", 908L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
