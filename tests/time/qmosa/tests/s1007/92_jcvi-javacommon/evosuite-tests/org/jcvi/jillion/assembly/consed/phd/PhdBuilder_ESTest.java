/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:10:38 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence1, qualitySequence1, (Map<String, String>) null, list0);
      List<PhdReadTag> list1 = artificialPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null, list0, list1);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList1.add((String) null);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList0);
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.spliterator();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList3);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) linkedList3);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList3);
      linkedList2.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      LinkedList<PhdWholeReadItem> linkedList7 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList8 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList9 = new LinkedList<PhdWholeReadItem>();
      linkedList2.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      LinkedList<PhdWholeReadItem> linkedList10 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList11 = new LinkedList<PhdReadTag>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      ArtificialPhd artificialPhd0 = new ArtificialPhd("oSnNUH", nucleotideSequence0, qualitySequence0, (-892));
      Map<String, String> map0 = artificialPhd0.getComments();
      DefaultPhd defaultPhd0 = new DefaultPhd("82q0$7|L!xS[^", nucleotideSequence0, qualitySequence0, (PositionSequence) null, map0, linkedList10, linkedList11);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("k*Aaa;6|Uz$s>)", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      phdBuilder0.wholeReadItems(linkedList0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<PhdWholeReadItem> linkedList6 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList7 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList8 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("\"2Th@\"){Q", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-2050), 1660);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "k*Aaa;6|Uz\\$s>)";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("k*Aaa;6|Uz$s>)", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks(1672, 1672);
      PositionSequence positionSequence0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)87;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)87;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short) (byte) (-85);
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qualityScore of our range -85
         //
         verifyException("org.jcvi.jillion.core.qual.PhredQuality", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("YdZ1:4LmjC", nucleotideSequence1, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList6.spliterator();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList7);
      defaultPhdWholeReadItem0.getLines();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) linkedList7);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list2);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList10, (Collection<String>) list1);
      Locale locale0 = Locale.PRC;
      LinkedList<String> linkedList11 = new LinkedList<String>();
      LinkedList<String> linkedList12 = new LinkedList<String>();
      linkedList11.spliterator();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList6);
      defaultPhdWholeReadItem3.getLines();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedList12);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      Phd phd0 = phdBuilder1.build();
      assertEquals("oSnNUH", phd0.getId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      Locale locale1 = Locale.PRC;
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList5.spliterator();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(list1);
      List<String> list2 = defaultPhdWholeReadItem0.getLines();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list2);
      PhdBuilder phdBuilder1 = null;
      try {
        phdBuilder1 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte byte0 = (byte)62;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("B?0ruy5X^X2#@1", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(2494, (-1930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode4);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<PhdWholeReadItem> linkedList6 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList7 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList8 = new LinkedList<PhdWholeReadItem>();
      phdBuilder0.peaks((PositionSequence) null);
      LinkedList<PhdReadTag> linkedList9 = new LinkedList<PhdReadTag>();
      assertEquals(0, linkedList9.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(list0);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList1.spliterator();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList6);
      List<String> list1 = defaultPhdWholeReadItem0.getLines();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList7);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList8, (Collection<String>) linkedList5);
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list3);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList10, (Collection<String>) linkedList7);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem4);
      LinkedList<PhdWholeReadItem> linkedList11 = new LinkedList<PhdWholeReadItem>();
      linkedList4.add((PhdWholeReadItem) defaultPhdWholeReadItem1);
      LinkedList<PhdWholeReadItem> linkedList12 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList13 = new LinkedList<PhdWholeReadItem>();
      linkedList4.add((PhdWholeReadItem) defaultPhdWholeReadItem2);
      phdBuilder0.copy();
      LinkedList<PhdWholeReadItem> linkedList14 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList15 = new LinkedList<PhdReadTag>();
      assertEquals(0, linkedList15.size());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("Adenine", nucleotideSequence0, qualitySequence0, (-1260));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList1.spliterator();
      defaultPhdWholeReadItem1.getLines();
      List<String> list1 = defaultPhdWholeReadItem0.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem3);
      LinkedList<PhdWholeReadItem> linkedList3 = new LinkedList<PhdWholeReadItem>();
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem2);
      linkedList3.add((PhdWholeReadItem) defaultPhdWholeReadItem2);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("qualities can not be null", nucleotideSequence1, qualitySequence1, map0);
      List<PhdReadTag> list2 = artificialPhd0.getReadTags();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence2).getLength();
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd1 = new ArtificialPhd("", nucleotideSequence2, qualitySequence2, map0, linkedList0, list2, 6853);
      artificialPhd1.getReadTags();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(list2);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("oSnNUH", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "k*Aaa;6|Uz\\$s>)";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("k*Aaa;6|Uz$s>)", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
