/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:08:04 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2573898942810904
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(9223372036854775803L);
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Object object1 = new Object();
      range0.equals("qJ)E7I\"*");
      long long0 = 3036L;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.02084893602857
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775291L);
      Range.of(1158L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.861084879237071
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-1789L));
      Range range2 = Range.of((-119L));
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range1.endsBefore(range2);
      range1.isSubRangeOf(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(object1);
      Range.Builder range_Builder2 = new Range.Builder(205L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1789L), 3036L);
      range1.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      range3.intersects(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.offset must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.152573647162874
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("q3", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse q3 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.171562687130536
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(32767L);
      Long.getLong("!o0[\"IA");
      range1.equals((Object) null);
      range1.complement(range0);
      Long long0 = new Long(32767L);
      Range range2 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      range2.complement(range0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(range_CoordinateSystem0, (-32768L), 1371L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.7559148247182024
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-146L), 65535L);
      range0.equals("[ %d .. %d ]/%s");
      Range.CoordinateSystem.values();
      Range.of(65535L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(127L, 65535L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.312860748001166
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(255L, (-1544L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.792525016848846
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(0L, 32767L);
      Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L);
      Range.of((-128L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandEnd(32767L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.861954043576029
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of((-17L), 32767L);
      Range range1 = Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-17L));
      Range range3 = Range.of((-128L));
      range0.intersects(range1);
      range1.isSubRangeOf(range2);
      range3.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(32767L, (-2820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.622297794748806
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.ofLength(9223372036854775803L);
      long long0 = (-32768L);
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775803L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775803 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.9377988447389116
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-1789L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      range2.complementFrom(linkedList0);
      range1.spliterator();
      range2.endsBefore(range0);
      Range.of((-32768L));
      range2.spliterator();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8755015511841338
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-3589L);
      Range range0 = Range.of((-3589L), (-3589L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long1 = 114L;
      range_Builder0.copy();
      range0.split(114L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      range_Builder0.copy();
      Range range1 = Range.of(114L);
      range0.intersects(range1);
      long long2 = 9223372036854775263L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775263L, 275L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854743041L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854743041L, 9223372036854743041L);
      range0.getLength();
      long long1 = 2546L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.113420577616936
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem2);
      assertEquals(1L, long0);
      
      Range range3 = Range.of(range_CoordinateSystem1, 32767L, 2147483647L);
      List<Range> list1 = range3.complement(range0);
      assertFalse(list1.contains(range3));
      assertEquals(1, list1.size());
      
      boolean boolean0 = range0.isSubRangeOf(range3);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-303L));
      Range range4 = range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range range5 = range_Builder0.build();
      Object object0 = new Object();
      Long long1 = new Long((-303L));
      range5.equals(long1);
      Range.Builder range_Builder1 = new Range.Builder((-32767L), (-303L));
      List<Range> list2 = range5.complement(range4);
      assertEquals(1, list2.size());
      
      range_Builder0.build();
      assertNotSame(range0, range2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.375174471031274
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(9223372036854774854L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9432726987375757
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Range range1 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.complement(range1);
      range0.intersection(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.parseRange("$,D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $,D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8404821471448565
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(2147450880L);
      Range.of((-2831L));
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of((-128L), (-3287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8720608300883153
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-1789L);
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-32768L));
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-2147483648L), 269L);
      range0.intersects(range1);
      range2.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      range3.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Vi^$d#Dy0K?^u3^ ", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Vi^$d#Dy0K?^u3^  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5399727661776605
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of((-32768L));
      range0.iterator();
      long long1 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.577940759553299
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(5009L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.89101651689997
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 9223372036854775807L;
      long long1 = 32767L;
      Range range0 = Range.of(32767L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range range2 = Range.of(1111L);
      long long2 = (-128L);
      Range range3 = Range.of(4681L);
      range0.intersects(range1);
      range2.isSubRangeOf(range3);
      range2.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7347768205439227
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Range range1 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range range2 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem.values();
      boolean boolean0 = range1.isSubRangeOf(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.056246821218643
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.of(767L);
      Range range1 = Range.of(767L);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder1.contractEnd((-303L));
      Range range2 = range_Builder0.build();
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      range_Builder0.contractBegin((-1663L));
      range2.complementFrom(list1);
      range_Builder0.expandEnd((-303L));
      range_Builder0.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9935443970890385
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      range0.getBegin();
      Range range3 = Range.of(range_CoordinateSystem1, 32767L, 2147483647L);
      range3.complement(range0);
      range0.isSubRangeOf(range3);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.complement(range3);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range range4 = range_Builder1.build();
      range3.complement(range4);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.355660028746613
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-1789L));
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range1);
      Object object1 = new Object();
      boolean boolean1 = range0.equals(object1);
      assertFalse(boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(3036L);
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertSame(range1, range0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      long long0 = 1967L;
      Range.Builder range_Builder0 = new Range.Builder(1967L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 0L;
      range_Builder0.expandBegin((-32768L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9239168223791414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      range1.complement(range0);
      range0.getBegin(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.064768024838999
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(255L);
      long long0 = range0.getBegin();
      assertEquals(255L, long0);
      
      Range range1 = Range.of((-4007L));
      range1.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.endsBefore(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.endsBefore(range1);
      range0.complementFrom(linkedList0);
      Range range2 = Range.of(297L);
      range1.isSubRangeOf(range2);
      List<Range> list0 = range2.complement(range1);
      assertFalse(range2.isEmpty());
      assertTrue(list0.contains(range2));
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8453252943124423
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(955L);
      Range range1 = Range.of(range_CoordinateSystem0, 955L, 955L);
      range1.startsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of((-532L));
      Range range3 = range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-532L), (-2147482690L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.687277389083778
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      range0.isEmpty();
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-2864L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.857819260812086
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-1789L);
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-32768L));
      range1.iterator();
      Range range2 = Range.of((-2147483648L), 269L);
      range1.isSubRangeOf(range0);
      range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$ShortRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$ShortRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.496698690673413
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-688L));
      Range range1 = Range.of(9223372036854775803L);
      Object object0 = new Object();
      boolean boolean0 = range1.isSubRangeOf(range0);
      Object object1 = new Object();
      boolean boolean1 = range1.equals("qJ)E7I\"*");
      assertFalse(boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(3036L);
      boolean boolean2 = range1.startsBefore(range0);
      assertTrue(boolean2 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8713409771935083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 9223372036854774854L;
      Range range0 = Range.of(9223372036854774854L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-667L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774854L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.255999086112009
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.equals(range0);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(2587L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range1);
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-61L), 65409L);
      Range.of(2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      range1.complement(range2);
      Range range3 = Range.ofLength(2587L);
      boolean boolean1 = range1.isSubRangeOf(range3);
      assertFalse(boolean1 == boolean0);
      assertFalse(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7642032133513585
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-1L), (-1L));
      range1.spliterator();
      range1.endsBefore(range0);
      long long0 = 9223372036854774854L;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4381454225800563
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 2520L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.083435721653453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), 2147483647L);
      range1.complement(range2);
      range0.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-128L));
      range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      range_Builder1.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("QmAfK|FNUKYo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.QmAfK|FNUKYo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3288843766989933
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(2587L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3395L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3395L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.955940972612483
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      range1.complement(range2);
      List<Range> list1 = range3.complement(range2);
      //  // Unstable assertion: assertTrue(list1.isEmpty());
      
      boolean boolean1 = range2.endsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.985140659967418
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range0);
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(0L, 32767L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(boolean0);
      
      List<Range> list1 = range0.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range4 = range_Builder0.build();
      range1.complement(range3);
      List<Range> list2 = range3.complement(range0);
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      Range.Comparators.values();
      range4.getBegin(range_CoordinateSystem0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.190436658355388
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      range1.spliterator();
      range0.endsBefore(range1);
      Range range2 = Range.of((-1L));
      range2.spliterator();
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      List<Range> list1 = range0.complement(range2);
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4037312014299763
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = (-728L);
      Range range0 = Range.of((-728L));
      long long1 = (-2606L);
      Range range1 = Range.of((-2606L));
      range0.iterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.getEnd();
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Uj|ri_8E7aC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Uj|ri_8E7aC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.472573232108088
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(9223372036854774854L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6316796486281424
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-366L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of((-366L), 2147486234L);
      Range range1 = Range.of((-365L), 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.793981164480347
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      boolean boolean0 = range0.startsBefore(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = Range.of(0L);
      range1.isEmpty();
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7642600613703663
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      Range range1 = Range.of((-1817L));
      boolean boolean0 = range0.startsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.042088056730996
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(32767L);
      Range range2 = Range.of(0L);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      boolean boolean0 = range0.endsBefore(range2);
      boolean boolean1 = range1.isSubRangeOf(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(268L);
      boolean boolean2 = range2.equals(long0);
      assertTrue(boolean2 == boolean0);
      
      Range.Builder range_Builder2 = new Range.Builder(268L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-517L), 268L);
      boolean boolean3 = range2.startsBefore(range1);
      assertTrue(boolean3 == boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range3.split(4294967295L);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.539186670396588
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-1789L));
      range1.getLength();
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      range0.endsBefore(range1);
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(816L, 298L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.834618576136614
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range1.spliterator();
      range0.endsBefore(range1);
      Range range2 = Range.of((-1L));
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem1);
      assertFalse(range2.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.877123979070737
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      range2.isEmpty();
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.922182626816785
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of((-3658L), (-3658L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-3658L), (-3658L));
      Range.of((-61L));
      // Undeclared exception!
      try { 
        Range.of((-727L), (-1926L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.772101011738583
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      range1.complement(range0);
      long long0 = new Long(32767L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1017L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.945512222715161
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L);
      Range range3 = Range.of((-128L));
      range0.intersects(range1);
      boolean boolean0 = range1.isSubRangeOf(range2);
      boolean boolean1 = range3.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range2.complement(range3);
      Range range4 = range0.intersection(range2);
      Range.CoordinateSystem.values();
      boolean boolean2 = range3.isSubRangeOf(range4);
      assertFalse(range4.isEmpty());
      assertSame(range4, range2);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4084106036325776
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of((-1789L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range0.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-32768L), long1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.459033989237724
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.ofLength(9223372036854775803L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5182893057277007
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(9223372036854774842L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3800903296061806
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.of(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(4772L);
      Range range2 = Range.of(0L);
      Object object0 = new Object();
      range2.isSubRangeOf(range0);
      Object object1 = new Object();
      Long long0 = new Long((-2884L));
      range1.equals(long0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-473L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8372690962521827
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range1.spliterator();
      range0.endsBefore(range1);
      Range range2 = Range.of((-1L));
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range3 = range0.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.063044494786336
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = new LinkedList<Range>();
      range0.getBegin(range_CoordinateSystem0);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      Range range3 = Range.of(range_CoordinateSystem1, 32767L, 2147483665L);
      range3.complement(range0);
      range0.isSubRangeOf(range3);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(2147483665L);
      range_Builder0.expandEnd(2147483665L);
      range_Builder0.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5517968015498065
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = (-3658L);
      Range range0 = Range.of((-3658L), (-3658L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range0.split((-3658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.773517992177352
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(1632L);
      List<Range> list0 = range0.split(847L);
      assertEquals(1, list0.size());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(1632L);
      range1.isSubRangeOf(range0);
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.isEmpty());
      
      range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.809088462067861
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      Range range1 = Range.of((-1817L));
      range1.getBegin();
      range0.startsBefore(range1);
      range0.complement(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-4678L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.182507072573158
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.756078054002378
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of(9223372036854775287L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      Range range1 = Range.of((-1L));
      range1.complementFrom(linkedList1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775287L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.723756118340553
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.spliterator();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(0L);
      range0.isSubRangeOf(range1);
      range0.getBegin();
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5813629921615653
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.9150330649469973
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.listIterator();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-61L), (-61L));
      Range range1 = Range.of(0L);
      range1.isSubRangeOf(range0);
      range1.complement(range0);
      range0.isSubRangeOf(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.9888219717908906
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.of((-2011L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      Range range1 = Range.of((-1L));
      range0.isSubRangeOf(range1);
      range0.complement(range1);
      range0.isSubRangeOf(range1);
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.9755050131873335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(955L);
      Range range1 = Range.of(range_CoordinateSystem0, 955L, 955L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      range0.equals(range1);
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      Range range3 = Range.of(1L, 955L);
      range3.isSubRangeOf(range2);
      range3.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.contractEnd((-1828L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd(2147483647L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-510L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.549152195187749
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      range0.endsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-824L));
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder3.contractEnd((-849L));
      range_Builder4.build();
      range_Builder0.expandEnd((-505L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775490 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.014757886072118
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-674L), 767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-731L));
      range1.intersects(range0);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder0.contractEnd((-674L));
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.build();
      range_Builder3.expandEnd((-674L));
      range_Builder3.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.8538320797948304
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-1L));
      range0.isSubRangeOf(range1);
      range0.complement(range1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.05681159523644
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      range1.spliterator();
      range0.endsBefore(range1);
      Range range2 = Range.of((-1L));
      range2.isSubRangeOf(range1);
      List<Range> list1 = range1.complement(range2);
      assertFalse(list1.contains(range1));
      assertFalse(list1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.8384799199046125
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.copy();
      long long0 = 55L;
      Range range0 = Range.of(55L);
      Range range1 = Range.of(2366L);
      range0.intersects(range1);
      Range.of((-965L), 55L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775263L, 2366L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long long0 = 5L;
      Range.Builder range_Builder0 = new Range.Builder(5L, 259L);
      range_Builder0.shift(259L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.732844796579329
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-674L), 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range.of((-731L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      range_Builder0.expandEnd((-674L));
      range_Builder1.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.264502633454561
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      range0.equals(range_Builder1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(0L, (-1789L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.7977915060504635
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of(9223372036854774854L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854774854L);
      long long0 = 4294967295L;
      range_Builder0.contractBegin(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 9223372036854774854L, (-32768L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      long long1 = 9223372036854743041L;
      Range.Builder range_Builder5 = range_Builder3.expandBegin(9223372036854743041L);
      range_Builder5.expandEnd(4941L);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.9126876198719027
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(32767L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range range3 = Range.of(range_CoordinateSystem0, 32767L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range3);
      long long0 = (-2837L);
      long long1 = (-456L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 354L, (-456L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=4.205155818891255
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range0);
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      Range range3 = Range.of(range_CoordinateSystem1, 32767L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range3);
      Range.of(range_CoordinateSystem1, 354L, 32767L);
      List<Range> list1 = range2.split(354L);
      String string0 = range3.toString();
      assertEquals("[ 32767 .. 2147483646 ]/0B", string0);
      
      range1.complementFrom(list0);
      range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertEquals(0, list2.size());
      assertFalse(list1.isEmpty());
      
      range1.spliterator();
      boolean boolean0 = range3.endsBefore(range0);
      assertFalse(boolean0);
      
      Range.of(0L);
      range2.getBegin(range_CoordinateSystem2);
      range2.toString();
      assertNotSame(range1, range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.4083420642013063
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3799L), (-3799L));
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      
      range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4847660648116223
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandBegin(767L);
      range_Builder1.contractEnd((-303L));
      range_Builder0.build();
      range_Builder0.expandEnd((-303L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range range0 = Range.ofLength(2147486234L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4145644662987675
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder((-4678L), 1L);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.6222668128246878
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = Range.of(752L);
      Range range1 = Range.of(0L, 0L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.2161572481410414
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("C|Q`d4{f}1~YmrM&", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse C|Q`d4{f}1~YmrM& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
