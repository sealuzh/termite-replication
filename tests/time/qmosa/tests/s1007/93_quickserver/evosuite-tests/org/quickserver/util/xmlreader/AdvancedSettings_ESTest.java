/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:11:49 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-2729));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("FDeO S,&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // FDeO S,&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1034354550763315
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(194);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize(4532);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("]B+)=klivW/:Db5[6nl");
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(1, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7198102019557404
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(3453);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setBacklog((-1550));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-1550));
      advancedSettings1.setMaxThreadsForNioWrite(0);
      advancedSettings1.getByteBufferSize();
      advancedSettings0.setClientIdentifier("\t<charset>");
      advancedSettings1.setClientSocketReceiveBufferSize(3453);
      advancedSettings1.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings1.setClientSocketReceiveBufferSize(1591);
      advancedSettings1.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(1786);
      advancedSettings1.toXML("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getBacklog();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("k ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // k 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.711094975618099
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog(1);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(1);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(1);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite((-1717));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5601374813542574
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-432));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("`>{~?+$h");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(325);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize((-432));
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>false</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n\t<client-socket-send-buffer-size>-432</client-socket-send-buffer-size>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>false</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>
         // \t<client-socket-traffic-class></client-socket-traffic-class>
         // \t<client-socket-send-buffer-size>-432</client-socket-send-buffer-size>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.623030675448602
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      String string0 = advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(1332);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setQSObjectPoolMaker("?[K7S((&9`{");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings1.setClientSocketReceiveBufferSize(1332);
      advancedSettings1.setDebugNonBlockingMode(true);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings2.toXML(string0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6193513534748734
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-send-buffer-size>1332</client-socket-send-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.setSocketLinger(1332);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("mfhrMp[U/+8GYr=Y6");
      advancedSettings0.setPerformancePreferencesBandwidth((-70));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("i_8E7aC=V9NoHO");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-send-buffer-size>1332</client-socket-send-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-send-buffer-size>1332</client-socket-send-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.setClientSocketSendBufferSize(1332);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-send-buffer-size>1332</client-socket-send-buffer-size>\n</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.127712680255688
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-11));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesLatency((-44));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1545);
      advancedSettings0.setByteBufferSize(3808);
      advancedSettings0.setCharset("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(0);
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3894863594240063
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("N");
      advancedSettings0.setSocketLinger(1332);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.toXML("\t<client-socket-traffic-class>");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.toXML("org.quickserver.util.xmlreader.AdvancedSettings");
      assertEquals(0, advancedSettings1.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.807937605186145
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog((-998));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog(1662);
      advancedSettings0.setPerformancePreferencesBandwidth((-998));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setBacklog(3303);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency((-3605));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("");
      assertEquals((-998), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.449191882584089
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.setSocketLinger((-70));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-3928));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency((-3642));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-3642));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setBacklog((-3928));
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-3642), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-3642), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(859);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(859);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("B2Id>");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(859);
      assertEquals("B2Id>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7232216928203403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(952);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("\t<performance-preferences-connection-time>");
      advancedSettings0.setMaxThreadsForNioWrite(249);
      advancedSettings0.setPerformancePreferencesLatency(249);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("8GGjVjFe*b;");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(86);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("__xDv2&2BpJD");
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.383761246557698
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("WkXs8S\"8Sp");
      assertEquals("WkXs8S\"8Sp<advanced-settings>\nWkXs8S\"8Sp\t<charset>ISO-8859-1</charset>\nWkXs8S\"8Sp\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\nWkXs8S\"8Sp\t<byte-buffer-size>65536</byte-buffer-size>\nWkXs8S\"8Sp\t<backlog>0</backlog>\nWkXs8S\"8Sp\t<socket-linger>-1</socket-linger>\nWkXs8S\"8Sp\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\nWkXs8S\"8Sp\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\nWkXs8S\"8Sp\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\nWkXs8S\"8Sp\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\nWkXs8S\"8Sp\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\nWkXs8S\"8Sp\t<performance-preferences-latency>0</performance-preferences-latency>\nWkXs8S\"8Sp\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\nWkXs8S\"8Sp\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\nWkXs8S\"8Sp</advanced-settings>\n", string0);
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings2.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings2.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6216128941612045
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(822);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("H0Q.");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientSocketReceiveBufferSize((-2741));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("Nz'");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("H0Q.");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals(822, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2183004874823533
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML((String) null);
      String string0 = advancedSettings0.toXML("/$");
      assertEquals("/$<advanced-settings>\n/$\t<charset>ISO-8859-1</charset>\n/$\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n/$\t<byte-buffer-size>65536</byte-buffer-size>\n/$\t<backlog>0</backlog>\n/$\t<socket-linger>-1</socket-linger>\n/$\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n/$\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n/$\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n/$\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n/$\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n/$\t<performance-preferences-latency>0</performance-preferences-latency>\n/$\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n/$\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n/$</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<debug-non-blocking-mode>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<debug-non-blocking-mode>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.383761246557698
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(",G52;BT{H Tb");
      advancedSettings0.setClientSocketReceiveBufferSize((-2254));
      advancedSettings0.setClientSocketTrafficClass("8D-{gHFO8R&2!B,N");
      advancedSettings0.toXML("</charset>\n");
      assertEquals((-2254), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5981916685890094
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1332);
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getMaxThreadsForNioWrite();
      advancedSettings2.setClientSocketReceiveBufferSize(1);
      advancedSettings2.setCharset("");
      advancedSettings0.getBacklog();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
      
      advancedSettings1.setClientSocketReceiveBufferSize((-70));
      advancedSettings1.toXML("");
      advancedSettings1.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTrafficClass("i");
      assertEquals(0, advancedSettings3.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1084);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(1084, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1332);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setByteBufferSize((-70));
      advancedSettings1.setSocketLinger((-70));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.getClientIdentifier();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings1.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("CpWIw%;&b f1_n$z3z");
      assertEquals("CpWIw%;&b f1_n$z3z", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1021170635140374
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setSocketLinger((-147));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketSendBufferSize((-147));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize(4532);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("]B+)=klivW/:Db5[6nl");
      advancedSettings0.setByteBufferSize(1);
      assertEquals(1, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(1);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize(1332);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(10, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1332, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6216128941612045
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(822);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("H0Q.");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientSocketReceiveBufferSize((-2741));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("Nz'");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker(string0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(26);
      advancedSettings0.setQSObjectPoolMaker("H0Q.");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals((-2741), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(11);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize((-1638));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("^2NYt8-X2>i");
      advancedSettings0.setClientIdentifier("^2NYt8-X2>i");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      String string0 = "org.quickserver.net.server.impl.OptimisticClientIdentifier";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(210);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker("</client-socket-send-buffer-size>\n");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("</client-socket-send-buffer-size>\n");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-send-buffer-size>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-send-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.931182116122934
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.setSocketLinger((-70));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setBacklog((-70));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("");
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("|x}{[q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |x}{[q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.553244839087568
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.setSocketLinger((-70));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(165);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.553244839087568
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-70));
      advancedSettings0.setSocketLinger((-70));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(165);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      assertEquals(165, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3849655821658873
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertNotNull(string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1332);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(322);
      advancedSettings0.setSocketLinger(322);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1058);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<client-socket-traffic-class>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-traffic-class>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
