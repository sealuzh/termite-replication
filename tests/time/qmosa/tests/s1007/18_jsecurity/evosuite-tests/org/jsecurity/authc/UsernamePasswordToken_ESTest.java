/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 19:28:25 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'g';
      charArray0[2] = '(';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '(';
      charArray0[6] = 'w';
      charArray0[7] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Cd\"pk,Izqe", (String) null, true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - Cd\"pk,Izqe, rememberMe=true (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.583861674849353
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K^Ea", "D 5\"?q~Pg)^", inetAddress0);
      usernamePasswordToken0.setUsername("D 5\"?q~Pg)^");
      InetAddress inetAddress1 = usernamePasswordToken0.getInetAddress();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - D 5\"?q~Pg)^, rememberMe=false (/0.0.0.0)", string0);
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", (String) null, (InetAddress) null);
      usernamePasswordToken1.toString();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken1.toString();
      String string1 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/0.0.0.0)", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("rg.jsecurityGautvc.UserIWmPssordTjken", "OU(n'fOiSMXpeUa:?");
      char[] charArray0 = new char[0];
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("YP!H[", charArray0, false, inetAddress0);
      usernamePasswordToken1.getPassword();
      usernamePasswordToken1.getCredentials();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'g';
      charArray0[2] = 'I';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '9';
      charArray0[6] = 'w';
      charArray0[7] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'i';
      charArray0[2] = '.';
      charArray0[3] = '/';
      charArray0[4] = '?';
      charArray0[5] = ',';
      charArray0[6] = '-';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("`y$&KI+!Rp", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, true);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'b';
      charArray0[2] = '*';
      charArray0[3] = '\'';
      charArray0[4] = '/';
      charArray0[5] = 'y';
      charArray0[6] = 'v';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", charArray0, false, inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '3';
      charArray0[2] = '[';
      charArray0[3] = '.';
      charArray0[4] = '4';
      charArray0[5] = 'E';
      charArray0[6] = '3';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("^<;do", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8YaKi", "glOWV,kau\"7:Hu");
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.isRememberMe();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.getInetAddress();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'g';
      charArray0[2] = 'I';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '9';
      charArray0[6] = 'w';
      charArray0[7] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Cdpk,Izqe", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("1S!)HOiMqysik_S-D", (String) null, false);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '1';
      charArray0[2] = ']';
      charArray0[3] = '}';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("");
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(":", (char[]) null, false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.05477796069814
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("4YxEg9WX*}_)\"SpI", "!q", false);
      usernamePasswordToken0.clear();
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '<';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      Object object0 = usernamePasswordToken0.getCredentials();
      assertNull(object0);
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamPassordToken", "org.jsecurity.authc.UsernamPassordToken");
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.694124545362909
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("glOWV,kau\"7:Hu", "glOWV,kau\"7:Hu");
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      charArray0[3] = '?';
      charArray0[4] = 'T';
      charArray0[5] = '-';
      charArray0[6] = ':';
      usernamePasswordToken0.setUsername(">ZNZY");
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("glOWV,kau\"7:Hu", "", false);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.getUsername();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      String string0 = usernamePasswordToken1.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("glOWV,kau\"7:Hu", "", true, inetAddress0);
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.autvc.UserIWmPassordTVken", "OU('fOiSMXpeUa:?");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("PE-Z_n8AtshS", (char[]) null, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "T31C5&,m\"t&|*[9J", true, (InetAddress) null);
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[9];
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[0] = '^';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isMCLinkLocal());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamPassordToken", "org.jsecurity.authc.UsernamPassordToken");
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'g';
      charArray0[2] = 'I';
      charArray0[3] = 'T';
      charArray0[4] = 'C';
      charArray0[5] = '9';
      charArray0[6] = 'w';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Cdpk,Izqe", "Cdpk,Izqe", false, inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
