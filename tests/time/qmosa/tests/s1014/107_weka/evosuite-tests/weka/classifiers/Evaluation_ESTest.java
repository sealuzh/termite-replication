/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:41:00 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.matrix.Matrix;
import weka.estimators.MahalanobisEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.044737071163516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.avgCost();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.rootMeanPriorSquaredError();
      double double3 = evaluation0.KBRelativeInformation();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.fMeasure(279);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.SFPriorEntropy();
      double double6 = evaluation0.weightedPrecision();
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getClassCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      IBk iBk0 = new IBk();
      instances0.parallelStream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7180404644795497
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      evaluation0.toSummaryString("   * only checks the data against its capabilities.\n", false);
      testInstances0.setNumRelational(2553);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2773);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2773);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2773
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833898234953863
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      String string0 = evaluation0.toSummaryString("   * only checks the data against its capabilities.\n", false);
      assertEquals("   * only checks the data against its capabilities.\n\nTotal Number of Instances                0     \n", string0);
      
      testInstances0.setNumRelational(2553);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2773);
      evaluation0.SFPriorEntropy();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.150245899024516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.KBRelativeInformation();
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.fMeasure(279);
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomTree0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5322275226575797
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getChecksTurnedOff");
      IBk iBk0 = new IBk((-255));
      PipedReader pipedReader0 = new PipedReader();
      C45Loader c45Loader0 = new C45Loader();
      Instances instances1 = new Instances(instances0);
      instances1.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMacroFmeasure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9366147725931564
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("#0d5PWeB)K!-]4hC");
      IBk iBk0 = new IBk((-1));
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      evaluation0.getRevision();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.876451509180568
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(iBk0);
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.pctCorrect();
      evaluation1.numTruePositives((-593));
      evaluation2.setDiscardPredictions(true);
      double double0 = evaluation0.m_SumAbsErr;
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "NK}5Vo}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3627622605225236
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("M1*d7ffa;Lu#@z2xsFP");
      IBk iBk0 = new IBk(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = evaluation0.toSummaryString("M1*d7ffa;Lu#@z2xsFP", true);
      assertEquals("M1*d7ffa;Lu#@z2xsFP\nTotal Number of Instances                0     \n", string0);
      
      String string1 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string1);
      
      double double0 = evaluation0.pctUnclassified();
      int[] intArray0 = new int[1];
      iBk0.setWindowSize(48);
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-2));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.80945660916597
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-118);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      testInstances0.setOptions(stringArray0);
      evaluation0.toSummaryString("(4bME", false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      double double1 = evaluation0.numFalseNegatives(98);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.areaUnderPRC(98);
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0904548921755612
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 86;
      PipedReader pipedReader0 = new PipedReader(97);
      ClassLoader.getSystemClassLoader();
      evaluation0.weightedRecall();
      evaluation0.toSummaryString("2]/V", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.priorEntropy();
      testInstances0.setNumRelational(13);
      M5P m5P0 = new M5P();
      Evaluation.getGlobalInfo(m5P0);
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation1.m_SumKBInfo = Double.NaN;
      evaluation2.weightedTruePositiveRate();
      evaluation1.pctCorrect();
      evaluation1.numTruePositives(19);
      evaluation1.setDiscardPredictions(false);
      evaluation0.SFSchemeEntropy();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "\"ve");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6047122738623925
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate(" ");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      Instances instances0 = testInstances0.generate("#0d5PWeB)K!-]4hC");
      IBk iBk1 = new IBk();
      PipedReader pipedReader1 = new PipedReader();
      instances0.parallelStream();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMicroFmeasure();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9193618394362677
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(42L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double double0 = evaluation0.numFalseNegatives((-1129811261));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-560));
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 46;
      Instances instances0 = new Instances("<Wz.g>M>|:jz(", arrayList0, 46);
      CostMatrix costMatrix0 = new CostMatrix(46);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.428019628085446
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("M1*d7ffa;Lu#@z2xsFP");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      String string0 = Evaluation.getGlobalInfo(iBk0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.IBk:\n\nK-nearest neighbours classifier. Can select appropriate value of K based on cross-validation. Can also do distance weighting.\n\nFor more information, see\n\nD. Aha, D. Kibler (1991). Instance-based learning algorithms. Machine Learning. 6:37-66.", string0);
      
      CostMatrix costMatrix0 = new CostMatrix(4);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double double1 = evaluation1.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      try { 
        Evaluation.evaluateModel(".arff", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.562185829861781
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.KBRelativeInformation();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 279;
      doubleArray0[1] = (double) (-3163L);
      doubleArray0[2] = 5.70001;
      doubleArray0[3] = (-2.147483648E9);
      doubleArray0[4] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.updateStatsForIntervalEstimator((IntervalEstimator) null, binarySparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6632233829614873
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 97;
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      PipedReader pipedReader0 = new PipedReader(19);
      PipedReader pipedReader1 = new PipedReader(97);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 86);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(".bsi", false);
      double double0 = evaluation0.m_SumSqrErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelational(13);
      M5P m5P0 = new M5P();
      Evaluation.getGlobalInfo(m5P0);
      evaluation0.errorRate();
      evaluation0.pctCorrect();
      testInstances0.setNumRelational(86);
      evaluation0.rootRelativeSquaredError();
      evaluation0.equals(testInstances0);
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, 1113, 1943);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("R!G2", (-1));
      capabilities0.testWithFail(attribute0);
      PipedReader pipedReader0 = new PipedReader(29);
      PipedReader pipedReader1 = new PipedReader();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.961835892762321
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      String string0 = evaluation0.toSummaryString("(4bME", false);
      assertEquals("(4bME\nTotal Number of Instances                0     \n", string0);
      
      testInstances0.setNumRelational(2577);
      M5P m5P0 = new M5P();
      String string1 = Evaluation.getGlobalInfo(m5P0);
      assertEquals("\nSynopsis for weka.classifiers.trees.M5P:\n\nM5Base. Implements base routines for generating M5 Model trees and rules\nThe original algorithm M5 was invented by R. Quinlan and Yong Wang made improvements.\n\nFor more information see:\n\nRoss J. Quinlan: Learning with Continuous Classes. In: 5th Australian Joint Conference on Artificial Intelligence, Singapore, 343-348, 1992.\n\nY. Wang, I. H. Witten: Induction of model trees for predicting continuous classes. In: Poster papers of the 9th European Conference on Machine Learning, 1997.", string1);
      
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.numTruePositives((-1129811261));
      double double2 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3242083027824796
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      GainRatioAttributeEval.main(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate("M1*d7ffa;Lu#@z2xsFP");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      double double1 = evaluation0.numTruePositives(2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(97);
      ClassLoader.getSystemClassLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        testInstances0.setNumRelational((-3371));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1105300498329425
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader(29);
      PipedReader pipedReader1 = new PipedReader();
      evaluation0.KBRelativeInformation();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader2 = null;
      try {
        pipedReader2 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7002883476198396
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.KBRelativeInformation();
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[7];
      randomTree0.listOptions();
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) evaluation0;
      objectArray0[3] = (Object) evaluation0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.crossValidateModel((Classifier) randomTree0, instances0, (-2005139297), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.876227793535313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("M1*d7ffa;Lu#@z2xsFP");
      IBk iBk0 = new IBk(0);
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      evaluation0.toSummaryString("(4bME", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setNumRelational(4);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      M5P m5P0 = new M5P();
      Evaluation.getGlobalInfo(iBk0);
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.meanPriorAbsoluteError();
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation2.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(42L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?y+Wta";
      stringArray0[1] = "\tSets model input file. In case the filename ends with '.xml',\n";
      stringArray0[2] = "\tSets model input file. In case the filename ends with '.xml',\n";
      stringArray0[3] = "xSkf?;(AGs)";
      stringArray0[4] = "\tOutputs information-theoretic statistics.\n";
      stringArray0[5] = "Ej&~e:I5y0-Is3Jp^ ";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nWeka exception: ";
      stringArray0[1] = "enumerateMeasures";
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      try { 
        Evaluation.handleCostOption(".arff", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation.handleCostOption((String) null, 85);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5381846252872298
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      GainRatioAttributeEval gainRatioAttributeEval1 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getMeasure");
      IBk iBk0 = new IBk((-2));
      PipedReader pipedReader0 = new PipedReader();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      try { 
        Evaluation.evaluateModel((Classifier) iBk0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.lazy.IBk:
         // 
         // -I
         // \tWeight neighbours by the inverse of their distance
         // \t(use when k > 1)
         // -F
         // \tWeight neighbours by 1 - their distance
         // \t(use when k > 1)
         // -K <number of neighbors>
         // \tNumber of nearest neighbours (k) used in classification.
         // \t(Default = 1)
         // -E
         // \tMinimise mean squared error rather than mean absolute
         // \terror when using -X option with numeric prediction.
         // -W <window size>
         // \tMaximum number of training instances maintained.
         // \tTraining instances are dropped FIFO. (Default = no window)
         // -X
         // \tSelect the number of nearest neighbours between 1
         // \tand the k value specified using hold-one-out evaluation
         // \ton the training data (use when k > 1)
         // -A
         // \tThe nearest neighbour search algorithm to use (default: weka.core.neighboursearch.LinearNNSearch).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1043353546919192
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader(97);
      ClassLoader.getSystemClassLoader();
      evaluation0.weightedRecall();
      String string0 = evaluation0.toSummaryString("2]/V", true);
      assertEquals("2]/V\nTotal Number of Instances                0     \n", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.priorEntropy();
      testInstances0.setNumRelational(13);
      M5P m5P0 = new M5P();
      String string1 = Evaluation.getGlobalInfo(m5P0);
      assertEquals("\nSynopsis for weka.classifiers.trees.M5P:\n\nM5Base. Implements base routines for generating M5 Model trees and rules\nThe original algorithm M5 was invented by R. Quinlan and Yong Wang made improvements.\n\nFor more information see:\n\nRoss J. Quinlan: Learning with Continuous Classes. In: 5th Australian Joint Conference on Artificial Intelligence, Singapore, 343-348, 1992.\n\nY. Wang, I. H. Witten: Induction of model trees for predicting continuous classes. In: Poster papers of the 9th European Conference on Machine Learning, 1997.", string1);
      
      double double0 = evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation1.m_SumKBInfo = Double.NaN;
      double double2 = evaluation2.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.pctCorrect();
      assertEquals(double3, double0, 0.01);
      
      evaluation1.numTruePositives(19);
      evaluation1.setDiscardPredictions(false);
      evaluation0.SFSchemeEntropy();
      OneR oneR0 = new OneR();
      double double4 = evaluation1.m_SumKBInfo;
      double double5 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1102945927097245
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance2);
      instances0.add((Instance) denseInstance0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      Instances instances1 = null;
      evaluation0.errorRate();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("M1*d7ffa;Lu#@z2xsFP");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        evaluation0.recall((-1709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1709
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      double[] doubleArray0 = evaluation0.getClassPriors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk(0);
      IBk iBk1 = new IBk();
      iBk1.pruneToK(instances0, doubleArray0, (-3842));
      PipedReader pipedReader0 = new PipedReader();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        multilayerPerceptron0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.functions.MultilayerPerceptron: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9316511444802995
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      System.setCurrentTimeMillis((-3163L));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.avgCost();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      textDirectoryLoader1.getDataSet();
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.unweightedMacroFmeasure();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.JRip:
         // 
         // -F <number of folds>
         // \tSet number of folds for REP
         // \tOne fold is used as pruning set.
         // \t(default 3)
         // -N <min. weights>
         // \tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)
         // -O <number of runs>
         // \tSet the number of runs of
         // \toptimizations. (Default: 2)
         // -D
         // \tSet whether turn on the
         // \tdebug mode (Default: false)
         // -S <seed>
         // \tThe seed of randomization
         // \t(Default: 1)
         // -E
         // \tWhether NOT check the error rate>=0.5
         // \tin stopping criteria \t(default: check)
         // -P
         // \tWhether NOT use pruning
         // \t(default: use pruning)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9316511444802997
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 97;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      instances0.parallelStream();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.352709280846941
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("0657.594");
      IBk iBk0 = new IBk((-2));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toSummaryString("obtainVotes", false);
      evaluation0.toMatrixString("numFoldsTipText");
      evaluation0.pctUnclassified();
      iBk0.setWindowSize(1435);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, (-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.pctCorrect();
      Float float0 = new Float((double) (-2));
      assertEquals((-2.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.352709280846941
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PipedReader pipedReader0 = new PipedReader(40);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.toMatrixString(".arff");
      evaluation0.pctUnclassified();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 40;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2392);
      intArray0[5] = 0;
      intArray0[6] = 40;
      intArray0[7] = 0;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nWeka exception: ";
      stringArray0[1] = "\nWeka exception: ";
      stringArray0[3] = "\tSets model input file. In case the filename ends with '.xml',\n";
      stringArray0[4] = "\nWeka exception: ";
      stringArray0[5] = "60795p!";
      stringArray0[6] = "Ej&~e:I5y0-Is3Jp^ ";
      stringArray0[0] = "xSkf?;(AGs)";
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      StringReader stringReader0 = new StringReader(".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-539.75078802375), (int[]) null, (-2));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = new Matrix(doubleArray0, 1622);
      MahalanobisEstimator mahalanobisEstimator0 = new MahalanobisEstimator(matrix0, 1622, (-3834.4724524831704));
      Capabilities capabilities0 = mahalanobisEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getMeasure");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nWeka exception: ");
      BayesNet bayesNet0 = new BayesNet();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
