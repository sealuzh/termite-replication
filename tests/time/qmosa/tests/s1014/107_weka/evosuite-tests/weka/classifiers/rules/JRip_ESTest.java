/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:19:58 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers((Instance) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1487;
      intArray0[1] = 21;
      intArray0[2] = 2450;
      intArray0[5] = (-1709);
      intArray0[4] = 2762;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      intArray0[5] = 2700;
      intArray0[6] = 3;
      intArray0[7] = (-2210);
      ClassOrder classOrder0 = new ClassOrder();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      IBk iBk0 = new IBk(2450);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      jRip0.getTechnicalInformation();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", "", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("e1", 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      IBk iBk0 = new IBk(731);
      int int0 = 9;
      CostMatrix costMatrix0 = new CostMatrix(9);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setUseIBk(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 3472.494419362271;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 2;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute attribute0 = new Attribute("sqqatD(R:o", 32);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2.0, 3472.494419362271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "cMo_";
      stringArray0[2] = "cMo_";
      stringArray0[3] = "u|E";
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      IBk iBk0 = new IBk();
      decisionTable0.getRevision();
      Attribute attribute0 = new Attribute((String) null, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      jRip0.checkErrorRateTipText();
      jRip0.minNoTipText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.usePruningTipText();
      jRip0.getRevision();
      jRip0.debugTipText();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      BallNode ballNode0 = new BallNode(70);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?jAv:4";
      stringArray0[1] = "?jAv:4";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("a`[a^9*mj)k\">}Fr~~", 2973);
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.covers((Instance) null);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.getRevision();
      IBk iBk1 = new IBk(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2377.00681;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 1;
      iBk1.pruneToK((Instances) null, doubleArray0, (-1));
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.getConsequent();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule2.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2036540333326435
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.toString();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      jRip0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.921533775932955
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2594.69493;
      doubleArray0[1] = (-1551.0);
      doubleArray0[2] = (-1551.0);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-84.7);
      jRip0.setOptions(stringArray0);
      jRip0.getMinNo();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getSeed();
      jRip0.getOptions();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("rKas`$8xmWLstr5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rKas`$8xmWLstr5 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      jRip0.toString();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      AbstractClassifier.makeCopies(decisionTable2, 2);
      IBk iBk0 = new IBk(8);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Number of all possible conditions = ", "?@f?hUh,ju)AWsa/:4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      JRip jRip1 = new JRip();
      jRip1.seedTipText();
      jRip0.foldsTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1282.92304677);
      doubleArray0[1] = (-1282.92304677);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-1551.0);
      doubleArray0[4] = (-1282.92304677);
      doubleArray0[5] = (-1551.0);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1282.92304677), doubleArray0);
      try { 
        costMatrix0.getMaxCost(3, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4728278948924696
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "cMo_";
      stringArray0[2] = "";
      stringArray0[3] = "u|E";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Morgan Kaufmann Publishers Inc.";
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("(n/YX@", (-1366));
      Attribute attribute1 = attribute0.copy("implementation in aspects of accuracy, ruleset size and running time ");
      jRip0.setFolds(2);
      jRip0.enumerateMeasures();
      Attribute attribute2 = attribute1.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getAttr();
      jRip0.setMinNo(3);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G>AvO4";
      stringArray0[1] = " | p-s = ";
      stringArray0[2] = " | p-s = ";
      stringArray0[0] = " | p-s = ";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.setCheckErrorRate(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip0.optimizationsTipText();
      jRip0.debugTipText();
      String string0 = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      Instances instances0 = null;
      try {
        instances0 = new Instances("/vi`Svp", arrayList0, (-4183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -4183
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3448446247581223
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "cMo_";
      stringArray0[2] = "";
      stringArray0[3] = "u|E";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Morgan Kaufmann Publishers Inc.";
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("(n/YX@", (-1366));
      Attribute attribute1 = attribute0.copy("implementation in aspects of accuracy, ruleset size and running time ");
      jRip0.setFolds(2);
      jRip0.enumerateMeasures();
      Attribute attribute2 = attribute1.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      jRip_NumericAntd0.toString();
      jRip0.setMinNo(3);
      jRip0.getUsePruning();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-1366);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.068317808937722
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(68);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(68, jRip0.getOptimizations());
      
      JRip jRip1 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      jRip0.setMinNo(1);
      Instances instances0 = decisionTable2.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(3291.9959, (Instances) null, (-2612.436571937051), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "The Random Subspace Method for Constructing Decision Forests";
      stringArray0[2] = "96^A{l]A\"^h8o[U";
      stringArray0[3] = "%g";
      stringArray0[4] = "a9(Z9]w?0v[rYv*zxI";
      stringArray0[5] = ">8$$;Lh`jSp;N&M&S";
      stringArray0[6] = "v8zW_Oua,b*vmc*}";
      stringArray0[7] = "  /** the translation */\n";
      stringArray0[8] = "1x7WBLQaPG0B;'";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setDebug(false);
      jRip0.toString();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.toString();
      jRip0.setDebug(false);
      jRip0.getOptions();
      jRip0.debugTipText();
      jRip0.debugTipText();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(4.9E-324);
      jRip0.listOptions();
      jRip0.foldsTipText();
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      int int0 = (-5);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-5));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "| data size: ";
      stringArray0[1] = "c_";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Fast Effective Rule Induction";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1709);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      jRip0.getOptions();
      doubleArray0[1] = 1.0E-8;
      double double0 = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip_NumericAntd0.accu = 0.0;
      jRip_NumericAntd0.getRevision();
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.getFolds();
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.value = Double.NaN;
      jRip_NumericAntd0.accu = 994.976;
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.copy();
      double double0 = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "no/li1";
      stringArray0[1] = "8118";
      stringArray0[2] = "}#";
      stringArray0[3] = "B?q.V6pAOSjI";
      stringArray0[4] = "8118";
      stringArray0[5] = "8118";
      try { 
        AbstractClassifier.forName("no/li1", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: no/li1
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(false);
      assertFalse(decisionTable0.getDebug());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 21;
      intArray0[1] = (-2210);
      intArray0[2] = 1487;
      intArray0[3] = (-2210);
      intArray0[4] = (-2210);
      intArray0[5] = 0;
      intArray0[6] = (-1633);
      intArray0[7] = 21;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = null;
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setUseIBk(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0, 1824);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getFolds();
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(68);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      Object object0 = new Object();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The minimum total weight of the instances in a rule.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minimum total weight of the instances in a rule. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 2242.0;
      jRip0.setCheckErrorRate(true);
      jRip0.getCheckErrorRate();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1551.0);
      doubleArray0[1] = (-1551.0);
      doubleArray0[2] = (-1551.0);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1551.0);
      doubleArray0[5] = (-1.0E-6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1551.0), doubleArray0);
      binarySparseInstance0.isMissing(5);
      CostMatrix costMatrix0 = new CostMatrix(6);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Attribute attribute0 = new Attribute(".bsi", 6);
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      KDTree kDTree0 = new KDTree();
      jRip0.getSeed();
      System.setCurrentTimeMillis((-2228L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setUseIBk(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("Too few positives.", list0, 68);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getFolds();
      jRip_NumericAntd0.copy();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.listOptions();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      KDTree kDTree0 = new KDTree();
      assertEquals(0.0, kDTree0.measureNumLeaves(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.getDebug();
      Attribute attribute0 = new Attribute((String) null);
      String[] stringArray0 = new String[0];
      Attribute.main(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        attribute0.formatDate(1105.818011);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only format date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", protectedProperties0);
      jRip0.getCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      properties0.setProperty("string", "date");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getFolds();
      jRip0.getDebug();
      jRip0.getOptimizations();
      jRip_NumericAntd0.getRevision();
      jRip0.toString();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fB";
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = decisionTable0.m_dtInstances;
      Attribute attribute0 = new Attribute("weka.ttributeSele6tin.OneRAttributeEval");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fB";
      stringArray0[1] = "cMo_";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      String string0 = jRip1.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(1L, jRip2.getSeed());
      assertTrue(jRip2.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertFalse(jRip2.getDebug());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(3, jRip2.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setUseIBk(false);
      decisionTable0.m_displayRules = false;
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      Instances instances1 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6941960781238792
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      Instance instance0 = null;
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule1.setConsequent((-1.0));
      jRip_RipperRule1.covers((Instance) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2210);
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1487;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      jRip0.setUsePruning(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jRip0.setDebug(false);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getFolds();
      String string1 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string1);
      
      System.setCurrentTimeMillis(3);
      int int0 = jRip0.getFolds();
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      jRip0.setSeed((byte)2);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable2.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(3291.9959, (Instances) null, (-2612.436571937051), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{&N1g6(/~8E~/7=");
      JRip jRip1 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Attribute attribute0 = new Attribute("{&N1g6(/~8E~/7=", 2174);
      ClassOrder classOrder0 = new ClassOrder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      attribute0.equalsMsg((Object) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("fbI7U(@gj.a7 jYd");
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      assertFalse(principalComponents1.getCenterData());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
