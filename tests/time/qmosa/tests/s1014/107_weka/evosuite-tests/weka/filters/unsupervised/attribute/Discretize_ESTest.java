/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:38:18 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.049586610230749
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute0 = new Attribute("+$NZ|h8I@@\"", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("numeric", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      discretize0.input(binarySparseInstance2);
      int int0 = discretize0.getBins();
      assertFalse(discretize0.isNewBatch());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0684300759888123
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("e_Vh6fe/dFl$H", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(1);
      arrayList1.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("7NM{?2Xbmg3r{", arrayList1, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.308293844984404
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.values();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("+$NZ|h8I@@\"", protectedProperties6);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("date", arrayList0, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8807342062201364
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      discretize0.getOptions();
      stringArray0[3] = "";
      discretize0.setBins((-3881));
      discretize0.invertSelectionTipText();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.140392412768928
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("`|':i");
      discretize0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      discretize0.binsTipText();
      System.setCurrentTimeMillis((-467L));
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCapabilities();
      discretize0.getUseBinNumbers();
      discretize0.getMakeBinary();
      discretize0.setOptions((String[]) null);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.958785906255777
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("$NZ|h8I@@\"", protectedProperties6);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("date", arrayList0, 1);
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getMakeBinary());
      
      boolean boolean0 = discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.setInputFormat(instances0);
      boolean boolean1 = discretize0.batchFinished();
      assertFalse(boolean1);
      
      boolean boolean2 = discretize0.getFindNumBins();
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(boolean2 == boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9924694780979046
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      locale0.getUnicodeLocaleAttributes();
      locale0.getUnicodeLocaleAttributes();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      protectedProperties1.values();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      Attribute attribute0 = new Attribute("+$NZ|h8I@@\"", protectedProperties3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      try { 
        discretize1.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("GenericPropertiesCreator.props", protectedProperties1);
      arrayList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("]", arrayList0, 1);
      Discretize discretize0 = new Discretize("\nInstances and their weights:\n");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Instances and their weights:
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.314025601504742
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3086);
      intArray0[1] = (-3086);
      intArray0[2] = (-3086);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      int int0 = 10;
      discretize0.setBins((-506));
      Discretize discretize1 = new Discretize("Class index differ: ");
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.066804160788062
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      int[] intArray0 = new int[3];
      intArray0[0] = (-2089443546);
      intArray0[1] = 10;
      intArray0[2] = 2147483645;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-573.031779), intArray0, 70);
      binarySparseInstance0.toString((-2073432485));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(Double.NaN, intArray0, (-2033));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0", arrayList0, 70);
      Discretize discretize0 = new Discretize("@relation");
      Filter.runFilter(discretize0, (String[]) null);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      try { 
        discretize2.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6174998898943667
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1);
      Attribute attribute0 = new Attribute("first-last", list2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      attribute0.equalsMsg(list2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      locale0.stripExtensions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("numeric");
      arrayList0.add(locale_LanguageRange0);
      doubleArray0[3] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      Discretize discretize0 = new Discretize("((|2;4,2tF#ex&p");
      Discretize discretize1 = new Discretize("");
      discretize1.getCapabilities();
      String[] stringArray0 = discretize1.getOptions();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("YdsFjZA5");
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3655121313473804
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|?&suAhZq;6o!S1'C`:";
      stringArray0[1] = "-unset-class-temporarily";
      stringArray0[2] = "()[fF";
      discretize0.setOptions(stringArray0);
      int int0 = 98;
      discretize0.getCutPoints(0);
      discretize0.findNumBinsTipText();
      discretize0.getOptions();
      discretize0.getCapabilities();
      Discretize discretize1 = new Discretize();
      discretize1.invertSelectionTipText();
      int int1 = (-1012);
      discretize1.getBinRangesString(98);
      // Undeclared exception!
      try { 
        discretize1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3086);
      intArray0[1] = (-3086);
      intArray0[2] = (-3086);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2163.45110869896, intArray0, (-3086));
      binarySparseInstance0.toString((-3086));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray0, (-1065));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.toString((-195225787));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (-2281.79643);
      doubleArray0[3] = (double) (-1065);
      doubleArray0[4] = (double) 6;
      DenseInstance denseInstance0 = new DenseInstance(2163.45110869896, doubleArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "first-last";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-1805);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1805);
      doubleArray0[1] = (double) (-1805);
      doubleArray0[2] = (double) (-1805);
      doubleArray0[3] = (-342.201671628);
      doubleArray0[4] = (double) (-1805);
      discretize0.getAttributeIndices();
      discretize0.setInvertSelection(false);
      discretize0.setFindNumBins(true);
      discretize0.setBins((-1952257859));
      discretize0.getBins();
      discretize0.attributeIndicesTipText();
      discretize0.getBinRangesString((-1245));
      int[] intArray0 = new int[9];
      intArray0[0] = 89;
      intArray0[1] = (-1245);
      intArray0[2] = 1;
      intArray0[3] = (-1952257859);
      intArray0[4] = (-1805);
      intArray0[5] = 1;
      intArray0[6] = (-1952257859);
      intArray0[7] = (-1245);
      intArray0[8] = (-1245);
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize discretize1 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize1.setAttributeIndices("");
      boolean boolean0 = discretize0.getInvertSelection();
      assertEquals((-1952257859), discretize0.getBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.1), intArray0, (-3086));
      binarySparseInstance0.toString((-2033));
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Uj?94J");
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("(");
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[2] = "All";
      stringArray0[3] = "";
      Discretize discretize0 = new Discretize("");
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-3881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2398);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      boolean boolean0 = discretize2.getUseEqualFrequency();
      assertFalse(discretize2.getFindNumBins());
      assertFalse(discretize2.getMakeBinary());
      assertFalse(discretize2.getUseBinNumbers());
      assertEquals(10, discretize2.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[2] = "All";
      stringArray0[3] = "";
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2155.38);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2155.38);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-2155.38);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2155.38);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1212.155981260015;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1212.155981260015;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2155.38);
      doubleArray5[4] = 1212.155981260015;
      doubleArray5[5] = 1212.155981260015;
      doubleArray5[6] = 1212.155981260015;
      doubleArray5[7] = 1212.155981260015;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1);
      Attribute attribute0 = new Attribute("first-last", list2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      attribute0.equalsMsg(list2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      locale0.stripExtensions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("numeric");
      arrayList0.add(locale_LanguageRange0);
      doubleArray0[3] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("XVszN*Q4#c L'J");
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getFindNumBins());
      
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("yt/F5J0D$],0pnZb4", protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("first-last", 0.0);
      linkedList0.add(locale_LanguageRange0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = new Locale("\tUse bin numbers rather than ranges for discretized attributes.");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode0);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("XVszN*Q4#c L'J", list3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("Sets the desired weight of instances per interval for equal-frequency binning.");
      discretize0.binsTipText();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[2] = "All";
      stringArray0[3] = "";
      stringArray0[4] = " cecZcD4~";
      stringArray0[5] = "IAVmf/";
      discretize0.setOptions(stringArray0);
      discretize0.useEqualFrequencyTipText();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.listOptions();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-1805);
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1805);
      doubleArray1[1] = (double) (-1805);
      doubleArray1[2] = (double) (-1805);
      doubleArray1[3] = (-342.201671628);
      doubleArray1[4] = (double) (-1805);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-342.201671628);
      doubleArray2[1] = 1655.152;
      doubleArray2[2] = (double) (-1805);
      doubleArray2[3] = (double) (-1805);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) (-1805);
      doubleArray4[1] = 1655.152;
      doubleArray4[2] = (-342.201671628);
      doubleArray4[3] = (-342.201671628);
      doubleArray4[4] = (double) (-1805);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DefaultCols = "";
      discretize0.globalInfo();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.setFindNumBins(false);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -461
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-392.591);
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1396.4553043374342);
      doubleArray1[5] = 950.44428414;
      doubleArray1[6] = (-1251.28);
      doubleArray1[7] = 2561.6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 2561.6;
      doubleArray2[1] = 950.44428414;
      doubleArray2[2] = (-1396.4553043374342);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1342.650933173);
      doubleArray2[6] = (-1251.28);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2561.6;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 2561.6;
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = (-1251.28);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-392.591);
      doubleArray4[1] = (-1396.4553043374342);
      doubleArray4[2] = 2561.6;
      doubleArray4[3] = (-2996.406415);
      doubleArray4[4] = 950.44428414;
      doubleArray4[5] = 2561.6;
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setUseEqualFrequency(true);
      assertTrue(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(false);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval(977.8346668474626);
      assertEquals(977.8346668474626, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.994178879807307
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("?l@-5^!E{r;I$p");
      discretize0.setBins((-2984));
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?l@-5^!E{r;I$p";
      stringArray0[1] = "?l@-5^!E{r;I$p";
      stringArray0[2] = "?l@-5^!E{r;I$p";
      stringArray0[3] = "?l@-5^!E{r;I$p";
      stringArray0[4] = "?l@-5^!E{r;I$p";
      stringArray0[5] = "?l@-5^!E{r;I$p";
      stringArray0[6] = "?l@-5^!E{r;I$p";
      Discretize.main(stringArray0);
      discretize0.setFindNumBins(false);
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      Discretize discretize1 = new Discretize("?Gigl5/SiBq");
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-1839));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("1(=yOtbN%N?<xO");
      discretize0.m_DefaultCols = "-4751,94,12,1";
      int[] intArray0 = new int[6];
      intArray0[0] = 749;
      intArray0[1] = 111;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = 602;
      intArray0[5] = (-1994091956);
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = false;
      discretize0.toString();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("first-last", list2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize("_^1AeLEC6N:D/ >$s7.");
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1802);
      Discretize discretize0 = new Discretize("\"position\" is date");
      discretize0.getBinRangesString(1269);
      discretize0.getBinRangesString(1826);
      int[] intArray0 = new int[6];
      intArray0[0] = 1826;
      intArray0[2] = 1269;
      intArray0[3] = (-461);
      intArray0[4] = 1269;
      intArray0[5] = (-1802);
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A@+L.w[fG";
      stringArray0[1] = "XVszN*Q4#c L'J";
      stringArray0[2] = "3{Nga+7I!OB22";
      stringArray0[3] = "-4751,94,12,1";
      stringArray0[4] = "P3UG";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.618477407000916
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1);
      Attribute attribute0 = new Attribute("first-last", list2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      attribute0.equalsMsg(list2);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      locale0.stripExtensions();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("numeric");
      arrayList0.add(locale_LanguageRange0);
      doubleArray0[3] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      Discretize discretize0 = new Discretize("((|2;4,2tF#ex&p");
      Discretize discretize1 = new Discretize("XVszN*Q4#c L'J");
      discretize1.getCapabilities();
      String[] stringArray0 = discretize1.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("(");
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      String string1 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", string1);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("48S98.$$MMgRw:g", protectedProperties0);
      Discretize discretize0 = new Discretize("integer");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setOutputFormat();
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.991776477404904
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2669);
      intArray0[1] = 19;
      intArray0[2] = (-18);
      intArray0[3] = 61;
      intArray0[4] = (-3086);
      intArray0[5] = 2253;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(266.67300398312, intArray0, 2253);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      sparseInstance0.dataset();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize("R5");
      Filter.runFilter(discretize0, (String[]) null);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      
      Discretize discretize2 = new Discretize("Last value of copy (internal format): ");
      discretize2.getCapabilities();
      assertFalse(discretize2.getUseEqualFrequency());
      assertFalse(discretize2.getFindNumBins());
      assertFalse(discretize2.getMakeBinary());
      assertEquals(10, discretize2.getBins());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3086);
      intArray0[1] = (-3086);
      intArray0[2] = (-3086);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2163.45110869896, intArray0, (-3086));
      binarySparseInstance0.toString((-3086));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray0, (-1065));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance2);
      binarySparseInstance3.toString(263);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1862, intArray0, 15);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3086);
      doubleArray0[1] = (double) (-3086);
      doubleArray0[2] = (double) 15;
      SparseInstance sparseInstance4 = new SparseInstance(1670.525, doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance4);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance3);
      Discretize discretize0 = new Discretize("0");
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
