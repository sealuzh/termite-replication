/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:23:39 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.582845732046839
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      theClient0.setMaxConnectionMsg("");
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:46>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getMaxAuthTry();
      theClient0.getTimeoutMsg();
      theClient0.setTrusted(false);
      theClient0.setTimeoutMsg("3}~K");
      theClient0.getClientWriteHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(commandHandler0);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.getServer();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      Data data0 = new Data();
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocketChannel();
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setTimeout(0);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      TheClient theClient1 = new TheClient();
      theClient0.getSocketChannel();
      theClient1.setSocketChannel((SocketChannel) null);
      theClient1.getClientWriteHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getSocket();
      theClient1.getClientData();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.485528191921338
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(false);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.toString();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxAuthTryMsg();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeoutMsg("");
      theClient0.getMaxConnectionMsg();
      ClientEvent clientEvent1 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientData();
      theClient0.getSocketChannel();
      theClient0.getTimeoutMsg();
      theClient0.getServer();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.655227329111928
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry(3);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocketChannel();
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.setTimeout(0);
      theClient0.getTimeout();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      TheClient theClient1 = new TheClient();
      theClient1.getSocketChannel();
      theClient1.getClientWriteHandler();
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient1.getClientEventHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient1.setClientEventHandler(defaultClientEventHandler0);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient1.setClientEvent(clientEvent0);
      TheClient theClient2 = new TheClient();
      theClient2.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      theClient0.getAuthenticator();
      assertEquals(3, theClient0.getMaxAuthTry());
      
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      theClient0.setMaxConnectionMsg("");
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:28>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.322575046183876
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTry(697);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry(697);
      theClient0.setMaxAuthTryMsg("dkFD`Y");
      theClient0.getMaxAuthTry();
      theClient0.setTimeoutMsg("dkFD`Y");
      theClient0.toString();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTry();
      theClient0.getTimeout();
      theClient0.setMaxAuthTryMsg("Error in closeConnection : ");
      theClient0.toString();
      theClient0.getServer();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      assertEquals(697, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.263497813148872
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      QuickServer quickServer0 = new QuickServer("", 0);
      QuickServer quickServer1 = new QuickServer("tYKO,*vXt");
      theClient0.setServer(quickServer1);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      TheClient theClient2 = new TheClient();
      theClient2.getAuthenticator();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-426));
      blockingClientHandler0.getSocket();
      assertEquals("<ClientHandler-Pool#-426-ID:1>", blockingClientHandler0.getName());
      
      TheClient theClient3 = new TheClient();
      theClient3.setSocket((Socket) null);
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      theClient3.setMaxConnectionMsg("tYKO,*vXt");
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient3.toString();
      theClient2.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient4 = new TheClient();
      theClient4.getAuthenticator();
      TheClient theClient5 = new TheClient();
      theClient5.toString();
      theClient0.getServer();
      theClient1.getServer();
      theClient4.getClientBinaryHandler();
      assertTrue(theClient4.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4872576972828044
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.setTrusted(true);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient1.setTimeoutMsg((String) null);
      theClient1.setTimeoutMsg("TC (2igw6");
      theClient1.getClientAuthenticationHandler();
      theClient1.getTimeout();
      theClient0.getClientData();
      TheClient theClient2 = new TheClient();
      theClient2.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient2.toString();
      theClient2.getSocket();
      theClient1.getTrusted();
      TheClient theClient3 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient3.setClientEventHandler(commandHandler0);
      theClient3.setTimeout(0);
      theClient3.getTimeout();
      theClient0.setSocket((Socket) null);
      theClient0.getSocket();
      theClient1.getAuthenticator();
      assertTrue(theClient1.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      MockSocket mockSocket0 = new MockSocket();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getAuthenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTrusted(false);
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getAuthenticator();
      theClient0.setTrusted(false);
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientWriteHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient1.getMaxConnectionMsg();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("\"lk/xabO4(J");
      data0.setLastAsked("");
      theClient0.setClientData(data0);
      theClient0.setMaxAuthTryMsg("q7Q-wWtN");
      theClient0.setMaxAuthTryMsg("2`ek,0VNj,.<fZKf");
      theClient0.getMaxAuthTryMsg();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      Data data0 = new Data();
      data0.setLastAsked("lQ+pYxYu(gq}");
      data0.setLastAsked("Qx*coW2R`~A$s4=");
      TheClient theClient1 = new TheClient();
      theClient1.setClientData(data0);
      theClient0.setTimeoutMsg("");
      theClient0.getClientAuthenticationHandler();
      theClient0.getTimeout();
      theClient1.getClientData();
      theClient0.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.setTimeout(0);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.setSocket((Socket) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTrusted();
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeout(101);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getCommunicationLogging();
      theClient0.getClientExtendedEventHandler();
      assertEquals(101, theClient0.getTimeout());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4872576972828044
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry(3);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout((-3664));
      theClient0.getCommunicationLogging();
      TheClient theClient1 = new TheClient();
      theClient1.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient1.getMaxConnectionMsg();
      theClient1.getAuthenticator();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient1.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getAuthenticator();
      TheClient theClient2 = new TheClient();
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler1);
      TheClient theClient3 = new TheClient();
      theClient3.getClientWriteHandler();
      theClient2.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient3.getClientAuthenticationHandler();
      theClient1.getClientEventHandler();
      theClient2.setClientEventHandler(commandHandler0);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient2.getMaxConnectionMsg();
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      // Undeclared exception!
      try { 
        QuickServer.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      theClient0.setMaxConnectionMsg("!v");
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTrusted(true);
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientWriteHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(commandHandler1);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Error closing Socket/Channel: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient1.toString();
      theClient1.setTimeout((-1897));
      theClient1.getTimeout();
      MockInetAddress.anyLocalAddress();
      int int0 = (-61);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 2346, inetAddress0, 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@654c0ffc
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      Data data0 = new Data();
      theClient0.setClientEvent((ClientEvent) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      theClient0.getClientEvent();
      theClient0.setClientEvent((ClientEvent) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      MockSocket mockSocket0 = new MockSocket();
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.getMaxConnectionMsg();
      theClient0.getAuthenticator();
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.setTrusted(true);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.getClientWriteHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      ClientEvent clientEvent1 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent1);
      theClient1.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(100);
      TheClient theClient1 = new TheClient();
      theClient0.getTimeout();
      SocketChannel socketChannel0 = SocketChannel.open();
      assertEquals(13, socketChannel0.validOps());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1135));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-1135), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      ClientEvent clientEvent1 = ClientEvent.LOST_CON;
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientEvent(clientEvent1);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      ClientEvent clientEvent2 = ClientEvent.MAX_CON_BLOCKING;
      theClient1.setClientEvent(clientEvent0);
      theClient0.getMaxConnectionMsg();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }
}
