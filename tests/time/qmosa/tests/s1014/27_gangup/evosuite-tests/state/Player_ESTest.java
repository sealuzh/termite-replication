/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:53:20 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.id = 0;
      player0.setZ((-1012.68976F));
      player0.setX(0);
      byte[] byteArray0 = player0.pack();
      player0.getIP();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      player0.pack();
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** data is not of proper type!", " ", (-1));
      player1.getName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 5);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals((-1012.68976F), player0.getZ(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(t`X$z$S2S#|IuW");
      Player player1 = new Player(0);
      player1.setJoinOK(player0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      player0.pack();
      Player player2 = new Player(0, "gui.ModuleBrowserDialog$ModuleFilter", (String) null, (-1201));
      player2.getName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1440);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player2.unpack(dataInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(10.0F, player2.getX(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5010693989799213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(t`X$z$S2S#|IuW");
      Player player1 = new Player((-27648));
      player1.setJoinOK(player0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      player1.pack();
      player0.getName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 887);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      player0.isJoinOK(player1, false);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(2449, "Ya+xT", "Ya+xT", 0, 0);
      Party party0 = player0.gangBoss();
      player0.prev = party0;
      party0.add(player0);
      player0.setX(0.0F);
      player0.setMoney(2449);
      player0.id = 0;
      player0.add(party0);
      player0.setDead(565L, true);
      Player player1 = new Player(2449);
      player1.setDead((long) 0);
      player1.remove(party0);
      party0.add(player1);
      player0.getZ();
      player0.isDead();
      player0.setDead(0L);
      player0.setConnected(true);
      player0.setX(0.0F);
      player0.reset(false);
      player0.toString();
      player0.getName();
      int int0 = player0.getStrength();
      assertEquals(2449.0F, player0.getMoney(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.188920110753204
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.id = 0;
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player(0, ";GhQ.X33D7ul>i~", "Player.unpack(): *** WARNING *** data is not of proper type!", 0);
      player1.setJoinOK(player0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      player1.unpack(dataInputStream0);
      player1.gangStrength();
      player1.isJoinOK(player0, false);
      player0.getY();
      byte[] byteArray0 = player0.pack();
      player1.unpack(byteArray0);
      player0.getIP();
      player0.pack();
      System.setCurrentTimeMillis(1107L);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(t`X$z$S2S#|IuW");
      Player player1 = new Player((-27648));
      player1.setJoinOK(player0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".os");
      player1.setMoney((byte)5);
      player0.pack();
      player1.isJoinOK(player0, false);
      player1.pack();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0284083968442363
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-2703));
      Player player1 = new Player((short)4919);
      player0.pack();
      player1.pack();
      Player player2 = new Player((short)4919, (String) null, (String) null, (short)4919);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      player2.add(player0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      player2.gangStrength();
      player1.isJoinOK(player2, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player1.getY();
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player1.getIP();
      player0.reset(true);
      assertEquals(113, player0.getId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.242894687106955
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(10, "eyY!fS(AZ~O+,G/pmP$", "", 2355);
      player0.setZ((-1338.387F));
      player0.setX(5213.0F);
      byte[] byteArray0 = player0.pack();
      player0.getIP();
      player0.pack();
      byte[] byteArray1 = player0.pack();
      Player player1 = new Player(813, "", "eyY!fS(AZ~O+,G/pmP$", 10);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      player0.gangStrength();
      player0.setY((-2104.1929F));
      player0.isJoinOK(player1, true);
      player0.getY();
      player0.pack();
      player0.unpack(byteArray0);
      player1.getIP();
      player0.reset(true);
      assertEquals(5213.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9476730318107442
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.pack();
      player0.getIP();
      player0.pack();
      player0.setY(1826);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.unpack(dataInputStream0);
      player0.gangStrength();
      Player player1 = new Player(1826, "B", "B", 1);
      player0.isJoinOK(player1, false);
      String string0 = null;
      Player player2 = new Player((short)4919, (String) null, (short)4919);
      player1.getY();
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3035514829319883
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(10, "eyY!fS(AZ~O+,G/pmP$", "", 2355);
      player0.setZ((-1338.387F));
      player0.gangStrength();
      player0.pack();
      player0.setZ(2355);
      player0.setDead();
      player0.toString();
      player0.type();
      player0.toString();
      player0.reset(false);
      Player player1 = new Player(12037, "", "k)S7QwRB)", 10, (-1847));
      player0.reset(false);
      player0.isDead();
      player0.getStrength();
      player1.remove(player0);
      player1.getY();
      player1.gangStrength();
      int int0 = player0.type();
      assertEquals(2355.0F, player0.getZ(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.362385208963958
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX((-2189.617F));
      byte[] byteArray0 = player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player((short)4919, ";GhQ.X33D7ul>i~", ":)a KT3", 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      player1.gangStrength();
      player1.isJoinOK(player0, true);
      player0.getY();
      player0.pack();
      player0.unpack(byteArray0);
      player0.getIP();
      player1.reset(false);
      player0.getX();
      player1.getZ();
      int int0 = player0.type();
      assertEquals((-2189.617F), player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      int int0 = Packable.ACTION;
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) player0;
      Player player1 = new Player(1826);
      // Undeclared exception!
      try { 
        player1.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.027215791000468
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player((-311), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "3>", (-311), (-881));
      player0.getSubparty();
      player0.getStrength();
      player0.gangStrength();
      player0.setDead();
      player0.getStrength();
      player0.getStrength();
      player0.getStrength();
      PipedInputStream pipedInputStream0 = new PipedInputStream(813);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      pipedInputStream0.mark((-3794));
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player0.unpack(dataInputStream0);
      player0.isDead();
      player0.unpack(dataInputStream0);
      player0.getTimeOfDeath();
      player0.getName();
      player0.getX();
      int int0 = player0.getStrength();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals((-881), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(2841, "Player", (-489));
      player0.setDead();
      player0.remove(player0);
      player0.isDead();
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[3];
      player0.head = null;
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-43);
      player0.unpack(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      String string0 = player0.getName();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player-1", string0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.getIP();
      int int0 = 1826;
      int int1 = (-1);
      player0.pack();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.759673390745343
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player((-1), "Player.unpack(): *** WARNING *** data is not of proper type!", "gui.ModuleBrowserDialog$ModuleFilter", 1826);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      int int0 = Packable.PLAYER;
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream1, 795);
      DataInputStream dataInputStream2 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream2);
      Player player2 = new Player((short)4919, (String) null, "gui.ModuleBrowserDialog$ModuleFilter", 5119, 5119);
      player2.gangStrength();
      // Undeclared exception!
      try { 
        player2.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3039214422364647
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      byte[] byteArray0 = player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player(1826, "Player.unpack(): *** WARNING *** data is not of proper type!", ";GhQ.X33D7ul>i~", (-1));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      player1.gangStrength();
      player0.isJoinOK(player1, true);
      player0.getY();
      player0.pack();
      player1.unpack(byteArray0);
      player1.getIP();
      player1.reset(true);
      player1.getX();
      float float0 = player1.getZ();
      assertEquals(0, player1.getId());
      assertEquals((-1012.68976F), float0, 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player(2006, (String) null, "", 1826, 594);
      String string0 = player1.getIP();
      assertNull(string0);
      
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(0, player0.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(1826, player1.getPictureId());
      assertEquals(594, player1.getStrength());
      assertFalse(boolean0);
      assertEquals("Player-1", player0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.126862207664039
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      player0.next = party0;
      party0.prev = player0.next;
      player0.setMoney((-3713.4397F));
      player0.setConnected(false);
      player0.id = (-1531);
      player0.getStrength();
      player0.getStrength();
      player0.setMoney(0.0F);
      Player player1 = new Player((-734), "", "hr&$.Igq", (-1), (-2789));
      player1.setDead();
      player1.setDead((long) (-734), true);
      player0.setJoinOK(player1, false);
      player0.isConnected();
      player0.setDead((-86L));
      assertEquals((-86L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-103);
      Player player0 = new Player((-103), "b@ubfSuX", (-103));
      player0.setDead();
      player0.getPictureId();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-99);
      // Undeclared exception!
      try { 
        dataInputStream0.readFully(byteArray0, (int) (byte) (-49), (-1152));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2910505703761297
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.pack();
      player0.getIP();
      player0.pack();
      player0.getIP();
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player((short)4919, "0.0.0.0", "Player.unpack(): *** WARNING *** data is not of proper type!", 0);
      player1.setJoinOK(player0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      player1.gangStrength();
      player0.isJoinOK(player1, false);
      player0.getY();
      player0.pack();
      player0.unpack(byteArray0);
      player0.getIP();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-86);
      player0.unpack(byteArray1);
      assertEquals((-1012.68976F), player0.getZ(), 0.01F);
      
      int int0 = player1.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(0);
      player0.pack();
      Player player1 = new Player(296, "XL@Kp6vyv%@\":8OZv", "y}[nB\"@~[7^7qtHNF}8", 2452);
      boolean boolean0 = true;
      Player player2 = null;
      // Undeclared exception!
      try { 
        player1.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(1746, "h>[rCP|AC{|$Wcl,", 0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.getIP();
      Player player1 = new Player((-22478), "Player.unpack(): *** WARNING *** data is not of proper type!", ";GhQ.X33D7ul>i~", (-22478));
      player1.setConnected(true);
      int int0 = Packable.ACTION;
      Player player2 = new Player((-625), "7R\"UO9t\"b^qKbY", (-762));
      Player player3 = new Player((short)4919, ".*[.]class$", ";GhQ.X33D7ul>i~", (-22478), (-1275));
      player2.isJoinOK(player3, false);
      player3.getY();
      player0.pack();
      assertEquals((-1012.68976F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Player player0 = new Player(2147340491, "", 4182);
      Party party0 = new Party((-1708));
      player0.next = party0;
      player0.getName();
      player0.getName();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(4182, player0.getPictureId());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2627848006711537
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(95);
      player0.setMoney(95);
      player0.setY(2277.0F);
      player0.getMoney();
      player0.getX();
      player0.setDead((-1L), true);
      player0.setX(0.1F);
      player0.setZ(2761.921F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player0.setX(1152.2F);
      player0.setY(1.0F);
      player0.setMoney((-1L));
      player0.setMoney(1.0F);
      Player player1 = new Player(10, "", "yCwIhck71j", (short)4919, 455);
      player1.pack();
      player0.type();
      player1.pack();
      Player player2 = new Player();
      player0.isJoinOK(player2, true);
      assertEquals(1.0F, player0.getY(), 0.01F);
      
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      byte[] byteArray0 = player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player(1826, "Player.unpack(): *** WARNING *** data is not of proper type!", ";GhQ.X33D7ul>i~", (-1));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.setJoinOK(player1, true);
      player0.setY(2005.6F);
      player0.getY();
      player0.setDead(0L, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals((-1012.68976F), player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(2841, "Player", (-489));
      boolean boolean0 = player0.isDead();
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-489), player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "{%Bv{-]*r", "{%Bv{-]*r", (-1846), 0);
      player0.gangStrength();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack(dataOutputStream0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream("ye('-U$7%HY", "{%Bv{-]*r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {%Bv{-]*r
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-2703));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N@4&0+fJN3[EV0= r");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3826794502038573
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(10);
      player0.setMoney((-946));
      player0.setY(1152.2F);
      player0.getMoney();
      player0.getX();
      player0.setDead((-1815L), true);
      player0.setX(10);
      player0.setZ(1.0F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player0.setX(15.2F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player0.setY(0.0F);
      player0.setMoney(15.2F);
      player0.setMoney((-1815L));
      byte[] byteArray0 = player0.pack();
      player0.type();
      Player player1 = new Player();
      Player player2 = new Player((-718), "R]zoKzH", "", (-946));
      player0.getY();
      player1.pack();
      player0.unpack(byteArray0);
      player1.getIP();
      player2.unpack(byteArray0);
      assertEquals(1.0F, player0.getZ(), 0.01F);
      assertEquals(10, player0.getId());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1013448627418367
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(2, "eyY!fS(AZ~O+,G/pmP$", 2);
      player0.isConnected();
      player0.gangStrength();
      player0.pack();
      player0.setDead(0L);
      player0.setDead((long) 2);
      player0.getIP();
      player0.type();
      player0.getPictureId();
      player0.getStrength();
      player0.getIP();
      player0.getY();
      float float0 = player0.getMoney();
      assertEquals(2L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(27, "{%Bv{-]*r", "{%Bv{-]*r", (-5039), (-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("{%Bv{-]*r");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "ye('-U$7%HY";
      objectArray0[1] = (Object) "{%Bv{-]*r";
      objectArray0[2] = (Object) "ye('-U$7%HY";
      objectArray0[3] = (Object) "ye('-U$7%HY";
      objectArray0[4] = (Object) "ye('-U$7%HY";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "{%Bv{-]*r";
      objectArray0[7] = (Object) "ye('-U$7%HY";
      int int0 = player0.getStrength();
      assertEquals((-5039), player0.getPictureId());
      assertEquals((-1), int0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "{%Bv{-]*r";
      Player player0 = new Player((-5039), "{%Bv{-]*r", (-1732));
      player0.gangStrength();
      String string1 = "ye('-U$7%HY";
      String string2 = "";
      String string3 = "23OjVspai";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "23OjVspai");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3630015417836807
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player(2, "", "", 0, (-491));
      player1.getIP();
      player1.pack();
      Player player2 = new Player(0, "", "Player.unpack(): *** WARNING *** data is not of proper type!", 813);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      player1.unpack(dataInputStream0);
      player2.gangStrength();
      player1.isJoinOK(player2, true);
      player1.getY();
      player2.pack();
      player0.unpack(byteArray0);
      player0.getIP();
      assertEquals((-1012.68976F), player0.getZ(), 0.01F);
      
      player1.reset(true);
      player1.getX();
      float float0 = player1.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(4, "%]8fRx^sKwB0", "%]8fRx^sKwB0", 5);
      player0.getY();
      Player player1 = new Player(5, "", "%]8fRx^sKwB0", (-2088));
      player1.setJoinOK(player0, false);
      player1.next = (Party) player0;
      assertEquals(0L, player1.getTimeOfDeath());
      
      player1.setDead();
      player0.isJoinOK(player1, false);
      player1.getName();
      System.setCurrentTimeMillis((short)4919);
      player1.pack();
      player0.pack();
      player0.type();
      player1.getStrength();
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1731248118492754
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(4061, "gui.ModuleBrowserDialog$ModuleFilter", "", 0, 1);
      player0.setDead((long) 0);
      player0.getZ();
      player0.setZ(1);
      player0.setDead();
      player0.reset(false);
      player0.isConnected();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      player0.reset(true);
      player0.getTimeOfDeath();
      player0.getPictureId();
      float float0 = player0.getZ();
      assertEquals(1.0F, float0, 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(664, "j@<", "Z|$k5z#?2e:-a#", 664, 664);
      Party party0 = new Party();
      party0.boss = (Party) player0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      party0.next = (Party) player0;
      player0.remove(party0);
      int int0 = player0.getStrength();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(664, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("j@<", player0.getIP());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(664, player0.getPictureId());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setX(0);
      player0.setZ((-1012.68976F));
      player0.setX(0);
      player0.pack();
      player0.getIP();
      player0.pack();
      Player player1 = new Player(1826, "Player.unpack(): *** WARNING *** data is not of proper type!", ";GhQ.X33D7ul>i~", (short)4919);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      player0.isJoinOK(player1, true);
      player1.getY();
      player1.pack();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-82);
      player0.unpack(byteArray0);
      player1.getIP();
      player1.getX();
      float float0 = player0.getZ();
      assertEquals((-1012.68976F), float0, 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(335, "", 335);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)1;
      player0.unpack(byteArray0);
      player0.getPictureId();
      System.setCurrentTimeMillis(335);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(806, "Ft1bl>-VWY@W1FK2", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 806, 806);
      Player player1 = new Player();
      player0.prev = (Party) player1;
      Player player2 = new Player(806, "", "0.0.0.0", 4919, 0);
      player2.setJoinOK(player1, false);
      player0.setJoinOK(player2, false);
      player2.setY(0);
      player2.setX(0.1F);
      player2.setDead((-1L));
      player2.getTimeOfDeath();
      player1.isJoinOK(player2, false);
      assertEquals(0.1F, player2.getX(), 0.01F);
      
      int int0 = player1.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(10);
      player0.setMoney((-946));
      player0.setY(1152.2F);
      player0.getMoney();
      player0.getX();
      player0.setDead(1392409296320L, true);
      player0.setX(10);
      player0.setZ(1.0F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isConnected();
      player0.setX(45.57606F);
      player0.setY(0.0F);
      player0.setMoney(45.57606F);
      player0.setMoney(1392409296320L);
      player0.pack();
      player0.type();
      player0.pack();
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(45.57606F, player0.getX(), 0.01F);
      assertFalse(boolean0);
  }
}
