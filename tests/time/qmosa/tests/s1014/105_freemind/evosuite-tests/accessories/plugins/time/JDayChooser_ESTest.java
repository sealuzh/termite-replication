/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:21:00 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.Color;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.awt.image.MemoryImageSource;
import java.io.FilterOutputStream;
import java.sql.Connection;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import javax.help.ForwardAction;
import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemChoose;
import org.apache.xalan.templates.ElemSort;
import org.apache.xerces.impl.dtd.DTDGrammar;
import org.apache.xerces.impl.dtd.XMLDTDDescription;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.grammars.Grammar;
import org.apache.xerces.xni.grammars.XMLGrammarDescription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setWeekOfYearVisible(true);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2647190609463843
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      jDayChooser0.setDecorationBackgroundVisible(true);
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMaxDayCharacters();
      ActionEvent actionEvent0 = new ActionEvent(pDFInfo0, 3103, "Windows", 0);
      jDayChooser0.setYear(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1609349675619263
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "28");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      int int0 = 16;
      jDayChooser0.setMaxDayCharacters(16);
      int int1 = 293;
      char char0 = 's';
      ElemSort elemSort0 = new ElemSort();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("28", "Metal");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDebugGraphicsOptions(35);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.167784642256785
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction("day");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(true);
      forwardAction0.setEnabled(false);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 36, "day", 36);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2696934452389916
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockInstant.ofEpochSecond(2423L);
      jDayChooser0.isDoubleBuffered();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setEnabled(false);
      forwardAction0.setEnabled(true);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser1.setYear(1115);
      Date date0 = jDayChooser1.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2308802695494605
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Instant instant0 = MockInstant.ofEpochSecond(2423L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.getDaysInMonth();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.drawDays();
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.drawDays();
      Color color0 = Color.magenta;
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      databaseConnectionHook0.getMindMapController();
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PDFInfo pDFInfo0 = new PDFInfo();
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(6);
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(6);
      jDayChooser0.setDecorationBordersVisible(false);
      // Undeclared exception!
      try { 
        MockGregorianCalendar.from((ZonedDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.util.MockGregorianCalendar", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3400301230512093
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      int[] intArray0 = new int[5];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 478, intArray0, 3124, (-925));
      jPopupMenu0.createImage((ImageProducer) memoryImageSource0);
      JMenuItem jMenuItem0 = jMenu0.add((String) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenuItem0, 228, 228, (-925), 3124, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyReleased(menuKeyEvent0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "West";
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.202139577699249
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(false);
      SymbolTable symbolTable0 = new SymbolTable();
      int int0 = 1483;
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(1483);
      XMLGrammarPoolImpl xMLGrammarPoolImpl1 = new XMLGrammarPoolImpl();
      XMLDTDDescription xMLDTDDescription0 = mock(XMLDTDDescription.class, new ViolatedAssumptionAnswer());
      DTDGrammar dTDGrammar0 = new DTDGrammar(symbolTable0, xMLDTDDescription0);
      XMLGrammarDescription xMLGrammarDescription0 = dTDGrammar0.getGrammarDescription();
      xMLGrammarPoolImpl1.retrieveGrammar(xMLGrammarDescription0);
      // Undeclared exception!
      try { 
        xMLGrammarPoolImpl0.putGrammar((Grammar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.util.XMLGrammarPoolImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1701419978689667
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBordersVisible(true);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      pDFDocument0.getInfo();
      Locale locale1 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawWeeks();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 691);
      JTable jTable0 = new JTable(defaultTableModel0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 1.0);
      defaultCaret0.setFrameFromCenter((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1019, 1, 0, 1019, 0);
      jDayChooser0.today = (Calendar) mockGregorianCalendar0;
      jDayChooser0.getSelectedDay();
      Locale locale0 = null;
      DateFormatSymbols dateFormatSymbols0 = null;
      try {
        dateFormatSymbols0 = new DateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.isFocusable();
      jMonthChooser0.getAccessibleContext();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.day = (-509);
      jDayChooser0.getWeekdayForeground();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.128665186009052
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.doLayout();
      jDayChooser0.setDay(756);
      String string0 = "OnceForAllNodes";
      String string1 = "Center";
      jDayChooser0.setToolTipText("Center");
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1237113342757077
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = null;
      jDayChooser0.setForeground((Color) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth((-3426));
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.234361354207729
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Instant instant0 = MockInstant.ofEpochSecond(2423L);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(false);
      ForwardAction forwardAction1 = new ForwardAction(instant0);
      forwardAction1.setEnabled(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.initDecorations();
      Color color0 = Color.yellow;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2310531972148353
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.init();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1701099558298114
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = true;
      jDayChooser0.setDecorationBordersVisible(true);
      int int0 = 238;
      jDayChooser0.setMonth(238);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2317318244775546
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "28");
      JDayChooser jDayChooser0 = new JDayChooser();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) treeSet0, locale_FilteringMode0);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBordersVisible(true);
      PDFDocument pDFDocument0 = new PDFDocument("28");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser1.setDecorationBackgroundVisible(false);
      jDayChooser1.getMaxDayCharacters();
      jDayChooser1.init();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.240161993746947
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners("TX^n");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-852), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.focusGained(focusEvent0);
      int int0 = 2333;
      long long0 = (-817L);
      int int1 = 502;
      char char0 = 'b';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2683193223058558
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.doLayout();
      jDayChooser0.setDay(2647);
      jDayChooser0.setToolTipText("OnceForAllNodes");
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.169980761415707
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.PRC;
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.isDecorationBackgroundVisible();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, byteArray0, 10, true, (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      JDayChooser jDayChooser0 = new JDayChooser();
      ForwardAction forwardAction0 = new ForwardAction("org.apache.batik.css.parser.CSSLexicalUnit$SimpleLexicalUnit");
      jDayChooser0.addMouseListener(forwardAction0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1609223925836183
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PDFInfo pDFInfo0 = new PDFInfo();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMaxDayCharacters();
      int int0 = 3103;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Connection connection0 = null;
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2646491414703145
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Instant instant0 = MockInstant.ofEpochSecond(2423L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, filterOutputStream0, 160, 160);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getMaxDayCharacters();
      ActionEvent actionEvent0 = new ActionEvent(mockFileOutputStream0, 3074, "day", 160);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileOutputStream cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
