/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:18:50 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-128));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.846353960365318
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rKJ#:O73SbIGh");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.star();
      xPathLexer0.consume(95);
      xPathLexer1.setXPath("rKJ#:O73SbIGh");
      xPathLexer0.consume(95);
      xPathLexer1.pipe();
      xPathLexer1.number();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierStartChar(')');
      xPathLexer1.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath(">r]T/n");
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.at();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5919033782649104
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.plus();
      xPathLexer1.comma();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.comma();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.equals();
      xPathLexer2.colon();
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer2.or();
      xPathLexer3.setXPath("");
      xPathLexer2.rightParen();
      xPathLexer2.nextToken();
      xPathLexer0.consume(5);
      assertEquals("cN5T!", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6540300961573513
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      xPathLexer0.comma();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.equals();
      xPathLexer1.colon();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer2.nextToken();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.isIdentifierChar('B');
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8991889721963937
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("Q", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token3 = xPathLexer1.minus();
      assertEquals("6", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token4 = xPathLexer2.nextToken();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer2.notEquals();
      Token token5 = xPathLexer2.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("59", token6.getTokenText());
      
      xPathLexer0.or();
      xPathLexer2.plus();
      Token token7 = xPathLexer2.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals("+", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.or();
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      xPathLexer0.leftParen();
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar(')');
      assertFalse(boolean0);
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(13, int0);
      
      Token token13 = xPathLexer3.dots();
      assertEquals(13, token13.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9690422503834526
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rKJ#:O73SbIGh");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("#:", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume(95);
      xPathLexer1.setXPath("rKJ#:O73SbIGh");
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer1.slashes();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("KJ", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      Token token6 = xPathLexer3.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer2.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.748344306542255
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("P", token2.getTokenText());
      
      xPathLexer0.consume(108);
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("7", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9707993946664968
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      xPathLexer0.leftBracket();
      String string0 = token1.toString();
      assertEquals("[ (21) ([)", string0);
      
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token2);
      token2.toString();
      String string1 = token0.toString();
      assertEquals("[ (15) (E7)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (19) (H*)", string2);
      
      Token token3 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.literal();
      xPathLexer0.slashes();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.dots();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(15, int0);
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('V');
      assertTrue(boolean0);
      
      xPathLexer0.consume();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.setXPath("[ (15) (E7)");
      Token token10 = xPathLexer0.rightParen();
      assertEquals("[", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(1, token11.getTokenType());
      assertEquals("(", token11.getTokenText());
      
      xPathLexer0.consume(0);
      xPathLexer0.equals();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals("5", token12.getTokenText());
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8412195181081015
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      xPathLexer0.leftBracket();
      token0.toString();
      token1.toString();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token2);
      token0.toString();
      token2.toString();
      Token token3 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("[ (21) ([)");
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer1.isIdentifierChar('m');
      xPathLexer1.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer1.at();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) (E7)");
      Token token4 = xPathLexer2.or();
      assertNull(token4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.852171084222673
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rKJ#:O73SbIGh");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("K", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("#:", token3.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(')');
      assertFalse(boolean0);
      
      xPathLexer0.endPosition();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7253513821241655
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume(108);
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("Z V-0^6$_O=>EV.[");
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("cN5T!");
      xPathLexer1.nextToken();
      xPathLexer1.consume((-3695));
      // Undeclared exception!
      try { 
        xPathLexer1.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.048114888069923
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("!", token2.getTokenText());
      
      xPathLexer0.consume(108);
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.setXPath("Z V-0^6$_O=>EV.[");
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Z V-0^6$_O=>EV.[", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8201146513478164
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5492535174310749
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getXPath();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-1));
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.setXPath("E7[PH*d`G'");
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.consume((-3695));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2576773796812666
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (11) (.)", string0);
      
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("5;x'&S=");
      Token token2 = xPathLexer0.rightParen();
      assertEquals("5", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(";x'&S=", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-104));
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals(";", token5.getTokenText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6828073779433446
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.slashes();
      token1.toString();
      token2.toString();
      Token token3 = xPathLexer0.doubleColon();
      token3.toString();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer0.rightBracket();
      xPathLexer1.consume();
      xPathLexer1.endPosition();
      xPathLexer0.leftParen();
      xPathLexer1.isIdentifierChar('z');
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer1.number();
      Token token5 = xPathLexer1.or();
      assertNull(token5);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.993157821629254
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("6", token0.getTokenText());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q59zh", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("(X", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("Z", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token5 = xPathLexer0.at();
      assertEquals("6", token5.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("h", token8.getTokenText());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.848832728162484
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("mX");
      xPathLexer1.setXPath("kE%gL];f");
      xPathLexer1.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("kE", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.number();
      Token token2 = xPathLexer2.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token3 = xPathLexer3.pipe();
      assertEquals(")", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer3.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0958195843048477
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.at();
      xPathLexer0.literal();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.endPosition();
      xPathLexer1.plus();
      xPathLexer1.not();
      xPathLexer0.operatorName();
      xPathLexer1.slashes();
      Token token1 = xPathLexer1.or();
      assertNull(token1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.773635037799564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      String string1 = token0.toString();
      assertEquals("[ (15) (E7)", string1);
      
      Token token3 = xPathLexer0.notEquals();
      String string2 = token3.toString();
      assertEquals("[ (22) (H*)", string2);
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setPreviousToken(token1);
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.at();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      xPathLexer1.at();
      xPathLexer1.getXPath();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.872843288498857
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rKJ#:O73SbIGh");
      Token token0 = xPathLexer0.minus();
      assertEquals("r", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.getPreviousToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("KJ", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("%");
      Token token11 = xPathLexer2.comma();
      assertEquals("", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6964775043304403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(61);
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("UP @_E\"'-~UTMs00B=:");
      xPathLexer0.consume((-218));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1388871776528378
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifier();
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-16));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.033629566405096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer1.consume(114);
      XPathLexer xPathLexer2 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer2.consume((-1082));
      // Undeclared exception!
      try { 
        xPathLexer2.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9976598442930602
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("6", token0.getTokenText());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q59zh", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("(X", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("Z", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.slashes();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("59", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.slashes();
      assertEquals("z", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("6", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(5, token10.getTokenType());
      assertEquals("+", token10.getTokenText());
      
      xPathLexer1.consume(104);
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("Q", token11.getTokenText());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3207292564816697
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.equals();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('j');
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1560307241666274
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("o", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.Token", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals("e", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals("r", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8300384332055617
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("we", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("e", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.consume(24);
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7752279254419323
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("rKJ#:O73SbIGh");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("r", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("K", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("J", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.and();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("O7", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.plus();
      assertEquals("3", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("S", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("b", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.isIdentifierStartChar(')');
      xPathLexer0.endPosition();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6394517991806774
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      token2.toString();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("'", token8.getTokenText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.176802984043909
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      assertEquals("OP", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.897390279703144
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("5", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("T", token2.getTokenText());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals(23, token9.getTokenType());
      assertEquals("!", token9.getTokenText());
      
      char char0 = xPathLexer0.LA(46);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.352546021381059
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Q59zh", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("(X", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      Token token5 = xPathLexer0.at();
      assertEquals("6", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("Q", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("5", token9.getTokenText());
      
      Token token10 = xPathLexer0.minus();
      assertEquals("9", token10.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.slashes();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.dots();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(18, int0);
      
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.comma();
      Token token14 = xPathLexer0.identifier();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('V');
      xPathLexer0.consume();
      Token token16 = xPathLexer0.slashes();
      assertEquals(11, token16.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token17 = xPathLexer0.number();
      assertEquals(30, token17.getTokenType());
      
      Token token18 = xPathLexer0.plus();
      assertEquals(5, token18.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1398611549364492
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume(108);
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar(':');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.consume();
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer2.getPreviousToken();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8895157715515625
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("cN5T", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.plus();
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer1.dots();
      assertEquals("m.", token3.getTokenText());
      assertEquals(14, token3.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.rightBracket();
      Token token4 = xPathLexer0.slashes();
      assertEquals("!", token4.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("cN5T!");
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      Token token6 = xPathLexer3.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer3.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token9 = xPathLexer2.rightBracket();
      assertEquals("N", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1675096433286036
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E7", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      String string0 = token1.toString();
      assertEquals("[ (21) ([)", string0);
      
      Token token2 = xPathLexer0.doubleColon();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.dots();
      String string1 = token3.toString();
      assertEquals("[ (13) (*)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (19) (PH)", string2);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token4);
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.mod();
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("d", token6.getTokenText());
      
      xPathLexer1.getXPath();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer1.and();
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertNull(token12);
      
      xPathLexer0.operatorName();
      Token token13 = xPathLexer0.not();
      assertEquals("`", token13.getTokenText());
      assertEquals(23, token13.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0325736172538162
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.currentPosition();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.consume((-1358));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0557535733654073
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.consume();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer2.setXPath("6+Q59zh(X)Z>[");
      boolean boolean0 = xPathLexer2.isIdentifierChar('e');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.773742470821789
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (P)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (15) (E7)", string1);
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("G", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.646881819926839
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.dots();
      assertEquals(14, token0.getTokenType());
      assertEquals("s.", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.slashes();
      token2.toString();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (11) (j)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("2", token4.getTokenText());
      
      xPathLexer0.consume();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("!", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.minus();
      assertEquals("j", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.consume();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.getPreviousToken();
      assertEquals("I", token12.getTokenText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7736061214401335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("P", token2.getTokenText());
      
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      String string0 = token0.toString();
      assertEquals("[ (15) (E7)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (21) ([)", string1);
      
      Token token3 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("H", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.at();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("d", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("G", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("'", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "com.werken.saxpath.Token";
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6949814953448925
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.and();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5643774221066924
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (E7)", string0);
      
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.slashes();
      String string1 = token1.toString();
      assertEquals("[ (5) ([)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (11) (P)", string2);
      
      Token token3 = xPathLexer0.doubleColon();
      token3.toString();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.setPreviousToken(token3);
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer1.consume();
      xPathLexer1.endPosition();
      xPathLexer1.setXPath("");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals("`", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4944374625571326
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('*');
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.421833072011118
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1));
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.consume((-1));
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.consume();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("");
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer0.leftParen();
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.hasMoreChars();
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.444319044609462
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(" (", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1195203233661064
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.consume(1735);
      xPathLexer0.setXPath("6+Q59zh(X)Z>[");
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.at();
      xPathLexer0.getXPath();
      xPathLexer1.number();
      xPathLexer1.minus();
      xPathLexer0.at();
      xPathLexer1.and();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      Token token1 = xPathLexer1.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.095453706331484
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.equals();
      assertEquals("{", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("mQ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("(5", token2.getTokenText());
      
      xPathLexer0.consume(21);
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.and();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("O", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer1.or();
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      Token token10 = xPathLexer3.rightParen();
      assertEquals("O", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.779469042749188
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M(FkHQx*coW");
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.102749883203411
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals("m", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(31, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8700761883125379
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.consume(21);
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.and();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5812155340141354
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.and();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.829181317929824
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5848027046530766
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("P", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (21) ([)", string0);
      
      Token token3 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token3);
      String string1 = token0.toString();
      assertEquals("[ (15) (E7)", string1);
      assertEquals("E7", token0.getTokenText());
      
      String string2 = token3.toString();
      assertEquals("[ (19) (H*)", string2);
      
      Token token4 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token4);
      assertEquals("d", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.at();
      assertEquals("`", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("G", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("'", token7.getTokenText());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token10);
      assertEquals(32, token10.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8599481574305257
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7044346976367737
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cN5T!");
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("cN5T!", xPathLexer0.getXPath());
  }
}
