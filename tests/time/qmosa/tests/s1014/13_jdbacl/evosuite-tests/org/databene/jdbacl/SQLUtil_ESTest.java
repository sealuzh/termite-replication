/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:19:38 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.CDCDataValueFactory;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.SQLDecimal;
import org.apache.derby.iapi.types.SQLTimestamp;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Character character0 = new Character('r');
      SQLUtil.renderValue(character0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k%X9Z$gh04Fm&E");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9526752070438513
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      System.setCurrentTimeMillis(2884L);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("1>.]f+Mp,Rp>v23");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("U $77e5?x", false);
      assertEquals("U $ 77e5 ? x", string0);
      
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
      
      SQLUtil.isQuery("]");
      SQLUtil.isDML("GVb.4~rHs");
      boolean boolean1 = SQLUtil.isQuery("1>.]f+Mp,Rp>v23");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "SYSCS_SET_STATISTICS_TIMING");
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      VersionNumber.valueOf("SYSCS_SET_STATISTICS_TIMING");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SYSCS_SET_STATISTICS_TIMING", ")@6QoVa&", versionNumber0);
      Vector<Object> vector1 = new Vector<Object>();
      VersionNumber versionNumber1 = new VersionNumber(vector1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")@6QoVa&";
      stringArray0[1] = ")@6QoVa&";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = ")@6QoVa&";
      stringArray0[5] = "\"6\"<`B";
      stringArray0[6] = "SYSCS_SET_STATISTICS_TIMING";
      SQLUtil.join("Xalan", (String) null, stringArray0, ")@6QoVa&", stringArray0[3], stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(",(~7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ,(~7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.507544608894293
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-670L));
      SQLUtil.mutatesDataOrStructure("create materialized view");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.normalize("vf1K4i#l|", false);
      SQLUtil.normalize("vf1K4i#l|", true);
      SQLUtil.normalize("(:ZMU)", false);
      SQLUtil.isQuery("AhIHk'-hhT:#2jz|x");
      SQLUtil.normalize("create materialized view", true);
      SQLUtil.isQuery(")@6QoVa&");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("drop materialized view");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("~ADA", "Ts/iSPa8?.!keW>Y", versionNumber0);
      defaultDatabase0.getTable("LG(a:f=gu<g?Nbe", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "1D!L) 3Mag*j";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SYSCS_SET_STATISTICS_TIMING", ")@6QoVa&", versionNumber0);
      Vector<Object> vector1 = new Vector<Object>();
      VersionNumber versionNumber1 = new VersionNumber(vector1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")@6QoVa&";
      stringArray0[1] = ")@6QoVa&";
      stringArray0[2] = ")@6QoVa&";
      stringArray0[3] = null;
      stringArray0[4] = ")@6QoVa&";
      stringArray0[5] = "\"6\"<`B";
      stringArray0[6] = "SYSCS_SET_STATISTICS_TIMING";
      String string0 = SQLUtil.join("Xalan", (String) null, stringArray0, ")@6QoVa&", stringArray0[3], stringArray0);
      assertEquals("Xalan join )@6QoVa& as null on null.)@6QoVa& = null.)@6QoVa& and null.)@6QoVa& = null.)@6QoVa& and null.)@6QoVa& = null.)@6QoVa& and null.null = null.null and null.)@6QoVa& = null.)@6QoVa& and null.\"6\"<`B = null.\"6\"<`B and null.SYSCS_SET_STATISTICS_TIMING = null.SYSCS_SET_STATISTICS_TIMING", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(731, "create materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UNIQUE ", (DBTable) null, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("UNIQUE  CREATE MATERIALIZED VIEW(2) NULL", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7753618116423893
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.isQuery("KvH[<w,-*y1");
      SQLUtil.mutatesDataOrStructure("create materialized view");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create materialized view";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("KvH[<w,-*y1", true);
      SQLUtil.normalize("KvH[<w,-*y1", false);
      SQLUtil.leftJoin("KvH[<w,-*y1", stringArray0, "KvH [ < w, - * y1", "T^p5!<Jfkb;sMW8^f9Q", stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1425766326138005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      boolean boolean0 = SQLUtil.isDML(")@6QoVa&");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      Boolean boolean2 = new Boolean(false);
      SQLUtil.normalize("insertMode", false);
      SQLUtil.normalize("insertMode", (boolean) boolean2);
      SQLUtil.isQuery("Requested CopyOut but got {0}");
      String string0 = SQLUtil.normalize("I`X5)Qe1lQ)[E702H7M", true);
      assertEquals("I ` X5) Qe1lQ) [ E702H7M", string0);
      
      boolean boolean3 = SQLUtil.isQuery("k gsj~Y~9h>aStp");
      assertFalse(boolean3);
      
      SQLUtil.isDML("QM0x;hCwgfz:lG2");
      DBSchema dBSchema0 = new DBSchema("Requested CopyOut but got {0}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" DEFAULT ", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")@6QoVa&", defaultDBTable0, (-10), "7v&");
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1J35", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (create materialized view, , , , , , , , )", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = SQLUtil.isQuery("select into");
      boolean boolean1 = SQLUtil.isDML("Ip%7XW1Y]&n!I/");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderValue("selectcreate unique index");
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("selectcreate unique index", true, "'selectcreate unique index'", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.327732405703302
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.isQuery("b%");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure("wj");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SYSCS_SET_STATISTICS_TIMING";
      stringArray0[1] = "x'81]g_(";
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5936287884852458
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      SQLUtil.isDML(")@6QoVa&");
      System.setCurrentTimeMillis((-670L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.normalize("vf1K4i#l|", false);
      String string0 = SQLUtil.normalize("vf1K4i#l|", false);
      assertEquals("vf1K4i # l |", string0);
      
      SQLUtil.isQuery("l'");
      String string1 = SQLUtil.normalize("fu!/;kin.", true);
      assertEquals("fu ! / ; kin.", string1);
      
      SQLUtil.isQuery("create materialized view");
      boolean boolean1 = SQLUtil.isDML("GENERATED ALWAYS AS ( ");
      boolean boolean2 = SQLUtil.isQuery("vf1K4i#l|");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.292221450975955
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(")@6QoVa&", compositeDBObject0);
      tableContainer0.getTable(")@6QoVa&");
      SQLUtil.mutatesDataOrStructure("drop index");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "x'81]g_(";
      stringArray0[1] = "wj";
      stringArray0[2] = "x'81]g_(";
      stringArray0[3] = "x'81]g_(";
      stringArray0[4] = "x'81]g_(";
      stringArray0[5] = "x!<";
      stringArray0[6] = "wj";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.substituteMarkers("x'81]g_(", "alter materialized viewwd0[a 2'2-5uih7<zny", integer0);
      SQLUtil.isDDL("create unique index+cexp&){*");
      System.setCurrentTimeMillis(882L);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.310230662768786
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      SQLUtil.isDML(")@j|oVa");
      SQLUtil.mutatesDataOrStructure("create materialized view");
      SQLUtil.mutatesDataOrStructure("create materialized view");
      SQLUtil.isDML("insertMode");
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure("], ");
      DBDataType.getInstance(1859, "create materialized view");
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>(1859, 1859);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) constraintDescriptorList0, (Collection<String>) constraintDescriptorList0);
      VersionNumber versionNumber0 = new VersionNumber(vector0, list0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      stringBuilder1.deleteCharAt(0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemUtilSchemaDescriptor();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2644-07ec-000000134f30");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SQLJ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSCAT", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SYSCAT", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("NULLID", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2642-07ec-000000134f30", dBTable0, 40, "alter index,");
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      StringBuilder stringBuilder3 = new StringBuilder((CharSequence) "SYSCS_DIAG");
      stringBuilder3.insert(0, true);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("ruek%X9Z$gh04Fm&Efalse0ALTER INDEX,", stringBuilder2.toString());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (SQLJ)", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8260795243471644
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.isQuery(" type:");
      SQLUtil.mutatesDataOrStructure(" type:");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("insertMode", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("qxp=E");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized viewtruncateqm0x;hcwgfz:lg2";
      stringArray0[1] = "create materialized viewtruncateqm0x;hcwgfz:lg2";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized viewtruncateqm0x;hcwgfz:lg2", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputText rowOutputText0 = new RowOutputText("org.h2.result.LocalResult", " type:", "create table ", true, "create materialized viewtruncateqm0x;hcwgfz:lg2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("create materialized viewtruncateqm0x;hcwgfz:lg2", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9711534898828376
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = 'x';
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[4] = (byte)58;
      System.setCurrentTimeMillis(4539L);
      SQLUtil.mutatesDataOrStructure("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&:?8']5]t+");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "bt;7[_@{U9H57K.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&:?8']5]t+", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName("[Q@w");
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("updategenerated always as (", stringBuilder1);
      assertEquals("updategenerated always as (", stringBuilder1.toString());
      assertEquals("updategenerated always as (", stringBuilder0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9190840720300417
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(")@6QoVa&");
      SQLUtil.isDML(")@6QoVa&");
      System.setCurrentTimeMillis((-670L));
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.normalize("vf1K4i#l|", false);
      String string0 = SQLUtil.normalize("vf1K4i#l|", false);
      assertEquals("vf1K4i # l |", string0);
      
      SQLUtil.isQuery("l'");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(")@6QoVa&", false, "G5LT.XeGjj#FFS", "insertMode");
      Character.valueOf('K');
      boolean boolean2 = SQLUtil.isProcedureCall("create materialized view");
      boolean boolean3 = SQLUtil.isQuery("vf1K4i # l |");
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = SQLUtil.isDML("create materialized view");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectcreate unique index";
      stringArray0[1] = "executeselectivity(";
      stringArray0[2] = "selectselect intoexecselectivity(";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("selectcreate unique index = 'selectcreate unique index' AND executeselectivity( = 'executeselectivity(' AND selectselect intoexecselectivity( = 'selectselect intoexecselectivity('", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(97, "(driver) ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(97);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectenf;9*:", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = new Integer(97);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("selectcreate unique index = 'selectcreate unique index' AND executeselectivity( = 'executeselectivity(' AND selectselect intoexecselectivity( = 'selectselect intoexecselectivity('", defaultDBTable0, dBDataType0, integer2, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType1 = DBDataType.getInstance((-1985273894), "U~q] w");
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("|", defaultDBTable0, dBDataType1, integer0, integer3);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("(driver) ", defaultDBTable0, dBDataType1);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = new Integer(58);
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("^]7v}G1(:gu,`iQ%", defaultDBTable0, dBDataType1, integer4, integer5);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("selectcreate unique index", defaultDBTable0, dBDataType1, integer6, integer1);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      Integer integer7 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("|", defaultDBTable0, dBDataType1, integer2, integer7);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn6;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("selectenf;9*:, selectcreate unique index = 'selectcreate unique index' AND executeselectivity( = 'executeselectivity(' AND selectselect intoexecselectivity( = 'selectselect intoexecselectivity(', |, (driver) , ^]7v}G1(:gu,`iQ%, selectcreate unique index, |", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-4124));
      VersionNumber versionNumber0 = VersionNumber.valueOf("u#");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("LsR'Vuz14PHEr'p", "alter indexexecselectivity(", versionNumber0);
      defaultDatabase0.getTable("LsR'Vuz14PHEr'p", false);
      DBDataType dBDataType0 = DBDataType.getInstance(58, "alter indexexecselectivity(");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pbzL9=qv9YRRa-Z", (DBTable) null, dBDataType0, integer2, integer2);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = new Integer((-1969283626));
      Integer integer5 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter indexexecselectivity(", (DBTable) null, dBDataType0, integer4, integer5);
      Integer integer6 = RawTransaction.ABORT;
      Integer integer7 = new Integer(526);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("^]7v}G1(:gu,`iQ%", (DBTable) null, dBDataType0, integer7, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1815416102034564
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "k%X9Z$gh04Fm&E";
      stringArray0[1] = "LFN7R+'Z9fdb";
      stringArray0[2] = "k%X9Z$gh04Fm&E";
      stringArray0[3] = "k%X9Z$gh04Fm&E";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("hsqls://", false, dBPrimaryKeyConstraint0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT rename PRIMARY KEY (k%X9Z$gh04Fm&E, LFN7R+'Z9fdb, k%X9Z$gh04Fm&E, k%X9Z$gh04Fm&E)", string0);
      
      dBPrimaryKeyConstraint0.addColumnName("}4pjBS");
      dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("LFN7R+'Z9fdb", true, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (k%X9Z$gh04Fm&E, LFN7R+'Z9fdb, k%X9Z$gh04Fm&E, k%X9Z$gh04Fm&E, }4pjBS)", string1);
      
      SQLUtil.parseColumnTypeAndSize("iD5u*y");
      String string2 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.rename", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5686145223341326
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDDL(",");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = ",";
      stringArray0[3] = ",";
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = ",";
      stringArray1[1] = "(,, ,, ,, ,)";
      stringArray1[2] = ",";
      stringArray1[3] = "&Xo!#R>QIa5]/?_fR";
      stringArray1[4] = "9!F59a!";
      stringArray1[6] = "J\"n";
      stringArray1[7] = ",";
      SQLUtil.renderColumnNames(stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexselectivity(", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5$.kgQ3/e V$2@p)<@", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.toString();
      dBPrimaryKeyConstraint0.addColumnName("iD5u*y");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(",", false, dBTable0, stringArray1, defaultDBTable0, stringArray1);
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(,, (,, ,, ,, ,), ,, &Xo!#R>QIa5]/?_fR, 9!F59a!, , J\"n, ,)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.711743918056286
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      SQLUtil.isDML(")@6QoVa&");
      System.setCurrentTimeMillis((-670L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.isDML("create materialized view");
      System.setCurrentTimeMillis(1889L);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("execselectivity(");
      assertNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bt;7[_@{U9H57K.");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (create materialized view, , , , , , , , ) REFERENCES bt;7[_@{U9H57K.(create materialized view, , , , , , , , )", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.removeComments("51|h2y,yRb");
      String string0 = "\\Ko-5wPL!tF";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Ko-5wPL!tF");
      Object object0 = new Object();
      stringBuilder0.append(object0);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(990);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 990
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.472749930762807
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "enF;9*:";
      SQLUtil.isQuery("enF;9*:");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure("enF;9*:");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "x'81]g_(";
      stringArray0[1] = "rowcount remaining=";
      stringArray0[2] = "x'81]g_(";
      stringArray0[3] = "enF;9*:";
      stringArray0[4] = "enF;9*:";
      stringArray0[5] = "enF;9*:";
      stringArray0[6] = "x'81]g_(";
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("V*HFU^Q%$o>Y\"7y_G", (String[]) null, "V*HFU^Q%$o>Y\"7y_G", "Can''t refresh the insert row.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      String string0 = "E#";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table ", (DBTable) null, 17, "create table ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.442470333070849
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDML("j7?hTr@t8h\"jM\"");
      SQLUtil.isDML("j7?hTr@t8h\"jM\"");
      SQLUtil.mutatesDataOrStructure("j7?hTr@t8h\"jM\"");
      SQLUtil.isDML("YSJRkuqU g+O");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1889L);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
      System.setCurrentTimeMillis(1563L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6789624427908336
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-725L));
      SQLUtil.mutatesDataOrStructure("org.databene.jdbacl.SQLUtil");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "x'81]g_(";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Character character0 = new Character('.');
      Character.highSurrogate(3055);
      Character.isSurrogate('.');
      SQLUtil.substituteMarkers("x'81]g_( = 'x'81]g_(' AND org.databene.jdbacl.SQLUtil = 'org.databene.jdbacl.SQLUtil'", "execselectivity(", character0);
      SQLUtil.isDDL("org.databene.jdbacl.SQLUtil");
      System.setCurrentTimeMillis((-725L));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9252789844745495
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isQuery("KvH[<w,-*y1");
      SQLUtil.mutatesDataOrStructure("KvH[<w,-*y1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "KvH[<w,-*y1";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("KvH[<w,-*y1", false);
      SQLUtil.normalize("KvH[<w,-*y1", false);
      SQLUtil.normalize("KvH[<w,-*y1", false);
      SQLUtil.isQuery("KvH [ < w, - * y1");
      SQLUtil.normalize("left", true);
      SQLUtil.isQuery("KvH[<w,-*y1");
      SQLUtil.isDML("=pF`W+@`&]vl");
      SQLUtil.isQuery("left");
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "^";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete)@6qova&");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^";
      stringArray0[1] = "^";
      stringArray0[2] = "^";
      stringArray0[3] = "Ti\"i$E[2#";
      stringArray0[4] = "delete)@6qova&";
      stringArray0[5] = "delete)@6qova&";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = 186;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(186, (long) 186);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 186
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", true, (String) null, "ZK");
      dBCheckConstraint0.equals("j7?hTr@t8h\"jM\"");
      dBCheckConstraint0.equals((Object) null);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("|:+", compositeDBObject0);
      tableContainer0.getSchema();
      DBSequence dBSequence0 = new DBSequence((String) null, (DBSchema) null);
      SQLUtil.typeAndName(dBSequence0);
      SQLUtil.constraintName(dBCheckConstraint0);
      DBDataType.getInstance(514, "drop materialized viewcreate materialized view");
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>(57, 514);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Locale.filterTags((List<Locale.LanguageRange>) constraintDescriptorList0, (Collection<String>) constraintDescriptorList0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string1 = "alter ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)72;
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i8");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "^8Q?", "truncate");
      dBCheckConstraint0.equals("truncate");
      dBCheckConstraint0.equals("^8Q?");
      SQLUtil.typeAndName(dBCheckConstraint0);
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(810, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(")@6QoVa&", compositeDBObject0);
      tableContainer0.getTable(")@6QoVa&");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0469237257272415
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WD0[a 2'2-5UIH7<zny";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[2] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[3] = "WD0[a 2'2-5UIH7<zny";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("WD0[a 2'2-5UIH7<zny");
      assertNull(boolean0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("", false);
      SQLUtil.normalize("SELECT * FROM ", false);
      SQLUtil.isQuery("derby.__rt.serviceDirectory");
      String string0 = SQLUtil.normalize("WD0[a 2'2-5UIH7<zny", false);
      assertEquals("WD0 [ a 2 '2-5UIH7<zny'", string0);
      
      boolean boolean1 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean1);
      
      boolean boolean2 = SQLUtil.isDML("WD0 [ a 2 '2-5UIH7<zny'");
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.450123611586751
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "insertMode";
      SQLUtil.isQuery("insertMode");
      SQLUtil.isDML(")@6QoVa&");
      System.setCurrentTimeMillis((-670L));
      SQLUtil.mutatesDataOrStructure("create materialized view");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.isDML("create materialized view");
      System.setCurrentTimeMillis(1889L);
      SQLUtil.mutatesDataOrStructure("execselectivity(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bt;7[_@{U9H57K.");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5Fu^f", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("select", dBTable0, 46, "executeselectivity(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: executeselectivity(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      stringBuilder1.deleteCharAt(0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemUtilSchemaDescriptor();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2644-07ec-000000134f30");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SQLJ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSCAT", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SYSCAT", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("NULLID", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2642-07ec-000000134f30", dBTable0, 40, "(Mg>Dl09,7Rpwd%TN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (Mg>Dl09,7Rpwd%TN
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9654251325795494
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WD0[a 2'2-5UIH7<zny";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "WD0[a 2'2-5UIH7<zny";
      SQLUtil.mutatesDataOrStructure("alter session");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("tzT^YXJQB", false);
      SQLUtil.normalize("WD0[a 2'2-5UIH7<zny", false);
      SQLUtil.isQuery("WD0[a 2'2-5UIH7<zny");
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = null;
      Integer integer0 = RawTransaction.ABORT;
      int int0 = new Integer((-188));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.473862277815088
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WD0[a 2'2-5UIH7<zny";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[2] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[3] = "WD0[a 2'2-5UIH7<zny";
      SQLUtil.mutatesDataOrStructure("WD0[a 2'2-5UIH7<zny");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("", false);
      SQLUtil.normalize("", false);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0555628555722545
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GlobalXactId globalXactId0 = new GlobalXactId();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = SQLUtil.normalize("eIk*Gg*y8S^2}?8PRQ", true);
      assertEquals("eIk * Gg * y8S ^ 2 } ? 8PRQ", string0);
      
      String string1 = SQLUtil.normalize("aAu1,fP\r\"Jj8iLz", true);
      assertEquals("aAu1, fP \"Jj8iLz\"", string1);
      
      boolean boolean0 = SQLUtil.isQuery("Rh*[");
      String string2 = SQLUtil.normalize("SYSCS_SET_STATISTICS_TIMING", false);
      assertEquals("SYSCS_SET_STATISTICS_TIMING", string2);
      
      SQLUtil.isQuery("SYSCS_SET_STATISTICS_TIMING");
      boolean boolean1 = SQLUtil.isDML("/4[F");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, false);
      stringBuilder1.deleteCharAt(0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemUtilSchemaDescriptor();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2641-07ec-000000134f30", defaultDBTable0, 390, "/*");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SYSCS_UTIL", defaultDBTable1, 390, "X");
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7033792048054397
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("wRDxw", false);
      assertEquals("wRDxw", string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "]+Ql=dVFxQ4", versionNumber0);
      defaultDatabase0.setTableExclusionPattern("create mat");
      SQLUtil.ownerDotComponent(defaultDatabase0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wRDxw";
      stringArray0[1] = "]+Ql=dVFxQ4";
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      defaultDatabase0.removeCatalog(dBCatalog0);
      stringArray0[2] = "wRDxw";
      stringArray0[3] = "wRDxw";
      String string1 = SQLUtil.innerJoin("]+Ql=dVFxQ4", stringArray0, "", "wRDxw", stringArray0);
      assertEquals(" as wRDxw on ]+Ql=dVFxQ4.wRDxw = wRDxw.wRDxw and ]+Ql=dVFxQ4.]+Ql=dVFxQ4 = wRDxw.]+Ql=dVFxQ4 and ]+Ql=dVFxQ4.wRDxw = wRDxw.wRDxw and ]+Ql=dVFxQ4.wRDxw = wRDxw.wRDxw", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("wRDxw");
      boolean boolean1 = SQLUtil.isQuery("]+Ql=dVFxQ4");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2989541028085974
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      System.setCurrentTimeMillis((-670L));
      SQLUtil.mutatesDataOrStructure("ip%7xw1y]&n");
      SQLUtil.isDML("ip%7xw1y]&n");
      System.setCurrentTimeMillis((-670L));
      SQLUtil.mutatesDataOrStructure("insertip%7xw1y]&n!i/");
      DBDataType.getInstance(1497, "into");
      Vector<VersionNumberComponent> vector0 = null;
      try {
        vector0 = new Vector<VersionNumberComponent>((-4003), (-4003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -4003
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9703656144797845
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("insertMode");
      System.setCurrentTimeMillis((-670L));
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      Boolean boolean2 = SQLUtil.mutatesStructure("create materialized view");
      assertFalse(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3625432144049716
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.normalize("X0Y24.S", false);
      SQLUtil.isQuery("X0Y24.S");
      SQLUtil.isDML("");
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure(">'ukb@z3'&o");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "execselectivity(";
      stringArray0[1] = "execselectivity(";
      stringArray0[2] = "WD0[a 2'2-5UIH7<zny";
      stringArray0[3] = "X0Y24.S";
      stringArray0[4] = ">'ukb@z3'&o";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      SQLUtil.mutatesDataOrStructure("");
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.310627282209727
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isQuery("insertMode");
      SQLUtil.isDDL("insertMode");
      System.setCurrentTimeMillis((-670L));
      SQLUtil.mutatesDataOrStructure("create materialized view");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.isDML("create materialized view");
      System.setCurrentTimeMillis(1889L);
      SQLUtil.mutatesDataOrStructure("execselectivity(");
      DBDataType.getInstance(4616, "create materialized view");
      Vector<VersionNumberComponent> vector0 = null;
      try {
        vector0 = new Vector<VersionNumberComponent>((-616), 1497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -616
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(")@6QoVa&", compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1224), "drop tablecreate materialized view");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablecreate materialized view", defaultDBTable0, dBDataType0, integer1, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop tablecreate materialized view DROP TABLECREATE MATERIALIZED VIEW(1,1) NULL", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog(">otBB,", (Database) null);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP TABLECREATE MATERIALIZED VIEW(1,1)", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "\u0001\u00E2", (String[]) null, "", "KIklbB]>(_7", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3XM\u0000C+M,4f)0?";
      stringArray0[1] = "3XM\u0000C+M,4f)0?";
      stringArray0[2] = "3XM\u0000C+M,4f)0?";
      stringArray0[3] = "3XM\u0000C+M,4f)0?";
      stringArray0[4] = "3XM\u0000C+M,4f)0?";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = null;
      Integer integer0 = RawTransaction.ABORT;
      Integer.compareUnsigned((-1201), (-188));
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("", (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      StringBuilder stringBuilder0 = new StringBuilder("Y75qBvyI");
      SQLUtil.addRequiredCondition("Y75qBvyI", stringBuilder0);
      SQLTimestamp sQLTimestamp0 = new SQLTimestamp();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SQLDecimal sQLDecimal0 = new SQLDecimal(bigDecimal0);
      CDCDataValueFactory cDCDataValueFactory0 = new CDCDataValueFactory();
      NumberDataValue numberDataValue0 = cDCDataValueFactory0.getNullByte(sQLDecimal0);
      sQLDecimal0.minus(numberDataValue0, numberDataValue0, numberDataValue0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getDate((-422918522));
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // No data is available [2000-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XSDA4.S");
      defaultDBTable0.getIndexes();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XSDA4.S", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "WD0[a 2'2-5UIH7<zny";
      StringBuilder stringBuilder0 = new StringBuilder("select intokvh[<w,-*y1");
      int int0 = 4008;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(4008);
      SQLUtil.addOptionalCondition("setString(String,String)", stringBuilder1);
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "=pu*$n#,'4PfX#i_|";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "=pu*$n#,'4PfX#i_|", true, "=pu*$n#,'4PfX#i_|");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("%YNLFP7d=S", (String[]) null, (String) null, "%YNLFP7d=S", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6509443179739303
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.isQuery("b%");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("wj");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "deletesyscs_set_statistics_timing";
      stringArray0[1] = "x'81]g_(";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.substituteMarkers("", "deletesyscs_set_statistics_timing", "");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      stringBuilder1.deleteCharAt(0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemUtilSchemaDescriptor();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2644-07ec-000000134f30");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SQLJ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSCAT", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SYSCAT", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("NULLID", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex1.getTable();
      Boolean boolean0 = SQLUtil.mutatesStructure("SYSSTAT");
      assertFalse(boolean0);
      
      SQLUtil.isDDL("c013800d-00fb-2647-07ec-000000134f30");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "APP");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SYS", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("c013800d-00fb-2642-07ec-000000134f30", "create table", (Object) null);
      assertEquals("c013800d-00fb-2642-07ec-000000134f30", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("org.h2.schema.schemaob");
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "org.h2.schema.schemaob", "WtG'R}8G*NP", basicUUID0, false);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SYSCS_SET_STATISTICS_TIMING", ")@6QoVa&", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("SYSCS_SET_STATISTICS_TIMING", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.612726894621007
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTu@t8S\"jM\"", true, (String) null, "ZK");
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.equals("j7?hTu@t8S\"jM\"");
      dBCheckConstraint0.setDoc("j7?hTu@t8S\"jM\"");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK ZK", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", true, (String) null, "ZK");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.equals("j7?hTr@t8h\"jM\"");
      SQLUtil.typeAndName(dBCheckConstraint0);
      SQLUtil.constraintName(dBCheckConstraint0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      TableContainer tableContainer0 = new TableContainer("j7?hTr@t8h\"jM\"");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RMo:^S/nCz", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("ZK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'ZK' not found in table 'RMo:^S/nCz'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("k%X9Z$gh04Fm&E");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      stringBuilder1.deleteCharAt(0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemUtilSchemaDescriptor();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00fb-2644-07ec-000000134f30");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SQLJ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSCAT", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SYSCAT", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("NULLID", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2642-07ec-000000134f30", dBTable0, 40, "alter index,");
      stringBuilder1.append(0L);
      StringBuilder stringBuilder2 = new StringBuilder((CharSequence) "SYSCS_DIAG");
      boolean boolean0 = SQLUtil.isQuery("select intogenerated alw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0452819667409994
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("G");
      System.setCurrentTimeMillis(0L);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select intogenerated always as (");
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string0 = SQLUtil.normalize("vf1K4i#l|", false);
      assertEquals("vf1K4i # l |", string0);
      
      SQLUtil.isQuery("cf'W3%ugk");
      SQLUtil.normalize("w|8i32uf>", true);
      SQLUtil.isQuery("foreig");
      boolean boolean2 = SQLUtil.isQuery("CHECK ");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.commentChar((-4));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter in3dex,";
      stringArray0[1] = "5Z1`h2y,yRb";
      stringArray0[2] = "- 0";
      stringArray0[3] = "5Z1`h2y,yRb";
      stringArray0[4] = "5Z1`h2y,yRb";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnListWithTableName("5Z1`h2y,yRb", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "5Z1`h2y,yRb");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "alter index");
      // Undeclared exception!
      try { 
        stringBuilder1.deleteCharAt(3816);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3816
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(")@6QoVa&", "", versionNumber0);
      Vector<Object> vector1 = new Vector<Object>();
      VersionNumber versionNumber1 = new VersionNumber(vector1);
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, "Xalan", stringArray0, "uIP20z{FG-63", "create mater", stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      stringArray1[1] = "uIP20z{FG-63 as create mater on ";
      // Undeclared exception!
      try { 
        SQLUtil.join("C%Og*C} tV5vd._,;", "uIP20z{FG-63", stringArray1, (String) null, "drop materialized view", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "., .";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("., .", stringArray0, "p@9|", "update", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4195083775528823
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectcreate unique index";
      stringArray0[1] = "executeselectivity(";
      stringArray0[2] = "selectselect intoexecselectivity(";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 97;
      DBDataType dBDataType0 = DBDataType.getInstance(97, "(driver) ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(97);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectenf;9*:", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = new Integer(97);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("selectcreate unique index = 'selectcreate unique index' AND executeselectivity( = 'executeselectivity(' AND selectselect intoexecselectivity( = 'selectselect intoexecselectivity('", defaultDBTable0, dBDataType0, integer2, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnListWithTableName(" on ", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "selectcreate unique index");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 97
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1D!L) 3Mag*j";
      stringArray0[1] = "*.js>fm,S-P91$V*3Mx";
      stringArray0[2] = "DATE";
      stringArray0[3] = "Xalan";
      stringArray0[4] = "1D!L) 3Mag*j";
      stringArray0[5] = "DATE";
      stringArray0[6] = " NOT";
      String string0 = SQLUtil.join((String) null, "*.js>fm,S-P91$V*3Mx", stringArray0, "DATE", "DATE", stringArray0);
      assertEquals("DATE as DATE on *.js>fm,S-P91$V*3Mx.1D!L) 3Mag*j = DATE.1D!L) 3Mag*j and *.js>fm,S-P91$V*3Mx.*.js>fm,S-P91$V*3Mx = DATE.*.js>fm,S-P91$V*3Mx and *.js>fm,S-P91$V*3Mx.DATE = DATE.DATE and *.js>fm,S-P91$V*3Mx.Xalan = DATE.Xalan and *.js>fm,S-P91$V*3Mx.1D!L) 3Mag*j = DATE.1D!L) 3Mag*j and *.js>fm,S-P91$V*3Mx.DATE = DATE.DATE and *.js>fm,S-P91$V*3Mx. NOT = DATE. NOT", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "VARCHAR2";
      stringArray0[1] = "[e&";
      stringArray0[2] = "SYSCS_SET_STATISTICS_TIMING";
      stringArray0[3] = "[e&";
      stringArray0[4] = "[e&";
      stringArray0[5] = "SYSCS_SET_STATISTICS_TIMING";
      String string0 = SQLUtil.leftJoin("[e&", stringArray0, "VARCHAR2", "nil", stringArray0);
      assertEquals("left join VARCHAR2 as nil on [e&.VARCHAR2 = nil.VARCHAR2 and [e&.[e& = nil.[e& and [e&.SYSCS_SET_STATISTICS_TIMING = nil.SYSCS_SET_STATISTICS_TIMING and [e&.[e& = nil.[e& and [e&.[e& = nil.[e& and [e&.SYSCS_SET_STATISTICS_TIMING = nil.SYSCS_SET_STATISTICS_TIMING", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SYSCS_SET_STATISTICS_TIMING", ")@6QoVa&", versionNumber0);
      Vector<Object> vector1 = new Vector<Object>();
      VersionNumber versionNumber1 = new VersionNumber(vector1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYSCS_SET_STATISTICS_TIMING";
      stringArray0[1] = ")@6QoVa&";
      stringArray0[2] = ")@6QoVa&";
      stringArray0[3] = null;
      stringArray0[1] = ")@6QoVa&";
      stringArray0[5] = "\"6\"<`B";
      Boolean boolean0 = SQLUtil.mutatesStructure("truncateqm0x;hcwgfz:lg2");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5701845608210998
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("insertMode");
      boolean boolean1 = SQLUtil.isDDL("insertMode");
      System.setCurrentTimeMillis((-670L));
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized view";
      SQLUtil.isDML("create materialized view");
      SQLUtil.normalize("J*k", false);
      String string0 = SQLUtil.normalize("-qA2[", false);
      assertEquals("- qA2 [", string0);
      
      SQLUtil.isQuery("updatekvh[<w,-*y1");
      String string1 = SQLUtil.normalize("org.apache.derby.impl.sql.compile.HalfOuterJoinNode", true);
      assertEquals("org.apache.derby.impl.sql.compile.HalfOuterJoinNode", string1);
      
      SQLUtil.isQuery("Requested CopyOut but got {0}");
      boolean boolean3 = SQLUtil.isDML("alter materialized viewkvh[<w,-*y1");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }
}
