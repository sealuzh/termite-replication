/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:47:10 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6834967376796572
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      MockFile mockFile2 = new MockFile("", "+mHRErS=");
      mockFile2.setReadable(false, false);
      mockFile1.deleteOnExit();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      fileIterator1.hasNext();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator1.setUpInitialState(mockFile2);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      fileIterator2.iterator();
      // Undeclared exception!
      try { 
        fileIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.803930158896326
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      File file1 = fileIterator1.getNextFile();
      fileIterator0.setUpInitialState(file1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(false);
      fileIterator1.getNextFile();
      fileIterator0.updateFileIterator(file0);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator1.getNextFile();
      fileIterator1.iterator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.556406915198357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      MockFile mockFile2 = new MockFile("", "+mHRErS=");
      mockFile2.setReadable(true, false);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter0.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      mockFile2.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator_FileIteratorBuilder4.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator1.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5557429990414833
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      mockFile0.setReadable(true, false);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      // Undeclared exception!
      try { 
        multipleFileFilter1.accept(mockFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.MultipleFileFilter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5991149646267337
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      mockFile0.getAbsolutePath();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("");
      MockFile.createTempFile("jZB]6n", "Ck\"^EM J|L]7Cnrm", (File) mockFile1);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.updateFileIterator(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.653182994481482
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5656032945373215
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"Q&G54}szxq", "");
      MockFile.createTempFile("\"Q&G54}szxq", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      mockFile0.setExecutable(false, false);
      fileIterator0.hasNext();
      fileIterator0.next();
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8638946665674845
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file0 = fileIterator1.next();
      assertEquals("home", file0.getName());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8031220780882453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.updateFileIterator(mockFile0);
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3857374755222467
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      mockFile0.setReadable(true, false);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "s:d&Kb$=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3857374755222467
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      mockFile0.setReadable(true, false);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = null;
      try {
        multipleFileFilter4 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.676609861401741
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder2.build();
      Consumer<File> consumer1 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer1);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.updateFileIterator(mockFile1);
      fileIterator2.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.786920321249517
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.updateFileIterator(mockFile0);
      File file1 = fileIterator0.getNextFile();
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      assertTrue(file0.equals((Object)file1));
      
      fileIterator1.iterator();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.750016350031481
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.deleteOnExit();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEach(consumer0);
      boolean boolean0 = fileIterator1.hasNext();
      assertTrue(boolean0);
      
      File file0 = fileIterator0.next();
      MockFile mockFile1 = new MockFile(file0, "");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file1 = fileIterator1.getNextFile();
      assertEquals("home", file1.getName());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.801107596623175
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      String string1 = "org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator";
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(file0);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator0.hasNext();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6791486901257087
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FIFOQueue", "/");
      fileIterator0.updateFileIterator(file0);
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9295906071999465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer1);
      fileIterator0.updateFileIterator(file0);
      // Undeclared exception!
      try { 
        fileIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.014363740104834
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.getAbsolutePath();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "Uk<X-x", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5975069626027114
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
      
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder4.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator1.iterator();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.731717414733858
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter7);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray1 = new FileFilter[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      fileFilterArray1[0] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      fileFilterArray1[1] = (FileFilter) multipleFileFilter9;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter8;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter9;
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter10);
      assertSame(fileIterator_FileIteratorBuilder2, fileIterator_FileIteratorBuilder3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.153980897321151
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"Q&G54}szxq", "");
      File file0 = MockFile.createTempFile("\"Q&G54}szxq", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(file0);
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList6);
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      MockFile mockFile0 = new MockFile("X9QgqXwL>7p/V", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter6);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      linkedList6.parallelStream();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      // Undeclared exception!
      try { 
        linkedList7.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList5.parallelStream();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      // Undeclared exception!
      try { 
        linkedList5.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2140666558065467
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>(linkedList1);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      linkedList6.parallelStream();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      // Undeclared exception!
      try { 
        linkedList7.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6951384072629083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      mockFile0.setReadable(true, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.updateFileIterator(mockFile0);
      assertTrue(mockFile0.canRead());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3F~$s>>xWx{", "YP(j@6\"*+R");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.331484813877749
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>(linkedList3);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList4);
      linkedList4.stream();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      linkedList3.removeFirstOccurrence(linkedList4);
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      assertTrue(linkedList12.equals((Object)linkedList10));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList4);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter7;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      linkedList3.stream();
      Object object0 = new Object();
      linkedList1.removeFirstOccurrence(object0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>(linkedList6);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      assertSame(fileIterator_FileIteratorBuilder1, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2762483211108506
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.deleteOnExit();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      assertFalse(mockFile0.isHidden());
  }
}
