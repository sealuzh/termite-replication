/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:33:26 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4104829452609864
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1341526202605965
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.8153902216688977
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-13L));
      range0.spliterator();
      Range range1 = Range.ofLength(9223372036854775124L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 529L, 2147483647L);
      Range range3 = Range.ofLength(529L);
      assertFalse(range3.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals((-13L), long0);
      
      Object object0 = new Object();
      boolean boolean1 = range2.equals(object0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.058073707824112
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      range0.getBegin();
      Range range1 = range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range2 = range_Builder0.build();
      range1.startsBefore(range0);
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1696L, 1696L);
      range_Builder1.expandBegin(2900L);
      range_Builder1.expandEnd(4294967295L);
      range0.startsBefore(range0);
      Range range3 = Range.parseRange("[ 0 .. 0 ]/0B");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range4 = Range.of((-32768L), 2442L);
      range4.asRange();
      range2.getLength();
      range3.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("}j037\"[|)2}Ktgyt=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse }j037\"[|)2}Ktgyt= into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7925975079437158
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L, 0L);
      Range range0 = Range.ofLength(0L);
      long long1 = (-58L);
      Range.of((-58L), (-58L));
      Range range1 = Range.of((-58L), 0L);
      range1.intersects(range0);
      long long2 = 426L;
      long long3 = (-128L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.790249162828448
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      range0.endsBefore(range1);
      range0.toString();
      range1.intersects(range0);
      range0.intersects(range1);
      range1.equals("l\"&KE`Dd>ObWT}`TG");
      Range.of(1172L, 1948L);
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.25954173411194
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854535139L);
      Long long0 = new Long(1172L);
      Long.getLong("r7-'R+GK");
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("Fqp?>c+SI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Fqp?>c+SI into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.925422467911931
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-16L), (-16L));
      Range range1 = Range.of(1207L);
      range1.complement(range0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1207L, 9991L);
      Range.of((-1L), 32767L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7729189161673613
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1697L, long0);
      
      range0.getBegin();
      Range range1 = range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd(2442L);
      Range range2 = range_Builder0.build();
      boolean boolean0 = range1.startsBefore(range0);
      String string0 = range2.toString();
      assertEquals("[ 0 .. 2442 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 0 .. 2442 ]/0B", range_CoordinateSystem1);
      boolean boolean1 = range2.equals(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Range range4 = range2.intersection(range1);
      assertSame(range4, range0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.515923624033687
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandEnd(9223372036854775807L);
      range_Builder0.expandEnd(4294967295L);
      range0.getBegin(range_CoordinateSystem0);
      long long0 = (-1222L);
      long long1 = 1L;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8492139892833777
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(65535L);
      Range range0 = Range.of(65535L, 65535L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getBegin();
      range0.isEmpty();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift((-2640L));
      Range.of(255L);
      Range.of((-690L), (-622L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2640L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5320688369512645
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range0.getBegin();
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.getLength();
      range0.split(4294967295L);
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-394L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-394L), (-2559L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6894616825578983
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.complement(range0);
      Range range1 = Range.ofLength(0L);
      long long1 = 1L;
      Range.of(1L, 1L);
      range1.isSubRangeOf(range0);
      Range.of(1L, 0L);
      long long2 = 426L;
      long long3 = (-128L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2249455965257963
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-1173L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 65535L, 65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.44992782379935
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-257L), 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6389893394751116
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-16L), (-14L));
      String string0 = "k\\uav]%=~.";
      range0.equals(string0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-1269L));
      range0.endsBefore(range1);
      String string1 = range_CoordinateSystem0.getAbbreviatedName();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.482992929505154
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.ofLength(9223372036854775124L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 255L, 529L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-25L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6766679919954157
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 529L, 4294967295L);
      Range range2 = Range.ofLength(2147483647L);
      range2.getBegin();
      range2.equals(range1);
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5241190890273493
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range.of(0L, 0L);
      long long1 = 9997L;
      long long2 = 9223372036854775123L;
      Range.of(9997L, 9223372036854775123L);
      long long3 = (-128L);
      long long4 = (-102L);
      // Undeclared exception!
      try { 
        Range.ofLength((-102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9363854421488513
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-2147483645L), (-1L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.ofLength(0L);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      range1.asRange();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -1 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9734705626143674
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-16L), (-16L));
      Range range1 = Range.of(1207L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      String string0 = range0.toString();
      assertEquals("[ -16 .. -16 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1207L, 9991L);
      boolean boolean0 = range0.startsBefore(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean1 = range1.equals(object1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      Range.Comparators.values();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1207L, 8785L);
      range_Builder0.contractEnd(1207L);
      Range range3 = range_Builder0.build();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.0257531590372375
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-16L), (-16L));
      range0.spliterator();
      Range range1 = Range.of(1207L);
      range1.complement(range0);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9991L;
      Range range2 = Range.of(range_CoordinateSystem0, 1207L, 9991L);
      range0.startsBefore(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range.of((-16L));
      range0.complement(range2);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8025655948277657
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      range_Builder0.contractBegin((-2147483648L));
      range_Builder0.contractEnd((-166L));
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4939255025556193
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = (-5295L);
      Range range0 = Range.of((-5295L));
      Range range1 = range0.asRange();
      Range range2 = null;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8172975430737615
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(642L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-16L), (-16L));
      range0.endsBefore(range1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("LO1AU6'>o%5D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse LO1AU6'>o%5D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5954307869655184
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(65535L);
      Range range0 = Range.of(65535L, 65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      long long1 = range1.getLength();
      assertEquals(1L, long1);
      
      long long2 = range1.getEnd();
      assertEquals(65535L, long2);
      
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range1.endsBefore(range2);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7647552589871305
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-2147484649L));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147484649L), (-82L));
      //  // Unstable assertion: assertNotSame(range2, range1);
      
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(573L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6137763053712915
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(2870L);
      Range range1 = Range.of(0L, 0L);
      range1.equals(range0);
      long long0 = 9223372036854775123L;
      Range.of(9223372036854775123L);
      long long1 = (-102L);
      // Undeclared exception!
      try { 
        Range.ofLength((-102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.216157248141041
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.280141749968894
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4880L);
      range0.equals(object0);
      Range range1 = Range.of(4880L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.960161408367864
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 1696L;
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, 1696L, 1696L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range3 = range_Builder0.build();
      range3.endsBefore(range1);
      List<Range> list0 = range2.complement(range3);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1696L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.519666426784238
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(1L, 1696L);
      range0.isSubRangeOf(range1);
      Range.of(1541L, 1696L);
      long long0 = (-128L);
      long long1 = (-5118L);
      // Undeclared exception!
      try { 
        Range.ofLength((-5118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.247745925839172
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854535139L);
      Long long0 = new Long(1172L);
      Long.getLong("r7-'R+GK");
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("Fqp?>c+SI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Fqp?>c+SI into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.463642046516757
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(151L);
      Range range1 = Range.ofLength(151L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      range1.getLength();
      long long0 = new Long(151L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1070L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.8848163117575294
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      range0.getBegin();
      Range range1 = range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd(2442L);
      Range range2 = range_Builder0.build();
      range1.startsBefore(range0);
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1696L, 1696L);
      range_Builder1.expandBegin(2900L);
      range_Builder1.expandEnd(4294967295L);
      range0.startsBefore(range0);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.625332939520356
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Long long1 = new Long(1871L);
      range_Builder0.contractBegin((long) long1);
      range_Builder0.expandBegin((-2147483648L));
      long long2 = (-166L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3918205932065497
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.9774314444728702
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-912L), 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range3 = range_Builder0.build();
      range1.isSubRangeOf(range3);
      range3.startsBefore(range2);
      range2.toString();
      range0.getBegin();
      range2.toString(range_CoordinateSystem0);
      range_Builder0.expandEnd((-979L));
      range1.startsBefore(range2);
      Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5542818590980527
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.ofLength(795L);
      range0.spliterator();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 326L, 795L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7655147700324414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.of((-1L), 149L);
      Range range0 = Range.ofLength(149L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      range0.asRange();
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7291755334792978
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-1L), 149L);
      Range range1 = Range.ofLength(149L);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      range2.equals(range_CoordinateSystem0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.714773346960326
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      long long0 = (-1173L);
      Range range0 = Range.of((-1173L), (-257L));
      range0.split(2147483647L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1030L;
      Range.of(range_CoordinateSystem0, 1030L, 1030L);
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.592217117554629
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.ofLength(9977L);
      Range.of(9987L);
      Range.ofLength(9987L);
      range0.split(2147483647L);
      long long0 = 9980L;
      // Undeclared exception!
      try { 
        Range.of(9980L, (-1466L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.64905262156391
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), (-1L));
      range1.complementFrom(linkedList0);
      range0.split(575L);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1211L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.842971045025495
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1485L));
      range_Builder0.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      Range.Builder range_Builder2 = range_Builder1.shift((-630L));
      range0.endsBefore(range1);
      range1.intersects(range0);
      range0.intersects(range1);
      Range.Builder range_Builder3 = range_Builder1.contractBegin(1L);
      assertSame(range_Builder3, range_Builder2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.666616693385818
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of((-13L));
      range0.spliterator();
      Range range1 = Range.ofLength(9223372036854775124L);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(9223372036854775124L);
      // Undeclared exception!
      try { 
        Range.of((-13L), (-1780L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2861684254371393
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-16L));
      range0.equals(object0);
      Range range1 = Range.of((-16L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.762326531210621
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4950051246878724
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = (-1568L);
      Range range0 = Range.of((-1568L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(">cjY:Qkc+(8$,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.>cjY:Qkc+(8$,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.834101590153841
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range1.intersects(range0);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1);
      
      Range range2 = Range.ofLength(574L);
      range1.equals("l\"&KE`Dd>ObWT}`TG");
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.630104629555505
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of((-13L));
      range0.spliterator();
      Range range1 = Range.ofLength(9223372036854775124L);
      Range.of(9223372036854775124L);
      range1.equals(range0);
      Range.of((-13L));
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4110193586243662
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of((-403L), 1L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.153199038032167
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      String string0 = "k\\u!v]%=~.";
      range0.equals(string0);
      long long0 = range0.getLength();
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.304555263182236
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(long0);
      range0.getBegin();
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      long long1 = range1.getLength();
      assertEquals(0L, long1);
      
      long long2 = range1.getEnd();
      assertEquals((-1L), long2);
      
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.241511190738741
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Long long1 = new Long(0L);
      range0.equals(long1);
      long long2 = 795L;
      // Undeclared exception!
      try { 
        Range.of(795L, 326L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.094929428397546
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4470245031976665
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(151L);
      Range range1 = Range.ofLength(151L);
      range0.asRange();
      range1.getLength();
      range1.getEnd();
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1070L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.592845905234489
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.of(1L, 1L);
      Range range1 = Range.of(1L, 0L);
      range1.startsBefore(range0);
      range1.getLength();
      long long1 = 426L;
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.9643704054673865
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-912L), 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range3 = range_Builder0.build();
      range1.isSubRangeOf(range3);
      range3.startsBefore(range2);
      String string0 = range2.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      long long1 = range3.getEnd();
      assertEquals((-1L), long1);
      
      Range.of((-51L), 255L);
      range2.getEnd();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.763767592131107
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range0 = Range.of((-469L), 0L);
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_Builder1);
      range_Builder2.shift((-469L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6011205605600036
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7276783789391876
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(0L, 0L);
      Range range1 = Range.of(9223372036854775123L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-102L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.8049192550508137
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of((-1L), 149L);
      Range range1 = Range.ofLength(149L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3285L), 9223372036854765127L);
      range_Builder0.expandEnd(561L);
      range0.startsBefore(range1);
      range_Builder0.expandEnd((-3285L));
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("?L3pYM@;cF+W[&n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ?L3pYM@;cF+W[&n into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.68270148288149
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of(0L, 2587L);
      Range range1 = Range.of(2587L);
      range1.startsBefore(range0);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2587L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6465037388051638
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, 1696L, 1696L);
      range1.intersection(range0);
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("_ iQ_I#Y`=AN&-2", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse _ iQ_I#Y`=AN&-2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.8202633530799135
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1485L));
      range_Builder0.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      range_Builder1.shift((-630L));
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1604L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.864081855131726
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      range_Builder0.contractBegin((-2147483648L));
      range_Builder0.expandBegin((-2147483648L));
      range_Builder0.contractEnd((-166L));
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(1002L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.328327451379253
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 752L, 752L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9984L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.70940840867126
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long long0 = 1696L;
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      range0.getBegin();
      range0.intersection(range0);
      Range.of(1L, 1L);
      long long1 = (-128L);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.303248073639753
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1111L), (-1111L));
      long long0 = range0.getEnd();
      assertEquals((-1111L), long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = 1696L;
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1696L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1920010257216913
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2144L);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.657120284118046
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.ofLength(65535L);
      Range.of((-128L), 426L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-418L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6614659297734877
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-6606L), 0L);
      Range range0 = Range.of(1243L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.409475664005
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2858L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2019506338289605
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.of(1L);
      long long0 = 426L;
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.028872325472672
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of((-16L), (-16L));
      Range range1 = Range.of(1207L);
      range1.complement(range0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1207L, 9991L);
      range0.startsBefore(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range.Comparators.values();
      Range range3 = Range.ofLength(0L);
      range3.getLength();
      range2.isEmpty();
      range3.toString(range_CoordinateSystem0);
      Range range4 = Range.of(38L, 9998L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range4.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3584884981309253
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1216L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1216L), 0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1216L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.4569291138500033
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of((-37L), (-14L));
      Range range1 = Range.of((-14L), (-14L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.410883105325012
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, (-2147549182L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-403L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7597788312854874
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      Long long0 = new Long(0L);
      Long.getLong("r7-'R+GK");
      range0.equals(long0);
      range1.equals((Object) null);
      Range range2 = range1.intersection(range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4469326979992005
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4145644662987675
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.540385841640743
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.of(9997L, 9997L);
      Range.of((-128L), 9997L);
      Range.Builder range_Builder0 = new Range.Builder(9997L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(5119L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.432435328249342
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd();
      assertSame(range0, range1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4093553482526224
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1243L, 1243L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1243L, 1243L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.5940620063188824
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854535139L);
      Long long0 = new Long(1172L);
      Long.getLong("r7-'R+GK");
      Long long1 = new Long(9223372036854535139L);
      Long.getLong("r7-'R+GK");
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1172L, 1172L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 344L, 795L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.6067030950562096
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      range_Builder0.expandBegin(275L);
      Range.ofLength(1172L);
      range_Builder1.shift((-630L));
      Range.Builder range_Builder2 = range_Builder0.contractBegin(1L);
      assertSame(range_Builder2, range_Builder0);
  }
}
