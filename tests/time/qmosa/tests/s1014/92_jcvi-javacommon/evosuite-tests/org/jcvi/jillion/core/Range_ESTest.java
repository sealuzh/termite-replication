/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 01:36:06 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.360463764209726
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1351L;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      linkedList0.pollFirst();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      objectArray0[3] = (Object) range_CoordinateSystem0;
      Range.of(1351L);
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long long1 = Long.valueOf(557L);
      range1.equals(long1);
      long long2 = 255L;
      // Undeclared exception!
      try { 
        Range.of(4122L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3254614353123833
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(110L, 65535L);
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 110L, 1351L);
      linkedList0.pollFirst();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(1351L, 65535L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.115475024880771
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-145L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      long long1 = (-3786L);
      range_Builder0.shift((-3786L));
      long long2 = 1L;
      Range range0 = Range.ofLength(264L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.530434671595211
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 1871L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-145L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range range0 = Range.of(3L, 1871L);
      range_Builder0.copy();
      range_Builder1.shift((-5505L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(9223372032559808513L);
      List<Range> list0 = range1.split(714L);
      range1.complementFrom(list0);
      range1.equals(range_Builder1);
      long long2 = 2346L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2346L, (-5505L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4960136386402008
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      Range.Builder range_Builder1 = new Range.Builder(1276L, 1276L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandEnd((-3610L));
      Range.Builder range_Builder3 = range_Builder1.expandBegin((-1L));
      Range range0 = Range.of((-1L));
      range0.equals(range_Builder3);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range range1 = Range.ofLength(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.of((-1L), 127L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(range_CoordinateSystem1, 993L, (-721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.718025988857895
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) range0;
      objectArray0[5] = (Object) range_Builder0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range_Builder1.expandBegin(78L);
      Range.of(1855L);
      range0.equals(list0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.shift(9223372036854775807L);
      Range.of((-133L), 32767L);
      // Undeclared exception!
      try { 
        Range.of(3975L, 1863L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7090435437527334
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 106L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range range0 = Range.of(3L, 1871L);
      range_Builder0.copy();
      range_Builder1.shift(1744L);
      Range range1 = Range.of(3L, 1744L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      range_Builder0.copy();
      Range range3 = Range.of((-469L));
      range0.startsBefore(range3);
      List<Range> list0 = range2.split(2L);
      range0.getBegin();
      Range range4 = range2.asRange();
      // Undeclared exception!
      range4.complementFrom(list0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.529060630972935
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(929L);
      range0.getEnd();
      long long0 = 0L;
      Range.ofLength(0L);
      Range range1 = Range.of(499L, 2371L);
      long long1 = (-929L);
      long long2 = 1865L;
      List<Range> list0 = range1.split(1865L);
      range0.complementFrom(list0);
      long long3 = (-337L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-337L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.450201148079376
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = (-469L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3783L));
      Range.of(3L, 1871L);
      range_Builder0.copy();
      range_Builder1.shift(1768L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(range_CoordinateSystem0, (-3783L), (-145L));
      Range range0 = Range.of(1855L, 2623L);
      long long1 = 9223372036854775382L;
      Range.of(3L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.158039775219435
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9L, 9223372036854775807L);
      long long0 = (-1L);
      range_Builder0.expandEnd(9L);
      long long1 = 4294967295L;
      range_Builder0.expandBegin(9223372036854775807L);
      long long2 = 62790L;
      Range range0 = Range.ofLength(9L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.320362323039676
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(575L);
      Range.Builder range_Builder3 = range_Builder0.contractEnd(478L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(1782L);
      range_Builder2.expandBegin(1253L);
      range0.isSubRangeOf(range1);
      range_Builder3.shift(32767L);
      long long0 = (-50L);
      long long1 = (-3287L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-50L), (-3287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.548614617774235
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 575L);
      Range range0 = Range.of((-1L), 7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder2.contractEnd((-74L));
      Range.ofLength(1864L);
      range_Builder0.expandEnd((-74L));
      Range range1 = Range.ofLength(7L);
      Range.ofLength(1853L);
      Range range2 = Range.ofLength(65535L);
      range2.complement(range1);
      Range range3 = Range.ofLength(2048L);
      range3.split(7L);
      range0.intersection(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.468104785350768
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      linkedList0.pollFirst();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      objectArray0[3] = objectArray0[0];
      objectArray0[4] = (Object) range0;
      objectArray0[5] = (Object) range_Builder0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      long long0 = (-1445L);
      range_Builder1.shift((-1445L));
      Range.of(78L, 65535L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.470871826271397
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 131L;
      Range range0 = Range.of(131L, 131L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(131L);
      Range range2 = Range.of(131L);
      range1.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder(131L, 131L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.isSubRangeOf(range1);
      Range.of(2346L);
      long long1 = 32767L;
      Range range3 = Range.of(3000L, 3000L);
      range3.intersection(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.227325011951738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 78L;
      long long1 = 4294967295L;
      Range range0 = Range.of(2424L, 4294967295L);
      range0.equals((Object) null);
      Range range1 = Range.of(600L);
      long long2 = 32767L;
      Range.of(32767L);
      range1.equals(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(181L, 78L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1686218118634186
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      range0.getBegin();
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      Range range1 = Range.of(0L);
      range0.intersects(range1);
      boolean boolean2 = range1.endsBefore(range0);
      boolean boolean3 = range0.intersects(range1);
      assertTrue(boolean3 == boolean2);
      
      Range range2 = Range.ofLength(0L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.634746542619924
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(929L);
      range0.getEnd();
      Range.ofLength(0L);
      Range range1 = Range.of(499L, 2371L);
      List<Range> list0 = range1.split(1865L);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      long long0 = 2089L;
      Range.of(0L, 715L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-1454L), 1350L);
      Range.Builder range_Builder4 = new Range.Builder(573L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder3);
      range_Builder2.contractBegin((-929L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.675193168580467
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(4138L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(255L, 255L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 4138L, 4138L);
      Range range3 = range2.intersection(range0);
      range2.isEmpty();
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 4138L, 4138L);
      Range range5 = Range.of((-2013L), 4138L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range6 = Range.of(9223372036854775382L);
      range4.endsBefore(range6);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 4137 .. 4137 ]/0B", range_CoordinateSystem3);
      range3.intersects(range4);
      range4.intersects(range5);
      Range.parseRange("[ 4137 .. 4137 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem4, 9223372036854775382L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.525538953174971
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 65535L);
      Range range0 = Range.of(0L, 1871L);
      long long0 = 1L;
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      range0.split(3262L);
      long long1 = (-1530L);
      Range range2 = Range.of((-1530L), 4294967295L);
      range0.intersection(range1);
      range0.complement(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("xvK_5G$TzOc=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.xvK_5G$TzOc=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3726910395289234
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long(1350L);
      Range range0 = Range.of((-2407L), 1350L);
      range0.equals(long0);
      range0.getBegin();
      range0.isEmpty();
      Range range1 = Range.of(1L);
      range1.intersects(range0);
      Range range2 = Range.of((-1960L));
      range2.endsBefore(range1);
      range1.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-1960L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.35383896813415
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), (-469L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range0 = Range.of((-469L), 0L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder1.shift(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_Builder1);
      range0.equals(range_Builder3);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder2.shift(65535L);
      Range.of((-3266L), 285L);
      Range.of((-2757L));
      range_Builder3.expandBegin((-224L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.14716708893603
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      range_Builder1.expandBegin((-3786L));
      long long0 = 3385L;
      range_Builder1.expandEnd(3385L);
      range_Builder0.expandBegin((-458L));
      long long1 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(range_Builder2);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.shift((-958L));
      // Undeclared exception!
      try { 
        Range.of((-5L), (-1601L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1383756702533585
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-145L);
      long long1 = 127L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(127L, 127L);
      long long2 = 3696L;
      Range range0 = Range.of(3696L);
      range0.equals(range_Builder0);
      range0.equals(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder0.shift((-145L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775553L, (-32767L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32767 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2224106775160113
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      long long0 = (-1L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      range_Builder0.expandBegin(65535L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-2744L));
      range_Builder0.expandBegin((-2744L));
      Range range0 = Range.of(1L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.expandBegin((-1L));
      long long1 = 574L;
      range_Builder2.shift(574L);
      // Undeclared exception!
      try { 
        Range.of(275L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1909295529466593
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 131L;
      long long1 = 4294967295L;
      Range range0 = Range.of(131L, 4294967295L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(131L);
      long long2 = 0L;
      Range range2 = Range.of(0L);
      range1.equals(range2);
      long long3 = (-9223372036854775808L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3968646828021054
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(4135L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2045L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(2045L);
      range_Builder2.expandBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2045L, 9223372036854775807L);
      Range range2 = Range.ofLength(1525L);
      range1.intersects(range0);
      Range.Builder range_Builder3 = range_Builder0.shift((-559L));
      range2.endsBefore(range0);
      range2.intersects(range0);
      range2.intersects(range1);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6328135032465343
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(128L);
      Range range0 = Range.of((-1499L), 128L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      long long0 = 1L;
      Range range1 = Range.ofLength(128L);
      range1.complement(range0);
      long long1 = 9223372036854774457L;
      range1.split(9223372036854774457L);
      Range.of(0L, 1L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(128L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.531582973352248
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      range_Builder0.shift((-3786L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-4294967628L));
      Range range0 = Range.of((-4294967628L));
      range0.equals(range_Builder1);
      range0.equals(range_Builder2);
      long long1 = 255L;
      Range range1 = Range.of((-145L), 255L);
      Range range2 = range0.intersection(range1);
      range2.complement(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2079600775434685
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      long long0 = 1276L;
      Range.Builder range_Builder1 = new Range.Builder(1276L, 1276L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(198L);
      range_Builder3.expandEnd((-3610L));
      Range.Builder range_Builder4 = range_Builder1.expandBegin((-4L));
      Range range0 = Range.of((-1L));
      range0.equals(range_Builder4);
      // Undeclared exception!
      try { 
        Range.of(4122L, (-4L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0615135024203357
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(65535L);
      range1.endsBefore(range0);
      long long0 = (-770L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 102L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.193159742024955
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.of(255L, 255L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2422L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.613198952184682
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 4138L;
      Range range0 = Range.of(4138L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(255L, 255L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 4138L, 4138L);
      range2.intersection(range0);
      range2.isEmpty();
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 4138L, 4138L);
      Range.of((-2013L), 4138L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range4 = Range.of(9223372036854775382L);
      range3.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5492927790121063
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 575L);
      Range range0 = Range.of((-1L), 7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder0.expandEnd((-74L));
      range_Builder2.contractEnd((-74L));
      Range.ofLength(1864L);
      range_Builder0.expandEnd((-74L));
      Range.Builder range_Builder4 = range_Builder2.expandBegin((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range1.equals("r9+JZF~|pf=hSSC/ ");
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder6 = range_Builder4.shift(2355L);
      Range.of(201L, 1626L);
      // Undeclared exception!
      try { 
        range_Builder6.contractBegin(3112L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2640212704669778
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(1034L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6181895546700438
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(4L, 4L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range range1 = Range.ofLength(4L);
      long long0 = (-770L);
      Range range2 = Range.of((-770L), (-770L));
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-770L));
      Range.of(426L, 426L);
      range2.endsBefore(range3);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("Space Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Space Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.031514648030985
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      range_Builder0.expandEnd((-1485L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1243L, 4294967287L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0593548485908344
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = 575L;
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 575L);
      Range range0 = Range.of((-1L), 7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5009793135434797
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 575L);
      Range range0 = Range.of((-1L), 7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      long long0 = (-74L);
      range_Builder2.contractEnd((-74L));
      Range.ofLength(1864L);
      range_Builder0.expandEnd((-74L));
      long long1 = 275L;
      long long2 = (-2147483648L);
      range_Builder2.expandBegin((-2147483648L));
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem0, 1864L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6345645808480893
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(575L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(1782L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1782L);
      range_Builder2.expandBegin(1782L);
      range_Builder2.expandBegin((-984L));
      range0.isSubRangeOf(range1);
      range_Builder2.shift(1782L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      range0.endsBefore(range2);
      Range.ofLength(255L);
      Range range3 = Range.of((-1L));
      range1.endsBefore(range1);
      Range.of((-111L), 2590L);
      Range range4 = Range.of((-8L));
      Range.Comparators.values();
      range3.startsBefore(range4);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3288772833852036
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 575L;
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 575L);
      long long1 = 7L;
      Range range0 = Range.of((-1L), 7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      long long2 = (-74L);
      range_Builder2.contractEnd((-74L));
      Range range1 = Range.ofLength(1864L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(1864L, 7L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1516338938412907
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.of((-5L));
      Range.of((-5L));
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-5L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3776583607544146
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder0.contractEnd(575L);
      Range range1 = Range.ofLength(1782L);
      range1.intersects(range1);
      Range.of(1002L, 4294967298L);
      range_Builder0.expandBegin(4294967298L);
      Range.of(575L);
      range_Builder1.expandBegin(1782L);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.475273007145659
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 4138L;
      Range range0 = Range.of(4138L);
      Range range1 = Range.of(255L, 255L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 4138L, 4138L);
      Range.of((-2033L), 4138L);
      Range range3 = Range.of((-2033L), (-2033L));
      range2.endsBefore(range3);
      Range.of(9223372036854775194L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.638981967324429
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1351L;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) range0;
      objectArray0[5] = (Object) range_Builder0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      Range range1 = Range.of(1351L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("efjN`adN-o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.efjN`adN-o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4416071545659537
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1871L, 1871L);
      Range.Builder range_Builder2 = range_Builder1.shift((-1L));
      range_Builder1.build();
      range_Builder1.copy();
      range_Builder0.expandBegin(1837L);
      Range.of((-32768L));
      range_Builder2.contractBegin((-32768L));
      Range.of(65535L);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-3786L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3019088753047665
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) range_Builder0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) range_CoordinateSystem0;
      objectArray0[6] = (Object) range_Builder0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) range_CoordinateSystem0;
      linkedList0.toArray(objectArray0);
      Range range0 = Range.of((-3786L), (-800L));
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Builder range_Builder1 = range_Builder0.shift(127L);
      Range.of((-104L), 1869L);
      Range.of((-238L), 1854L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(691L);
      assertSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4700567066286254
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1485L));
      Range.Builder range_Builder2 = range_Builder0.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 1L);
      Range range1 = Range.ofLength(1172L);
      range0.intersects(range1);
      range0.iterator();
      range_Builder1.shift((-630L));
      range0.endsBefore(range1);
      range1.intersects(range0);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range_Builder2.expandBegin((-559L));
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.172269617069339
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = (-2749L);
      Range range0 = Range.of((-2749L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-2749L), (-2749L));
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3170854239925207
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-42L), (-42L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of((-145L), 198L);
      range_Builder0.expandEnd(127L);
      Range.Builder range_Builder2 = new Range.Builder(255L);
      range_Builder2.expandBegin((-1L));
      Range.of((-42L));
      range0.equals(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder3.shift(1276L);
      // Undeclared exception!
      try { 
        Range.of(1849L, (-5069L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.314260057909176
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      range_Builder0.copy();
      range_Builder1.expandEnd((-128L));
      Range.Builder range_Builder2 = new Range.Builder((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 366L, 1145L);
      Range range1 = Range.ofLength(32767L);
      range1.intersects(range0);
      range_Builder2.shift(366L);
      range1.endsBefore(range0);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1485L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6534291619614656
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range range0 = Range.of(3L, 1871L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder1.shift(1768L);
      Range range1 = range_Builder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-469L));
      range0.startsBefore(range3);
      Range.Builder range_Builder4 = new Range.Builder();
      range0.intersects(range1);
      range2.isEmpty();
      Range.of(127L);
      Range.Builder range_Builder5 = range_Builder0.expandBegin((-1L));
      assertSame(range_Builder5, range_Builder3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.184783964830172
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-422L), (-422L));
      range0.getLength();
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-422L), (-422L));
      range0.complement(range1);
      Range.Comparators.values();
      range1.intersection(range0);
      range1.endsBefore(range0);
      long long0 = (-1083L);
      range1.endsBefore(range0);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1083L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.414302138049348
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(9L, 9223372036854775807L);
      long long0 = (-1L);
      range_Builder0.expandEnd(9L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854775807L);
      Range range1 = Range.ofLength(9L);
      range0.equals(range_Builder1);
      Range.of(1855L);
      Range.of(0L, 1866L);
      Range range2 = Range.ofLength(0L);
      range2.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("kOxP;{hv)QThGiXU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.kOxP;{hv)QThGiXU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5499997290764718
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      long long1 = (-770L);
      Range range2 = Range.of((-770L), (-770L));
      range0.startsBefore(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Range range3 = Range.of((-770L));
      Object object1 = new Object();
      range3.equals(object1);
      long long2 = (-1L);
      range2.asRange();
      long long3 = (-915L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L), (-915L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6014952855418523
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), 1871L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of((-469L), 0L);
      range_Builder1.copy();
      Range range1 = Range.ofLength(1L);
      range0.complement(range1);
      range0.split(1L);
      long long0 = 4294967295L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[0];
      linkedList0.toArray(objectArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addFirst(range1);
      range0.complementFrom(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(1L, 3095L);
      range_Builder2.shift(0L);
      // Undeclared exception!
      try { 
        Range.of(1871L, 1868L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1566783114691677
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range range1 = Range.of(0L);
      range0.intersects(range1);
      boolean boolean1 = range1.endsBefore(range0);
      boolean boolean2 = range0.intersects(range1);
      assertTrue(boolean2 == boolean1);
      
      Range range2 = Range.ofLength(0L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3270346505178816
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder2 = range_Builder0.expandEnd(4294967295L);
      range_Builder1.expandBegin(275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_CoordinateSystem0);
      range_Builder2.shift((-1485L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("bK", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bK into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.402850173856357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(127L, 127L);
      long long0 = 3696L;
      range_Builder2.expandBegin(282L);
      Range range0 = Range.of(3696L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_Builder0);
      range_Builder1.contractBegin((-145L));
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.401800865227197
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      Range range2 = Range.of(0L, 0L);
      range0.startsBefore(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(0L);
      range3.startsBefore(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range4.intersects(range3);
      range3.isEmpty();
      Range.of(0L);
      Range range5 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range5.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6531138041409847
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range range0 = Range.of(3L, 1871L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(1768L);
      Range range1 = range_Builder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.intersection(range1);
      Range.of((-469L));
      Range.of((-32768L), (-1984L));
      Range.of(1872L);
      Range.Builder range_Builder3 = range_Builder1.expandBegin((-1984L));
      assertSame(range_Builder1, range_Builder3);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6112283700640226
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      Range range2 = Range.of((-770L), (-770L));
      range0.startsBefore(range1);
      range2.intersection(range0);
      Range range3 = Range.of((-770L));
      range3.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.intersects(range2);
      range2.isEmpty();
      Range.of((-19L));
      // Undeclared exception!
      try { 
        range2.split((-19L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2480453545970223
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of((-5L));
      Range.of((-5L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.612532505383268
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) range0;
      objectArray0[5] = (Object) range_Builder0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 254L);
      Range.ofLength(255L);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(366L, 650L);
      range0.intersects(range2);
      range_Builder0.shift(572L);
      range2.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("can not parse ", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5807488817401363
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 78L;
      long long1 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 1351L;
      Range range0 = Range.of(range_CoordinateSystem0, 78L, 1351L);
      linkedList0.pollFirst();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = (Object) range0;
      objectArray0[2] = (Object) range_Builder0;
      range_Builder0.contractBegin(78L);
      long long3 = 2147483647L;
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of((-1290L), 2147483647L);
      range2.complement(range1);
      // Undeclared exception!
      try { 
        range2.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3081015535348004
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.of(104L, 4294967295L);
      Range.of(131L);
      Range.of(131L, 131L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(104L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2362437609902015
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.of(104L, 4294967295L);
      long long0 = 131L;
      Range.of(131L, 131L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd((-1757L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(104L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2762058352396584
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder0.contractEnd(575L);
      Range range1 = Range.ofLength(1754L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(1002L, 4294967303L);
      range2.intersects(range1);
      range1.intersects(range0);
      Range.Builder range_Builder4 = new Range.Builder(1754L);
      range_Builder3.expandBegin((-369L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.818411947497937
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(long0);
      long long1 = range0.getBegin();
      assertEquals(0L, long1);
      
      boolean boolean1 = range0.isEmpty();
      Range range1 = Range.ofLength(0L);
      boolean boolean2 = range0.intersects(range1);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range1.endsBefore(range0);
      assertFalse(boolean3 == boolean0);
      
      Range range2 = Range.ofLength(0L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.309253284724307
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of(99L, 4294967328L);
      Range.of(131L);
      Range.Builder range_Builder0 = new Range.Builder(2421L);
      Range.Builder range_Builder1 = new Range.Builder(1998L, 2421L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.contractBegin(131L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.588399698874494
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 4138L;
      Range range0 = Range.of(4138L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(255L, 255L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 4138L, 4138L);
      range2.intersection(range0);
      range2.isEmpty();
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 4138L, 4138L);
      Range.of((-2013L), 4138L);
      Range range4 = Range.of(9223372036854775382L);
      range3.endsBefore(range4);
      Range.of(9223372036854775194L);
      long long1 = 9223372036854775807L;
      Range.Comparators.values();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.657564395515379
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of((-770L), (-770L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range3 = Range.of((-770L));
      Range range4 = Range.of(426L, 426L);
      boolean boolean1 = range2.endsBefore(range3);
      assertFalse(boolean1);
      
      Range range5 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range6.isEmpty());
      
      boolean boolean2 = range5.endsBefore(range2);
      assertFalse(boolean2 == boolean0);
      
      Range range7 = Range.of((-770L));
      range4.intersects(range1);
      range7.isEmpty();
      assertSame(range7, range2);
      
      Range range8 = Range.ofLength(0L);
      assertSame(range8, range5);
      assertTrue(range8.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1111L), (-1111L));
      long long0 = range0.getEnd();
      assertEquals((-1111L), long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2828949078742733
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 575L);
      Range range0 = Range.ofLength(575L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder2 = range_Builder0.contractEnd(575L);
      Range range1 = Range.ofLength(1782L);
      range_Builder2.expandBegin(1782L);
      range0.isSubRangeOf(range1);
      range_Builder2.shift((-1128L));
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.of(9223372036854775382L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2013L), 9223372036854775382L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2308254174744957
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1276L, 1276L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandBegin((-4L));
      range_Builder1.build();
      Range range0 = Range.of((-4L), 9223372036849833996L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-2797L), (-46L));
      Range.Builder range_Builder3 = new Range.Builder(917L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      Range.Builder range_Builder1 = new Range.Builder(1276L, 1276L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(198L);
      range_Builder2.expandEnd((-1L));
      range_Builder3.expandEnd((-3610L));
      long long0 = 275L;
      Range.Builder range_Builder4 = range_Builder1.expandBegin((-1L));
      Range.of((-1L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder2.shift(198L);
      // Undeclared exception!
      try { 
        Range.of(1870L, 201L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1209529939096874
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      long long0 = 78L;
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 78L, 65535L);
      range_Builder0.shift(65535L);
      // Undeclared exception!
      try { 
        Range.of(99L, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.427331158545143
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 127L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3786L));
      Range range0 = Range.of(3L, 1871L);
      range_Builder1.shift((-469L));
      range_Builder0.copy();
      range_Builder1.shift((-5505L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range.of((-5505L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5758599130788604
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of((-770L), (-770L));
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-770L));
      Range.of(426L, 426L);
      range2.endsBefore(range3);
      range0.intersection(range1);
      Range.of(0L, 3122L);
      Range.of(3122L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(701L, (-1033L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3108223600053153
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.ofLength(128L);
      range0.split(9223372036854774457L);
      Range.of((-3894L));
      Range.of(1L, 128L);
      Range range1 = Range.of((-878L), (-878L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.6400489242287724
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long long0 = (-469L);
      Range range0 = Range.ofLength(135L);
      Range range1 = Range.of(135L, 135L);
      long long1 = 1865L;
      List<Range> list0 = range1.split(4L);
      range0.complementFrom(list0);
      Range range2 = Range.of((-66L), 4L);
      range2.complement(range0);
      Range.ofLength(9223372036854773462L);
      Range range3 = Range.ofLength(2048L);
      range3.complement(range1);
      // Undeclared exception!
      try { 
        range3.split((-145L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range range0 = Range.of((-3727L));
      Range.Comparators.values();
      range0.spliterator();
      Range.of((-2798L));
      long long0 = range0.getEnd();
      assertEquals((-3727L), long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.302527981851437
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range range0 = Range.ofLength(929L);
      range0.getEnd();
      Range.of(928L, 2371L);
      Range range1 = Range.of(2371L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.0998674935555837
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long long0 = (-3610L);
      Range.Builder range_Builder0 = new Range.Builder((-3610L), (-3610L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1871L;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1871L, 1871L);
      long long2 = (-3786L);
      range_Builder1.shift((-1L));
      Range range0 = range_Builder1.build();
      range_Builder1.copy();
      long long3 = 1837L;
      range_Builder0.expandBegin(1837L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3918877848097235
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range range0 = Range.of(4135L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 4135L, 4135L);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      
      range2.isEmpty();
      Range range4 = Range.of(255L);
      boolean boolean1 = range0.intersects(range2);
      boolean boolean2 = range0.endsBefore(range4);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      
      boolean boolean3 = range4.intersects(range1);
      assertFalse(boolean3 == boolean1);
      
      Range range5 = Range.ofLength(255L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1243L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.316668936831753
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range.of(104L, 4294967295L);
      Range range0 = Range.of(131L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.008561077171424
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = new Long(0L);
      Range range1 = Range.of((-979L));
      assertFalse(range1.equals((Object)range0));
  }
}
