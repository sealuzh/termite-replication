/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:07:37 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7100277797242083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("\t<max-threads-for-nio-write>");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals("\t<max-threads-for-nio-write>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4820675063111985
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-959));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger((-959));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML(">/RN7M*");
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-959), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals((-959), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.944797816169571
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1199));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-1199), advancedSettings0.getPerformancePreferencesLatency());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings1.getPerformancePreferencesConnectionTime();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6981134023974387
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1151));
      advancedSettings0.setBacklog((-1064));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger((-1323));
      int int0 = 1146;
      advancedSettings0.setPerformancePreferencesConnectionTime(1146);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-latency>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("knN%4CGk)08");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // knN%4CGk)08
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9466834227063403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2368);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(2368, advancedSettings0.getPerformancePreferencesBandwidth());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings1.getPerformancePreferencesConnectionTime();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("s");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // s
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.576455224378034
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(29);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger((-410));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("\t<client-socket-traffic-class>");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(29, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.855868606181163
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setByteBufferSize((-3367));
      advancedSettings0.setPerformancePreferencesConnectionTime(743);
      advancedSettings0.setPerformancePreferencesLatency((-1777));
      advancedSettings0.setPerformancePreferencesLatency(3697);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesLatency(743);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(743, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6804162773662537
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(829);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(360);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(11);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setPerformancePreferencesLatency(480);
      advancedSettings0.setPerformancePreferencesLatency(480);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTrafficClass("lPJn6MKa{L iwOm4");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getCharset();
      advancedSettings0.toXML("");
      assertEquals(11, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.742079307672733
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1988);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>1988</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n</advanced-settings>\n");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-latency>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setByteBufferSize((-1));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.toXML("'K/7{}yc");
      advancedSettings1.setCharset("");
      advancedSettings2.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(3237);
      advancedSettings1.setBacklog(3253);
      advancedSettings0.getBacklog();
      advancedSettings2.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(3936);
      advancedSettings0.setMaxThreadsForNioWrite(3237);
      advancedSettings0.setMaxThreadsForNioWrite(1744);
      advancedSettings0.setClientIdentifier("");
      assertEquals(1988, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.62452251180972
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2896);
      advancedSettings0.toXML("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(1182);
      advancedSettings0.setPerformancePreferencesLatency(1182);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(2561);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite(1182);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(2896);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(2896);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-752));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientIdentifier();
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6157417881267007
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(2396);
      advancedSettings0.setClientIdentifier("&ROTk*E-");
      advancedSettings0.setClientSocketSendBufferSize(2396);
      advancedSettings0.setSocketLinger((-408));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(2396);
      int int0 = advancedSettings0.getBacklog();
      assertEquals("&ROTk*E-", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.652094459356576
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(480);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings1.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketReceiveBufferSize(480);
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings1.setCharset((String) null);
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.569792189464339
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      String string0 = advancedSettings0.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.setQSObjectPoolMaker("</qsobject-pool-maker>\n");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7376047261943706
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("bkW5gm");
      advancedSettings0.setMaxThreadsForNioWrite((-3142));
      advancedSettings0.setQSObjectPoolMaker("bkW5gm");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize((-3142));
      advancedSettings0.setClientSocketReceiveBufferSize(571);
      advancedSettings0.setPerformancePreferencesLatency(571);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger((-1855));
      assertEquals("bkW5gm", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("o8i{eZtLNW2^qq3iFO&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // o8i{eZtLNW2^qq3iFO&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4812973869426966
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setSocketLinger(1735);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      assertEquals(1735, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      
      String string1 = advancedSettings0.getCharset();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", string1);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6571975905778524
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1064));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger((-1323));
      int int0 = 1146;
      advancedSettings0.setPerformancePreferencesConnectionTime(1146);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("</performnce-preferen~es-lateny\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("knN%4CGk)08");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // knN%4CGk)08
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("X]@{rj1rwh%d!mI\"");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("RY:/UM*yp!]})n");
      advancedSettings0.setClientIdentifier("</client-socket-traffic-class>\n");
      advancedSettings0.setClientIdentifier("\t<socket-linger>");
      assertEquals("\t<socket-linger>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      
      advancedSettings0.setClientSocketTrafficClass("(9}bXq");
      advancedSettings0.setQSObjectPoolMaker("(9}bXq");
      advancedSettings0.getQSObjectPoolMaker();
      String string1 = advancedSettings0.getQSObjectPoolMaker();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("(9}bXq", string1);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTrafficClass();
      String string1 = advancedSettings0.getClientIdentifier();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string1);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7186438010844762
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("X]@{rj1rwh%d!mI\"");
      advancedSettings1.setClientIdentifier("nF_>2@>_");
      assertEquals("nF_>2@>_", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      int int1 = advancedSettings1.getPerformancePreferencesConnectionTime();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings1.getClientIdentifier());
      assertEquals(0, advancedSettings1.getBacklog());
      assertEquals(65536, advancedSettings1.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
      assertTrue(int1 == int0);
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings1.getSocketLinger());
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7590479998760498
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime((-3367));
      advancedSettings1.setPerformancePreferencesLatency((-1));
      advancedSettings1.setPerformancePreferencesLatency((-1));
      advancedSettings1.getPerformancePreferencesBandwidth();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesConnectionTime();
      advancedSettings2.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setUseDirectByteBuffer(true);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      int int0 = advancedSettings1.getPerformancePreferencesConnectionTime();
      assertEquals((-3367), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-410));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-410), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5769596379972017
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(22);
      advancedSettings0.setClientSocketReceiveBufferSize(29);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger((-410));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("\t<client-socket-traffic-class>");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      assertEquals(29, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(7);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      assertEquals(7, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4208587745273524
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("X]@{rj1rwh%d!mI\"");
      advancedSettings0.setClientIdentifier("`@^JMZL}/LLj5");
      advancedSettings0.setClientIdentifier("X]@{rj1rwh%d!mI\"");
      advancedSettings0.setClientIdentifier("V9L%zvXu*1[=U]tq='");
      assertEquals("V9L%zvXu*1[=U]tq='", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(743);
      advancedSettings0.setPerformancePreferencesLatency((-1777));
      advancedSettings0.setPerformancePreferencesLatency(3697);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(743, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger((-410));
      advancedSettings0.setClientSocketReceiveBufferSize((-410));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-410));
      advancedSettings0.setMaxThreadsForNioWrite((-410));
      advancedSettings0.getClientIdentifier();
      assertEquals((-410), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7033490862672633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("SROhF){qLR(K");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("</client-socket-traffic-class>\n");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(776);
      advancedSettings0.setClientIdentifier("[{tQB_");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(776);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(776, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }
}
