/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:26:47 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HKoEV");
      theClient0.setAuthenticator((Authenticator) null);
      System.setCurrentTimeMillis((-1322L));
      theClient0.getServer();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((-1322L));
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1000L));
      theClient0.getTimeout();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientData();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      TheClient theClient1 = new TheClient();
      theClient0.toString();
      SocketChannel.open();
      MockInetAddress.anyLocalAddress();
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)10;
      int int1 = 0;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)10, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("org.quickserver.net.server.TheClient");
      theClient0.toString();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxAuthTry((-1351));
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(60L);
      theClient0.getAuthenticator();
      assertEquals((-1351), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(true);
      theClient0.getServer();
      theClient0.toString();
      theClient0.setCommunicationLogging(false);
      theClient0.getTimeoutMsg();
      theClient0.setMaxAuthTry((-4720));
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientObjectHandler();
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      ClientEvent clientEvent1 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.getCommunicationLogging();
      theClient0.getClientEvent();
      System.setCurrentTimeMillis((-4720));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.433327868055329
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("");
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(true);
      theClient0.getServer();
      theClient0.setCommunicationLogging(true);
      theClient0.getTimeoutMsg();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setMaxAuthTry((-1360));
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTry();
      theClient0.getCommunicationLogging();
      theClient0.getClientData();
      assertEquals((-1360), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~^i(n<w#-]>><vF?Oj");
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "GC'+)/kb");
      theClient0.setTimeoutMsg("GC'+)/kb");
      theClient0.setTimeout((-2));
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientData();
      theClient0.getCommunicationLogging();
      theClient0.getTimeout();
      System.setCurrentTimeMillis(434L);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      assertEquals((-2), theClient0.getTimeout());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandHandler commandHandler0 = new CommandHandler();
      SocketChannel.open();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[1] = (byte) (-104);
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setMaxConnectionMsg("");
      theClient0.setTrusted(false);
      theClient0.setTimeout((-1121));
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      TheClient theClient1 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient1.setMaxAuthTryMsg((String) null);
      theClient0.getMaxAuthTryMsg();
      assertEquals((-1121), theClient0.getTimeout());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setMaxAuthTryMsg("org.quickserver.net.server.TheClient");
      theClient0.toString();
      theClient0.setCommunicationLogging(false);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxAuthTry((-1351));
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(60L);
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      assertEquals((-1351), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4342348975337873
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg("");
      theClient0.toString();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxAuthTryMsg("r&_yQYOt,Xk ]o#2PFx");
      theClient0.getMaxAuthTryMsg();
      theClient0.setTrusted(true);
      theClient0.getMaxConnectionMsg();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient1.toString();
      assertFalse(theClient1.getTrusted());
      
      theClient0.getClientEvent();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.379260646785054
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg(", Event: ");
      theClient0.getClientEventHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg(", Event: ");
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxAuthTryMsg(", Event: ");
      theClient0.getMaxAuthTryMsg();
      theClient0.setTrusted(false);
      theClient0.getMaxConnectionMsg();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      MockSocket mockSocket0 = new MockSocket();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setMaxAuthTryMsg("w,f9C,UK>rX/U");
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("/security-manager-class");
      theClient0.setMaxAuthTryMsg("n!n$S,p)V? K\"");
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientWriteHandler();
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.323009262423563
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg("");
      theClient0.toString();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxAuthTryMsg("r&_yQYOt,Xk ]o#2PFx");
      theClient0.getMaxAuthTryMsg();
      theClient0.setTrusted(true);
      theClient0.getMaxConnectionMsg();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      TheClient theClient1 = new TheClient();
      assertFalse(theClient1.getTrusted());
      
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setCommunicationLogging(true);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getTimeoutMsg();
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.getSocket();
      assertTrue(theClient1.getCommunicationLogging());
      
      theClient0.getClientExtendedEventHandler();
      QuickServer quickServer0 = new QuickServer("");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(209L);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      MockSocket mockSocket1 = new MockSocket();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("{TheClient ");
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(101);
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setMaxAuthTry(101);
      QuickServer quickServer0 = new QuickServer("[)P3y+m1=\"be");
      quickServer0.setClientExtendedEventHandler("[)P3y+m1=\"be");
      quickServer0.getPort();
      quickServer0.setConsoleLoggingToMini();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setServer(quickServer0);
      theClient0.getTimeout();
      theClient0.setMaxAuthTry(0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientEvent();
      theClient0.getClientEventHandler();
      theClient0.setTimeoutMsg("{TheClient ");
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTry((-4817));
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", 1421, inetAddress0, (-4817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4817
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(209L);
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getSocket();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(125);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(125, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientData();
      theClient0.getClientEvent();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientEvent();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(238);
      SocketChannel.open();
      int int0 = 3;
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)10;
      theClient0.getTimeout();
      int int1 = 0;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)10, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
