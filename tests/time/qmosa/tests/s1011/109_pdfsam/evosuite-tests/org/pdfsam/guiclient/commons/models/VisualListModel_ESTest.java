/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:21:20 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTKeyStroke;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.ParameterBlock;
import java.time.Month;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.SpinnerModel;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5217075077952833
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getSize();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualPageListItemArray0[1] = null;
      stack0.add(visualPageListItemArray0[0]);
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add(visualPageListItemArray0[5]);
      visualListModel0.elementChanged(visualPageListItemArray0[7]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[9];
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>(0, 9);
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap0 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap1 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      hashMap1.clear();
      hashMap1.put(sunHints_Key0, metalRootPaneUI0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2088491963896835
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-75));
      int[] intArray0 = new int[14];
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      visualListModel0.undeleteElements(intArray0);
      intArray1[0] = (-75);
      intArray1[1] = (-75);
      visualListModel0.removeElements(intArray1, false);
      visualListModel0.removeElements(intArray1, false);
      int[] intArray2 = new int[7];
      intArray2[0] = (-75);
      int[] intArray3 = new int[1];
      visualListModel0.moveUpIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3440706478196764
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1173);
      intArray0[1] = 612;
      intArray0[2] = 308;
      intArray0[3] = (-1077);
      intArray0[4] = (-1);
      intArray0[5] = 338;
      intArray0[6] = 11;
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5340640990929724
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getSize();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualPageListItemArray0[1] = null;
      stack0.add(visualPageListItemArray0[0]);
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add(visualPageListItemArray0[5]);
      visualListModel0.elementChanged(visualPageListItemArray0[7]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[9];
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>(0, 9);
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap0 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap1 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      hashMap1.put(sunHints_Key0, metalRootPaneUI0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.400117238503879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getSize();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[10];
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualPageListItemArray0[1] = null;
      stack0.add(visualPageListItemArray0[0]);
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add(visualPageListItemArray0[5]);
      visualListModel0.elementChanged(visualPageListItemArray0[7]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[9];
      intArray0[0] = 679;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 0;
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap0 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      hashMap0.put(sunHints_Key0, metalRootPaneUI0);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 679
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4563074931783206
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getSize();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[9];
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualPageListItemArray0[1] = null;
      stack0.add(visualPageListItemArray0[0]);
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualPageListItemArray0[8] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add(visualPageListItemArray0[5]);
      visualListModel0.elementChanged(visualPageListItemArray0[7]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      int[] intArray0 = new int[9];
      intArray0[0] = 679;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 9;
      intArray0[7] = 0;
      intArray0[8] = 0;
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 679
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9348066056828754
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.setData(visualPageListItemArray0);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 65535
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9678593488156242
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("", (-2233));
      KeyStroke.getKeyStroke((-1502), (-2316), false);
      Character character0 = new Character('\"');
      AWTKeyStroke.getAWTKeyStroke(character0, (-2316));
      KeyStroke.getKeyStroke('Q');
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("M8~Ip", (-1502));
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.getSize();
      visualListModel1.setData((Vector<VisualPageListItem>) stack0);
      assertTrue(stack0.empty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.getElements();
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1173);
      intArray0[1] = 612;
      intArray0[2] = 308;
      intArray0[3] = (-1077);
      intArray0[4] = (-1);
      intArray0[5] = 338;
      intArray0[6] = 11;
      visualListModel0.moveUpIndexes(intArray0);
      int int0 = (-75);
      visualListModel0.addElementAt((VisualPageListItem) null, (-75));
      int[] intArray1 = new int[1];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[2];
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0108940605206347
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-62));
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-62);
      intArray1[1] = (-62);
      visualListModel0.removeElements(intArray1, false);
      visualListModel0.removeElements(intArray1, false);
      int[] intArray2 = new int[7];
      intArray2[0] = (-62);
      int[] intArray3 = new int[1];
      intArray3[0] = (int) (short) (-1907);
      try { 
        visualListModel0.removeElements(intArray3, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1907
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack1.add((VisualPageListItem) null);
      stack1.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack1);
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 7;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2347);
      intArray0[1] = (-888);
      intArray0[2] = (-2653);
      intArray0[3] = (-2092);
      intArray0[4] = (-1838);
      intArray0[5] = (-1834);
      intArray0[6] = (-219);
      intArray0[7] = 1708;
      intArray0[8] = (-372);
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.data = null;
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.removeElements((-709), 1, false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(Integer.MIN_VALUE, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack1.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-98);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(321, byteArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8947181526408912
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack1.add((VisualPageListItem) null);
      stack1.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack1);
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 7;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(7, (Collection<VisualPageListItem>) stack1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.648155236015967
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveUpIndex(1);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null, 1, renderingHints0);
      visualListModel0.addElementAt(visualPageListItemArray0[0], (-236));
      visualListModel0.setData(visualPageListItemArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[6];
      visualPageListItemArray1[1] = null;
      visualPageListItemArray1[2] = null;
      visualPageListItemArray1[3] = null;
      visualListModel0.setData(visualPageListItemArray1);
      visualListModel0.addAllElements((-2621), (Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-236);
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -236
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4400951351245586
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-62));
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.clearData();
      int[] intArray1 = new int[5];
      intArray0[0] = 236;
      visualListModel0.prependAllElements(stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addAllElements((-1826), (Collection<VisualPageListItem>) stack0);
      visualListModel0.elementChanged(visualPageListItemArray0[6]);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int int0 = (-62);
      visualListModel0.addElementAt((VisualPageListItem) null, (-62));
      visualListModel0.prependAllElements(stack0);
      stack0.add((VisualPageListItem) null);
      VisualPageListItem visualPageListItem1 = null;
      stack0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      int int1 = (-309);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-309), (-363), (-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -309
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel1.undeleteElements(intArray0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, Month> hashtable1 = new Hashtable<RenderingHints.Key, Month>();
      Hashtable<RenderingHints.Key, Month> hashtable2 = new Hashtable<RenderingHints.Key, Month>();
      hashtable2.keys();
      RenderingHints renderingHints0 = new RenderingHints(hashtable2);
      Hashtable<RenderingHints.Key, Integer> hashtable3 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints1 = new RenderingHints(hashtable3);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel2.getSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7437009261328056
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel1.setData(visualPageListItemArray0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack1.add(visualPageListItemArray0[1]);
      visualListModel1.elementChanged((VisualPageListItem) null);
      visualListModel1.setData(visualPageListItemArray0);
      assertEquals(2, visualListModel1.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.359747399048139
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt(9, (VisualPageListItem) null);
      visualListModel0.getSize();
      visualListModel0.moveUpIndex(0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getSize();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.stream();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("M8~Ip", 0);
      KeyStroke.getKeyStroke(0, (-895), false);
      Character character0 = new Character('g');
      styledEditorKit_FontSizeAction0.isEnabled();
      Character.valueOf('Q');
      AWTKeyStroke.getAWTKeyStroke(character0, Integer.MIN_VALUE);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('<');
      jComboBox0.registerKeyboardAction((ActionListener) styledEditorKit_FontSizeAction0, "M8~Ip", keyStroke0, 0);
      visualListModel0.removeListDataListener(jComboBox0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)35;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(0, byteArray0);
      Map<RenderingHints.Key, Integer> map0 = null;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      VisualListModel visualListModel1 = new VisualListModel();
      int int0 = 794;
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>(794, 84.71452F);
      HashMap<RenderingHints.Key, MetalRootPaneUI> hashMap0 = new HashMap<RenderingHints.Key, MetalRootPaneUI>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      BiFunction<RenderingHints.Key, Object, MetalRootPaneUI> biFunction0 = (BiFunction<RenderingHints.Key, Object, MetalRootPaneUI>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(sunHints_Key0, biFunction0);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      JSpinner jSpinner0 = null;
      try {
        jSpinner0 = new JSpinner((SpinnerModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // model cannot be null
         //
         verifyException("javax.swing.JSpinner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-62));
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      stack0.removeAll(hashSet0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-98);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-788), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.prependAllElements(stack0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>(1793, 2929.018F);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      RescaleOp rescaleOp0 = new RescaleOp(994.1747F, 0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(4, 1793, 1708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1708
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      Object object0 = visualListModel0.getElementAt(794);
      assertNull(object0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 5;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(251, 852, false);
      visualListModel0.getValidElements();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.putIfAbsent(sunHints_Key0, "");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      // Undeclared exception!
      try { 
        hashtable0.replaceAll(biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(9, (-569), false);
      visualListModel0.getValidElements();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1907);
      shortArray0[1] = (short)0;
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap0 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      RenderingHints renderingHints2 = new RenderingHints(hashMap0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5986492470699507
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.addAllElements((-3913), (Collection<VisualPageListItem>) hashSet0);
      visualListModel0.updateElementAt((-188), (VisualPageListItem) null);
      visualListModel0.getSize();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3913);
      intArray0[1] = (-3913);
      intArray0[2] = (-3913);
      intArray0[3] = (-3913);
      intArray0[4] = (-188);
      intArray0[5] = (-188);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.elementsChanged();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1173);
      intArray0[1] = 612;
      intArray0[2] = 308;
      intArray0[3] = (-1077);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-5));
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-5), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2302958071897643
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-565);
      intArray0[1] = 1;
      intArray0[2] = (-100);
      intArray0[3] = (-2197);
      intArray0[4] = 1312;
      intArray0[5] = 852;
      intArray0[6] = 2200;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.subList(0, 0, true);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      parameterBlock0.set((short)116, 6);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = new int[18];
      intArray1[1] = 0;
      intArray1[1] = 0;
      visualListModel1.reverseElements(intArray1);
      visualListModel1.subList(0, 0);
      visualListModel1.moveDownIndexes(intArray1);
      visualListModel1.moveDownIndex(0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      VisualListModel visualListModel1 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel1.appendAllElements(arrayList0);
      int[] intArray0 = new int[0];
      visualListModel1.undeleteElements(intArray0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, Month> hashtable1 = new Hashtable<RenderingHints.Key, Month>();
      Hashtable<RenderingHints.Key, Month> hashtable2 = new Hashtable<RenderingHints.Key, Month>();
      hashtable2.keys();
      RenderingHints renderingHints0 = new RenderingHints(hashtable2);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.undeleteElements(intArray0);
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      hashtable0.values();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      byte byte0 = (byte) (-91);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byte byte1 = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-91);
      Character character0 = new Character('\"');
      Character character1 = Character.valueOf('\"');
      KeyStroke.getKeyStroke(character1, (int) (byte) (-91));
      AWTKeyStroke.getAWTKeyStroke(character1, 1840);
      KeyStroke.getKeyStroke('\"');
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector0);
      Vector<PdfGraphics2D.HyperLinkKey> vector1 = new Vector<PdfGraphics2D.HyperLinkKey>();
      // Undeclared exception!
      try { 
        vector0.addAll((-646), (Collection<?>) vector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -646
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 65535;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements(1802, (Collection<VisualPageListItem>) stack0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel1.undeleteElements(intArray0);
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, Month> hashtable1 = new Hashtable<RenderingHints.Key, Month>();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.subList(2200, Integer.MIN_VALUE, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2200) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2148221239143426
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[1] = 7;
      intArray0[1] = (-1708);
      intArray0[2] = 1024;
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[10];
      intArray1[0] = (-1708);
      intArray1[1] = 1;
      intArray1[2] = (-100);
      intArray1[3] = (-2197);
      intArray1[4] = 1312;
      intArray1[5] = 852;
      intArray1[6] = 2200;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.subList(0, 0, false);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      parameterBlock0.set((short)116, 6);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Point point0 = new Point();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      visualListModel1.moveUpIndex(0);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      Hashtable<RenderingHints.Key, Object> hashtable1 = new Hashtable<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      VisualListModel visualListModel1 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable2 = null;
      try {
        hashtable2 = new Hashtable<RenderingHints.Key, String>(33, (-1857.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: -1857.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(226);
      VisualListModel visualListModel1 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-49);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(226, byteArray0);
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        renderingHints0.put((Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(2, 2, false);
      assertNull(collection0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1), (-1), false);
      assertNull(collection0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(762, 4);
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      byte byte0 = (byte)0;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(529, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1348406386640635
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-1708);
      intArray0[2] = 1024;
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[10];
      intArray1[0] = (-565);
      intArray1[1] = 1;
      intArray1[2] = (-100);
      intArray1[3] = (-2197);
      intArray1[4] = 1312;
      intArray1[5] = 852;
      intArray1[6] = 2200;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.subList(0, 0, true);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      parameterBlock0.set((short)116, 6);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[4] = integer4;
      Integer integer5 = JLayeredPane.FRAME_CONTENT_LAYER;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.MODAL_LAYER;
      integerArray0[6] = integer6;
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(integerArray0);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      visualListModel0.removeListDataListener(jComboBox0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(65535, (-2002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(65535) > toIndex(-2002)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(1, 1, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(0, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }
}
