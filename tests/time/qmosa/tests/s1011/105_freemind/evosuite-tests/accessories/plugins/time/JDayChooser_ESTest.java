/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:09:16 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.filemode.FileMode;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.util.Locale;
import javax.help.ForwardAction;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.text.DefaultCaret;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = JComponent.getDefaultLocale();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      int int0 = 408;
      int int1 = 0;
      char char0 = ':';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 408, 0L, 408, 0, ':');
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 408
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.320917418231626
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      MockDate mockDate0 = new MockDate(3199, 3199, 228, 3199, 3199);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      MockDate.UTC(228, 901, 228, 901, 3199, 16);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.initDecorations();
      jDayChooser0.setMaxDayCharacters(228);
      jDayChooser0.getDayPanel();
      jDayChooser0.addListeners(16);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      MockDate mockDate0 = new MockDate(3199, 3199, 228, 3199, 3199);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.320906453680021
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "I2S)");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("I2S)");
      actionEvent0.paramString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-40), (-40), (-40), 0);
      actionEvent0.setSource("unknown type,cmd=I2S),when=0,modifiers=");
      actionEvent0.setSource(mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)jDayChooser0.calendar;
      MockDate mockDate0 = new MockDate(49, 901, (-40));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      MockDate.UTC(4, (-25), 2945, 229, (-32), 4);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.initDecorations();
      jDayChooser0.setMaxDayCharacters(37);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.320139906518719
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser0.removeMouseListener(forwardAction0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getY();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setWeekOfYearVisible(true);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1768.973F;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser2.setWeekOfYearVisible(false);
      boolean boolean0 = jDayChooser2.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser1.isWeekOfYearVisible();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      int int0 = 0;
      char char0 = ':';
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileMode fileMode0 = new FileMode();
      Locale locale0 = Locale.CANADA;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-1));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1), false);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1699419390281314
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = ".";
      jDayChooser0.firePropertyChange(".", '2', '2');
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.dayBordersVisible = true;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = 406;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.xpath.operations.Mod");
      // Undeclared exception!
      try { 
        jdbcConnection0.prepareStatement("day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.175605168129436
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 28, 28, 28, 28, ')', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      // Undeclared exception!
      try { 
        Date.valueOf("1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096641232508321
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.maxDayCharacters = (-1621);
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JButton jButton0 = new JButton("sMFRa%!m]Y26nM{", imageIcon0);
      jDayChooser0.setYear(1);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2695541174916074
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "I2S)");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("I2S)");
      actionEvent0.paramString();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 461, (-2554L), 27, 10, '/');
      jDayChooser0.keyPressed(keyEvent0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.setDay(27);
      jDayChooser0.setDay((-514));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1581989550987983
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      jDayChooser0.setDay(0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(1228);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.255897215812417
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDoubleBuffered();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.getY();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1768.973F;
      // Undeclared exception!
      try { 
        Color.RGBtoHSB(0, 0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2971809892632336
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser0.revalidate();
      jDayChooser0.getY();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.firePropertyChange("h:8):R.Y7i9D4\"9,", 0L, (long) 0);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setMaxDayCharacters(100);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("L6s", 'i', 'r');
      jDayChooser0.getToolkit();
      jDayChooser0.getToolkit();
      jDayChooser0.getBaseline(460, 460);
      jDayChooser0.firePropertyChange("filter_not", 0.0F, (float) 460);
      jDayChooser0.setFocusCycleRoot(true);
      jDayChooser0.repaint((-659L));
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setToolTipText("");
      long long0 = 90L;
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(90L);
      jDayChooser0.defaultMinSelectableDate = (java.util.Date) mockDate0;
      jDayChooser0.getWeekdayForeground();
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        MockDate.parse("1zt.G@~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2689422004438367
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.updateUI();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setWeekOfYearVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.205567847238633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getSundayForeground();
      boolean boolean0 = true;
      jDayChooser0.setOpaque(true);
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, (-3515), 12, 1273, 12);
      ActionEvent actionEvent0 = new ActionEvent(date1, 10128, "day", 14);
      JButton jButton0 = jDayChooser0.selectedDay;
      actionEvent0.setSource((Object) null);
      actionEvent0.setSource(date1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2560606660126434
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setMonth(331);
      SystemColor systemColor0 = SystemColor.textText;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 331;
      floatArray0[1] = (float) 331;
      floatArray0[2] = (float) 331;
      floatArray0[3] = (float) 331;
      floatArray0[2] = (float) 331;
      floatArray0[5] = (float) 331;
      floatArray0[6] = (-1.0F);
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = Color.ORANGE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      try { 
        jDayChooser0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-34));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
