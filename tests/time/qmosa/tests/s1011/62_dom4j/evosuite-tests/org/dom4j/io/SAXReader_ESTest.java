/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:07:18 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.DTDHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3381239155780884
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      HandlerBase handlerBase0 = new HandlerBase();
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      handlerBase0.ignorableWhitespace(charArray0, 255, 255);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.resolveEntity("[", "substring-before");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" of document ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("substring-before", "Is](\"/");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  of document Is](\"/ Nested exception: no protocol:  of document Is](\"/
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5361935068043615
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      sAXReader0.getDocumentFactory();
      sAXReader0.removeHandler((String) null);
      sAXReader0.isMergeAdjacentText();
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getXMLFilter();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "w?y_8s7js%|H A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      String string1 = "http://xml.org/sax/properties/declaration-handler";
      documentFactory0.createXPath("http://xml.org/sax/properties/declaration-handler", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/properties/declaration-handler");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      MockFile mockFile1 = new MockFile(mockFile0, "http://xml.org/sax/properties/declaration-handler");
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4703072018501784
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.resetHandlers();
      sAXReader0.isIgnoreComments();
      sAXReader0.createXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isIncludeInternalDTDDeclarations();
      MockFile.createTempFile("L^e", "L^e");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byte byte0 = (byte)110;
      StringReader stringReader0 = new StringReader("//tmp/L^e0L^e");
      try { 
        sAXReader0.read((Reader) stringReader0, "L^e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document L^e : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4044005785699216
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("?n(E1/M");
      sAXReader_SAXEntityResolver0.resolveEntity("L^e", "[e#J|r}Jk8(>");
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader1.configureReader(xMLFilterImpl1, defaultHandler0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "L^e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"L^E\". Nested exception: Invalid encoding name \"L^E\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader1.read("/>]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: />] Nested exception: no protocol: />]
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.066804160788062
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      HandlerBase handlerBase0 = new HandlerBase();
      HandlerBase handlerBase1 = new HandlerBase();
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '/';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '/';
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      sAXReader0.resetHandlers();
      sAXReader0.setIgnoreComments(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getXMLReader();
      sAXReader1.getXMLReader();
      boolean boolean1 = sAXReader0.isIgnoreComments();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      SAXParseException sAXParseException0 = new SAXParseException("}?CqLXTn=9<7o.a;grE", ">5@8WBit~", "http://xml.org/sax/features/validation", 60, 4355);
      sAXParseException0.getStackTrace();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.warning(sAXParseException0);
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "}?CqLXTn=9<7o.a;grE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      SAXParseException sAXParseException0 = new SAXParseException("s1Fh&1&K8\"`", "org.dom4j.tree.AbstractProcessingInstruction", "s1Fh&1&K8\"`", 60, (-4979));
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1824333705280297
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/XA32a0XA32a");
      sAXReader_SAXEntityResolver0.resolveEntity(";z", ";z");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      sAXReader0.configureReader(xMLFilterImpl2, defaultHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/XA32a0XA32a");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/XA32a0XA32a not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.537843116013605
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getXMLFilter();
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.resetHandlers();
      StringReader stringReader0 = new StringReader("L^e");
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0273770757080736
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/http:/xml.org/sax/features/string-interning0L^e");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/http:/xml.org/sax/features/string-interning0L^e");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXParseException sAXParseException0 = new SAXParseException("^dL+8no&@_=~z6@b;", "", "F5JUnLioRok &L", 6, 6);
      defaultHandler0.warning(sAXParseException0);
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.322102232945105
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getXMLFilter();
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.resetHandlers();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader1.isIgnoreComments();
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.createXMLReader();
      sAXReader1.isIncludeExternalDTDDeclarations();
      sAXReader1.isIncludeInternalDTDDeclarations();
      sAXReader0.createDefaultEntityResolver((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getDTDHandler();
      ParserAdapter parserAdapter0 = new ParserAdapter(sAXParserImpl_JAXPSAXParser0);
      parserAdapter0.setDTDHandler((DTDHandler) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      sAXReader1.setXMLFilter((XMLFilter) null);
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.isValidating();
      sAXReader1.createXMLReader();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      sAXReader0.getDispatchHandler();
      sAXReader0.createDefaultEntityResolver("//tmp/L^e0.tmp");
      sAXReader0.isIgnoreComments();
      sAXReader0.setDocumentFactory(documentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      
      sAXReader0.setStringInternEnabled(false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.458776559443127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (String) null, (String) null, 8486, 808);
      xMLFilterImpl0.warning(sAXParseException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.setStringInternEnabled(false);
      xMLFilterImpl1.unparsedEntityDecl((String) null, "ID", (String) null, (String) null);
      sAXReader0.getEncoding();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.getDispatchHandler();
      URL uRL0 = MockURL.getFileExample();
      xMLFilterImpl1.setErrorHandler(sAXContentHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      xMLFilterImpl0.startDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "//tmp/http:/xml.org/sax/features/string-interning0L^e");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.isValidating();
      String string0 = "H4D2A";
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.setFeature("H4D2A", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'H4D2A' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.452661557104001
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.resetHandlers();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L^e");
      sAXReader0.createXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isIncludeInternalDTDDeclarations();
      File file0 = MockFile.createTempFile("L^e", "L^e");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"L^E\". Nested exception: Invalid encoding name \"L^E\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)50);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.418994471909286
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.resetHandlers();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.isValidating();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      String string1 = "\"]";
      try { 
        sAXReader0.read((Reader) stringReader0, "\"]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      MockFile mockFile0 = new MockFile("mM>$zZt:A$=zMxT{<>", "http://xml.org/sax/properties/lexical-handler");
      File file0 = MockFile.createTempFile("mM>$zZt:A$=zMxT{<>", "nooqKiKr}\"s", (File) mockFile0);
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.334527382023145
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.createXMLReader();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.312305887286281
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      HandlerBase handlerBase0 = new HandlerBase();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "< pnkBOT\"?l#A\\6E(");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("< pnkBOT\"?l#A\\6E(");
      sAXReader_SAXEntityResolver0.resolveEntity("", "uKT(cl?");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringReader stringReader0 = new StringReader("< pnkBOT\"?l#A\\6E(");
      try { 
        sAXReader1.read((Reader) stringReader0, "//tmp/tmp/http:/xml.org/sax/features/string-interning0L^e0/tmp/http:/xml.org/sax/features/string-interning0L^e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getXMLFilter();
      String string0 = "L^e";
      sAXReader0.setEncoding("L^e");
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.resetHandlers();
      StringReader stringReader0 = new StringReader("L^e");
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      stringReader0.read(charArray0);
      DefaultDocument defaultDocument0 = new DefaultDocument("L^e");
      sAXReader0.installXMLFilter((XMLReader) null);
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack((String[]) null, (ElementHandler) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/NNW(5+0NNW(5+");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("oyr8_bQh$f", "//tmp/NNW(5+0NNW(5+");
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("//tmp/L^e0.tmp", "//tmp/L^e0.tmp");
      MockFile mockFile1 = new MockFile("//tmp/q17Td8vo}0q17Td8vo}", "//tmp/q17Td8vo}0q17Td8vo}");
      try { 
        sAXReader1.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.attributeDecl("//tmp/http:/xml.org/sax/features/string-interning0L^e", "8?Yi?S\")TG", "http://xml.org/sax/handlers/LexicalHandler", (String) null, "8?Yi?S\")TG");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/handlers/LexicalHandler", locator2Impl1);
      defaultHandler2_0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLReaderAdapter0.skippedEntity("q17Td8vo}");
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      xMLReaderAdapter0.startDocument();
      File file0 = MockFile.createTempFile("q17Td8vo}", "8?Yi?S\")TG");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader1 = new SAXReader(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, sequenceInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader1.read((InputStream) sequenceInputStream2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "Cannot lookup prefixes in DOM 2";
      try { 
        xMLFilterImpl0.setFeature("Cannot lookup prefixes in DOM 2", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: Cannot lookup prefixes in DOM 2
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.isValidating();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)82);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/vs}/mAZCT`SZ:p30vV}/m$AZCz`SZ:p3", "");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("http://xml.org/sax/features/namespace-prefixes", "");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.52095227791089
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      String string0 = "9";
      DefaultHandler defaultHandler0 = new DefaultHandler();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '\"';
      charArray0[2] = 'C';
      charArray0[3] = 'w';
      charArray0[4] = 'C';
      charArray0[5] = '6';
      charArray0[1] = 'q';
      charArray0[7] = 'I';
      charArray0[8] = ';';
      defaultHandler0.ignorableWhitespace(charArray0, 91, 91);
      sAXReader0.setEntityResolver(defaultHandler0);
      sAXReader0.addHandler("9", (ElementHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getEntityResolver();
      sAXReader0.getEncoding();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      bufferedInputStream0.read(byteArray0);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEncoding();
      String string0 = "";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      ElementStack elementStack0 = new ElementStack();
      String string1 = "^?]yN";
      Namespace namespace0 = Namespace.get("_c{%", "^?]yN");
      QName qName0 = new QName("%l6nA/", namespace0);
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.elementByID("_c{%");
      beanElement0.addCDATA("5W){l/Pi");
      // Undeclared exception!
      try { 
        beanElement0.addAttribute("aqi3GSlYd07H", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.tree.LazyList cannot be cast to org.dom4j.bean.BeanAttributeList
         //
         verifyException("org.dom4j.bean.BeanElement", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "";
      try { 
        sAXReader0.read((InputStream) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.52095227791089
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      sAXReader0.setValidation(false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("r11kn3z", sAXModifyElementHandler0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6267108213335244
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getErrorHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = null;
      sAXReader0.configureReader(parserAdapter0, (DefaultHandler) null);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      sAXReader0.removeHandler("TEXT_NODE");
      try { 
        documentFactory0.createXPath("_e+>au*qPYHoNUs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: _e+>au*qPYHoNUs Unexpected '>'
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = false;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("");
      StringReader stringReader0 = new StringReader("m`cl{ct");
      stringReader0.reset();
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      StringReader stringReader1 = new StringReader("http://xml.org/sax/features/namespace-prefixes");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8355442696465665
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "@6c*G]rLdVQN";
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.installXMLFilter((XMLReader) null);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      sAXReader0.setIgnoreComments(false);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      ElementStack elementStack0 = new ElementStack();
      String string0 = "7|[";
      Namespace namespace0 = Namespace.get("`9q-CmNV#", "7|[");
      QName qName0 = new QName("7|[", namespace0);
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.elementByID(".\"9");
      beanElement0.addCDATA("7|[");
      // Undeclared exception!
      try { 
        beanElement0.addAttribute(".\"9", "Validation not supported for XMLReader: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.tree.LazyList cannot be cast to org.dom4j.bean.BeanAttributeList
         //
         verifyException("org.dom4j.bean.BeanElement", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@2a5c74ab Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = ".<qDap^Ol";
      sAXReader0.createDefaultEntityResolver(".<qDap^Ol");
      sAXReader0.getEntityResolver();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      String string0 = "http://xml.org/sax/properties/declaration-handler";
      documentFactory0.createXPath("http://xml.org/sax/properties/declaration-handler", (VariableContext) simpleVariableContext0);
      String string1 = "Error on line ";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("EW)");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class EW) not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3868214863623542
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(60);
      sAXReader0.setEncoding("//tmp/org.dom4j.bean.BeanDocumentFactory0org.dom4j.bean.BeanDocumentFactory");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      sAXReader0.getDocumentFactory();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/ORG.DOM4J.BEAN.BEANDOCUMENTFACTORY0ORG.DOM4J.BEAN.BEANDOCUMENTFACTORY\". Nested exception: Invalid encoding name \"//TMP/ORG.DOM4J.BEAN.BEANDOCUMENTFACTORY0ORG.DOM4J.BEAN.BEANDOCUMENTFACTORY\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader sAXReader1 = new SAXReader(false);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1015));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "org.dom4j.bean.BeanMetaData";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        sAXReader0.setProperty("org.dom4j.bean.BeanMetaData", sequenceInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.bean.BeanMetaData' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.ignorableWhitespace((char[]) null, (-3205), 19);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("//tmp/http:/xml.org/sax/features/string-interning0L^e", "org.jaxen.function.NumberFunction", "http://xml.org/sax/handlers/LexicalHandler");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.resolveEntity("org.dom4j.dom.DOMProcessingInstruction", "Y\")SZuP]huFM_-,T9&");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("6exg!FsTq4?", locator2Impl1);
      xMLFilterImpl0.error(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      SAXParseException sAXParseException0 = new SAXParseException("", "org.dom4j.tree.AbstractProcessingInstruction", "org.dom4j.bean.BeanMetaData", (-4979), 846);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.attributeDecl("http://xml.org/sax/handlers/LexicalHandler", "oRKsp", "dVeO}/", "", "//tmp/L^e0L^e");
      defaultHandler2_0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6220322287852307
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      sAXReader0.getXMLFilter();
      sAXReader0.addHandler("", dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '5';
      charArray0[4] = 'e';
      charArray0[5] = '';
      charArray0[6] = '$';
      charArray0[7] = 'U';
      xMLFilterImpl0.characters(charArray0, (-2114), 0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.createDefaultEntityResolver("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "< pnkBOT\"?l#A\\6E(");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("file://");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXReader$SAXEntityResolver", "-0K>:o[~;= _|#NfS}");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(",k?;T", ",k?;T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \",k?;T\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      HandlerBase handlerBase0 = new HandlerBase();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("ho.dRmb\"X|pbD3$,&r+", (VariableContext) simpleVariableContext0);
      HandlerBase handlerBase1 = new HandlerBase();
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext2 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPath("A6a", (VariableContext) simpleVariableContext2);
      try { 
        sAXReader0.read("A6a");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/A6a (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/A6a (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read((InputStream) null, "//tmp/http:/xml.org/sax/features/string-interning0L^e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/http:/xml.org/sax/features/string-interning0L^e Nested exception: no protocol: //tmp/http:/xml.org/sax/features/string-interning0L^e
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = ">T'{/Lkp:9zyA";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ">T'{/Lkp:9zyA");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(" \"KOcwkpxP-H\"gQT{#", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  \"KOcwkpxP-H\"gQT{# not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
