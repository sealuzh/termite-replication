/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:03:27 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7566100002609515
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpah.Token");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("1IqGx;jVT=.4.~=L]Y-");
      xPathLexer1.number();
      xPathLexer1.star();
      xPathLexer0.comma();
      xPathLexer0.LA(2302);
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      XPathLexer xPathLexer2 = new XPathLexer("s/v");
      xPathLexer1.nextToken();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8474826785390914
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.at();
      assertEquals("o", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(".", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("werken.saxpath.Token", token3.getTokenText());
      
      xPathLexer1.setXPath("i6vt.DE1&Se/'Mtwk'L");
      xPathLexer0.mod();
      xPathLexer1.or();
      Token token4 = xPathLexer1.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("i6vt.DE1", token4.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4817296289812882
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (+)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(")", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.933349717300519
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token1 = xPathLexer0.at();
      assertEquals("o", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("m.", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("o", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.dots();
      assertEquals(14, token5.getTokenType());
      assertEquals("m.", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("w", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("e", token8.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.04338805200306
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.hasMoreChars();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.star();
      xPathLexer3.comma();
      xPathLexer1.LA(2302);
      xPathLexer0.hasMoreChars();
      xPathLexer3.literal();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.nextToken();
      xPathLexer4.setXPath("j[|n^>Y");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      xPathLexer4.getXPath();
      Token token0 = xPathLexer5.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6993630842065766
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      xPathLexer0.setXPath("n\t(a");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.number();
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.setXPath("");
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token2 = xPathLexer3.identifier();
      assertEquals(15, token2.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.510205705599656
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer1.star();
      assertEquals("c", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.Token", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("nA");
      xPathLexer0.or();
      xPathLexer1.identifier();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8753989112168195
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("om", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(31, token3.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer2.identifier();
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("o", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer3.mod();
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer4.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5915894986401944
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("o", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.Token", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("", token3.getTokenText());
      
      xPathLexer1.setXPath("i6vt.DE1&Se/'Mtwk'L");
      xPathLexer0.mod();
      xPathLexer1.or();
      Token token4 = xPathLexer1.identifier();
      assertEquals(15, token4.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4512369144590944
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.colon();
      assertEquals("q", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer1.setXPath("+q[v`xg");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.setXPath("+q[v`xg");
      xPathLexer2.mod();
      xPathLexer1.or();
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      int int0 = xPathLexer1.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.916155299832575
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.number();
      xPathLexer2.star();
      xPathLexer1.comma();
      xPathLexer0.LA(2302);
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      XPathLexer xPathLexer3 = new XPathLexer("j[|n^>Y");
      xPathLexer3.nextToken();
      xPathLexer3.setXPath("!-i;T$&");
      XPathLexer xPathLexer4 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer4.LA((-58));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0025469871121087
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.or();
      xPathLexer0.whitespace();
      xPathLexer1.setXPath("~A8-2");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer0.endPosition();
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer2.literal();
      xPathLexer1.relationalOperator();
      xPathLexer2.dots();
      xPathLexer1.equals();
      xPathLexer1.nextToken();
      xPathLexer2.div();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.endPosition();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      xPathLexer1.rightParen();
      xPathLexer1.pipe();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.132694409894042
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.hasMoreChars();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.setXPath("v$*r\"/");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token8 = xPathLexer0.identifier();
      assertEquals("v", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      assertNotNull(token9);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.558110043687618
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.colon();
      assertEquals("+", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer1.setXPath("+q[v`xg");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("v", token3.getTokenText());
      
      xPathLexer0.setXPath("U");
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.identifier();
      assertEquals("U", token5.getTokenText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4216084846037345
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      xPathLexer1.setXPath("+q[v`xg");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
      
      xPathLexer0.setXPath("?oXvj0=/y#D0");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifier();
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0454732369881112
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z0a>%ZXUwy38w99Pzz");
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.leftParen();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1088368700156717
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      xPathLexer0.and();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.slashes();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7601771289479693
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      XPathLexer xPathLexer1 = new XPathLexer("T#KxrbD9fO");
      xPathLexer1.and();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer1.number();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer0.setXPath("T#KxrbD9fO");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer0.rightParen();
      xPathLexer3.pipe();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.69568550192535
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.colon();
      assertEquals(")", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.and();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(1, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.setXPath("{0aUn`eDzy*H#(xu");
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.243811917929971
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"om.werken.saxpath.Token");
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      XPathLexer xPathLexer1 = new XPathLexer("DC");
      xPathLexer1.and();
      xPathLexer1.number();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.226756950054745
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.leftParen();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer2.and();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer2.and();
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7881757940326897
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("7oyq\"k#NSj^]");
      xPathLexer1.and();
      Token token1 = xPathLexer1.number();
      assertEquals("7", token1.getTokenText());
      
      xPathLexer1.and();
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.setXPath("G<b)'Ct");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("oyq", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.slashes();
      assertEquals("<", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9060537097588068
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer1.number();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.nextToken();
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.identifier();
      xPathLexer2.rightParen();
      xPathLexer4.pipe();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.373801465405981
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.consume();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token10 = xPathLexer1.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.mod();
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.625042765709094
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.and();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath(") (");
      xPathLexer0.notEquals();
      xPathLexer0.endPosition();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.endPosition();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer1.pipe();
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4254376556900759
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8412767695888164
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar(')');
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.equals();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.mod();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.468345318947642
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&]T");
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1971));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6469693897627713
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.consume((-1170));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9546742084957351
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.plus();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('u');
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.consume((-1));
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.getPreviousToken();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3178892829099738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('q');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.028395485341911
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("? hR+c%R$>kY!I~%_G");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.operatorName();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.rightParen();
      xPathLexer0.pipe();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.091308917566737
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.075822335578567
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.consume(4);
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.isIdentifierStartChar('0');
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.LA(330);
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.307512932449385
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*SsY &VqZ)@+#6be08");
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.isIdentifierStartChar('N');
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.159692729042681
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.consume((-2199));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.220913283536335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("GFgT)l");
      char char0 = xPathLexer1.LA(2302);
      assertEquals('\uFFFF', char0);
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4325375549043036
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.582451114176723
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      xPathLexer0.identifier();
      xPathLexer0.consume((-291));
      xPathLexer0.currentPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.506793492426398
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.511952868203546
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.leftBracket();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.getXPath();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7047977143324293
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      Token token0 = xPathLexer0.plus();
      assertEquals("+", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.colon();
      assertEquals("q", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer1.setXPath("+q[v`xg");
      xPathLexer0.and();
      xPathLexer1.number();
      xPathLexer0.div();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.star();
      assertEquals("v", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('v', char0);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("`", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8494938514180335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.LA(2302);
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.dollar();
      String string0 = xPathLexer0.getXPath();
      assertEquals("com.werken.saxpath.XPathLexer", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.981749038926681
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.at();
      assertEquals("+", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("q", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer1.setXPath("+q[v`xg");
      Token token2 = xPathLexer1.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.comma();
      assertEquals("[", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("Nqwd6kP`+PaTwO");
      Token token4 = xPathLexer0.star();
      assertEquals("v", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8329111817674861
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.847620719471821
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o/$V9F");
      Token token0 = xPathLexer0.colon();
      assertEquals("o", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("o/$V9F");
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer2.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.728366387141334
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.colon();
      assertEquals("q", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      xPathLexer0.and();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.div();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer2.setXPath("+q[v`xg");
      xPathLexer1.mod();
      xPathLexer0.or();
      Token token3 = xPathLexer2.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("v", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2315771463431613
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.or();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token2 = xPathLexer3.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer5.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer5.and();
      Token token4 = xPathLexer5.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.and();
      Token token5 = xPathLexer5.dots();
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7354997208913276
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpah.Token");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpah.Token");
      Token token1 = xPathLexer2.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpah.Token");
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer("9o;XgG!P");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("om.werken.saxpah.Token", token3.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer3.or();
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1874566252097463
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.colon();
      assertEquals("+", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+q[v`xg");
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer1.comma();
      assertEquals("q", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.equals();
      assertEquals("[", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer2.and();
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.81966775775669
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+q[v`xg");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("x.HTd%ke? t>>c?<");
      Token token1 = xPathLexer0.leftParen();
      assertEquals("q", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer("x.HTd%ke? t>>c?<");
      Token token3 = xPathLexer4.nextToken();
      assertEquals("x.HTd", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer2.or();
      Token token4 = xPathLexer3.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer2.star();
      assertEquals("x", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "com.werken.saxpath.Token";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2276998681046543
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.rightParen();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.117585472165376
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6103874082843304
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6514830184546327
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o/$V9F");
      Token token0 = xPathLexer0.colon();
      assertEquals("o", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("o/$V9F");
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("V", token6.getTokenText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.22295623089068
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }
}
