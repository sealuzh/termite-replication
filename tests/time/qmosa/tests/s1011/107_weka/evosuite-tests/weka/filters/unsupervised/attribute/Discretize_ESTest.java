/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:21:34 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.709006195206491
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 68;
      intArray0[1] = 68;
      binarySparseInstance0.setMissing((-1882));
      intArray0[2] = (-1882);
      intArray0[3] = 68;
      intArray0[4] = 68;
      intArray0[5] = 68;
      intArray0[6] = 68;
      intArray0[7] = 68;
      intArray0[8] = 68;
      SparseInstance sparseInstance0 = new SparseInstance(1678.34928085546, doubleArray0, intArray0, 68);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sparseInstance0.toString((-1840700267), 68);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstance0.setWeight(1751.74535965);
      Discretize discretize0 = new Discretize("");
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[5];
      Filter.runFilter(filter0, stringArray0);
      SystemInUtil.addInputLine("");
      Discretize discretize0 = new Discretize("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(4, stringArray1.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5884672563391373
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      int int0 = (-1882);
      intArray0[2] = (-1882);
      SparseInstance sparseInstance0 = new SparseInstance((-1732.2321596867152), doubleArray0, intArray0, 68);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      discretize1.m_CutPoints = doubleArray1;
      // Undeclared exception!
      try { 
        discretize1.getBinRangesString(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2q0|F6e";
      stringArray0[1] = "4";
      stringArray0[2] = "Q";
      stringArray0[3] = "1NeG(+%urZKr-";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.setIgnoreClass(true);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(7, stringArray1.length);
      
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "// Timestamp:");
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("// Timestamp:");
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 70);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("// Timestamp:");
      Discretize discretize0 = new Discretize("// Timestamp:");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 68;
      intArray0[1] = 68;
      binarySparseInstance0.setMissing((-1882));
      AllFilter allFilter0 = new AllFilter();
      SystemInUtil.addInputLine("Relational class");
      Discretize discretize0 = new Discretize("Q");
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(3092);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "B2q0|Fe";
      stringArray0[1] = "4";
      stringArray0[2] = "Q";
      stringArray0[5] = "-O";
      stringArray0[6] = "iN";
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("B2q0|Fe");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1617);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1952692537765084
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray0 = discretize0.getOptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 68;
      intArray0[1] = 68;
      binarySparseInstance0.setMissing((-1882));
      intArray0[2] = (-1882);
      intArray0[3] = 68;
      binarySparseInstance0.deleteAttributeAt(68);
      intArray0[4] = 68;
      intArray0[5] = 68;
      intArray0[6] = 68;
      intArray0[7] = 68;
      intArray0[8] = 68;
      SparseInstance sparseInstance0 = new SparseInstance(1675.9876898198002, doubleArray0, intArray0, 68);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(68);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      Object object0 = new Object();
      attribute0.equals(binarySparseInstance0);
      Attribute attribute1 = new Attribute("aG:76>,lZAPDZq'7 (U");
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("(uyc<'%+F} }v1a");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B2q0|Fe");
      SystemInUtil.addInputLine("4");
      Discretize discretize0 = new Discretize("4");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.m_ClassIndex = (int) (byte)55;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%_7=>n~+z;YAA((#");
      SystemInUtil.addInputLine("4");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      System.setCurrentTimeMillis((byte)10);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2q0|F6e";
      stringArray0[1] = "2q0|F6e";
      stringArray0[2] = "4";
      stringArray0[0] = "2q0|F6e";
      stringArray0[4] = "4";
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 68;
      intArray0[1] = 68;
      binarySparseInstance0.setMissing((-1882));
      intArray0[2] = (-1882);
      intArray0[3] = 68;
      binarySparseInstance0.deleteAttributeAt(68);
      intArray0[4] = 68;
      intArray0[5] = 68;
      intArray0[6] = 68;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[7] = 68;
      intArray0[8] = 68;
      SparseInstance sparseInstance0 = new SparseInstance(1675.9876898198002, doubleArray0, intArray0, 68);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(68);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "4";
      stringArray0[3] = "4";
      stringArray0[3] = "4";
      stringArray0[6] = "4";
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("]zj8A=5Gs8zUO");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-1264));
      int int0 = (-1219);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1219));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("4");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3092;
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-313));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1969464026234684
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("_5N!zl");
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      System.setCurrentTimeMillis((-2611L));
      discretize0.setOutputFormat();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getUseEqualFrequency();
      discretize0.getBins();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertEquals("8964", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("Xq|pN2+6O1>`]6X=");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("Can only parse date values for date attributes!");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      String string1 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("Fs8F<teN@[eaJWlS_-");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[0] = (-291.424);
      doubleArray0[1] = (-291.424);
      doubleArray0[2] = (-291.424);
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "Q";
      stringArray0[3] = "4";
      stringArray0[4] = "4";
      stringArray0[5] = "Q";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-567.0055374521819);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1371.60109621;
      int[] intArray0 = new int[5];
      intArray0[0] = 123;
      intArray0[1] = 1376;
      intArray0[2] = 1376;
      intArray0[3] = (-2178);
      intArray0[4] = (-1799);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-1799));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstance0.setWeight(0.0);
      Discretize discretize0 = new Discretize("4");
      discretize0.getBinRangesString((-992));
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize("Can't ignore class when changing the number of attributes!");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("Variance: ");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(1011.83183, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance((-790.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(68);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "// Timestamp:");
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "// Timestamp:";
      stringArray0[1] = "// Timestamp:";
      Filter.runFilter(allFilter0, stringArray0);
      Filter.makeCopy(allFilter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("// Timestamp:");
      Discretize discretize0 = new Discretize("hV:lcw'T");
      discretize0.setMakeBinary(false);
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9093506761746544
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 68;
      intArray0[1] = 68;
      binarySparseInstance0.setMissing((-1882));
      intArray0[2] = (-1882);
      intArray0[3] = 68;
      intArray0[4] = 68;
      intArray0[5] = 68;
      intArray0[6] = 68;
      intArray0[7] = 68;
      intArray0[8] = 68;
      SparseInstance sparseInstance0 = new SparseInstance(68, doubleArray0, intArray0, 68);
      SparseInstance sparseInstance1 = new SparseInstance((-1746.8056656), doubleArray0, intArray0, 68);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(10);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1\" zp.";
      stringArray0[1] = "B2q0|Fe";
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize("All");
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = new int[7];
      intArray0[0] = 68;
      intArray0[1] = 0;
      intArray0[2] = (-80);
      intArray0[3] = 104;
      intArray0[4] = 0;
      intArray0[5] = 1622;
      intArray0[6] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter2 = new AllFilter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "All";
      stringArray0[1] = "All";
      stringArray0[2] = "All";
      stringArray0[3] = "All";
      stringArray0[4] = "?BPt|H?Lbcm";
      stringArray0[5] = "Variance:";
      stringArray0[6] = "Variance:";
      Filter.runFilter(allFilter2, stringArray0);
      Filter.runFilter(allFilter2, stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "4";
      stringArray0[3] = "4";
      stringArray0[3] = "4";
      stringArray0[6] = "4";
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "4";
      Filter.runFilter(allFilter0, stringArray1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      discretize0.setInvertSelection(false);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SystemInUtil.addInputLine("H,#KziMX+.mZqB ;J");
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter2 = new AllFilter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Variance:";
      stringArray0[1] = "All";
      stringArray0[2] = "Xs5Wd\u0005bO&|Z+X";
      stringArray0[3] = "hk6VOL";
      stringArray0[4] = "5$x5";
      stringArray0[5] = "premature end of line";
      stringArray0[6] = "7<Hn_.m~)leZ9Q;(=l";
      stringArray0[7] = "Yn";
      Filter.runFilter(allFilter2, stringArray0);
      Discretize discretize0 = new Discretize("premature end of line");
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2117657483));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "B2q0|Fe";
      stringArray0[1] = "4";
      stringArray0[2] = "Q";
      stringArray0[3] = "1NeG(+%urZKr-";
      stringArray0[4] = "";
      stringArray0[5] = "-O";
      stringArray0[6] = "iN";
      stringArray0[7] = "'3k";
      stringArray0[8] = "$Ecc_)3eSEDU";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(68);
      Discretize discretize0 = new Discretize("-Y`9.");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1264));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
