/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:00:15 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.94843118075652
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.addNumericTrainClass(670.5782737540986, 378.35);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.m_SumSqrClass;
      SparseInstance sparseInstance0 = new SparseInstance(3);
      double double1 = evaluation0.m_Correct;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) decisionTable0, instances0, 2378, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1450.2086787021547), (int[]) null, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.444656523158396
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 1377, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.499504052662846
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setNumericPriorsFromBuffer();
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setPriors(instances1);
      decisionTable0.setOptions(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(2583);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      String string1 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1371379094773943
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1450.2086787021547), (int[]) null, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_MissingClass = (double) 1;
      evaluation1.setPriors(instances0);
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.SFSchemeEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.532956693902478
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1450.2086787021547), (int[]) null, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      AllFilter allFilter0 = new AllFilter();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation2.unweightedMicroFmeasure();
      try { 
        evaluation1.evaluateModelOnce((double) 6, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.453427906464711
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(KD6zs";
      stringArray0[1] = "(KD6zs";
      GaussianProcesses.main(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Instances instances1 = new Instances(instances0, 120);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      NumericPrediction numericPrediction0 = new NumericPrediction(555.00662, (-1), 555.00662);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.equals(simpleLinearRegression0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix1);
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.085515758348578
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setPriors(instances0);
      evaluation0.numFalseNegatives((-1));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.120520249320185
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.meanPriorAbsoluteError();
      evaluation1.kappa();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      evaluation0.toSummaryString("graphType", true);
      textDirectoryLoader0.setRetrieval(678);
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation0.getClassPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation2.KBMeanInformation();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      evaluation5.SFMeanSchemeEntropy();
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7359745643318765
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.sizeOfPredictedRegions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      costSensitiveClassifier0.setClassifier((Classifier) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, (-2448));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      AllFilter allFilter0 = new AllFilter();
      StringReader stringReader0 = new StringReader("\nTotal Number of Instances                0     \n");
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMicroFmeasure();
      try { 
        evaluation2.evaluateModelOnce((double) 1, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedAreaUnderPRC();
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.m_SumSqrClass;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      JRip jRip0 = new JRip();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) jRip0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2011252625881896
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("fWGdeF8245Tq");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.setDebug(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.m_TrainClassWeights;
      evaluation0.SFMeanPriorEntropy();
      System.setCurrentTimeMillis((-1L));
      evaluation1.SFMeanSchemeEntropy();
      textDirectoryLoader0.setDebug(true);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -93
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "setNumFolds";
      stringArray0[1] = "getBestClassifierIndex";
      stringArray0[2] = "*1jBi";
      stringArray0[3] = "Z1r?v\"o";
      stringArray0[4] = "Relative absolute error            ";
      stringArray0[5] = "c_.q";
      stringArray0[6] = "RmKE8[o:|*";
      stringArray0[7] = "-s <random number seed>\n";
      stringArray0[8] = "no-predictions";
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(3, decisionTable0.TAGS_EVALUATION);
      decisionTable0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      String string0 = evaluation0.toSummaryString(".bsi", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5824888542120448
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissing(14);
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.64700140529044
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      evaluation1.getClassPriors();
      double double0 = evaluation1.m_SumSqrPredicted;
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.SFMeanEntropyGain();
      evaluation1.rootMeanPriorSquaredError();
      try { 
        evaluation2.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7833795051939387
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.setDebug(true);
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      double double0 = evaluation0.SFMeanPriorEntropy();
      System.setCurrentTimeMillis((-1L));
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      textDirectoryLoader0.setDebug(true);
      double double2 = evaluation0.fMeasure(1);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.falseNegativeRate((-2));
      assertEquals(0.0, double3, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double4 = evaluation0.pctIncorrect();
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.475217381152924
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = 103;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      double double1 = evaluation1.KBMeanInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      double double2 = evaluation1.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation2.rootMeanPriorSquaredError();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, evaluation2.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("JWW?");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-239.257323816);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1368.072813));
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'JWW?Nominal1' 'JWW?Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.175059631706782
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      evaluation1.kappa();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double double1 = evaluation1.fMeasure((-1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.m_SumAbsErr;
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation2.KBMeanInformation();
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9570947720739387
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = 103;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation1.m_ClassPriors;
      double double1 = evaluation1.KBMeanInformation();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.addNumericTrainClass(Double.NaN, Double.NaN);
      double double3 = evaluation1.m_MinTarget;
      double double4 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation1.incorrect();
      evaluation1.setPriors(instances0);
      double double6 = evaluation1.fMeasure(2150);
      assertEquals(double6, double5, 0.01);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9591126405203294
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toSummaryString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.unweightedMicroFmeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-434.53449824711885);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 2;
      evaluation0.areaUnderPRC(2);
      evaluation0.areaUnderROC(1);
      evaluation0.trueNegativeRate((-2006));
      evaluation0.numInstances();
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BallTree ballTree0 = new BallTree(instances0);
      DenseInstance denseInstance0 = new DenseInstance((-0.5), doubleArray0);
      try { 
        ballTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5862070295659376
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.weightedAreaUnderPRC();
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.priorEntropy();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.numFalsePositives(497);
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.577988144994187
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      evaluation1.kappa();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.getClassPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double2 = evaluation2.KBMeanInformation();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      evaluation5.SFMeanSchemeEntropy();
      boolean boolean0 = evaluation1.equals(evaluation2);
      assertTrue(boolean0);
      
      double double3 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6497765323370324
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.toMatrixString("@data");
      double[] doubleArray0 = new double[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 22.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-2157.575510372508);
      doubleArray0[5] = (-2157.575510372508);
      doubleArray0[6] = (-2157.575510372508);
      doubleArray0[7] = (-2157.575510372508);
      DenseInstance denseInstance0 = new DenseInstance((-2157.575510372508), doubleArray0);
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      NumericPrediction numericPrediction0 = new NumericPrediction((-2157.575510372508), (-2157.575510372508), 0.0);
      XML xML0 = new XML();
      evaluation0.equals(xML0);
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable0.TAGS_EVALUATION);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(4);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1802);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      DecisionTable decisionTable1 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.numFalseNegatives((-1114383320));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate((-1802));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.576869397469737
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[1] = 459;
      intArray0[2] = 459;
      intArray0[3] = 459;
      intArray0[2] = 459;
      intArray0[5] = 459;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 459);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[6] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      stringArray0[8] = "ksi]((\u0006d9yMYXzl~n]";
      Evaluation.main(stringArray0);
      evaluation0.pctCorrect();
      double double1 = evaluation0.truePositiveRate(16);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      double double3 = evaluation0.pctCorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.makeCopies(zeroR0, 51);
      Evaluation.wekaStaticWrapper(zeroR0, "main");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.94383298389716
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "h=");
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[4] = (byte)79;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_CostMatrix = null;
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.weightedRecall();
      double double4 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      evaluation0.getClassPriors();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double5 = evaluation2.KBMeanInformation();
      assertEquals(double5, double3, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.SFMeanSchemeEntropy();
      assertTrue(evaluation3.equals((Object)evaluation2));
      
      evaluation2.equals((Object) null);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5504930404278245
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.m_MissingClass;
      evaluation1.addNumericTrainClass(0.0, 1);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(42);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 459;
      double double0 = 0.0;
      int[] intArray0 = new int[6];
      int int1 = 4794;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "classifiersTipText";
      try { 
        Evaluation.evaluateModel(".arff", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .arff.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8690702022577768
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3862977040742828
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.addNumericTrainClass((-2000.30899026853), (-1915.8108));
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5992809219098505
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      evaluation1.precision(19);
      AllFilter allFilter0 = new AllFilter();
      evaluation1.SFMeanPriorEntropy();
      evaluation0.weightedMatthewsCorrelation();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getDataSet();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.088860909232396
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      decisionTable0.getEvaluationMeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(42);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.toSummaryString(".arff", true);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5574502480119636
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.areaUnderPRC((-2117));
      evaluation0.areaUnderROC((-1006));
      evaluation0.trueNegativeRate((-2));
      evaluation0.numInstances();
      double double1 = evaluation0.falseNegativeRate((-1006));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      byte byte0 = (byte) (-116);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.relativeAbsoluteError();
      evaluation0.areaUnderPRC((-2117));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "@relation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-239.257323816);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-239.257323816);
      evaluation0.m_NoPriors = true;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-842.986197681));
      evaluation0.totalCost();
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.994353300719145
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      AllFilter allFilter0 = new AllFilter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      MultiScheme multiScheme0 = new MultiScheme();
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable0.TAGS_EVALUATION);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9372549634489036
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable0.TAGS_EVALUATION);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(4);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.639731616075493
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.sizeOfPredictedRegions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      costSensitiveClassifier0.setClassifier((Classifier) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = Double.NaN;
      System.setCurrentTimeMillis(1);
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numTrueNegatives(1393);
      evaluation0.toSummaryString("@relation", false);
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 42;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.814549109212565
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-434.53449824711885);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 2;
      evaluation0.areaUnderPRC(2);
      evaluation0.areaUnderROC(1);
      double double1 = evaluation0.trueNegativeRate((-2006));
      evaluation0.numInstances();
      double double2 = evaluation0.falseNegativeRate(1750);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      AllFilter allFilter0 = new AllFilter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      MultiScheme multiScheme0 = new MultiScheme();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, denseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 4794;
      intArray0[1] = 459;
      intArray0[2] = 459;
      instances0.toArray();
      intArray0[3] = 459;
      intArray0[4] = 459;
      intArray0[5] = 459;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 459);
      evaluation0.getHeader();
      evaluation0.setNumericPriorsFromBuffer();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.evaluateModelOnce((double) 459, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 459
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      AllFilter allFilter0 = new AllFilter();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 4;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.347350890422282
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable0.TAGS_EVALUATION);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(4);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1802);
      intArray0[1] = 4;
      intArray0[1] = 5;
      intArray0[3] = 1;
      intArray0[4] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.KBMeanInformation();
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      try { 
        evaluation1.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4794;
      intArray0[1] = 459;
      intArray0[2] = 459;
      intArray0[3] = 459;
      intArray0[2] = 459;
      intArray0[5] = 459;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 459);
      DenseInstance denseInstance0 = new DenseInstance(459);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.handleCostOption((String) null, 83);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4920667634175637
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = 103;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      double double1 = evaluation1.KBMeanInformation();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.addNumericTrainClass(Double.NaN, Double.NaN);
      double double3 = evaluation0.trueNegativeRate(103);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.293708960244275
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-60);
      byte byte0 = (byte)79;
      byteArray0[4] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.priorEntropy();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.kappa();
      evaluation0.toMatrixString();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      byte byte0 = (byte) (-116);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[1];
      MultiScheme multiScheme0 = new MultiScheme();
      String string0 = Evaluation.makeOptionString(multiScheme0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AllFilter allFilter0 = new AllFilter();
      MultiScheme multiScheme0 = new MultiScheme();
      String string0 = Evaluation.makeOptionString(multiScheme0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Instances instances0 = new Instances("", arrayList0, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader(2);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<array>";
      Evaluation.main(stringArray0);
      MultiScheme multiScheme0 = new MultiScheme();
      assertFalse(multiScheme0.getDebug());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.handleCostOption(".arff", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Instances instances0 = new Instances("", arrayList0, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.normalize();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Instances instances0 = null;
      String string0 = "";
      int int0 = 9;
      Evaluation.handleCostOption("", 9);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      AllFilter allFilter0 = new AllFilter();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
