/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:35:05 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.016920731049463
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.isStdDev(1);
      resultMatrixLatex0.setColOrder(intArray1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = "(";
      stringArray0[2] = "<Ebz.T]mubeW3qIUQ";
      stringArray0[3] = ")";
      stringArray0[4] = "*";
      stringArray0[5] = " ";
      stringArray0[6] = "(";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.192835809358434
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 2);
      resultMatrixLatex0.assign(resultMatrixCSV0);
      resultMatrixLatex0.isStdDev(1);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 56;
      intArray0[2] = 0;
      intArray0[3] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.396689616480482
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(1, "OOxBESava");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setCountWidth(0);
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getCount(1);
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML1.getDisplayName();
      assertTrue(resultMatrixHTML1.getShowAverage());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(40, resultMatrixHTML1.getRowNameWidth());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.042401562647497
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      int int0 = resultMatrixSignificance0.getVisibleColCount();
      assertEquals(1, int0);
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$\bullet$";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixLatex0.getShowAverage();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5609585140671576
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance1.getVisibleColCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(1, "v");
      resultMatrixHTML0.setCountWidth(78);
      resultMatrixSignificance1.assign(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 714);
      resultMatrixCSV0.getCount(16);
      resultMatrixSignificance1.setShowAverage(false);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(78, 1);
      resultMatrixHTML1.getDefaultPrintColNames();
      resultMatrixLatex0.toStringKey();
      resultMatrixHTML0.getDisplayName();
      assertEquals(78, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4308005464820814
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.assign(resultMatrixLatex0);
      resultMatrixCSV0.getSummaryTitle(0);
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.getRowName(5);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][6];
      resultMatrixGnuPlot0.setRanking(intArray0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.setMeanPrec(2);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText1.stdDevPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText1.setMeanPrec(0);
      assertEquals(0, resultMatrixPlainText1.getMeanPrec());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.514775933398452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.assign(resultMatrixCSV1);
      resultMatrixCSV0.getSummaryTitle(2);
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.getRowName(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][4];
      resultMatrixGnuPlot0.setRanking(intArray0);
      resultMatrixGnuPlot0.setMeanPrec(270);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      assertEquals(270, resultMatrixGnuPlot0.getMeanPrec());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCount(1, (-1.0));
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8829302402479273
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      int[][] intArray1 = new int[0][8];
      resultMatrixGnuPlot0.setRanking(intArray1);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.setRanking(intArray1);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray1, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2372065649126105
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 1;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixHTML0.getDefaultPrintColNames();
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      
      resultMatrixHTML0.getDisplayName();
      int int0 = resultMatrixLatex0.getMeanWidth();
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, int0);
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2708457166983775
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getMeanPrec();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (-244.866154);
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 1;
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (-830.47967489);
      doubleArray4[4] = (-244.866154);
      doubleArray0[3] = doubleArray4;
      resultMatrixSignificance0.m_StdDev = doubleArray0;
      resultMatrixSignificance0.toStringRanking();
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1919);
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixSignificance0.setPrintRowNames(false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.clear();
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.getRevision();
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5952689886839555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.getVisibleColCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(3, "");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.setCountWidth(1108);
      resultMatrixSignificance0.assign(resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth((-4186));
      resultMatrixCSV0.getCount(47);
      resultMatrixSignificance0.setShowAverage(false);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.toStringKey();
      resultMatrixHTML0.getDisplayName();
      resultMatrixPlainText0.toStringRanking();
      assertEquals(2, resultMatrixPlainText0.getColCount());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.959924767600913
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.getColName((-1107));
      resultMatrixGnuPlot0.assign(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getStdDev(72, 251);
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText1.setMeanPrec((-1403));
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.625855378045022
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.getDefaultStdDevWidth();
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-430.4123040282051);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      resultMatrixGnuPlot0.WIN_STRING = "";
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 0;
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      resultMatrixGnuPlot0.getRowHidden(25);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.707618725652207
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixCSV0.setEnumerateRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.toArray();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setMeanPrec(1);
      resultMatrixSignificance1.globalInfo();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setShowAverage(false);
      resultMatrixCSV0.getRowName(0);
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.728633092647202
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.getDefaultStdDevWidth();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-430.4123040282051);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 25;
      doubleArray0[2] = doubleArray3;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      resultMatrixHTML0.setSize(25, 2);
      resultMatrixHTML0.setColNameWidth((-2101));
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixHTML0.removeFilterName("");
      resultMatrixGnuPlot0.m_StdDevWidth = 2;
      resultMatrixHTML0.doubleToString((-1954.090187325), 97);
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.printRowNamesTipText();
      resultMatrixHTML0.getSignificance(2, 1);
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2289874463186274
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "OOxBESava";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getRowName((-1220));
      int int0 = 34;
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(34, (-3641));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9753042902289866
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      resultMatrixLatex0.toString();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      resultMatrixLatex0.setRowOrder(intArray0);
      String[] stringArray0 = new String[0];
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(26);
      resultMatrixLatex0.getSignificance(1, 7);
      resultMatrixLatex0.meanWidthTipText();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2388627816403996
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getRevision();
      int int0 = (-3030);
      resultMatrixSignificance0.getSignificance(1, (-3030));
      resultMatrixHTML0.setEnumerateColNames(false);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSize(1609, (-3741));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.981178641936218
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      stringArray0[7] = "B";
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColOrder();
      resultMatrixGnuPlot0.isAverage((-836));
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4978363050654093
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 25;
      intArray0[3] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 2;
      resultMatrixHTML0.setRemoveFilterName(false);
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 2;
      resultMatrixHTML0.m_ColOrder = intArray1;
      resultMatrixHTML0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV0.setRowOrder(intArray1);
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.clear();
      resultMatrixCSV0.toStringKey();
      resultMatrixHTML0.significanceWidthTipText();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.stdDevWidthTipText();
      resultMatrixCSV0.clearHeader();
      resultMatrixCSV0.toStringKey();
      resultMatrixHTML0.setMean(1, 48, 4774.88016);
      assertEquals(25, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7203214621769156
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.getSignificance(1, (-3030));
      resultMatrixHTML0.setEnumerateColNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v";
      stringArray0[1] = "(";
      stringArray0[2] = "J(>fHqbKv\"!";
      stringArray0[3] = "8034";
      stringArray0[4] = " ";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName(19);
      resultMatrixGnuPlot0.setPrintColNames(false);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex1.getSignificance((-1607), 41);
      resultMatrixLatex1.meanWidthTipText();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixLatex1.getRowNameWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9631700387881277
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.getColName((-1107));
      resultMatrixGnuPlot0.assign(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      resultMatrixCSV0.setSummary(intArray1, intArray1);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getCount(1);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixGnuPlot0.isAverage(97);
      resultMatrixGnuPlot0.printColNamesTipText();
      resultMatrixCSV0.getDefaultMeanWidth();
      assertEquals(1, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2286443931453856
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearHeader();
      resultMatrixCSV0.setStdDevPrec((-488));
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2864801152202565
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.getRowName(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixSignificance0.assign(resultMatrixPlainText0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0244516661789937
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixLatex0.m_MeanWidth = 2;
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultMeanWidth();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[6];
      stringArray0[1] = ")";
      resultMatrixLatex0.setShowStdDev(true);
      stringArray0[5] = "]?,0gn;&>X";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6737212942231494
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.toArray();
      resultMatrixHTML1.getDefaultStdDevWidth();
      int int0 = (-2101);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixHTML1);
      resultMatrixHTML2.setSize(1, 91);
      resultMatrixHTML1.setColNameWidth(1);
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixHTML1.removeFilterName("pnbo(>D$qjID");
      // Undeclared exception!
      try { 
        resultMatrixHTML2.doubleToString(91, (-1338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8137056822701627
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "*";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "Bc8Ybo/$V9F7{p";
      stringArray0[5] = "";
      stringArray0[6] = "(";
      stringArray0[7] = ")";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-2120));
      resultMatrixGnuPlot0.setPrintColNames(true);
      resultMatrixGnuPlot0.setMeanWidth(1);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.clear();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.399007489722299
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getVisibleColCount();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixLatex0.m_HeaderKeys = null;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "");
      resultMatrixHTML0.m_PrintRowNames = true;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.assign(resultMatrixLatex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.424780285662753
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixLatex0.toStringKey();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.setRowName(2, "r&");
      resultMatrixHTML0.setCountWidth(76);
      resultMatrixSignificance0.assign(resultMatrixLatex1);
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(542, (-2929));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4380752384475697
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 3;
      intArray2[1] = 2;
      String string0 = resultMatrixPlainText0.padString("F83v8TFUh@7", 1, false);
      assertEquals("F", string0);
      
      intArray2[2] = 1;
      intArray2[3] = 2;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 1;
      intArray2[7] = (-53);
      intArray2[8] = 2;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      resultMatrixPlainText0.m_Significance = intArray1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      resultMatrixPlainText0.m_RowOrder = intArray0;
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getStdDev(2, 2);
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.844563300554244
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      stringArray0[8] = "Bc8Ybo/$V9F7{p";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-2518));
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.setMeanWidth((-1702));
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.clear();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 43);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setMean((-56), (-2518), (-202.93743421942));
      assertEquals(43, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8964595489207685
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.getSignificance((-3231), 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setEnumerateColNames(false);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3867631074271274
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 3;
      intArray2[1] = 2;
      resultMatrixPlainText0.padString("F83v8TFUh@7", 1, false);
      intArray2[2] = 1;
      intArray2[3] = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.9675973195260665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.getColName((-1107));
      resultMatrixGnuPlot0.assign(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      resultMatrixCSV0.setSummary(intArray1, intArray1);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setRanking(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.17114588510764
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getSignificanceWidth();
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.getCount(0);
      String[][] stringArray0 = new String[7][2];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "v";
      stringArray2[1] = "";
      stringArray2[2] = "*";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "*";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = "(";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[7];
      stringArray5[0] = "&plusmn;&nbsp;";
      stringArray5[1] = "*";
      stringArray5[2] = "*";
      stringArray5[3] = "(";
      stringArray5[4] = "(";
      stringArray5[5] = ")";
      stringArray5[6] = "*";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[0];
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5374084243288655
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][7];
      resultMatrixGnuPlot0.m_Significance = intArray0;
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixGnuPlot0.m_HeaderValues = vector0;
      resultMatrixGnuPlot0.m_NonSigWins = null;
      resultMatrixGnuPlot0.isRowName(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "$circ$";
      vector0.ensureCapacity(0);
      stringArray0[2] = " ";
      stringArray0[3] = "(";
      stringArray0[4] = "";
      stringArray0[5] = "(";
      stringArray0[6] = "v";
      stringArray0[7] = "sKar";
      resultMatrixLatex0.m_ColNames = stringArray0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.256111944515603
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.doubleToString(1490.8334019685, 229);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      resultMatrixGnuPlot0.trimString("wBV", (-285));
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-285), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.710977995567659
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.removeFilterName("+OnooqKiKr}\"");
      resultMatrixSignificance0.setStdDevWidth((-1138));
      resultMatrixSignificance0.m_PrintColNames = false;
      resultMatrixSignificance0.m_RowNameWidth = (-1138);
      resultMatrixSignificance0.m_MeanPrec = 1817;
      resultMatrixSignificance0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixSignificance0.setCountWidth(670);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.m_CountWidth = 0;
      resultMatrixGnuPlot0.getColName(26);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      resultMatrixGnuPlot0.m_RankingLosses = intArray1;
      resultMatrixGnuPlot0.getShowStdDev();
      resultMatrixGnuPlot0.getDefaultPrintRowNames();
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixSignificance0.stdDevWidthTipText();
      assertTrue(resultMatrixSignificance0.getPrintColNames());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7716840566803613
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.assign(resultMatrixCSV1);
      resultMatrixCSV0.getSummaryTitle(2);
      resultMatrixCSV0.getDefaultMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.m_StdDevWidth = 0;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setMeanPrec(2);
      resultMatrixSignificance0.globalInfo();
      resultMatrixCSV0.m_SignificanceWidth = 2;
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.getRowName(0);
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][5];
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[][] intArray1 = new int[0][4];
      resultMatrixGnuPlot0.setRanking(intArray1);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      resultMatrixGnuPlot0.m_StdDevPrec = 1;
      resultMatrixGnuPlot0.setMeanPrec(270);
      resultMatrixGnuPlot0.m_MeanWidth = 2;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.191153723572059
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.assign(resultMatrixHTML0);
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.isStdDev(1);
      resultMatrixLatex0.getColName(2435);
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.90527543377153
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toString();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-2141), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3951077387164035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 97);
      resultMatrixPlainText0.padString(" ", (-2518), false);
      resultMatrixPlainText0.toStringSummary();
      assertEquals(3, resultMatrixPlainText0.getColCount());
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText1.toStringRanking();
      resultMatrixPlainText1.getStdDev(0, 3);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>(vector0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) vector1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.or(predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.negate();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.getSummaryTitle(48);
      assertEquals("w", string0);
      
      resultMatrixSignificance0.setCount(2, 3);
      int int0 = resultMatrixPlainText1.getStdDevWidth();
      assertEquals(2, resultMatrixPlainText1.getStdDevPrec());
      assertEquals(50, resultMatrixPlainText1.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText1.getRowCount());
      assertEquals(2, resultMatrixPlainText1.getMeanPrec());
      assertEquals(0, int0);
      assertTrue(resultMatrixPlainText1.getPrintRowNames());
      assertTrue(resultMatrixPlainText1.getPrintColNames());
      assertEquals(0, resultMatrixPlainText1.getSignificanceWidth());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.663441992032055
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.m_StdDevPrec = 507;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRowHidden((-488));
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.015799205533984
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getRevision();
      assertEquals(1, resultMatrixSignificance0.getStdDevPrec());
      
      resultMatrixLatex0.toString();
      int[] intArray0 = new int[0];
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(2);
      resultMatrixLatex0.getSignificance((-1), 981);
      resultMatrixLatex0.meanWidthTipText();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.297301563027817
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      int[][] intArray2 = new int[8][7];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      intArray2[7] = intArray1;
      resultMatrixHTML0.setSummary(intArray0, intArray2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixHTML0.stdDevWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearHeader();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixLatex1);
      resultMatrixCSV1.toStringKey();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.541661188975256
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance0.setMean(2148, (-144), (-144));
      resultMatrixSignificance0.getDefaultStdDevPrec();
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.setColHidden(2, false);
      assertTrue(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.315113236867931
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      Vector<String> vector0 = new Vector<String>();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getRowNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.isStdDev((-1832));
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1902341833421737
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1, 2);
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixHTML0.clearHeader();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      Vector<String> vector1 = new Vector<String>();
      resultMatrixHTML0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4877276238629853
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int int0 = resultMatrixGnuPlot0.getDefaultStdDevPrec();
      assertEquals(2, int0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      booleanArray0[4] = true;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.addHeader("", " ");
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      resultMatrixGnuPlot0.removeFilterName("");
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6512746156710127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
      
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 507;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      resultMatrixGnuPlot0.m_Significance = intArray0;
      resultMatrixGnuPlot0.m_StdDevPrec = 507;
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixGnuPlot0.getRowHidden((-488));
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4933127863295677
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 25;
      intArray0[3] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 2;
      resultMatrixHTML0.setRemoveFilterName(false);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 2;
      resultMatrixHTML0.m_ColOrder = intArray1;
      resultMatrixHTML0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV0.setRowOrder(intArray1);
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.clear();
      resultMatrixCSV0.toStringKey();
      resultMatrixHTML0.significanceWidthTipText();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.stdDevWidthTipText();
      resultMatrixCSV0.clearHeader();
      resultMatrixCSV0.toStringKey();
      resultMatrixHTML0.getDefaultSignificanceWidth();
      resultMatrixHTML0.setShowStdDev(false);
      assertEquals(25, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.84171161189673
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.getSignificance(0, (-3030));
      resultMatrixHTML0.setEnumerateColNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = ")";
      stringArray0[5] = ")";
      stringArray0[6] = " ";
      stringArray0[7] = "!Ui+fq&^'!";
      stringArray0[8] = "$circ$";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-3030));
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.setMeanWidth(9);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.toStringRanking();
      resultMatrixSignificance0.getRevision();
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.740515678172824
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int int0 = 1;
      resultMatrixSignificance0.setStdDevWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 2);
      resultMatrixHTML0.getDefaultStdDevWidth();
      int int1 = 25;
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setOptions((String[]) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.889674492366626
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.getStdDev(0, 1);
      assertEquals(1, resultMatrixSignificance0.getStdDevWidth());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>(vector0);
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      predicate4.and(predicate1);
      predicate0.or(predicate3);
      predicate2.negate();
      predicate1.negate();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      resultMatrixSignificance2.setCount(94, 6.7);
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.029225695513334
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      String string0 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & [1]\\\\\n\\hline\nrow0                      &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.setPrintRowNames(false);
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.isAverage(86);
      resultMatrixLatex0.getSignificance(0, 84);
      resultMatrixLatex0.meanWidthTipText();
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2986323734298977
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      
      String string0 = resultMatrixHTML0.doubleToString(0.0, 0);
      assertEquals("0.", string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 2);
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.printRowNamesTipText();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      resultMatrixHTML0.getSignificance(110, 1);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7033346011530837
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixCSV0.toString();
      resultMatrixCSV0.setMeanPrec(2);
      String string0 = resultMatrixCSV0.toString();
      assertEquals("Dataset,[1],[2],''\nrow0,'','',''\nrow1,'','',''\n'[v/ /*]','','',[0/0/0]\n", string0);
      
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.getDefaultShowAverage();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2199.3405159;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 2199.3405159;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = 2199.3405159;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 2;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = 2199.3405159;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 416.62420159594;
      doubleArray6[4] = (double) 1;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 2;
      doubleArray6[8] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (double) 2;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 10.0;
      doubleArray7[7] = (double) 2;
      doubleArray7[8] = 5874.7;
      doubleArray0[6] = doubleArray7;
      resultMatrixSignificance0.m_Mean = doubleArray0;
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.padString("[", 1);
      resultMatrixCSV0.rowNameWidthTipText();
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2519956975361426
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevPrec = 0;
      int int0 = resultMatrixCSV0.getColNameWidth();
      assertEquals(0, int0);
      
      resultMatrixCSV0.m_ShowAverage = true;
      String string0 = resultMatrixCSV0.padString("value2", 0, true);
      assertEquals("value2", string0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.rowNameWidthTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1013);
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3292299265092318
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.m_StdDevPrec = 507;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      // Undeclared exception!
      resultMatrixHTML0.setSize(507, 507);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.786774705819917
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      stringArray0[8] = "Bc8Ybo/$V9F7{p";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-2518));
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.setMeanWidth((-1702));
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getPrintColNames();
      resultMatrixGnuPlot0.getRowName(1138);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.9093156465634764
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.getDefaultStdDevWidth();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-430.4123040282051);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot1.setOptions((String[]) null);
      resultMatrixGnuPlot0.getColName(86);
      resultMatrixGnuPlot1.setPrintColNames(true);
      resultMatrixGnuPlot0.setMeanWidth(25);
      resultMatrixGnuPlot1.clear();
      resultMatrixGnuPlot1.getDisplayName();
      assertEquals(25, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2845658749149194
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(45, 45);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      intArray0[2] = 45;
      resultMatrixLatex0.WIN_STRING = "!z@Q$df ";
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      resultMatrixLatex0.m_RowOrder = intArray0;
      int int0 = resultMatrixLatex0.getDefaultColNameWidth();
      assertEquals(0, int0);
      
      resultMatrixLatex0.getShowStdDev();
      assertEquals(45, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(45, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.236686363768168
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec(425);
      resultMatrixCSV0.getStdDevWidth();
      Vector<String> vector0 = new Vector<String>(0);
      resultMatrixCSV0.m_HeaderValues = vector0;
      resultMatrixCSV0.WIN_STRING = "(E6Hl)C{";
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      predicate0.test(vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate0.test(resultMatrixCSV0.m_HeaderValues);
      predicate2.negate();
      vector0.removeIf(predicate2);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.541730638242566
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance0.setMean(2148, (-144), (-144));
      resultMatrixSignificance0.getDefaultStdDevPrec();
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.setColHidden(2, false);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.075274466592629
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.LOSS_STRING = "";
      resultMatrixCSV0.getDefaultRemoveFilterName();
      resultMatrixGnuPlot0.listOptions();
      resultMatrixCSV0.getColHidden((-1833));
      int[] intArray0 = new int[3];
      intArray0[0] = (-2501);
      intArray0[1] = 2;
      intArray0[2] = (-1833);
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      resultMatrixGnuPlot0.listOptions();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.toStringRanking();
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4998087204900146
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(37, 37);
      resultMatrixCSV0.setMeanPrec((-143));
      resultMatrixCSV0.getSummaryTitle((-3827));
      resultMatrixCSV0.setRowNameWidth(37);
      resultMatrixCSV0.m_EnumerateColNames = false;
      resultMatrixCSV0.getCountWidth();
      resultMatrixCSV0.listOptions();
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixCSV0.setPrintRowNames(false);
      resultMatrixCSV0.getSummaryTitle(97);
      resultMatrixCSV0.getMean(97, 125);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.030116694075088
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.m_MeanPrec = (-1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      int[] intArray0 = new int[8];
      resultMatrixSignificance0.clear();
      resultMatrixSignificance0.RIGHT_PARENTHESES = ": Unable to load version information!";
      intArray0[0] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      ResultMatrixPlainText.main((String[]) null);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7193441546139296
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.getSignificance(1, (-3030));
      resultMatrixHTML0.setEnumerateColNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v";
      stringArray0[1] = "(";
      stringArray0[2] = "J(>fHqbKv\"!";
      stringArray0[3] = "8034";
      stringArray0[4] = " ";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName(19);
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getDisplayName();
      assertEquals(2, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.9922883260609714
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(0);
      resultMatrixLatex0.getSignificance(323, 0);
      resultMatrixLatex0.meanWidthTipText();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.9888296324981436
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ty";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "w(c--0_{)!M3";
      stringArray0[4] = "pv*+h%Uc";
      stringArray0[5] = "-col-name-width";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }
}
