/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 23:44:10 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7795427125378693
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      Vector<Object> vector0 = new Vector<Object>(1);
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixSignificance0.m_ColNameWidth = 1764;
      resultMatrixSignificance0.addHeader("", "");
      resultMatrixSignificance0.padString("[", 1764, true);
      resultMatrixSignificance0.setStdDevWidth(33);
      resultMatrixSignificance0.getEnumerateRowNames();
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.getMeanWidth();
      resultMatrixSignificance0.setStdDevWidth(46);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8004698251768687
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.m_StdDevPrec = 5;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      resultMatrixSignificance0.addHeader("", "");
      intArray1[1] = 0;
      intArray1[0] = 1;
      resultMatrixSignificance0.setRowName(1, "");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5284271637074016
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.setStdDevWidth(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "pv*+h%Uc";
      stringArray0[1] = "wRA68z\"FIpLy=t`UD#";
      stringArray0[2] = "(";
      stringArray0[3] = "";
      ResultMatrixHTML.main(stringArray0);
      stringArray0[4] = "*";
      stringArray0[5] = "";
      stringArray0[6] = "pv*+h%Uc";
      stringArray0[7] = "v";
      ResultMatrixSignificance.main(stringArray0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6316121865953988
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.isStdDev(0);
      ResultMatrixLatex resultMatrixLatex1 = null;
      try {
        resultMatrixLatex1 = new ResultMatrixLatex(1, (-2153));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3013341441476474
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][5];
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[][] intArray1 = new int[0][4];
      resultMatrixGnuPlot0.setRanking(intArray1);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      resultMatrixGnuPlot0.m_StdDevPrec = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.assign(resultMatrixLatex1);
      resultMatrixLatex0.isStdDev((-556));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7584892040296487
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[1] = 2;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.getColName(1041);
      resultMatrixGnuPlot0.assign(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixSignificance0.addHeader("*", "5.70001 == 5.7 ? ");
      resultMatrixSignificance0.setRowName(1748, "");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.36193914324208
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(14, 18);
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      resultMatrixSignificance0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "v";
      resultMatrixCSV0.m_RowNames = stringArray0;
      resultMatrixCSV0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(7, 1);
      resultMatrixGnuPlot0.globalInfo();
      resultMatrixCSV0.getRevision();
      resultMatrixSignificance0.toString();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.295463105411534
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.getDefaultMeanPrec();
      int[][] intArray0 = new int[0][5];
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[][] intArray1 = new int[0][4];
      Vector<Object> vector0 = new Vector<Object>();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0                                     &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      resultMatrixLatex0.assign(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setRanking(intArray1);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      
      ResultMatrixLatex resultMatrixLatex2 = new ResultMatrixLatex();
      resultMatrixLatex2.toStringKey();
      int int0 = resultMatrixPlainText0.getSignificanceCount((-2080), 26);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5447520186577304
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 0);
      resultMatrixLatex0.setStdDevPrec(58);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = "$circ$";
      stringArray0[4] = "-col-name-width";
      stringArray0[5] = "$circ$";
      stringArray0[6] = ")";
      stringArray0[7] = "(";
      stringArray0[8] = "";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.showAverageTipText();
      resultMatrixLatex0.getSignificance(0, 2);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.990666785818745
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixHTML0);
      resultMatrixCSV0.doubleToString(0, 0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(83, 1);
      ResultMatrixSignificance resultMatrixSignificance3 = new ResultMatrixSignificance(resultMatrixSignificance2);
      resultMatrixSignificance3.getVisibleColCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(77, 26);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setRowName(10, "'>>dVI''.GF4E[Q~C");
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(18, 46);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixSignificance3);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText2.setRowOrder((int[]) null);
      resultMatrixLatex0.globalInfo();
      resultMatrixCSV0.globalInfo();
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2714434396150396
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0                      &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.isStdDev(1);
      resultMatrixLatex0.getEnumerateColNames();
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4320023172698217
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.getDisplayName();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      resultMatrixLatex0.m_Wins = intArray1;
      resultMatrixLatex0.setRowOrder(intArray0);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.setPrintRowNames(true);
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(8, 0);
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      resultMatrixGnuPlot0.setMeanWidth(0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.clear();
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2423606966230083
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(716, 716);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setOptions((String[]) null);
      Vector<Integer> vector1 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0592703353116186
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[1] = 2;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.getColName(1041);
      resultMatrixGnuPlot0.assign(resultMatrixPlainText0);
      resultMatrixSignificance0.setMeanWidth(81);
      assertEquals(81, resultMatrixSignificance0.getMeanWidth());
      
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      resultMatrixCSV0.toStringKey();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean boolean0 = resultMatrixLatex0.getColHidden(2);
      resultMatrixLatex0.setMean(1216, 2, 837.08332616561);
      boolean boolean1 = resultMatrixLatex0.getDefaultEnumerateColNames();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7886260379670382
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.m_EnumerateRowNames = true;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1, (-824));
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixHTML0.clearHeader();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      Vector<String> vector1 = new Vector<String>();
      resultMatrixHTML0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4593604056305614
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(253);
      resultMatrixGnuPlot0.printRowNamesTipText();
      resultMatrixGnuPlot0.getDefaultCountWidth();
      resultMatrixGnuPlot0.setMean(32, 1000, 0);
      resultMatrixGnuPlot0.setStdDev(0, 32, 0.0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.getColName(70);
      resultMatrixPlainText0.getStdDevPrec();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3802490181000326
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1, (-824));
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixHTML0.clearHeader();
      resultMatrixSignificance0.setEnumerateRowNames(true);
      Vector<String> vector1 = new Vector<String>();
      resultMatrixSignificance0.m_HeaderKeys = vector1;
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getRowNameWidth();
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = null;
      // Undeclared exception!
      try { 
        predicate2.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9779111183073055
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "}%GVNdU1jQ:";
      stringArray0[2] = "# to display all data rows:\n";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "=L];b.y8Yk: ");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getCount((-485));
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.getSignificance(2149, 26);
      resultMatrixLatex1.meanWidthTipText();
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5026691522126177
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ty";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "w(c--0_{)!M3";
      stringArray0[4] = "pv*+h%Uc";
      stringArray0[5] = "-col-name-width";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(1);
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(32, (-1));
      resultMatrixHTML0.clearHeader();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      Vector<String> vector1 = new Vector<String>();
      resultMatrixHTML0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.37545943915071
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                                               col0\n----------------------------------------------------------\nrow0                                              (0)    |\n----------------------------------------------------------\nv/ /*                                                    |\n", string0);
      
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[1] = 2;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.getColName(1041);
      resultMatrixGnuPlot0.assign(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV1.getCount(2405);
      resultMatrixSignificance0.setCount(2, (-440.79649));
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.481759705072207
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = ")";
      stringArray0[3] = "v";
      stringArray0[4] = " ";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixLatex0.setShowStdDev(false);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      
      intArray2[5] = 1;
      intArray2[6] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.setMean(834, 0, 0);
      resultMatrixSignificance0.getDefaultStdDevPrec();
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.setColHidden(4, false);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.026028684057346
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "b/%~9");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.getCount(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\nscriptsize\n{centering\n\begin{tabular}{cl}\\\n(1) & col0 \\\nend{tabular}\n}\nend{table}\n");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate1.and(predicate3);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      predicate0.negate();
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.removeIf(predicate4);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance2.setCount((-1262), 1872.392);
      resultMatrixHTML0.getColName(16);
      assertEquals(25, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.943265871589419
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.clear();
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.setMean(0, (-2030), (-2030));
      resultMatrixSignificance0.getDefaultStdDevPrec();
      boolean boolean0 = resultMatrixSignificance0.getDefaultRemoveFilterName();
      assertFalse(boolean0);
      
      int int0 = resultMatrixSignificance0.getVisibleColCount();
      assertEquals(1, int0);
      
      resultMatrixSignificance0.toStringSummary();
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.941189147059528
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 44);
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance0.setMean((-4136), 0, 0);
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.getVisibleColCount();
      resultMatrixSignificance1.stdDevWidthTipText();
      resultMatrixSignificance1.setColHidden(2, true);
      assertTrue(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.27144343961504
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.assign(resultMatrixLatex0);
      assertEquals(25, resultMatrixLatex1.getRowNameWidth());
      
      resultMatrixLatex0.isStdDev((-2807));
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.950391601025311
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[10];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 25;
      intArray0[3] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      int[] intArray1 = new int[13];
      intArray1[0] = 2;
      resultMatrixHTML0.setRemoveFilterName(false);
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 2;
      resultMatrixHTML0.m_ColOrder = intArray1;
      resultMatrixHTML0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV0.setRowOrder(intArray1);
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.clear();
      resultMatrixCSV0.toStringSummary();
      resultMatrixHTML0.significanceWidthTipText();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.stdDevWidthTipText();
      assertEquals(25, resultMatrixHTML0.getCountWidth());
      
      resultMatrixCSV0.clearHeader();
      resultMatrixCSV0.toStringKey();
      int int0 = resultMatrixCSV0.getDefaultSignificanceWidth();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4941609852370012
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(0);
      resultMatrixLatex0.getSignificance(323, 0);
      resultMatrixLatex0.meanWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.padString((String) null, 323, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4812329012959573
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      stringArray0[7] = "B";
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.colNameWidthTipText();
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9906667858187452
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.padString("q8O{/,", 0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getVisibleColCount();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixLatex0.m_HeaderKeys = null;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "");
      resultMatrixHTML0.m_PrintRowNames = true;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.assign(resultMatrixLatex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.016338903617261
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getVisibleColCount();
      int[] intArray0 = new int[8];
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.setRemoveFilterName(true);
      resultMatrixHTML0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 2);
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV1.clear();
      resultMatrixCSV1.toStringKey();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.significanceWidthTipText();
      resultMatrixHTML1.getDefaultPrintColNames();
      resultMatrixHTML1.stdDevWidthTipText();
      resultMatrixCSV0.clearHeader();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixCSV1.toStringKey();
      assertEquals(2, resultMatrixCSV1.getVisibleRowCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0153240793209064
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      assertEquals(25, resultMatrixHTML0.getCountWidth());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "b/%~9");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getCount(0);
      resultMatrixLatex0.getSignificance((-957), 25);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4065632510840165
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                                               col0\n----------------------------------------------------------\nrow0                                              (0)    |\n----------------------------------------------------------\nv/ /*                                                    |\n", string0);
      
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      resultMatrixGnuPlot0.m_ColOrder = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray0[0] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.getColName((-4239));
      resultMatrixGnuPlot0.assign(resultMatrixGnuPlot1);
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.setMean(102, 2129, 2);
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.setColHidden((-4239), true);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5129932515184144
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 2);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(2);
      resultMatrixLatex0.getSignificance(1421, 47);
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9555334347432662
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 25;
      intArray0[3] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 2;
      resultMatrixHTML0.setRemoveFilterName(false);
      assertEquals(25, resultMatrixHTML0.getCountWidth());
      
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 1;
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      predicate4.negate();
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.removeIf(predicate2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCount(1, 660.1);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.745853530174108
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "# to display all data rows:\n";
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Integer> vector1 = new Vector<Integer>();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCount(0, 0);
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3823174040361317
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.toStringMatrix();
      int int0 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.isAverage(1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.getColName((-1));
      resultMatrixGnuPlot0.assign(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2, 26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 26;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.758489204029649
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      
      resultMatrixCSV0.m_StdDevPrec = 0;
      resultMatrixCSV0.getColNameWidth();
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.padString("value2", (-12), true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.rowNameWidthTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1013);
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.990666785818745
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(30, 30);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance1.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance1.setMean(1, 27, 2148);
      resultMatrixSignificance1.getDefaultStdDevPrec();
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      assertTrue(resultMatrixSignificance0.getShowAverage());
      
      resultMatrixSignificance1.getVisibleColCount();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      resultMatrixSignificance2.stdDevWidthTipText();
      resultMatrixSignificance2.setColHidden(2, false);
      assertFalse(resultMatrixSignificance2.getDefaultShowAverage());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7437733554254993
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "(";
      stringArray0[4] = "-row-name-width";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -row-name-width option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0458628696475247
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance0.setMean(2148, (-144), (-144));
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.setColHidden(0, false);
      assertTrue(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8997571011430585
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      resultMatrixHTML0.getColCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(19, "\tThe width of the significance indicator (0 = optimal).\n\t(default: ");
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "Em@Hhi~n";
      stringArray0[3] = "*";
      resultMatrixSignificance1.m_ColNames = stringArray0;
      resultMatrixSignificance1.m_ShowStdDev = true;
      resultMatrixSignificance1.TIE_STRING = "*";
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.assign(resultMatrixSignificance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4618997385678365
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.412523984115183
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      boolean boolean0 = false;
      int int1 = 2146;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2146, 0);
      // Undeclared exception!
      resultMatrixLatex0.toString();
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5211722119048368
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowOrder(intArray1);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.isAverage(0);
      resultMatrixLatex0.getSignificance(0, 0);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixLatex0.getColHidden(0);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.setMean(30, 0, 543);
      resultMatrixLatex1.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
      assertEquals(0, resultMatrixLatex1.getMeanWidth());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4815429328854863
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      
      resultMatrixLatex0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.isAverage(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setShowAverage(false);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.toStringKey();
      resultMatrixHTML0.getDisplayName();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "]?,0gn;&>X";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$circ$";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8359845336226566
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(30, 30);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.padString(")", 1346, false);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getStdDev(31, 0);
      String string0 = resultMatrixPlainText0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.headerKeys();
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(30, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(30, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8004698251768687
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      resultMatrixSignificance0.addHeader("", "");
      intArray1[1] = 0;
      intArray1[3] = 1;
      resultMatrixSignificance0.setRowName(0, "");
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3852735759383914
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      int[] intArray0 = new int[2];
      resultMatrixGnuPlot0.padString("v", 173, true);
      resultMatrixGnuPlot0.setColNameWidth(2168);
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      stringArray0[8] = "Bc8Ybo/$V9F7{p";
      resultMatrixGnuPlot0.getColName((-2518));
      resultMatrixGnuPlot0.setPrintColNames(false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isAverage(1);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.getSignificance((-1305), 1894);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.946271959759045
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 3;
      intArray2[1] = 2;
      String string0 = resultMatrixPlainText0.padString("F83v8TFUh@7", 1, false);
      assertEquals("F", string0);
      
      intArray2[2] = 1;
      intArray2[3] = 2;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 1;
      intArray2[7] = (-53);
      intArray2[8] = 2;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      resultMatrixPlainText0.m_Significance = intArray1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      resultMatrixPlainText0.m_RowOrder = intArray0;
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getStdDev(2, 2);
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      resultMatrixPlainText0.stdDevPrecTipText();
      String string1 = resultMatrixPlainText0.printColNamesTipText();
      assertEquals("Whether to output column names or just numbers representing them.", string1);
      
      resultMatrixPlainText0.globalInfo();
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8871876276384962
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.printColNamesTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0404387273591684
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 0);
      resultMatrixLatex0.setStdDevPrec(58);
      assertEquals(58, resultMatrixLatex0.getStdDevPrec());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getStdDev(2, 0);
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4888995137001
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[12];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      ResultMatrixSignificance.main((String[]) null);
      resultMatrixSignificance0.getEnumerateRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringKey();
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5674896601396653
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(17, 39);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[2];
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixHTML0.clearRanking();
      stringArray0[0] = "v";
      stringArray0[1] = ")";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixPlainText0.getStdDevWidth();
      resultMatrixHTML0.countWidthTipText();
      int[][] intArray0 = new int[5][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = (-2004);
      intArray1[2] = 39;
      intArray1[3] = 1;
      intArray1[4] = 0;
      intArray1[5] = 17;
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 2162;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 2162;
      intArray4[3] = (-664);
      intArray4[4] = 2;
      intArray4[5] = 1290;
      intArray4[6] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 1;
      intArray5[1] = 17;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.343525988666393
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 1;
      intArray4[5] = (-309);
      intArray4[6] = 2;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6766403906021456
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getSignificanceWidth();
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.getCount(0);
      String[][] stringArray0 = new String[7][2];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "v";
      stringArray2[1] = "";
      stringArray2[2] = "*";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "*";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = "(";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[7];
      stringArray5[0] = "&plusmn;&nbsp;";
      stringArray5[1] = "*";
      stringArray5[2] = "*";
      stringArray5[3] = "(";
      stringArray5[4] = "(";
      stringArray5[5] = ")";
      stringArray5[6] = "*";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[0];
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0404387273591684
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][7];
      resultMatrixGnuPlot0.m_Significance = intArray0;
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixGnuPlot0.m_HeaderValues = vector0;
      resultMatrixGnuPlot0.m_NonSigWins = null;
      resultMatrixGnuPlot0.isRowName(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "$circ$";
      vector0.ensureCapacity(0);
      stringArray0[2] = " ";
      stringArray0[3] = "(";
      stringArray0[4] = "";
      stringArray0[5] = "(";
      stringArray0[6] = "v";
      stringArray0[7] = "sKar";
      resultMatrixLatex0.m_ColNames = stringArray0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.762136040901145
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.doubleToString(1490.8334019685, 229);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      resultMatrixGnuPlot0.trimString("wBV", (-285));
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-285), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2125652971549608
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.removeFilterName("+OnooqKiKr}\"");
      resultMatrixSignificance0.setStdDevWidth((-1138));
      resultMatrixSignificance0.m_PrintColNames = false;
      resultMatrixSignificance0.m_RowNameWidth = (-1138);
      resultMatrixSignificance0.m_MeanPrec = 1817;
      resultMatrixSignificance0.setPrintColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixSignificance0.setCountWidth(670);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.m_CountWidth = 0;
      resultMatrixGnuPlot0.getColName(26);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      resultMatrixGnuPlot0.m_RankingLosses = intArray1;
      resultMatrixGnuPlot0.getShowStdDev();
      resultMatrixGnuPlot0.getDefaultPrintRowNames();
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixSignificance0.stdDevWidthTipText();
      assertEquals((-1138), resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2728773741027957
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.assign(resultMatrixCSV1);
      resultMatrixCSV0.getSummaryTitle(2);
      resultMatrixCSV0.getDefaultMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.m_StdDevWidth = 0;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setMeanPrec(2);
      resultMatrixSignificance0.globalInfo();
      resultMatrixCSV0.m_SignificanceWidth = 2;
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.getRowName(0);
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][5];
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[][] intArray1 = new int[0][4];
      resultMatrixGnuPlot0.setRanking(intArray1);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      resultMatrixGnuPlot0.m_StdDevPrec = 1;
      resultMatrixGnuPlot0.setMeanPrec(270);
      resultMatrixGnuPlot0.m_MeanWidth = 2;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6535021567160118
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = (-2634);
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.218295278057003
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[0][5];
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      int[][] intArray1 = new int[0][4];
      resultMatrixGnuPlot0.setRanking(intArray1);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      resultMatrixGnuPlot0.m_StdDevPrec = 1;
      resultMatrixGnuPlot0.setMeanPrec(270);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getColCount();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.getPrintRowNames();
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector1);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      vector1.setSize(40);
      Vector<Integer> vector2 = new Vector<Integer>();
      vector2.removeIf(predicate1);
      resultMatrixSignificance0.setCount(50, 155.738);
      resultMatrixSignificance0.getDefaultMeanWidth();
      assertEquals(1, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.516329201889268
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ty";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "w(c--0_{)!M3";
      stringArray0[4] = "pv*+h%Uc";
      stringArray0[5] = "-col-name-width";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevPrec = 2558;
      resultMatrixPlainText0.getColNameWidth();
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.276907519391176
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0                      &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.isStdDev(1);
      resultMatrixHTML0.getRowHidden(2);
      boolean boolean0 = resultMatrixLatex0.isMean(1);
      assertTrue(boolean0);
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1205610645474047
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.clear();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.m_StdDevPrec = 507;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRowHidden((-488));
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8167573606109264
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n(1),col0\n", string0);
      
      resultMatrixCSV0.getCount(0);
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      
      resultMatrixSignificance0.setCount(1748, 2);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.452305520964641
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      String string0 = resultMatrixSignificance0.toString();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.m_EnumerateRowNames = false;
      String string1 = resultMatrixSignificance0.doubleToString(0.0, 0);
      assertEquals("0.", string1);
      
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      boolean boolean0 = resultMatrixSignificance0.isAverage(0);
      assertFalse(boolean0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.getColName((-1107));
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.setMean(2148, 43, 43);
      resultMatrixSignificance0.getDefaultStdDevPrec();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.getDefaultRemoveFilterName();
      resultMatrixSignificance1.getVisibleColCount();
      resultMatrixSignificance1.stdDevWidthTipText();
      resultMatrixSignificance0.setColHidden(27, true);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.990666785818745
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      resultMatrixCSV0.assign(resultMatrixHTML0);
      resultMatrixCSV0.doubleToString(0, 0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(46, 12);
      resultMatrixSignificance2.getVisibleColCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 0);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(2, "v");
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(123, 1076);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.431312929461429
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.doubleToString(0.0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.getColName((-1107));
      resultMatrixGnuPlot0.assign(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      resultMatrixCSV0.setSummary(intArray1, intArray1);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getCount(1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9610646939624026
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[1] = 2;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.isAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      String string0 = resultMatrixGnuPlot0.getColName(1041);
      assertNull(string0);
      
      resultMatrixGnuPlot0.assign(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      String string1 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n1,col0\n", string1);
      
      resultMatrixCSV0.getCount(2);
      resultMatrixSignificance0.setCount(47, 0.0);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0458628696475247
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.clear();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 10;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-783);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = (-783);
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_NonSigWins = intArray0;
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setShowAverage(true);
      resultMatrixSignificance0.setMean(2148, (-144), (-144));
      resultMatrixSignificance0.getDefaultStdDevPrec();
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      resultMatrixSignificance0.getVisibleColCount();
      resultMatrixSignificance0.stdDevWidthTipText();
      resultMatrixSignificance0.setColHidden(2, false);
      assertTrue(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1, (-824));
      resultMatrixSignificance0.m_HeaderValues = vector0;
      resultMatrixHTML0.clearHeader();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      Vector<String> vector1 = new Vector<String>();
      resultMatrixSignificance0.m_HeaderKeys = vector1;
      resultMatrixHTML0.getDisplayName();
      String string0 = "The number of decimals after the decimal point for the standard deviation.";
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(416, 0);
      resultMatrixCSV0.RIGHT_PARENTHESES = "";
      resultMatrixCSV0.clearHeader();
      resultMatrixCSV0.setStdDevPrec(0);
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.436707095601008
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      resultMatrixHTML0.m_RankingDiff = intArray1;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      resultMatrixLatex0.removeFilterName("!h.U]`ND1$UMoaR");
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      resultMatrixHTML0.addHeader((String) null, "sig-width");
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      resultMatrixLatex0.toStringMatrix();
      intArray2[7] = 0;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.m_EnumerateRowNames = false;
      resultMatrixHTML0.LOSS_STRING = "b:!<cBz?L6eXj}ZqI";
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.isStdDev(1);
      resultMatrixHTML0.getRowHidden(1);
      resultMatrixLatex0.isMean(1);
      String[] stringArray0 = new String[0];
      ResultMatrixLatex.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.doubleToString(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.562840738126669
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      int[] intArray0 = new int[2];
      resultMatrixGnuPlot0.padString("v", 173, true);
      resultMatrixGnuPlot0.setColNameWidth(2168);
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      stringArray0[8] = "Bc8Ybo/$V9F7{p";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-2518));
      resultMatrixGnuPlot0.setPrintColNames(false);
      assertFalse(resultMatrixGnuPlot0.getPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isAverage(1);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.getSignificance((-1305), 1894);
      resultMatrixLatex0.meanWidthTipText();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1751539589795965
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.getDefaultMeanPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDisplayName();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.getHeader("@)lj5Tj-R*]ZGE");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.502456698306006
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getColName(2);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>(1, (-824));
      resultMatrixSignificance0.m_HeaderValues = vector0;
      String string0 = "]?,0gn;&>X";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[4];
      resultMatrixLatex0.getSummaryTitle(2);
      stringArray0[0] = "$circ$";
      stringArray0[1] = "v";
      stringArray0[2] = "]?,0gn;&>X";
      vector0.setSize(1845);
      resultMatrixLatex0.toArray();
      stringArray0[3] = ")";
      resultMatrixLatex0.setOptions(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6316121865953988
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.padString((String) null, (-1015));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2038085348023726
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixCSV0.toString();
      resultMatrixCSV0.setMeanPrec(2);
      String string0 = resultMatrixCSV0.toString();
      assertEquals("Dataset,[1],[2],''\nrow0,'','',''\nrow1,'','',''\n'[v/ /*]','','',[0/0/0]\n", string0);
      
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.getDefaultShowAverage();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2199.3405159;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 2199.3405159;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = 2199.3405159;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 2;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = 2199.3405159;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 416.62420159594;
      doubleArray6[4] = (double) 1;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 2;
      doubleArray6[8] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (double) 2;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 10.0;
      doubleArray7[7] = (double) 2;
      doubleArray7[8] = 5874.7;
      doubleArray0[6] = doubleArray7;
      resultMatrixSignificance0.m_Mean = doubleArray0;
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      String string1 = resultMatrixCSV0.padString("[", 1);
      assertEquals("[", string1);
      
      resultMatrixCSV0.rowNameWidthTipText();
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.743535678836661
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec(425);
      resultMatrixCSV0.getStdDevWidth();
      Vector<String> vector0 = new Vector<String>(0);
      resultMatrixCSV0.m_HeaderValues = vector0;
      resultMatrixCSV0.WIN_STRING = "(E6Hl)C{";
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      predicate0.test(vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate0.test(resultMatrixCSV0.m_HeaderValues);
      predicate2.negate();
      vector0.removeIf(predicate2);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.618268371350764
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      double[][] doubleArray0 = new double[0][1];
      resultMatrixGnuPlot0.m_Mean = doubleArray0;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-477);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-477), (-745));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2303280079014396
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.getDefaultStdDevWidth();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-430.4123040282051);
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 25;
      doubleArray0[2] = doubleArray3;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      resultMatrixHTML0.setSize(25, 0);
      resultMatrixHTML0.setColNameWidth((-2101));
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixHTML0.removeFilterName("");
      resultMatrixGnuPlot0.m_StdDevWidth = 2;
      resultMatrixHTML0.doubleToString((-1954.090187325), 97);
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.printRowNamesTipText();
      resultMatrixHTML0.getSignificance(2, 1);
      assertEquals(25, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5305150027044263
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Dataset                                               col0\n----------------------------------------------------------\nrow0                                              (0)    |\n----------------------------------------------------------\nv/ /*                                                    |\n", string0);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2155, 1);
      resultMatrixSignificance0.getPrintRowNames();
      ResultMatrixSignificance.main((String[]) null);
      resultMatrixSignificance0.getEnumerateRowNames();
      assertEquals(2155, resultMatrixSignificance0.getColCount());
      
      resultMatrixGnuPlot0.toStringKey();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.252447911925361
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1047;
      intArray0[2] = 1047;
      intArray0[3] = 2;
      intArray0[4] = 1047;
      intArray0[5] = 1047;
      intArray0[6] = (-2266);
      intArray0[7] = 0;
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      resultMatrixSignificance0.m_Wins = intArray1;
      intArray0[8] = 0;
      resultMatrixSignificance0.m_RankingWins = intArray0;
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.setEnumerateColNames(true);
      resultMatrixSignificance0.getRowName(1047);
      int[] intArray2 = new int[0];
      resultMatrixSignificance0.m_RankingLosses = intArray2;
      // Undeclared exception!
      resultMatrixSignificance0.setSize(1047, 1047);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(45, 45);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      intArray0[2] = 45;
      resultMatrixLatex0.WIN_STRING = "!z@Q$df ";
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      resultMatrixLatex0.m_RowOrder = intArray0;
      resultMatrixLatex0.getDefaultColNameWidth();
      boolean boolean0 = resultMatrixLatex0.getShowStdDev();
      assertFalse(boolean0);
      assertEquals(45, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(45, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.383562216847438
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray1[4] = 0;
      resultMatrixLatex0.setRowOrder(intArray1);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.isAverage((-7));
      resultMatrixLatex0.getSignificance(0, 2);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixLatex0.getColHidden(0);
      resultMatrixLatex0.setMean(0, 2, 2);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 25;
      int[][] intArray1 = new int[0][9];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(25, 25);
      resultMatrixLatex0.setStdDevWidth(30);
      assertEquals(30, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5177998018149177
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "&Sb $\"M`a";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      ResultMatrixPlainText.main((String[]) null);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringRanking();
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.LOSS_STRING = "";
      resultMatrixCSV0.getDefaultRemoveFilterName();
      resultMatrixGnuPlot0.listOptions();
      resultMatrixCSV0.getColHidden((-1833));
      int[] intArray0 = new int[3];
      intArray0[0] = (-2501);
      intArray0[1] = 2;
      intArray0[2] = (-1833);
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      resultMatrixGnuPlot0.listOptions();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.toStringRanking();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4942288589873125
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      stringArray0[7] = "B";
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      Enumeration enumeration0 = resultMatrixCSV0.listOptions();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.9019660696039558
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevPrec = 0;
      resultMatrixCSV0.getColNameWidth();
      resultMatrixCSV0.m_ShowAverage = true;
      String string0 = resultMatrixCSV0.padString("value2", 0, true);
      assertEquals("value2", string0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.getDefaultCountWidth();
      String string1 = resultMatrixPlainText0.rowNameWidthTipText();
      assertEquals("The maximum width for the row names (0 = optimal).", string1);
      
      int[] intArray0 = new int[9];
      intArray0[2] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.assign(resultMatrixPlainText0);
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(2, 0);
      resultMatrixCSV1.getCount(5);
      assertEquals(0, resultMatrixCSV1.getRowCount());
      assertEquals(2, resultMatrixCSV1.getVisibleColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getSignificance(0, (-1361));
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getShowAverage());
      
      resultMatrixCSV0.getDefaultRemoveFilterName();
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5894521775275305
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      resultMatrixPlainText0.toStringMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 2);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.isAverage(2);
      resultMatrixLatex0.getSignificance((-2789), 47);
      resultMatrixLatex0.meanWidthTipText();
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.845638493134258
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixSignificance0.setStdDevPrec(1);
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.getSignificance(1, (-3030));
      resultMatrixHTML0.setEnumerateColNames(false);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1690190686939794
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(25);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.getColCount();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setRowName(714, "b/%~9");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixHTML0.setSignificanceWidth(604);
      resultMatrixHTML0.getRowNameWidth();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) resultMatrixLatex0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) resultMatrixSignificance0);
      predicate1.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate0.and(predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) resultMatrixHTML0);
      predicate5.negate();
      predicate3.negate();
      predicate0.and(predicate5);
      assertEquals(25, resultMatrixHTML0.getCountWidth());
      
      Vector<String> vector0 = new Vector<String>(37);
      vector0.setSize(26);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer(0);
      vector1.add(integer0);
      vector1.removeIf(predicate4);
      resultMatrixSignificance0.setCount(5506, 0.0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4812329012959573
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OOxBESava";
      stringArray0[1] = "V!Ge\"";
      stringArray0[2] = "# to display all data rows:\n";
      stringArray0[3] = "# to display all data rows:\n";
      stringArray0[4] = "";
      stringArray0[5] = "n?k7^CP?0Gw*H3cg";
      stringArray0[6] = "f_})-.E.NB](>gN}";
      stringArray0[7] = "";
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setSignificanceWidth((-1402));
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2188758248682
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      stringArray0[7] = "";
      stringArray0[8] = "Bc8Ybo/$V9F7{p";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColName((-2518));
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.setMeanWidth((-1702));
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.clear();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.523954506446991
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.getDisplayName();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      resultMatrixLatex0.m_Wins = intArray1;
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.isAverage(0);
      resultMatrixLatex0.getSignificance(323, 0);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixLatex0.getColHidden(543);
      resultMatrixLatex0.setMean(2448, 543, 0);
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
  }
}
