/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:08:13 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLLongint;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.h2.value.ValueLobDb;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add((Object) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("*YMy|f`cl}$1k", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jnijy", dBSchema0);
      DBSchema dBSchema1 = new DBSchema("=DsjRe", dBCatalog0);
      dBSchema1.setName("@");
      dBCatalog0.getSchemas();
      defaultDBTable0.getPrimaryKeyConstraint();
      genericDescriptorList0.add((Object) dBSchema1);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("jnijy", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9726246376120724
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.removeComments("UmMk+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UmMk+";
      stringArray0[1] = "UmMk+";
      SQLUtil.join("UmMk+", "UmMk+", stringArray0, "%6v", "UmMk+", stringArray0);
      TableContainer tableContainer0 = new TableContainer("rf[V:");
      tableContainer0.getTable("UmMk+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UmMk+ join %6v as UmMk+ on UmMk+.UmMk+ = UmMk+.UmMk+ and UmMk+.UmMk+ = UmMk+.UmMk+", (DBTable) null, 1, "UmMk+");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5518590937731074
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "OOQ j-[>F", true, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.normalize("p\"=D", true);
      assertEquals("p \"=D\"", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("E;x{ l%*h[39^)PHk");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E;x{ l%*h[39^)PHk";
      stringArray0[1] = "E;x{ l%*h[39^)PHk";
      stringArray0[2] = "E;x{ l%*h[39^)PHk";
      stringArray0[3] = "set sh";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "%6v";
      stringArray1[1] = "%6v";
      stringArray1[2] = "E;x{ l%*h[39^)PHk";
      // Undeclared exception!
      try { 
        SQLUtil.join("E;x{ l%*h[39^)PHk", "set sh", stringArray0, "exec", "set sh", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QUSV*T");
      defaultDBTable0.getPrimaryKeyConstraint();
      genericDescriptorList0.add((Object) null);
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`Py", defaultDBTable0, (DBDataType) null, (Integer) 2, (Integer) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7731696766742513
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      Object object1 = new Object();
      genericDescriptorList0.add(object1);
      genericDescriptorList0.add((Object) "");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[5] = "CHECK ";
      stringArray0[6] = "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL";
      stringArray0[8] = "";
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.958541141784395
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[4] = "CHECK ";
      stringArray0[6] = "CHECK ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("!f2`", false);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.880022123484118
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("6w29");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1399.56));
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      SQLUtil.addRequiredCondition("Fh!Z[IPTPxhhs^Zx9xr", stringBuilder2);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("", false);
      String[] stringArray1 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.731658075898003
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "6w29";
      defaultDBTable0.getIndex("6w29");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isProcedureCall("null = nul");
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = new StringBuilder("drop materialized view");
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("wHX^\"qC)4P7>s/Uz2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'wHX^\"qC)4P7>s/Uz2' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8298397033495917
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("SET SHEMA ");
      boolean boolean1 = SQLUtil.isDDL("null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      assertTrue(boolean1 == boolean0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , )", string1);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "M/+";
      stringArray1[1] = "null = null AND null = null AND null = null AND null = null AND null = null AND null = null";
      stringArray1[2] = null;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("getTriggerExecutionContext", 517);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray1[3] = "D;.l Wv+<pa.'iR^I";
      String string2 = SQLUtil.join((String) null, "M/+", stringArray1, "a'a) k4FDMyh,eiz", "", stringArray1);
      assertEquals("a'a) k4FDMyh,eiz as  on M/+.M/+ = .M/+ and M/+.null = null AND null = null AND null = null AND null = null AND null = null AND null = null = .null = null AND null = null AND null = null AND null = null AND null = null AND null = null and M/+.null = .null and M/+.D;.l Wv+<pa.'iR^I = .D;.l Wv+<pa.'iR^I", string2);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string3 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("UNIQUE (, , , , , )", string3);
      
      String string4 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "");
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      DataDescriptorGenerator dataDescriptorGenerator1 = dataDictionaryImpl0.dataDescriptorGenerator;
      SQLUtil.isQuery("");
      SQLUtil.isDDL("");
      SQLUtil.isDDL("null");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "|uoas";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "|uoas";
      stringArray0[5] = "truncate";
      stringArray0[6] = "table null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("|uoas", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("*YMy|f`cl}$1k", true);
      assertEquals("* YMy | f ` cl } $ 1k", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[4] = "CHECK ";
      TableContainer tableContainer0 = new TableContainer("<PY},_6XSKBx'");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CHECK ", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderValue("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, 32, "''");
      DBDataType dBDataType0 = DBDataType.getInstance(13, "CHECK ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("NLJOIN", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.isIdentical((DBObject) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("updatesetstring(", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3190095981344987
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "call";
      SQLUtil.mutatesDataOrStructure("call");
      boolean boolean0 = true;
      String string1 = "tHO+*jBUp#g";
      String string2 = "+ou(,";
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8649956232156726
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndex("truncate");
      SQLUtil.addRequiredCondition("okc[rb6jqo", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("~je7$Jsl9x!^+", true);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\"  and okc[rb6jqoCONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      String string0 = SQLUtil.join("", " arg1=[", stringArray0, "create unique index?~e%", "create unique index?~e%", stringArray0);
      assertEquals("create unique index?~e% as create unique index?~e% on  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%. and  arg1=[. = create unique index?~e%.", string0);
      
      TableContainer tableContainer0 = new TableContainer("f2,+xM/]NfiQ");
      TableContainer tableContainer1 = new TableContainer("f2,+xM/]NfiQ", tableContainer0);
      tableContainer1.toString();
      tableContainer1.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 1, "ky\f");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" KY\f NULL", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8689295335225176
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndex("truncate");
      stringBuilder0.append("truncate");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("~je7$Jsl9x!^+", true);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      String string0 = "create tableunicodestream";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("okc[rb6jqo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "U&y7+";
      Object object0 = new Object();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "U&y7+");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6533947674590757
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RowOutputText rowOutputText0 = new RowOutputText("execute", ";", ";", true, "~je7$Jsl9x!^+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDBTable0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "~je7$Jsl9x!^+";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("fipn]ICTv> oW+FfO", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray0 = new String[1];
      objectArray0[4] = (Object) "execute";
      SQLUtil.renderValue(objectArray0[3]);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.570916254701837
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndex("truncate");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) "CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()";
      objectArray0[4] = (Object) "~je7$Jsl9x!^+";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()";
      objectArray0[7] = (Object) "~je7$Jsl9x!^+";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      SQLUtil.isProcedureCall("create unique index");
      StringBuilder stringBuilder1 = new StringBuilder("alter index");
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", stringBuilder1);
      StringBuilder stringBuilder3 = new StringBuilder("inserti>m-ye/q,%x");
      SQLUtil.addOptionalCondition("alter index", stringBuilder2);
      assertEquals("alter index and Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL or alter index", stringBuilder2.toString());
      assertEquals("alter index and Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL or alter index", stringBuilder1.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      defaultDBTable0.getPrimaryKeyConstraint();
      genericDescriptorList0.add((Object) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("*YMy|f`cl}$1k", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      Long long0 = new Long(0L);
      SQLLongint sQLLongint0 = new SQLLongint(long0);
      sQLLongint0.setValue((double) 0L);
      genericDescriptorList0.add((Object) sQLLongint0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("}g@(Zxb'D!Jh.gTvy.", true);
      assertEquals("} g @ (Zxb 'D!Jh.gTvy.'", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "execute";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = Character.valueOf('H');
      SQLUtil.renderValue(character0);
      Character.isSurrogate('\\');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte)0, byteArray0, 'H');
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.join("unicodeStream", "'H'", (String[]) null, (String) null, "update", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = "~je7$Jsl9x!^+";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RowOutputText rowOutputText0 = new RowOutputText("execute", ";", ";", true, "~je7$Jsl9x!^+");
      rowOutputText0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~je7$Jsl9x!^+";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "~je7$Jsl9x!^+";
      stringArray0[5] = ";";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncate", true, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.029597008355499
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.removeComments("");
      int int0 = (-251662323);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-251662323), "Ij2 joBI^<t* {");
      defaultDBTable0.getColumn("");
      String string0 = "12Tr-.JN$";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "12Tr-.JN$";
      stringArray1[1] = "insertunicodestream";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" and ", stringArray0, "insertunicodestream", "Ij2 joBI^<t* {", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1530392447012012
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "getDouble", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized view", true, "5aj/4*", "ZIqq/Qp3461");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      defaultDBTable0.getIndex("create materialized view");
      SQLUtil.addRequiredCondition("deletesetstring(", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("deletesetstring(", true);
      SQLUtil.constraintName(dBCheckConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "deletesetstring(", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"create materialized view\"  and deletesetstring(CONSTRAINT deletesetstring( ", stringBuilder0.toString());
      
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.leftJoin("CREATE_TABLE", stringArray0, "7GUv_DbfO>Cq6", "CREATE_TABLE", stringArray1);
      assertEquals("left join 7GUv_DbfO>Cq6 as CREATE_TABLE on ", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "{,Lq=~";
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (, , , , , , , )", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("CONSTRAINT  PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      assertEquals("", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("table null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "table null";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "q";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "q";
      stringArray0[1] = "q";
      stringArray0[2] = "q";
      stringArray0[3] = "q";
      stringArray0[4] = "q";
      stringArray0[5] = "q";
      stringArray0[6] = "q";
      stringArray0[7] = "q";
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.normalize("7LYgtp+S+0cx:Gv", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("/+E03", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      String string0 = "9s6$\\fLXQV";
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getSchemaDescriptor(" REFERENCES ", (TransactionController) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3295757236756525
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      System.setCurrentTimeMillis(0L);
      SQLUtil.mutatesDataOrStructure("3]X.*|obQ{an9|[");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      DataDescriptorGenerator dataDescriptorGenerator1 = dataDictionaryImpl0.dataDescriptorGenerator;
      SQLUtil.isQuery("3]X.*|obQ{an9|[");
      SQLUtil.isDDL("zTQ=B:'TYq|cMP'h");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(2305843009213693952L);
      SQLUtil.mutatesDataOrStructure("delete");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.880022123484118
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType.getInstance((-3492), "C");
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, 1, "create tablesetstring(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: create tablesetstring(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("@#", defaultDBTable0);
      tableContainer1.getTable("WC");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("w#", defaultDBTable0, 1, "+WKB,()-V^?xc}[}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = Character.valueOf('6');
      Character.isSurrogate('u');
      SQLUtil.renderValue(character0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(624, byteArray0, (byte)11);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O\"9t'6tTYrW=~Z>N{ ";
      stringArray0[1] = "O\"9t'6tTYrW=~Z>N{ ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ")9kj18+Gw>A@", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(")9kj18+Gw>A@");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer("9g[Ii21Rdz##plmD:Lc");
      stringBuilder0.append(false);
      int int0 = 296;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(296, 'Q');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3070106220482764
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DBColumn dBColumn1 = defaultDBTable0.getColumn("");
      dBColumnArray0[4] = dBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter materialized viewsetstring(", stringArray0, "Yrhb", "\"6aTMC|5", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.408997048804807
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ra3fwNUd;*`^kqerGP_");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ra3fwNUd;*`^kqerGP_", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ra3fwNUd;*`^kqerGP_");
      mockPrintWriter0.println(false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      SQLUtil.isProcedureCall(")O#9M{;_qx\"A--E");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ra3fwNUd;*`^kqerGP_");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ra3fwNUd;*`^kqerGP_");
      String string0 = "drop index";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isDML("drop index");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.invalidateAllSPSPlans();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3583737674644176
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (, , , , , , , )", string0);
      
      Object object0 = new Object();
      RowOutputText rowOutputText0 = new RowOutputText("fn", "select intounicodestream", "?6`#IS_'#8N", false, "expected pos: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputText0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      defaultDBTable0.getReferrers();
      PrintWriter printWriter0 = mockPrintWriter0.printf("*2#-gEx'gu", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND  = ''", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7532210428155022
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.normalize("LOCAL_TYPE_NAME", true);
      DBSchema dBSchema0 = new DBSchema("LOCAL_TYPE_NAME");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LOCAL_TYPE_NAME", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LOCAL_TYPE_NAME";
      stringArray0[1] = "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8)~*lrZ!7']M-(", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", stringBuilder0);
      assertEquals("CONSTRAINT 8)~*lrZ!7']M-(  and Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", stringBuilder0.toString());
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("com.sun.tools.javac.Main", false);
      assertEquals("com.sun.tools.javac.Main", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", true, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()", string0);
      
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndex("truncate");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "~je7$Jsl9x!^+";
      stringArray1[1] = "%6v";
      stringArray1[2] = "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL";
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      stringArray1[3] = "Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL";
      String string1 = SQLUtil.join("%6v", "CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()", stringArray1, "~je7$Jsl9x!^+", "~je7$Jsl9x!^+", stringArray1);
      assertEquals("%6v join ~je7$Jsl9x!^+ as ~je7$Jsl9x!^+ on CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ().~je7$Jsl9x!^+ = ~je7$Jsl9x!^+.~je7$Jsl9x!^+ and CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ().%6v = ~je7$Jsl9x!^+.%6v and CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ().Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL = ~je7$Jsl9x!^+.Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL and CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ().Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL = ~je7$Jsl9x!^+.Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL", string1);
      
      String[] stringArray2 = new String[1];
      stringArray2[0] = "CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY ()";
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray2, stringArray1);
      assertEquals("SELECT * FROM truncate WHERE CONSTRAINT \"Invalid flag in end: must be TMSUSPEND, TMSUCCESS, or TMFAIL\" PRIMARY KEY () = '~je7$Jsl9x!^+'", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.491658510411127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[1] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[2] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[3] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[4] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[5] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[6] = "CREATE USER SA PASSWORD \"\" ADMIN";
      stringArray0[7] = "CREATE USER SA PASSWORD \"\" ADMIN";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CREATE USER SA PASSWORD \"\" ADMIN", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CREATE USER SA PASSWORD \"\" ADMIN", defaultDBTable0, 13, "CREATE USER SA PASSWORD \"\" ADMIN");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("CREATE USER SA PASSWORD \"\" ADMIN");
      dBColumnArray0[1] = dBColumn0;
      DBDataType.getInstance((-3492), "- ");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.innerJoin("[*q1K", stringArray0, "", "- ", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("@#", defaultDBTable0);
      tableContainer1.getTable("WC");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w#", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "WC";
      stringArray1[1] = "w#";
      stringArray1[2] = "w#";
      stringArray1[3] = "xE,7mp-gx3{;F";
      stringArray1[4] = "CONSTRAINT w# UNIQUE (, , , , , , , )";
      stringArray1[5] = "CONSTRAINT w# ";
      stringArray1[6] = "WC";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, (DBTable) null, stringArray0, (DBTable) null, stringArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4950111434880973
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("CONSTRAINT  PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.348107904158401
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.519443886242135
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("p*~jl&^y8M>l2I(j", "lz[}", stringArray0, "^_b,2Ot", ":stream=", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = ":stream=";
      stringArray1[1] = "truncate?";
      stringArray1[2] = "lz[}";
      stringArray1[3] = "c";
      stringArray1[4] = "^_b,2Ot";
      stringArray1[5] = "truncate?";
      stringArray1[6] = "FJAXD#!cz[G";
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.219838558542412
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isProcedureCall("k\r0NVKQ");
      String string0 = "Ms\\?(ep_3VQ7G .";
      SQLUtil.leftJoin("", stringArray0, "null = null AND null = null AND null = null AND null = null AND  = '' AND null = null", "%", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      SQLUtil.addRequiredCondition("alter tableunicodestream", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder("k\r0NVKQ");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1911751146), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1911751146
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7494174906151296
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "";
      System.setCurrentTimeMillis(632L);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("unicodeStream");
      assertNull(boolean0);
      
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND  = '' AND null = null", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("suLu3_#$UPF");
      String string1 = SQLUtil.leftJoin("unicodeStream", stringArray0, "unicodeStream", "Sj |eECzQoxZ-\u00018+[", stringArray0);
      assertEquals("left join unicodeStream as Sj |eECzQoxZ-\u00018+[ on unicodeStream.null = Sj |eECzQoxZ-\u00018+[.null and unicodeStream.null = Sj |eECzQoxZ-\u00018+[.null and unicodeStream.null = Sj |eECzQoxZ-\u00018+[.null and unicodeStream.null = Sj |eECzQoxZ-\u00018+[.null and unicodeStream. = Sj |eECzQoxZ-\u00018+[. and unicodeStream.null = Sj |eECzQoxZ-\u00018+[.null", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.isQuery("delete");
      SQLUtil.isDDL("(");
      SQLUtil.isDDL("@bo6]6&");
      boolean boolean2 = SQLUtil.isDDL("alter materialized view");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("A?");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QRoh\"";
      stringArray0[1] = "lADuCSRcOs)v6[;cmC";
      stringArray0[2] = ")9kj18+Gw>A@";
      stringArray0[3] = "lADuCSRcOs)v6[;cmC";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "O\"9t'6tTYrW=~Z>N{ ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("g5u;L");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer("lADuCSRcOs)v6[;cmC");
      stringBuilder0.append(stringBuffer0);
      stringBuffer0.insert(9, 'Q');
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3609, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3609
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lADuCSRcOs)v6[;cmC");
      boolean boolean0 = true;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QRoh\"", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$]fxF1%<,Si:H8:S");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer("lADuCSRcOs)v6[;cmC");
      stringBuilder1.append(stringBuffer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, (-186), (-186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R\"_g/@*$3^`TW5vh+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R\"_g/@*$3^`TW5vh+";
      stringArray0[1] = "R\"_g/@*$3^`TW5vh+";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[2] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[3] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[4] = "R\"_g/@*$3^`TW5vh+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("R\"_g/@*$3^`TW5vh+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+) REFERENCES R\"_g/@*$3^`TW5vh+(, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+)", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("DATE", compositeDBObject0);
      tableContainer0.getTable("DATE");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=";
      stringArray0[1] = "DATE";
      stringArray0[2] = "DATE";
      stringArray0[2] = "!JE4G10";
      stringArray0[4] = "=";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      System.setCurrentTimeMillis(2305843009213693952L);
      SQLUtil.mutatesDataOrStructure("delete");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      stringArray0[3] = "delete";
      stringArray0[4] = "delete";
      stringArray0[5] = "12Tr-.JN$";
      stringArray0[6] = "12Tr-.JN$";
      stringArray0[7] = "delete";
      stringArray0[8] = "delete";
      SQLUtil.isDML("delete");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.invalidateAllSPSPlans();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1534963399945894
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Character character0 = new Character('6');
      Character.isSurrogate('u');
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-61);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "12Tr-.JN$";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "12Tr-.JN$";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("12Tr-.JN$ = '12Tr-.JN$' AND null = 'null' AND null = 'null' AND null = 'null' AND null = 'null' AND 12Tr-.JN$ = '12Tr-.JN$'", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[5] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DBColumn dBColumn1 = defaultDBTable0.getColumn("");
      dBColumnArray0[4] = dBColumn1;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("drop index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "F%*PLy?>[/38UR";
      String[] stringArray0 = null;
      String string1 = "32(Mrg";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("F%*PLy?>[/38UR", (String[]) null, "F%*PLy?>[/38UR", "32(Mrg", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "INSTEAD";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setstri");
      defaultDBTable0.setDoc("7%S,+*1AAoATqHaq-");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setstri", true, stringArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("getTriggerExecutionContext", 517);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = SQLUtil.join("(z-B", "selectsetstring(", stringArray0, "(z-B", stringArray0[0], stringArray0);
      assertEquals("(z-B join (z-B as null on selectsetstring(.null = null.null and selectsetstring(.INSTEAD = null.INSTEAD and selectsetstring(.null = null.null and selectsetstring(.null = null.null and selectsetstring(.null = null.null and selectsetstring(.null = null.null", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "");
      Object object0 = new Object();
      genericDescriptorList0.add(object0);
      genericDescriptorList0.add((Object) "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".", string0);
      
      Object object1 = new Object();
      String string1 = SQLUtil.innerJoin("org.postgresql.ds.PGConnectionPoolDataSource", stringArray0, ".", "EU}", stringArray0);
      assertEquals(". as EU} on org.postgresql.ds.PGConnectionPoolDataSource. = EU}.", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("//", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "mx0Y@!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("//", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.substituteMarkers("mx0Y@!", "", defaultDBColumn0);
      assertEquals("// : MX0Y@!m// : MX0Y@!x// : MX0Y@!0// : MX0Y@!Y// : MX0Y@!@// : MX0Y@!!// : MX0Y@!", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R\"_g/@*$3^`TW5vh+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R\"_g/@*$3^`TW5vh+";
      stringArray0[1] = "R\"_g/@*$3^`TW5vh+";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[2] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[3] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[4] = "R\"_g/@*$3^`TW5vh+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("R\"_g/@*$3^`TW5vh+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9862697651626724
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("truncate");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis(0L);
      SQLUtil.isQuery("truncate");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      DataDescriptorGenerator dataDescriptorGenerator1 = dataDictionaryImpl0.dataDescriptorGenerator;
      boolean boolean1 = SQLUtil.isQuery("truncate");
      SQLUtil.isDDL("truncate");
      boolean boolean2 = SQLUtil.isDDL("5aj/4*/M{N.jMA2A");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XlW3";
      String string0 = "INSTEAD";
      stringArray0[1] = "INSTEAD";
      stringArray0[2] = "XlW3";
      stringArray0[3] = "XlW3";
      stringArray0[4] = "XlW3";
      stringArray0[5] = "XlW3";
      SQLUtil.renderColumnListWithTableName("XlW3", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("XlW3", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XSDAA.S");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "XSDAA.S";
      stringArray0[1] = "XSDAA.S";
      stringArray0[2] = "XSDAA.S";
      stringArray0[3] = "XSDAA.S";
      stringArray0[4] = "XSDAA.S";
      stringArray0[5] = "XSDAA.S";
      stringArray0[6] = "XSDAA.S";
      stringArray0[7] = "h7(";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5729899170928663
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CHECK ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("null", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4358532144078109
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addRequiredCondition("FJAXD#!cz[G", stringBuilder0);
      assertEquals("FJAXD#!cz[G", stringBuilder0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.4191039023059906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "trucae?", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      defaultDBTable0.getForeignKeyConstraints();
      jdbcClob jdbcClob0 = new jdbcClob("");
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SQLUtil.normalize("/E!vQ!g", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/E!vQ!g";
      stringArray0[1] = "/E!vQ!g";
      stringArray0[2] = "/ E ! vQ ! g";
      stringArray0[3] = "/ E ! vQ ! g";
      stringArray0[4] = "/ E ! vQ ! g";
      Character.isSurrogate('T');
      StringBuilder stringBuilder0 = new StringBuilder("/E!vQ!g");
      StringBuilder stringBuilder1 = new StringBuilder("1NJk%X9Q)o[)BW7zJ");
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(":", (CompositeDBObject<? extends DBObject>) null);
      String string0 = "S.dx&2swe";
      tableContainer0.getTable("S.dx&2swe");
      SQLUtil.typeAndName((DBObject) null);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("L", false, "", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBTrigger dBTrigger0 = new DBTrigger(".HO3O", (DBSchema) null);
      SQLUtil.typeAndName(dBTrigger0);
      String string0 = "X\\uM";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, string0, false, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'X\\uM' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }
}
