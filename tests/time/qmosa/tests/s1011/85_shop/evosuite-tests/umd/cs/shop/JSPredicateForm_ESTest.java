/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:27:25 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(gF_ )@hLti\"&}k]6C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-5));
      JSJshopVars.interrogation = (-5);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("9e!2");
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar((-5));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3295757236756525
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[6];
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '\u0000';
      charArray0[5] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      streamTokenizer1.wordChars(6, 6);
      jSTerm2.addElement(jSTerm0);
      StringReader stringReader1 = new StringReader("< ");
      jSTerm1.makeEval(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm2.clonePF();
      streamTokenizer0.parseNumbers();
      jSTerm2.clonePF();
      jSTerm2.containsAll(jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      jSPredicateForm0.standarizerPredicateForm();
      jSTerm1.matches(jSPredicateForm0);
      jSTerm2.print();
      assertEquals(2, jSTerm2.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'd';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.read(charArray0);
      stringReader0.mark(7);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray1 = new char[8];
      charArray1[0] = 'D';
      charArray1[1] = 'D';
      charArray1[2] = 'd';
      charArray1[3] = 'D';
      charArray1[4] = 'd';
      charArray1[5] = 'D';
      charArray1[6] = '8';
      charArray1[7] = 'd';
      stringReader0.read(charArray1);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nextToken();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-2));
      StringReader stringReader1 = new StringReader("}o+}ZXtkAs\"");
      StreamTokenizer streamTokenizer2 = null;
      try {
        streamTokenizer2 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      StringReader stringReader1 = new StringReader("hzV4b'~6?y(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("hzV4b'~6?y(");
      StringReader stringReader3 = new StringReader("call ");
      stringReader3.skip((-4));
      stringReader3.read();
      stringReader1.ready();
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(true);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSSubstitution0.add((Object) "5fBl\u0000_{0B%@)");
      predicate0.and(predicate1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "5fBl\u0000_{0B%@)";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) predicate0;
      objectArray0[3] = (Object) "5fBl\u0000_{0B%@)";
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) predicate0;
      objectArray0[6] = (Object) "5fBl\u0000_{0B%@)";
      objectArray0[7] = (Object) predicate1;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("unexpected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-2));
      jSSubstitution0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.327594464890032
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.and(predicate2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.listIterator();
      predicate2.and(predicate0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.equals(jSPredicateForm4);
      JSPredicateForm jSPredicateForm5 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm5.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSPredicateForm5.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSTerm0.clonePF();
      assertNotSame(jSPredicateForm6, jSPredicateForm1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.367629954267816
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[6];
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = '\u0000';
      charArray0[5] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      streamTokenizer1.wordChars(6, 6);
      StringReader stringReader1 = new StringReader("< ");
      jSTerm1.makeEval(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm2.clonePF();
      streamTokenizer0.parseNumbers();
      JSPredicateForm jSPredicateForm1 = jSTerm2.clonePF();
      jSTerm2.containsAll(jSTerm0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm2);
      assertFalse(boolean0);
      
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSPredicateForm0);
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
      assertTrue(jSSubstitution1.fail());
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      streamTokenizer0.lowerCaseMode(false);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) jSSubstitution1;
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = " _!zE";
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.close();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(1085L);
      System.setCurrentTimeMillis(2417L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clone();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.154961206507715
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "5fBl\u0000_{0B%@)";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) predicate0;
      objectArray0[3] = (Object) "5fBl\u0000_{0B%@)";
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) predicate0;
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) null);
      jSTerm0.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      int int0 = (-574);
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      streamTokenizer0.lowerCaseMode(false);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) jSSubstitution1;
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      jSTerm0.add(objectArray0[1]);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSSubstitution1);
      StringReader stringReader1 = new StringReader("!");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = "unexpected";
      StringReader stringReader1 = new StringReader("unexpected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[0];
      stringReader1.read(charArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.read(charArray0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7970788193397982
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      Integer integer0 = new Integer((-365));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.and(predicate1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("Etnxr+F:!]<*");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(gF_ )@hLti\"&}k]6C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-5));
      JSJshopVars.interrogation = (-5);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nval = 0.0;
      streamTokenizer2.ordinaryChar((-5));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(gF)", stringBuffer0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K`UfL;yX7Mt5");
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '\u0087';
      charArray0[3] = 'F';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = " . ";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      int int0 = (-366172151);
      // Undeclared exception!
      try { 
        jSSubstitution0.listIterator((-366172151));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -366172151
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSSubstitution0.add((Object) "5fBl\u0000_{0B%@)");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "5fBl\u0000_{0B%@)";
      Object object0 = new Object();
      objectArray0[1] = object0;
      predicate1.and(predicate2);
      objectArray0[2] = (Object) predicate0;
      objectArray0[3] = (Object) "5fBl\u0000_{0B%@)";
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) predicate0;
      objectArray0[6] = (Object) "5fBl\u0000_{0B%@)";
      objectArray0[7] = (Object) predicate1;
      objectArray0[8] = (Object) stringBuffer0;
      jSSubstitution0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm2.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm2.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.42272036140223
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ordinaryChars((-3), 99);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.equals(jSPredicateForm1);
      jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm2);
      System.setCurrentTimeMillis((-1852L));
      jSPredicateForm0.clear();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAll(jSPredicateForm3);
      jSTerm1.matches(jSPredicateForm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm3.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "not";
      StringReader stringReader0 = new StringReader("%j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis(178L);
      // Undeclared exception!
      try { 
        jSSubstitution2.removeElementAt(325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 325 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      streamTokenizer0.lowerCaseMode(false);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) jSSubstitution1;
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      jSTerm0.add(objectArray0[1]);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      StringReader stringReader1 = new StringReader("hzV4b'~6?y(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("hzV4b'~6?y(");
      StringReader stringReader3 = new StringReader("Uq}FWJi|,a6u");
      stringReader2.read();
      stringReader2.skip((-4));
      stringReader0.read();
      stringReader2.ready();
      stringReader1.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[6] = ',';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      jSTerm0.add(objectArray0[1]);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[6] = ',';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) 'V';
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'h';
      objectArray0[5] = (Object) "hzV4b'~6?y(";
      objectArray0[6] = (Object) "hzV4b'~6?y(";
      objectArray0[7] = (Object) '4';
      objectArray0[8] = object0;
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      jSTerm0.add((Object) "hzV4b'~6?y(");
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("jsterm:");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
