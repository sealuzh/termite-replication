/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:12:03 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EmptyStackException;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("*lt");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, 0, 0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2145);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("$7Sy07@cPaz8^ Yu");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("*lt");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SimpleNode simpleNode0 = new SimpleNode(3);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("b;,Msm'EL4`y\"~c");
      simpleNode0.setIdentifier("<<");
      simpleNode0.toString();
      simpleNode0.dump("*rshft", stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2061656506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8720520186532994
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      stringReader0.read();
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter1 = new StringWriter(60);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append('q');
      simpleNode0.dump("tMQS^NsozT<$Knp3+zD", stringWriter1);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString(";");
      assertEquals(";CompilationUnit : ;", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5601507502065712
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(76);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      sequenceInputStream0.read();
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 76);
      simpleNode1.setIdentifier("}");
      simpleNode0.toString();
      simpleNode1.dump("EmptyStatement", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(3349);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      stringReader0.read();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "<=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[7];
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter1.append('<');
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = stringWriter4.append((CharSequence) "<=");
      stringWriter2.write(charArray0);
      stringWriter1.append((CharSequence) "<=");
      StringWriter stringWriter7 = new StringWriter('L');
      StringWriter stringWriter8 = new StringWriter(60);
      simpleNode0.dump("<=", stringWriter6);
      assertEquals("<<=<=<CompilationUnit>\n  <identifier>*le</identifier>\n</CompilationUnit>\n", stringWriter6.toString());
      assertEquals("<<=<=<CompilationUnit>\n  <identifier>*le</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 48);
      simpleNode0.setIdentifier(">>");
      simpleNode0.toString();
      simpleNode0.dump("m}@4mxg*(!v", stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1880948502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1061));
      int int0 = (-2167);
      SimpleNode simpleNode1 = new SimpleNode((-1061));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " : ");
      Node node0 = simpleNode1.parent;
      simpleNode1.jjtAddChild(simpleNode0, 21);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 84
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8(%gjFHRb%$7Nb#NW");
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)78);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("=:aRv");
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.dump("", stringWriter0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.159647883756752
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 100);
      simpleNode0.toString("m<6*");
      simpleNode0.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter(100);
      simpleNode0.dump("ops", stringWriter0);
      simpleNode0.setIdentifier("&");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 101);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      assertEquals(102, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0287375017310743
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("*lt");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, 0, 0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2145);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.flush();
      simpleNode0.dump("ls5D5*I*dU%Wwb", stringWriter2);
      assertEquals("<VariableDeclaratorId>\n</VariableDeclaratorId>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.475492645175974
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(90);
      simpleNode0.jjtGetParent();
      simpleNode0.toString("<=");
      simpleNode0.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter(90);
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("<=ThrowStatement", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      StringReader stringReader0 = new StringReader("<=ThrowStatement");
      stringReader0.ready();
      MockFile mockFile0 = new MockFile("RUNSIGNEDSHIFT");
      File file0 = MockFile.createTempFile("<=ThrowStatement", "6&}c<mCx |k8NP2hMh2", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      javaParser0.ReInit((Reader) stringReader0);
      simpleNode0.setIdentifier("&&");
      simpleNode0.toString();
      simpleNode0.dump("h%kZ_HM", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(90);
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 63);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(64, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("*lt");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, 0, 0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SimpleNode simpleNode0 = new SimpleNode(25);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(2145);
      simpleNode0.setIdentifier((String) null);
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess", stringWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1375121028112711
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 61;
      SimpleNode simpleNode0 = new SimpleNode(61);
      simpleNode0.jjtAddChild(simpleNode0, 61);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "lp`tn@\\  I'N8uHg";
      // Undeclared exception!
      simpleNode0.dump("lp`tn@  I'N8uHg", stringWriter0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("Di%g");
      SimpleNode simpleNode0 = new SimpleNode(63);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter(60);
      StringWriter stringWriter4 = new StringWriter(10);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<");
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = stringWriter4.append('J');
      StringWriter stringWriter7 = stringWriter6.append((CharSequence) charBuffer0);
      stringWriter1.write("VG'|w|_@Z'Y~'");
      simpleNode0.dump("Di%g", stringWriter5);
      simpleNode0.toString();
      String string0 = ";";
      // Undeclared exception!
      try { 
        stringWriter7.append((CharSequence) "<L7oKs]-?", 1, (-1753));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("*lt");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      stringReader0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringReader0.markSupported();
      Node node0 = simpleNode0.parent;
      int int0 = (-2004582530);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2004582530));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7091199915606667
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(76);
      SimpleNode simpleNode1 = new SimpleNode((-2167));
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode1;
      Node node0 = simpleNode1.parent;
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode1.children = nodeArray0;
      simpleNode0.jjtAddChild(simpleNode1, 76);
      Node node1 = simpleNode0.jjtGetChild(76);
      simpleNode0.jjtAddChild(node1, 76);
      simpleNode0.jjtGetChild(76);
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(88);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 88);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 11);
      simpleNode0.jjtGetChild(11);
      simpleNode0.jjtGetChild(11);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(89, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[3];
      Node node0 = simpleNode0.parent;
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}DO3evU>w");
      stringWriter0.append('^');
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[2] = 'J';
      int int0 = simpleNode0.jjtGetNumChildren();
      int int1 = simpleNode0.jjtGetNumChildren();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2154);
      simpleNode0.jjtClose();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2154);
      int int0 = 1698;
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 1698, 2154);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.prevCharIsLF = true;
      javaParserTokenManager0.ReInit(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      // Undeclared exception!
      try { 
        jJTJavaParserState0.peekNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("*lt");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, 0, 0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SimpleNode simpleNode0 = new SimpleNode((-1));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.setIdentifier("<LETTER>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("Q");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        simpleNode0.dump("), ", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[7];
      stringWriter1.append('L');
      charArray0[0] = ':';
      charArray0[1] = 'h';
      charArray0[3] = 'L';
      charArray0[4] = 'h';
      charArray0[5] = '\'';
      charArray0[6] = '-';
      stringWriter0.write(charArray0);
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter('\u0000');
      SimpleNode simpleNode0 = new SimpleNode((-2262));
      // Undeclared exception!
      try { 
        simpleNode0.toString("+-]=ncTat)+r[x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2262
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 67;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0989626953926974
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("Di%g");
      SimpleNode simpleNode0 = new SimpleNode(63);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.jjtGetParent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringReader0.markSupported();
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter(63);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      simpleNode0.dump("CompilationUnit", stringWriter0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.VariableDeclarator();
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1);
      JavaParser javaParser1 = new JavaParser("1&YK4*r:sx3d=");
      JavaParser javaParser2 = new JavaParser("CompilationUnit");
      try { 
        javaParser2.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f//qtHM*jOO.IM=");
      StringReader stringReader0 = new StringReader("H9}'(qu=_;lz!F}$(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-870), (-1074265344), 459);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-360));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1801251892));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("*lt");
      simpleNode0.setIdentifier("Q");
      simpleNode0.toString();
      simpleNode0.dump("y`X7>O407L", stringWriter0);
      assertEquals("*lt<InstanceOfExpression>\n  <identifier>Q</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0726918694023966
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(76);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(222);
      simpleNode0.setIdentifier("G");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(222);
      simpleNode0.dump("c8DA", stringWriter3);
      simpleNode0.setIdentifier("&");
      simpleNode0.toString();
      simpleNode0.dump("[7xt|%:!)i]b:PpYw$", stringWriter0);
      StringWriter stringWriter5 = null;
      try {
        stringWriter5 = new StringWriter((-4659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2836);
      JavaParser javaParser0 = new JavaParser("ConditionalAndExpression");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 2836);
      simpleNode0.jjtSetParent(simpleNode1);
      Node node0 = simpleNode0.jjtGetParent();
      simpleNode1.jjtSetParent(node0);
      assertNotSame(simpleNode1, simpleNode0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.identifiers = null;
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Di%g");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('#');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Di%g");
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(1130);
      SimpleNode simpleNode0 = new SimpleNode(1130);
      simpleNode0.dump("PackageDeclaration", stringWriter0);
      assertSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-498));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FilterInputStream[] filterInputStreamArray0 = new FilterInputStream[1];
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      filterInputStreamArray0[0] = (FilterInputStream) bufferedInputStream0;
      arrayList0.toArray(filterInputStreamArray0);
      simpleNode0.identifiers = arrayList0;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -498
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("Di%g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringReader0.markSupported();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, Integer.MAX_VALUE);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }
}
