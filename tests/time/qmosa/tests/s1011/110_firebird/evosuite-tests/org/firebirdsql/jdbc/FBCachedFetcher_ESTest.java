/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:24:09 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4760624362320858
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedList0.stream();
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte) (-121);
      byteArray1[5] = (byte) (-22);
      byteArray1[6] = (byte)0;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      byte[][] byteArray2 = new byte[8][3];
      byte[] byteArray3 = new byte[4];
      byteArray3[2] = (byte)0;
      linkedList0.add(byteArray2);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray2);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.423213684338662
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(3273);
      fBCachedFetcher0.previous();
      fBResultSet0.rowChanged(fBCachedFetcher0, byteArray0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.516283422048653
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.absolute(1);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.777274960602556
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField4 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative(335544560);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.635319722003624
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedList0.stream();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      boolean boolean0 = fBCachedFetcher0.relative((byte)0);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.471980803579025
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(3273);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(2, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)15;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-12);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray0[1] = byteArray2;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5209484989897
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7911998103932196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue1 = new LinkedBlockingQueue<FBCachedBlobField>();
      linkedBlockingQueue1.spliterator();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.containsAll(linkedList1);
      linkedList2.toArray();
      linkedList2.addAll((Collection<? extends byte[][]>) linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.add((byte[][]) null);
      linkedList2.addAll((Collection<? extends byte[][]>) linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher1.absolute(1901);
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1101013118142995
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      linkedList0.clone();
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute((-622));
      fBCachedFetcher0.last();
      System.setCurrentTimeMillis((-1405L));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      DatabaseParameterBuffer databaseParameterBuffer0 = fBConnectionProperties0.getDatabaseParameterBuffer();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      fBConnectionProperties0.getRoleName();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getDb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, 621, (-816), isc_stmt_handle_impl1, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.addAll((Collection<? extends byte[][]>) linkedList0);
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      linkedList0.containsAll(linkedBlockingQueue0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      linkedList0.add(byteArray0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.46781900121047
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField1);
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6138610247485268
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedList0.stream();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.updateRow(fBResultSet0.row);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)11;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      byte[][] byteArray1 = new byte[9][4];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byteArray1[6] = byteArray0;
      byteArray1[7] = byteArray0;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)11;
      byteArray2[1] = (byte)18;
      byteArray1[8] = byteArray2;
      linkedList0.add(byteArray1);
      isc_stmt_handle_impl1.setSingletonResult(true);
      isc_stmt_handle_impl1.getRsr_rdb();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3945233209955523
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[4];
      byte[][] byteArray1 = new byte[12][4];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      linkedList0.add(byteArray1);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.updateRow(fBResultSet0.row);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      fBCachedFetcher0.deleteRow();
      isc_stmt_handle_impl0.statement = "";
      // Undeclared exception!
      try { 
        gDSHelper0.allocateStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.GDSHelper", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5164586295246056
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      boolean boolean0 = linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isBeforeFirst();
      boolean boolean1 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][5];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-2);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-38);
      byteArray2[1] = (byte) (-72);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "You cannot position to the row 0 with absolute() method.";
      stringArray0[1] = "xsqlda.sqln read as ";
      stringArray0[2] = "YFuu#9PNef6@c.";
      stringArray0[3] = "Error converting to Firebird BLOB object";
      linkedList1.toArray(stringArray0);
      byteArray2[2] = (byte) (-2);
      byteArray2[3] = (byte) (-2);
      byteArray2[4] = (byte) (-61);
      byteArray0[1] = byteArray2;
      linkedList0.removeFirstOccurrence((Object) null);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.574357324206263
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[0][3];
      linkedList0.add(byteArray0);
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedList0.stream();
      byte[][] byteArray1 = new byte[8][3];
      byte[] byteArray2 = new byte[4];
      byteArray2[2] = (byte)0;
      linkedList0.add(byteArray1);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray1);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9661241287946156
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.first();
      assertEquals(1, fBCachedFetcher1.getRowNum());
      
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][7];
      linkedList0.listIterator();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)11;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.331379633350042
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      FBCachedBlobField fBCachedBlobField3 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField3);
      linkedList0.stream();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.436285611315035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.listIterator();
      linkedHashSet0.parallelStream();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)15;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-12);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray0[1] = byteArray2;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      linkedList2.retainAll(linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      fBResultSet0.closeFields();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute((byte)0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][5];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-2);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.setSingletonResult(false);
      isc_stmt_handle_impl1.getRsr_rdb();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.isAfterLast();
      boolean boolean0 = fBCachedFetcher1.isLast();
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][6];
      linkedList1.addFirst(byteArray0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      byte[][] byteArray1 = new byte[1][7];
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-61);
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte)103;
      byteArray2[3] = (byte) (-3);
      byteArray2[4] = (byte)54;
      byteArray2[5] = (byte) (-35);
      byteArray1[0] = byteArray2;
      linkedList0.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][7];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte)73;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-118);
      byteArray3[1] = (byte)73;
      byteArray3[2] = (byte)89;
      byteArray3[3] = (byte) (-109);
      byteArray3[4] = (byte)73;
      byteArray3[5] = (byte)7;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-71);
      byteArray4[1] = (byte) (-71);
      byteArray4[2] = (byte) (-71);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte) (-118);
      byteArray5[1] = (byte)89;
      byteArray5[2] = (byte)73;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte) (-118);
      byteArray5[5] = (byte) (-71);
      byteArray5[6] = (byte)7;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte) (-117);
      byteArray6[1] = (byte)7;
      byteArray6[2] = (byte) (-118);
      byteArray6[3] = (byte) (-109);
      byteArray6[4] = (byte)7;
      byteArray6[5] = (byte)7;
      byteArray6[6] = (byte)0;
      byteArray6[7] = (byte)7;
      byteArray6[8] = (byte) (-118);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte) (-109);
      byteArray7[1] = (byte)89;
      byteArray7[2] = (byte) (-71);
      byteArray7[3] = (byte) (-117);
      byteArray7[4] = (byte) (-118);
      byteArray7[5] = (byte) (-118);
      byteArray7[6] = (byte) (-118);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[7];
      byteArray8[0] = (byte)0;
      byteArray8[1] = (byte) (-118);
      byteArray8[2] = (byte) (-117);
      byteArray8[3] = (byte)89;
      byteArray8[4] = (byte)107;
      byteArray8[5] = (byte) (-117);
      byteArray8[6] = (byte) (-118);
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[9];
      byteArray9[0] = (byte) (-109);
      byteArray9[1] = (byte) (-1);
      byteArray9[2] = (byte)89;
      byteArray9[3] = (byte) (-109);
      byteArray9[4] = (byte)0;
      byteArray9[5] = (byte) (-63);
      byteArray9[6] = (byte)0;
      byteArray9[7] = (byte)73;
      byteArray9[8] = (byte)0;
      byteArray0[8] = byteArray9;
      linkedList0.offerFirst(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(2671);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.addAll((Collection<? extends byte[][]>) linkedList0);
      byte[][] byteArray0 = new byte[6][9];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-22);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)56;
      byteArray1[5] = (byte)47;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte)1;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)56;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-22);
      byteArray4[1] = (byte) (-22);
      byteArray4[2] = (byte) (-84);
      byteArray4[3] = (byte)56;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte) (-1);
      byteArray5[1] = (byte) (-84);
      byteArray5[2] = (byte) (-22);
      byteArray5[3] = (byte)47;
      byteArray5[4] = (byte) (-84);
      byteArray5[5] = (byte)1;
      byteArray5[6] = (byte) (-84);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte) (-1);
      byteArray6[1] = (byte) (-1);
      byteArray6[2] = (byte) (-22);
      byteArray6[3] = (byte) (-1);
      byteArray6[4] = (byte) (-22);
      byteArray6[5] = (byte)2;
      byteArray6[6] = (byte)56;
      byteArray6[7] = (byte)56;
      byteArray0[5] = byteArray6;
      linkedList0.push(byteArray0);
      byte[][] byteArray7 = new byte[1][2];
      byte[] byteArray8 = new byte[0];
      byteArray7[0] = byteArray8;
      linkedList0.add(byteArray7);
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField0);
      FBCachedBlobField fBCachedBlobField1 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      FBCachedBlobField fBCachedBlobField2 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField2);
      linkedHashSet0.add(fBCachedBlobField1);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((List<byte[][]>) null, fBResultSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.734399680379122
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte) (-38);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)34;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)34;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)34;
      byteArray5[1] = (byte) (-118);
      byteArray5[2] = (byte) (-24);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.addAll((Collection<? extends byte[][]>) linkedList0);
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      linkedBlockingQueue0.spliterator();
      linkedList0.containsAll(linkedBlockingQueue0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      linkedList0.add(byteArray0);
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((byte) (-61));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)15;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-12);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray0[1] = byteArray2;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((byte)0);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8612239858316948
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.001844286764978
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.last();
      byte[][] byteArray0 = new byte[1][2];
      fBCachedFetcher0.setFetchSize(1);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5637660374856477
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(fBCachedBlobField0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[2] = (byte)0;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.close();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedHashSet<FBCachedBlobField> linkedHashSet0 = new LinkedHashSet<FBCachedBlobField>();
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[12][3];
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      fBConnectionProperties0.getDefaultIsolation();
      fBConnectionProperties0.getDatabaseParameterBuffer();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[3][2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-1);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte)29;
      byteArray3[2] = (byte)124;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)124;
      byteArray0[2] = byteArray3;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)106;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)106;
      byteArray3[1] = (byte)106;
      byteArray3[2] = (byte)106;
      byteArray3[3] = (byte)106;
      byteArray3[4] = (byte)106;
      byteArray3[5] = (byte)106;
      byteArray3[6] = (byte)106;
      byteArray3[7] = (byte)106;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      DatabaseParameterBuffer databaseParameterBuffer0 = fBConnectionProperties0.getDatabaseParameterBuffer();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl2.setDeleteCount(636);
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      fBConnectionProperties0.getRoleName();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getDb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue1 = new LinkedBlockingQueue<FBCachedBlobField>();
      linkedBlockingQueue1.spliterator();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.containsAll(linkedList1);
      linkedList2.addAll((Collection<? extends byte[][]>) linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList3.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative(3273);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("]ao!B,|8");
      int int0 = 2333;
      // Undeclared exception!
      try { 
        linkedList3.addAll(3273, (Collection<? extends byte[][]>) linkedList2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3273, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedBlobField fBCachedBlobField0 = mock(FBCachedBlobField.class, new ViolatedAssumptionAnswer());
      linkedList0.stream();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)15;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-12);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("2%y[t[C(``x");
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      JMXPrincipal[] jMXPrincipalArray0 = new JMXPrincipal[4];
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("2%y[t[C(``x");
      jMXPrincipalArray0[0] = jMXPrincipal1;
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("");
      jMXPrincipalArray0[1] = jMXPrincipal2;
      jMXPrincipalArray0[2] = jMXPrincipal0;
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("2%y[t[C(``x");
      jMXPrincipalArray0[3] = jMXPrincipal3;
      linkedList1.toArray(jMXPrincipalArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute((byte) (-12));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue1 = new LinkedBlockingQueue<FBCachedBlobField>();
      linkedBlockingQueue1.spliterator();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.containsAll(linkedList1);
      linkedList2.addAll((Collection<? extends byte[][]>) linkedList0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.378926789336329
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      byte[][] byteArray0 = new byte[5][9];
      byte byte0 = (byte)0;
      fBCachedFetcher0.afterLast();
      linkedList0.add(byteArray0);
      int int0 = 1035;
      fBCachedFetcher0.relative((-622));
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArrayArray0 = null;
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue0 = new LinkedBlockingQueue<FBCachedBlobField>();
      LinkedBlockingQueue<FBCachedBlobField> linkedBlockingQueue1 = new LinkedBlockingQueue<FBCachedBlobField>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.containsAll(linkedList0);
      linkedList1.addAll((Collection<? extends byte[][]>) linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      linkedList1.add((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = 3273;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(3273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)11;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.first();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      // Undeclared exception!
      try { 
        fBConnectionProperties0.getDatabaseParameterBuffer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified GDS type PURE_JAVA is unknown.
         //
         verifyException("org.firebirdsql.gds.impl.GDSFactory", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }
}
