/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:27:59 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.9210752814210417
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-351L), 3931L);
      String string0 = range0.toString();
      assertEquals("[ -351 .. 3931 ]/0B", string0);
      
      Range range1 = Range.of(127L, 3931L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      List<Range> list1 = range1.complement(range0);
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.849320409095205
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long1 = 9223372036854773017L;
      List<Range> list0 = range0.split(1653L);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.540567353135141
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 436L;
      long long1 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9908293390592684
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 0L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals("m/Cqe!6");
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L, 9223372036854775807L);
      Range range3 = Range.ofLength(1L);
      Range range4 = Range.of(65535L);
      range4.getLength();
      Range.of(65535L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(1466L);
      Range.of(637L, 32767L);
      range2.intersects(range3);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.918689660386759
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 0L);
      range1.getLength();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range2);
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      range2.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.of(range_CoordinateSystem0, 1L, 65535L);
      range0.startsBefore(range2);
      range2.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9122664806976712
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.ofLength(4294967295L);
      range2.getLength();
      range0.intersects(range1);
      range2.complement(range1);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.ofLength(127L);
      range2.getLength();
      Range range3 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(4294967295L);
      Range range4 = Range.of(2147483647L, 2147483647L);
      range3.intersects(range4);
      Range.of(2147483647L, 2147483648L);
      range0.intersects(range3);
      Range.Builder range_Builder2 = new Range.Builder(3566L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.1585904484766685
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-197L), 0L);
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775807L);
      range1.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(7600L);
      range1.getLength();
      Range range2 = Range.of(2147483662L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-2001L));
      Range range3 = Range.of(0L, 1L);
      range3.intersects(range1);
      Range.of(750L, 2147483647L);
      range1.intersects(range2);
      Range.Builder range_Builder3 = new Range.Builder(255L);
      Range.Builder range_Builder4 = range_Builder3.copy();
      assertFalse(range_Builder4.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.324966815806471
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = null;
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8695268098270863
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.getLength();
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder((-1501L), 1L);
      Range range2 = range_Builder0.build();
      range_Builder0.build();
      long long0 = 3010L;
      Range.of((-1L), 32767L);
      range2.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8994338495189633
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4099L);
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-4099L), (-4099L));
      Range range2 = Range.of(255L, 255L);
      range0.equals(range2);
      range1.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(32767L, 32767L);
      long long1 = (-128L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9093536045435733
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 2147483661L;
      Range range0 = Range.of(2147483661L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(255L, 9223372036854773017L);
      range1.equals(range2);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((-879L), 2147483662L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.880362515579186
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-2140L);
      Range range0 = Range.of((-2140L), (-2140L));
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      range0.getBegin();
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Range.of((-223L), 3993L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = (-4104L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.of((-2140L), (-4104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6657027265588504
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = 0L;
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range1);
      range0.intersection(range1);
      long long1 = 9223372036854775807L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.105513514662388
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(1407L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.toString(range_CoordinateSystem0);
      Range.of((-128L), 1407L);
      Range.ofLength(1407L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483647 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483647 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.120318048247916
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      range0.split(436L);
      range_Builder0.contractBegin((-2147483648L));
      range_Builder0.expandEnd(0L);
      Range range2 = Range.ofLength(436L);
      range0.intersection(range2);
      range_Builder0.expandEnd(1848L);
      range_Builder0.shift((-6498L));
      range_Builder0.expandBegin(0L);
      Range range3 = range_Builder0.build();
      range3.getEnd();
      range3.getEnd();
      range3.endsBefore(range0);
      Range.Comparators.values();
      range2.isEmpty();
      // Undeclared exception!
      try { 
        Range.of(436L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8161723432081684
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(1L);
      long long0 = 0L;
      Range range1 = Range.of(1L, 0L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals("m/Cqe!6");
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3348713644341106
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.iterator();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-153L), (-153L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3040938155088355
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(3100L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.736104580289112
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.ofLength(1295L);
      Range.ofLength(1295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.ofLength(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2937L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), (-2937L));
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("offset must be >= 0", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse offset must be >= 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.106545315440484
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of(2629L);
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      range0.complement(range1);
      range0.getBegin();
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Range range2 = Range.of((-223L), 3993L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = (-4104L);
      range1.endsBefore(range0);
      range0.endsBefore(range2);
      range1.getEnd();
      range1.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      long long1 = 4294967295L;
      long long2 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.759827291107589
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(1407L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.ofLength(1407L);
      range3.endsBefore(range2);
      range3.toString(range_CoordinateSystem0);
      Range.of(1980L, 9223372036854775807L);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 1406 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 1406 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.070636123839102
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(1407L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range2.complementFrom(list1);
      assertEquals(0, list2.size());
      assertTrue(list1.contains(range2));
      
      boolean boolean0 = range2.startsBefore(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean2 = range1.endsBefore(range0);
      assertFalse(boolean2);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      assertSame(range0, range1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem1);
      range3.asRange();
      Range range4 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      assertSame(range4, range1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.058594439500188
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(2147483661L);
      range0.isEmpty();
      Range range1 = Range.ofLength(2147483661L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = 255L;
      Range range2 = Range.of(255L, 9223372036854773017L);
      range1.equals(range2);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((-879L), 2147483662L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.956043732162634
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      Range range2 = Range.of((-2140L));
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Range range3 = Range.of((-223L), 3993L);
      range3.getEnd();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long1 = (-4104L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(280L, 1498L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of((-2140L), (-4104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.082671016322713
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-4099L), (-4099L));
      range0.getLength();
      range1.intersects(range1);
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.ofLength(0L);
      range0.getLength();
      Range.of((-4099L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin((-6728L));
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-4099L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.878068012776922
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-357L), 0L);
      long long1 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range range2 = Range.of(0L, (-1L));
      range2.isEmpty();
      range0.isSubRangeOf(range1);
      long long2 = new Long((-611L));
      Range.ofLength(0L);
      range_CoordinateSystem0.getAbbreviatedName();
      range_CoordinateSystem0.getAbbreviatedName();
      Range range3 = Range.of(0L, 0L);
      range3.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4566L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.735467305247841
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = 1295L;
      Range range1 = Range.ofLength(1295L);
      Range range2 = Range.of(1295L);
      range2.complement(range1);
      range2.endsBefore(range0);
      range2.intersects(range0);
      Range.ofLength(1L);
      range0.getLength();
      range2.intersects(range2);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(" ' @_N$B5c+g>5oa-$", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  ' @_N$B5c+g>5oa-$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.886369176020059
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4099L);
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-4099L), (-4099L));
      range1.intersects(range0);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder((-4099L), (-4099L));
      range0.equals((Object) null);
      range_Builder1.expandEnd((-4099L));
      String string0 = "fsbC.0I!I";
      // Undeclared exception!
      try { 
        Range.ofLength((-4099L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9311436278635266
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.ofLength(1295L);
      Range range1 = Range.of(1295L);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(1295L, 1295L);
      range1.equals((Object) null);
      range_Builder0.expandEnd(2147483647L);
      long long0 = 0L;
      Range range2 = Range.ofLength(0L);
      range2.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(0L, 255L);
      range_Builder1.expandBegin((-32768L));
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9394737960679103
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.ofLength(4294967295L);
      range2.getLength();
      range0.intersects(range1);
      range2.complement(range1);
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.ofLength(127L);
      range2.getLength();
      Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.0983412956414
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(2147483647L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.toString(range_CoordinateSystem0);
      Range.of((-128L), 2147483647L);
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6063962247034547
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(1407L);
      Range.Comparators.values();
      Range range0 = Range.of(2790L, 2147483647L);
      Range range1 = Range.of(2790L, 2790L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = range1.asRange();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.461448980694849
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.of((-1L), (-1L));
      Range range1 = null;
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.910053805687161
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      long long1 = 2790L;
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range range1 = range0.intersection(range0);
      range1.toString();
      Range.of(2147483647L);
      range1.complementFrom(list0);
      Range range2 = Range.ofLength(2147483647L);
      range2.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("tlv~f", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse tlv~f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2875293918408413
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = (-2L);
      range_Builder0.contractEnd((-2L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-2147483648L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7290197327594026
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2147483648L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-416L));
      range0.asRange();
      long long1 = 0L;
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.842196076565502
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1295L);
      Range range2 = Range.of(1295L);
      range2.endsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range0.intersection(range2);
      range2.complementFrom(list1);
      long long0 = 3613L;
      Range.ofLength(3613L);
      long long1 = 9223372036854775807L;
      long long2 = 1295L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3613L, 1295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.935652337899667
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = (-2147483648L);
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      range0.split(436L);
      range_Builder0.contractBegin(2911L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      long long1 = (-59L);
      // Undeclared exception!
      try { 
        Range.ofLength((-59L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5848051590156835
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-396L), (-396L));
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-396L), (-396L));
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = (-5382L);
      // Undeclared exception!
      try { 
        Range.ofLength((-5382L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.838227468824343
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-197L), 0L);
      range0.startsBefore(range2);
      range1.getBegin();
      long long0 = 4053L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7955714313660125
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-4099L), (-4099L));
      range1.intersection(range0);
      long long0 = (-9223372036854775808L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-4099L), 1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-351L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.730055167896353
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = range0.intersection(range0);
      range1.complementFrom(linkedList0);
      long long1 = 1407L;
      Range.ofLength(1407L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.spliterator();
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%yBv4#", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %yBv4# into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.897977991249332
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      range0.isEmpty();
      long long1 = 2790L;
      Range range1 = Range.of(0L, 2790L);
      range1.intersects(range0);
      List<Range> list0 = range1.complement(range0);
      long long2 = (-416L);
      range1.toString();
      Range range2 = Range.of(2790L);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.ofLength((-416L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8686599899928664
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.isEmpty();
      range0.complement(range1);
      range0.complement(range1);
      Range range2 = Range.of((-2140L));
      range2.getBegin();
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Range.of((-223L), 3993L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long1 = (-4104L);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.of((-2140L), (-4104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.064523035970173
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      List<Range> list0 = range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      range1.getBegin();
      long long0 = (-223L);
      Range range2 = Range.of((-223L), 436L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.equals(list0);
      Range.of((-4104L), (-223L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9213274656664145
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = 2147483668L;
      Range range0 = Range.of(2147483668L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1500L), (-1500L));
      range1.equals((Object) null);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1500L), 2790L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.276765116976483
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2147483648L);
      long long1 = (-416L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.574266337519518
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(2790L, 2147480858L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of((-1040L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.82874638199081
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(1407L);
      boolean boolean0 = range2.startsBefore(range1);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.complementFrom(list0);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.Comparators.values();
      Range.of(2790L, 2147483647L);
      Range range3 = Range.of(2790L, 2790L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.998257686402731
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      range0.getLength();
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = (-1501L);
      Range.Builder range_Builder0 = new Range.Builder((-1501L), 1L);
      range_Builder0.build();
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 0L);
      range2.equals("Ab");
      // Undeclared exception!
      try { 
        Range.ofLength((-612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9059674187594213
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      long long1 = 1295L;
      Range range1 = Range.ofLength(1295L);
      Range range2 = Range.of(1295L);
      range2.endsBefore(range0);
      range2.intersects(range0);
      Range range3 = Range.ofLength(1L);
      range0.getLength();
      range3.complement(range1);
      range0.startsBefore(range3);
      range3.asRange();
      long long2 = 0L;
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6652295044833294
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      range0.equals(range0);
      long long1 = (-1501L);
      Range range1 = Range.of(0L, 0L);
      range1.equals("Ab");
      // Undeclared exception!
      try { 
        Range.ofLength((-612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7772398455628116
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 0L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 618L;
      Range.Builder range_Builder1 = new Range.Builder(618L);
      range_Builder1.expandEnd(618L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.024932349927475
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(1407L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(1407L);
      range_Builder0.expandBegin((-128L));
      Range.of(281L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483647 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483647 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.8888633208629573
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-357L), 0L);
      Range range2 = Range.of(range_CoordinateSystem0, (-611L), 0L);
      long long1 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem2);
      Range.of(0L, (-1L));
      range2.startsBefore(range0);
      range2.isSubRangeOf(range1);
      range0.getEnd();
      Range.ofLength(0L);
      range_CoordinateSystem0.getAbbreviatedName();
      range_CoordinateSystem0.getAbbreviatedName();
      Range range3 = Range.of(0L, 0L);
      range3.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4566L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.757444572501185
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-197L), (-16L));
      Range.of(9223372036854775807L, 9223372036854775807L);
      String string0 = "or]n8]";
      // Undeclared exception!
      try { 
        Range.parseRange("or]n8]", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse or]n8] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1810246999429665
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(620L);
      long long0 = range0.getBegin();
      assertEquals(620L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(621L, long1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(620L, 620L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.8487520995509903
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-197L);
      Range.of(range_CoordinateSystem0, (-197L), 0L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      String string0 = "or]n8]";
      // Undeclared exception!
      try { 
        Range.parseRange("or]n8]", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse or]n8] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.9819336859073298
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = range0.intersection(range0);
      Range range2 = Range.ofLength(1407L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      long long0 = (-1499L);
      long long1 = (-4100L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-4100L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.8270329239298366
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 105L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 105L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.950305662857612
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      range0.split(436L);
      range_Builder0.contractBegin(2937L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range0.intersection(range1);
      range_Builder0.expandEnd(1848L);
      Range range2 = Range.of(1294L);
      Range.of(1580L);
      range2.startsBefore(range1);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(1294L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.8270329239298366
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-9223372036854775808L);
      long long1 = 105L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 105L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
