* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12629
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:55:02.340 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:55:02.381 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:55:02.382 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:55:02.473 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 00:55:04.678 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 00:55:04.678 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 00:55:59.613 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 125s and 19 generations, 14813 statements, best individual has fitness: 632.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 131
* Number of covered goals: 127
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 74
* Number of covered goals: 67
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 41
* Number of covered goals: 41
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 469
* Number of covered goals: 449
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 52
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 74
* Number of covered goals: 56
* Generated 68 tests with total length 1428
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
[MASTER] 00:59:25.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 00:59:25.520 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[6];
byte byte0 = (byte)102;
byteArray0[0] = (byte)102;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)0;
byteArray0[3] = (byte) (-43);
byteArray0[4] = (byte) (-15);
byteArray0[5] = (byte)0;
defaultNucleotideCodec0.decode(byteArray0, (byte)0);
defaultNucleotideCodec0.toString(byteArray0);

* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12626
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12625
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:01:48.591 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:01:48.875 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:01:48.877 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:01:48.917 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:01:51.124 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:01:51.203 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:01:51.216 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 01:01:51.217 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 01:01:51.217 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
[MASTER] 01:01:51.403 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:01:51.404 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Using seed 1015
* Starting evolution
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
[MASTER] 01:03:52.352 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: Line 1499
[MASTER] 01:03:52.353 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: Line 1502
[MASTER] 01:03:52.353 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: Line 1505
[MASTER] 01:03:52.353 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: Line 1506
[MASTER] 01:03:52.386 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 569: org.jcvi.jillion.core.Range.split(J)Ljava/util/List;:951 - ReplaceComparisonOperator >= -> ==
[MASTER] 01:03:52.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1086: org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z:1499 - ReplaceComparisonOperator != -> ==
[MASTER] 01:03:52.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1088: org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z:1502 - ReplaceComparisonOperator != null -> = null
[MASTER] 01:03:52.406 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 1090: org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z:1505 - ReplaceComparisonOperator == -> !=
[MASTER] 01:03:52.463 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: I4 Branch 88 IF_ACMPNE L1499 - true in context: 
[MASTER] 01:03:52.467 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: I12 Branch 89 IFNONNULL L1502 - true in context: 
[MASTER] 01:03:52.477 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.equals(Ljava/lang/Object;)Z: I23 Branch 90 IF_ACMPEQ L1505 - false in context: 
* Search finished after 121s and 43 generations, 44817 statements, best individual has fitness: 720.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 107
* Number of covered goals: 101
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 67
* Number of covered goals: 64
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 74
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 67
* Number of covered goals: 58
* Generated 23 tests with total length 466
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 125s and 11 generations, 5764 statements, best individual has fitness: 9832.0
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 632
* Number of covered goals: 363
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 56%
* Total number of goals: 426
* Number of covered goals: 240
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 47%
* Total number of goals: 802
* Number of covered goals: 379
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 77
* Number of covered goals: 37
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 426
* Number of covered goals: 238
* Generated 78 tests with total length 918
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Generating assertions
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
[MASTER] 01:05:48.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 01:05:48.911 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1L, 1L);
Range range1 = range0.asRange();
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
range1.complementFrom(list1);
range0.complementFrom(list0);
List<Range> list2 = range0.complementFrom(list1);
assertTrue(list1.equals((Object)list0));
assertFalse(list2.isEmpty());
assertFalse(list2.contains(range0));

Range.Builder range_Builder0 = new Range.Builder(1L);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
range_Builder1.shift((-1L));
range_Builder1.contractBegin(1L);
Range.CoordinateSystem.values();
range0.asRange();
range0.toString();
Range range2 = Range.of((-1L));
assertFalse(range2.isEmpty());


[MASTER] 01:05:50.307 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 01:05:50.308 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder(255L, 9223372036854774983L);
range_Builder0.shift(9223372036854774983L);
Range range0 = Range.of(255L);
Range range1 = Range.of((-128L));
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range2 = Range.of(range_CoordinateSystem0, (-32773L), (-1095L));
Range range3 = range1.intersection(range0);
Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range3.forEach(consumer0);
Range range4 = range3.asRange();
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
Range range5 = Range.of(range_CoordinateSystem1, (-4739L), (-1095L));
boolean boolean0 = range5.startsBefore(range4);
range4.endsBefore(range1);
boolean boolean1 = range3.endsBefore(range2);
assertFalse(boolean1 == boolean0);

range3.equals("Null Range used in intersection operation.");
List<Range> list0 = range3.complement(range4);
assertFalse(range4.isEmpty());
assertEquals(1, list0.size());


[MASTER] 01:05:50.391 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 01:05:50.392 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of((-1L), (-1L));
Range range1 = Range.ofLength(1001L);
List<Range> list0 = range1.split(1001L);
long long0 = range1.getLength();
assertEquals(1001L, long0);

List<Range> list1 = range0.complementFrom(list0);
assertTrue(list1.equals((Object)list0));
assertTrue(list0.contains(range1));

Range range2 = Range.of(1001L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
range1.getBegin(range_CoordinateSystem0);
Range range3 = range2.intersection(range0);
assertFalse(range3.isEmpty());

Range range4 = range1.intersection(range2);
assertTrue(range4.isEmpty());


[MASTER] 01:05:50.576 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 01:05:50.577 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(0L);
Range.Builder range_Builder0 = new Range.Builder(range0);
range_Builder0.contractEnd((-691L));
range_Builder0.shift(0L);
range_Builder0.contractBegin(0L);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
Range range1 = Range.ofLength(0L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
range1.getBegin(range_CoordinateSystem0);
Range range2 = range0.intersection(range1);
assertTrue(range2.equals((Object)range0));
assertNotSame(range2, range0);


[MASTER] 01:05:50.963 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 01:05:50.964 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.ofLength(0L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
boolean boolean0 = range0.intersects(range1);
assertNotSame(range1, range0);
assertTrue(boolean0);

Range.Builder range_Builder0 = new Range.Builder(range0);
assertTrue(range0.equals((Object)range1));


[MASTER] 01:05:51.341 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 01:05:51.341 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
Range.Builder range_Builder1 = new Range.Builder(0L);
Range range0 = Range.ofLength(0L);
range_Builder0.shift(688L);
range_Builder1.contractBegin(0L);
Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
Range range1 = Range.ofLength(255L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
range1.getBegin(range_CoordinateSystem0);
Range range2 = range1.intersection(range0);
assertNotSame(range2, range0);
assertFalse(range0.isEmpty());
assertTrue(range2.equals((Object)range0));


[MASTER] 01:05:51.738 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 01:05:51.738 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1L, 1L);
Range range1 = range0.asRange();
List<Range> list0 = range0.complement(range1);
List<Range> list1 = range0.complementFrom(list0);
range1.complementFrom(list1);
List<Range> list2 = range0.complementFrom(list1);
assertFalse(list1.contains(range0));
assertTrue(list2.equals((Object)list1));
assertEquals(1, list2.size());

Range.Builder range_Builder0 = new Range.Builder(1L);
Range range2 = Range.of(4294967295L);
boolean boolean0 = range1.endsBefore(range2);
assertTrue(boolean0);


[MASTER] 01:05:53.229 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 01:05:53.229 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1834L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
Range range1 = Range.of(range_CoordinateSystem0, 835L, 4229L);
Range range2 = range1.intersection(range0);
Range range3 = Range.of(range_CoordinateSystem0, (-601L), 1834L);
range0.endsBefore(range3);
Object object0 = new Object();
range3.equals(object0);
long long0 = range2.getLength();
assertEquals(1L, long0);

range1.endsBefore(range0);
range3.equals((Object) null);
assertFalse(range3.isEmpty());

List<Range> list0 = range2.complement(range0);
assertFalse(list0.contains(range2));
assertEquals(1, list0.size());


* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 12625
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:18:52.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:18:52.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:18:52.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:18:53.066 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:18:53.101 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:18:53.102 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:18:53.302 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 01:18:53.303 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 01:18:53.304 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 01:18:53.305 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 01:18:53.316 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 01:18:53.331 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 01:18:53.332 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 01:18:53.341 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 01:18:53.372 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1015
* Starting evolution
* Search finished after 121s and 73 generations, 58345 statements, best individual has fitness: 136.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 93
* Number of covered goals: 91
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 47
* Number of covered goals: 44
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 27
* Number of covered goals: 25
* Generated 20 tests with total length 405
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1015/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
