* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.encodings.EncodingFactory
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 5948
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.encodings.EncodingFactory
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/encodings/EncodingFactory.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1011
* Starting evolution
* Search finished after 125s and 13 generations, 11742 statements, best individual has fitness: 888.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 242
* Number of covered goals: 219
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 195
* Number of covered goals: 179
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 387
* Number of covered goals: 349
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 25
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 195
* Number of covered goals: 175
* Generated 79 tests with total length 1152
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 36%
* Compiling and checking tests
* Writing JUnit test case 'EncodingFactory_ESTest' to /home/ubuntu/termite/qmosa/tests/s1011/110_firebird/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBProcedureCall
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.firebirdsql.jdbc.FBCachedFetcher
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/110_firebird/evosuite-files/evosuite.properties
* Connecting to master process on port 5947
* Connecting to master process on port 5942
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBProcedureCall
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/jdbc/FBProcedureCall.java
[MASTER] 22:18:00.008 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:18:00.021 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:18:00.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:18:00.338 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
[MASTER] 22:18:01.546 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:18:01.547 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:18:01.566 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Using seed 1011
* Starting evolution
[MASTER] 22:18:02.951 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 22:18:02.961 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 22:18:02.962 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 22:18:03.023 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 22:18:03.031 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 22:18:03.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 22:18:03.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 22:18:03.036 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 22:18:03.038 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 22:18:03.436 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 22:18:03.796 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.firebirdsql.jdbc.FBCachedFetcher
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/110_firebird/src/main/java/org/firebirdsql/jdbc/FBCachedFetcher.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1011
* Starting evolution
[MASTER] 22:18:36.767 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 22:18:51.950 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.firebirdsql.gds.impl.GDSHelper due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.firebirdsql.jca.FBConnectionRequestInfo due to org.evosuite.ga.ConstructionFailedException: Have no generator for class org.firebirdsql.jdbc.FBConnection canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 22:18:59.448 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 122s and 17 generations, 15715 statements, best individual has fitness: 1080.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 117
* Number of covered goals: 108
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 98
* Number of covered goals: 81
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 347
* Number of covered goals: 294
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 70
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 94%
* Total number of goals: 18
* Number of covered goals: 17
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 98
* Number of covered goals: 81
* Generated 39 tests with total length 637
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 142s and 37 generations, 35372 statements, best individual has fitness: 1640.0
[MASTER] 22:20:28.580 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 21 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 63%
* Total number of goals: 158
* Number of covered goals: 100
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 118
* Number of covered goals: 60
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 347
* Number of covered goals: 335
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 28
* Number of covered goals: 24
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 39%
* Total number of goals: 118
* Number of covered goals: 46
* Generated 48 tests with total length 1145
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
[MASTER] 22:21:02.101 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<4253> but was:<0>
[MASTER] 22:21:02.102 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getInputParam(2);
fBProcedureParam0.clone();
assertEquals(4253, fBProcedureParam0.getType());

fBProcedureParam0.setType(917);
fBProcedureParam0.clone();
fBProcedureCall0.addInputParam(fBProcedureParam0);
fBProcedureCall0.getInputParam(18);
fBProcedureCall0.getOutputParams();
Object object0 = fBProcedureCall0.clone();
fBProcedureCall0.getSQL(true);
fBProcedureCall0.getInputParams();
fBProcedureCall0.getOutputParams();
fBProcedureCall0.getInputParam(18);
fBProcedureCall0.getInputParam(1869);
fBProcedureCall0.getOutputParams();
fBProcedureCall0.getInputParams();
fBProcedureCall0.getInputParam(1869);
fBProcedureCall0.getOutputParams();
assertNotSame(fBProcedureCall0, object0);


[MASTER] 22:21:02.802 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.firebirdsql.jdbc.FBSQLException: Cannot find parameter with the specified position.
[MASTER] 22:21:02.803 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.getSQL(true);
fBProcedureCall0.getInputParams();
fBProcedureCall0.setName("sB?yR(/;");
fBProcedureCall0.getOutputParam(1687);
FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1687, "SELECT * FROM null");
fBProcedureCall0.getSQL(true);
fBProcedureCall0.getSQL(false);
fBProcedureCall0.getSQL(true);
fBProcedureCall0.setName("SELECT * FROM sB?yR(/;(SELECT * FROM null)");
fBProcedureCall0.hashCode();
fBProcedureCall0.getInputParam(1687);
fBProcedureCall0.addOutputParam(fBProcedureParam0);
FBProcedureCall fBProcedureCall1 = (FBProcedureCall)fBProcedureCall0.clone();
assertNotSame(fBProcedureCall1, fBProcedureCall0);
assertTrue(fBProcedureCall1.equals((Object)fBProcedureCall0));

fBProcedureCall1.registerOutParam(4, 4);
fBProcedureCall0.getInputParam(1620);
FBProcedureCall fBProcedureCall2 = (FBProcedureCall)fBProcedureCall0.clone();
fBProcedureCall0.clone();
assertTrue(fBProcedureCall0.equals((Object)fBProcedureCall2));


[MASTER] 22:21:04.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-1833> but was:<-1>
[MASTER] 22:21:04.024 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
fBProcedureCall0.getSQL(true);
List<FBProcedureParam> list0 = fBProcedureCall0.getInputParams();
FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
FBProcedureParam fBProcedureParam0 = fBProcedureCall1.getOutputParam(1687);
assertEquals((-1833), fBProcedureParam0.getIndex());

FBProcedureParam fBProcedureParam1 = fBProcedureCall1.addParam(223, "sB?yR(/;");
fBProcedureCall0.getName();
fBProcedureParam1.setValue(list0);
fBProcedureCall0.getSQL(false);
fBProcedureCall1.mapOutParamIndexToPosition((-1403));
FBProcedureCall fBProcedureCall2 = new FBProcedureCall();
fBProcedureCall2.getInputParams();
FBProcedureParam fBProcedureParam2 = fBProcedureCall2.getInputParam(3438);
fBProcedureCall0.getName();
fBProcedureCall0.getInputParams();
fBProcedureCall2.clone();
fBProcedureCall0.getSQL(false);
fBProcedureParam2.setIndex(2);
FBProcedureCall fBProcedureCall3 = new FBProcedureCall();
fBProcedureCall3.addInputParam(fBProcedureParam0);
fBProcedureCall3.addInputParam(fBProcedureParam2);
fBProcedureCall1.getOutputParam(1687);
fBProcedureCall3.addOutputParam(fBProcedureParam1);
fBProcedureCall3.mapOutParamIndexToPosition(1);
fBProcedureCall3.getName();
fBProcedureCall0.mapOutParamIndexToPosition(547, true);
String string0 = fBProcedureCall1.getSQL(true);
assertEquals("SELECT * FROM null(sB?yR(/;)", string0);


* Writing JUnit test case 'FBProcedureCall_ESTest' to /home/ubuntu/termite/qmosa/tests/s1011/110_firebird/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 61%
* Compiling and checking tests
[MASTER] 22:23:38.618 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.JniGDSImpl: no jaybird22_x64 in java.library.path
[MASTER] 22:23:38.646 [logback-2] ERROR ClassStateSupport - Could not initialize org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl: org.firebirdsql.gds.impl.jni.JniGDSImpl
[MASTER] 22:23:38.766 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class org.firebirdsql.gds.impl.jni.JniGDSImpl
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'FBCachedFetcher_ESTest' to /home/ubuntu/termite/qmosa/tests/s1011/110_firebird/evosuite-tests
* Done!

* Computation finished
