* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10121
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:30:17.472 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:30:17.479 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:30:17.480 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:30:17.618 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:30:17.643 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:30:17.650 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/filters/unsupervised/attribute/Discretize.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 02:31:24.621 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
* Search finished after 122s and 43 generations, 32498 statements, best individual has fitness: 7872.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 51%
* Total number of goals: 370
* Number of covered goals: 188
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 34%
* Total number of goals: 242
* Number of covered goals: 83
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 39%
* Total number of goals: 713
* Number of covered goals: 280
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 72
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 34%
* Total number of goals: 242
* Number of covered goals: 83
* Generated 51 tests with total length 929
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 02:34:07.387 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 02:34:07.809 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10119
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:35:11.814 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:35:11.826 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:35:11.827 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:35:11.925 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/experiment/ResultMatrix.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
* Search finished after 137s and 2 generations, 2834 statements, best individual has fitness: 5808.0
[MASTER] 02:37:35.090 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 18 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 647
* Number of covered goals: 566
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 441
* Number of covered goals: 340
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 77%
* Total number of goals: 678
* Number of covered goals: 522
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 26%
* Total number of goals: 244
* Number of covered goals: 63
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 75%
* Total number of goals: 124
* Number of covered goals: 93
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 74%
* Total number of goals: 124
* Number of covered goals: 92
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 68%
* Total number of goals: 441
* Number of covered goals: 299
* Generated 56 tests with total length 1531
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
[MASTER] 02:45:44.929 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.Optimization
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10116
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10122
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:52:27.955 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:52:27.985 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:52:27.986 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:52:31.119 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:52:31.773 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:52:31.774 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:52:32.033 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:52:32.074 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:52:32.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:52:32.115 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/Optimization.java
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/rules/JRip.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 02:52:38.040 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 262
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 263
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 264
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 265
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 266
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 267
[MASTER] 02:52:43.188 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 268
[MASTER] 02:52:43.193 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: Line 270
[MASTER] 02:52:43.198 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;: Line 439
[MASTER] 02:52:43.200 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;: Line 440
[MASTER] 02:52:43.201 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;: Line 441
[MASTER] 02:52:43.209 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;: Line 972
[MASTER] 02:52:43.210 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;: Line 973
[MASTER] 02:52:43.211 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;: Line 974
[MASTER] 02:52:43.215 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: root-Branch
[MASTER] 02:52:43.215 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;: root-Branch
[MASTER] 02:52:43.220 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;: root-Branch
[MASTER] 02:52:43.226 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 8: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:263 - ReplaceConstant - William W. Cohen -> 
[MASTER] 02:52:43.226 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 9: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:264 - ReplaceConstant - Fast Effective Rule Induction -> 
[MASTER] 02:52:43.226 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 10: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:265 - ReplaceConstant - Twelfth International Conference on Machine Learning -> 
[MASTER] 02:52:43.226 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 11: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:266 - ReplaceConstant - 1995 -> 
[MASTER] 02:52:43.226 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 12: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:267 - ReplaceConstant - 115-123 -> 
[MASTER] 02:52:43.228 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 13: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:268 - ReplaceConstant - Morgan Kaufmann -> 
[MASTER] 02:52:43.247 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 180: weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;:439 - ReplaceConstant - 1 -> 0
[MASTER] 02:52:43.249 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 181: weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;:440 - ReplaceConstant - measureNumRules -> 
[MASTER] 02:52:43.268 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 891: weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;:973 - ReplaceVariable value -> cover
[MASTER] 02:52:43.269 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 892: weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;:973 - ReplaceVariable value -> accu
[MASTER] 02:52:43.271 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 893: weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;:973 - ReplaceVariable value -> accuRate
[MASTER] 02:52:43.272 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 894: weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;:973 - ReplaceVariable value -> maxInfoGain
[MASTER] 02:52:43.274 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 895: weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;:973 - InsertUnaryOp Negation
[MASTER] 02:52:43.275 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;:NonNull:weka.core.TechnicalInformation:hasAdditional()Z:False
[MASTER] 02:52:43.275 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;:NonNull
[MASTER] 02:52:43.278 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;
[MASTER] 02:52:43.278 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;
[MASTER] 02:52:43.287 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NominalAntd.copy()Ljava/lang/Object;
[MASTER] 02:52:43.290 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;
[MASTER] 02:52:43.290 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;
[MASTER] 02:52:43.293 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.NominalAntd.copy()Ljava/lang/Object;
[MASTER] 02:52:43.294 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip.getTechnicalInformation()Lweka/core/TechnicalInformation;: root-Branch in context: weka.classifiers.rules.JRip:getTechnicalInformation()Lweka/core/TechnicalInformation;
[MASTER] 02:52:43.295 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip.enumerateMeasures()Ljava/util/Enumeration;: root-Branch in context: weka.classifiers.rules.JRip:enumerateMeasures()Ljava/util/Enumeration;
[MASTER] 02:52:43.298 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip$NominalAntd.copy()Ljava/lang/Object;: root-Branch in context: 
[MASTER] 02:53:40.914 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.Antd.copy()Ljava/lang/Object;
[MASTER] 02:53:40.919 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.Antd.copy()Ljava/lang/Object;
[MASTER] 02:54:09.726 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 122s and 31 generations, 27895 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 13 tests with total length 216
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 124s and 17 generations, 12050 statements, best individual has fitness: 13680.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 33%
* Total number of goals: 705
* Number of covered goals: 236
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 23%
* Total number of goals: 416
* Number of covered goals: 96
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 47%
* Total number of goals: 993
* Number of covered goals: 469
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 93
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 72
* Number of covered goals: 71
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 72
* Number of covered goals: 71
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 23%
* Total number of goals: 416
* Number of covered goals: 94
* Generated 51 tests with total length 911
* Resulting test suite's coverage: 38% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10115
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10117
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:56:29.714 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:56:29.715 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:56:29.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:56:29.776 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:56:29.788 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:56:29.789 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/bayes/NaiveBayesMultinomialText.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 02:56:37.634 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 02:56:37.634 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 02:56:40.781 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:56:48.341 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:56:48.346 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:56:48.347 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:56:49.574 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:56:51.131 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:56:51.133 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:56:54.364 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 02:56:54.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 02:56:54.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 02:56:54.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 02:56:54.449 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 02:56:54.449 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 02:56:54.451 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 02:56:54.452 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 02:56:54.453 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 02:56:54.585 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 02:56:54.616 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/Evaluation.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
[MASTER] 02:57:10.655 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
* Search finished after 123s and 18 generations, 17406 statements, best individual has fitness: 5296.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 338
* Number of covered goals: 188
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 194
* Number of covered goals: 92
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 476
* Number of covered goals: 239
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 112
* Number of covered goals: 46
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 194
* Number of covered goals: 91
* Generated 48 tests with total length 955
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 123s and 15 generations, 11534 statements, best individual has fitness: 19808.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 44%
* Total number of goals: 1378
* Number of covered goals: 600
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 35%
* Total number of goals: 809
* Number of covered goals: 280
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 424
* Number of covered goals: 213
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 11%
* Total number of goals: 278
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 70%
* Total number of goals: 103
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 69%
* Total number of goals: 103
* Number of covered goals: 71
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 23%
* Total number of goals: 809
* Number of covered goals: 184
* Generated 69 tests with total length 1536
* Resulting test suite's coverage: 37% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 3%
* Compiling and checking tests
[MASTER] 03:03:12.488 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 03:03:12.962 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 03:03:12.962 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 03:03:14.312 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 03:03:50.762 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_17_1575428630710/weka/classifiers/bayes/NaiveBayesMultinomialText_17_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_17_1575428630710/weka/classifiers/bayes/NaiveBayesMultinomialText_17_tmp__ESTest_scaffolding.java]]
[MASTER] 03:03:50.762 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:50.762 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:50.765 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 03:03:50.765 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 28
[MASTER] 03:03:50.765 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 30
[MASTER] 03:03:50.766 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 30
[MASTER] 03:03:50.767 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_17_1575428630710/weka/classifiers/bayes/NaiveBayesMultinomialText_17_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 03:03:50 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.HashMap;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: import weka.classifiers.bayes.NaiveBayesMultinomialText;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class NaiveBayesMultinomialText_17_tmp__ESTest extends NaiveBayesMultinomialText_17_tmp__ESTest_scaffolding {
21: 
22:   /**
23:   //Test case number: 0
24:   /*Coverage entropy=2.7853437136837007
25:   */
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
29:       Integer integer0 = new Integer(820);
30:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
31:       hashMap0.put(integer0, linkedHashMap0);
32:       hashMap0.clone();
33:       FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
34:       FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
35:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
36:       naiveBayesMultinomialText0.getUseStopList();
37:       Integer integer1 = new Integer((-369));
38:       Integer integer2 = new Integer((-806));
39:       hashMap0.put(integer2, linkedHashMap0);
40:       naiveBayesMultinomialText0.getStopwords();
41:       naiveBayesMultinomialText0.getLNorm();
42:       NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
43:       naiveBayesMultinomialText1.normalizeDocLengthTipText();
44:       assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
45:       
46:       naiveBayesMultinomialText0.pruneDictionary();
47:       String string0 = naiveBayesMultinomialText1.stopwordsTipText();
48:       assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
49:       
50:       FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
51:       double double0 = naiveBayesMultinomialText0.getLNorm();
52:       assertEquals(2.0, double0, 0.01);
53:       
54:       String string1 = naiveBayesMultinomialText0.globalInfo();
55:       assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string1);
56:       
57:       naiveBayesMultinomialText1.pruneDictionary();
58:       String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
59:       assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
60:       
61:       String string3 = naiveBayesMultinomialText1.minWordFrequencyTipText();
62:       assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string3);
63:       
64:       naiveBayesMultinomialText1.getTokenizer();
65:       assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
66:       assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
67:       assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
68:       assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
69:   }
70: }
RegularFileObject[/tmp/EvoSuite_17_1575428630710/weka/classifiers/bayes/NaiveBayesMultinomialText_17_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 03:03:50 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_17_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_17_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.classifiers.CostMatrix",
95:       "weka.core.logging.Logger$Level",
96:       "weka.core.neighboursearch.CoverTree$DistanceNode",
97:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
98:       "weka.core.DenseInstance",
99:       "weka.core.stemmers.Stemmer",
100:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
101:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
102:       "org.pentaho.packageManagement.DefaultPackageManager",
103:       "org.bounce.net.DefaultAuthenticator",
104:       "weka.core.neighboursearch.CoverTree$MyHeap",
105:       "weka.core.stemmers.NullStemmer",
106:       "weka.core.EnvironmentHandler",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.Utils",
109:       "weka.core.CustomDisplayStringProvider",
110:       "weka.core.tokenizers.Tokenizer",
111:       "weka.core.NormalizableDistance",
112:       "weka.core.NoSupportForMissingValuesException",
113:       "weka.classifiers.UpdateableClassifier",
114:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
115:       "weka.core.Copyable",
116:       "weka.core.Capabilities",
117:       "weka.core.BinarySparseInstance",
118:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
119:       "weka.core.SerializedObject",
120:       "weka.core.Summarizable",
121:       "weka.core.AdditionalMeasureProducer",
122:       "weka.core.neighboursearch.balltrees.BallNode",
123:       "org.pentaho.packageManagement.PackageManager$1",
124:       "weka.core.Drawable",
125:       "weka.core.matrix.Matrix",
126:       "weka.core.CapabilitiesHandler",
127:       "weka.core.AbstractInstance",
128:       "weka.core.scripting.JythonObject",
129:       "weka.core.SelectedTag",
130:       "org.pentaho.packageManagement.DefaultPackage",
131:       "weka.classifiers.misc.InputMappedClassifier",
132:       "weka.core.Version",
133:       "weka.core.Tag",
134:       "weka.core.neighboursearch.CoverTree",
135:       "weka.classifiers.AbstractClassifier",
136:       "weka.core.OptionHandler",
137:       "weka.core.WekaException",
138:       "weka.classifiers.trees.RandomForest",
139:       "weka.core.Range",
140:       "weka.core.PartitionGenerator",
141:       "weka.core.scripting.JythonSerializableObject",
142:       "weka.classifiers.Classifier",
143:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
144:       "weka.core.Capabilities$Capability",
145:       "weka.core.SparseInstance",
146:       "org.pentaho.packageManagement.PackageManager",
147:       "weka.core.tokenizers.WordTokenizer",
148:       "weka.core.stemmers.SnowballStemmer",
149:       "weka.core.stemmers.LovinsStemmer",
150:       "weka.classifiers.Evaluation",
151:       "weka.classifiers.functions.supportVector.Kernel",
152:       "weka.core.WekaPackageManager",
153:       "weka.core.TechnicalInformationHandler",
154:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
155:       "weka.classifiers.meta.CostSensitiveClassifier",
156:       "weka.core.Option",
157:       "weka.core.neighboursearch.PerformanceStats",
158:       "weka.core.Attribute",
159:       "weka.core.Stopwords",
160:       "weka.core.tokenizers.AlphabeticTokenizer",
161:       "weka.core.FastVector",
162:       "weka.core.UnassignedDatasetException",
163:       "weka.core.tokenizers.NGramTokenizer",
164:       "weka.classifiers.RandomizableClassifier",
165:       "weka.classifiers.SingleClassifierEnhancer",
166:       "weka.core.RevisionUtils",
167:       "weka.core.Instance",
168:       "weka.core.ProtectedProperties",
169:       "weka.core.AttributeStats",
170:       "weka.core.WeightedInstancesHandler",
171:       "weka.core.neighboursearch.NearestNeighbourSearch",
172:       "weka.core.neighboursearch.covertrees.Stack",
173:       "weka.core.Randomizable",
174:       "weka.core.EuclideanDistance",
175:       "weka.core.Instances",
176:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
177:       "weka.classifiers.bayes.NaiveBayesMultinomial",
178:       "weka.core.UnassignedClassException",
179:       "weka.classifiers.rules.ZeroR",
180:       "weka.core.stemmers.IteratedLovinsStemmer",
181:       "weka.core.stemmers.Stemming",
182:       "weka.core.TechnicalInformation",
183:       "weka.core.UnsupportedAttributeTypeException",
184:       "weka.classifiers.Sourcable",
185:       "weka.core.RevisionHandler",
186:       "weka.classifiers.evaluation.output.prediction.PlainText",
187:       "weka.core.neighboursearch.TreePerformanceStats",
188:       "weka.core.xml.XMLSerialization",
189:       "weka.classifiers.xml.XMLClassifier"
190:     );
191:   } 
192: 
193:   private static void resetClasses() {
194:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_17_tmp__ESTest_scaffolding.class.getClassLoader()); 
195: 
196:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
197:       "weka.classifiers.AbstractClassifier",
198:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
199:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
200:       "weka.core.Capabilities$Capability",
201:       "weka.core.tokenizers.Tokenizer",
202:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
203:       "weka.core.tokenizers.WordTokenizer",
204:       "weka.core.stemmers.NullStemmer",
205:       "weka.classifiers.Evaluation",
206:       "weka.core.Utils",
207:       "weka.core.Option",
208:       "weka.core.AbstractInstance",
209:       "weka.core.SparseInstance",
210:       "weka.core.BinarySparseInstance",
211:       "weka.core.UnassignedDatasetException",
212:       "weka.filters.Filter",
213:       "weka.filters.supervised.attribute.Discretize",
214:       "weka.core.Range",
215:       "weka.core.TechnicalInformation",
216:       "weka.core.TechnicalInformation$Type",
217:       "weka.core.TechnicalInformation$Field",
218:       "weka.core.stemmers.SnowballStemmer",
219:       "weka.core.stemmers.Stemming",
220:       "weka.core.RevisionUtils",
221:       "weka.core.stemmers.LovinsStemmer",
222:       "weka.core.DenseInstance",
223:       "weka.classifiers.trees.RandomForest",
224:       "weka.classifiers.SingleClassifierEnhancer",
225:       "weka.classifiers.misc.InputMappedClassifier",
226:       "weka.classifiers.rules.ZeroR",
227:       "weka.classifiers.bayes.NaiveBayesMultinomial",
228:       "weka.core.Instances",
229:       "weka.core.Stopwords",
230:       "weka.attributeSelection.ASEvaluation",
231:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
232:       "weka.attributeSelection.PrincipalComponents",
233:       "weka.core.neighboursearch.NearestNeighbourSearch",
234:       "weka.core.neighboursearch.CoverTree",
235:       "weka.core.NormalizableDistance",
236:       "weka.core.EuclideanDistance",
237:       "weka.core.neighboursearch.KDTree",
238:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
239:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
240:       "weka.core.neighboursearch.balltrees.BallNode",
241:       "weka.core.converters.ArffLoader$ArffReader",
242:       "weka.core.tokenizers.NGramTokenizer",
243:       "weka.classifiers.RandomizableClassifier",
244:       "weka.core.Tag",
245:       "weka.classifiers.functions.SGDText",
246:       "weka.core.SelectedTag",
247:       "weka.core.Capabilities",
248:       "org.pentaho.packageManagement.PackageManager",
249:       "org.pentaho.packageManagement.DefaultPackageManager",
250:       "weka.core.Version",
251:       "weka.core.Environment",
252:       "weka.core.WekaPackageManager",
253:       "weka.classifiers.rules.DecisionTable",
254:       "weka.attributeSelection.ASSearch",
255:       "weka.attributeSelection.BestFirst",
256:       "weka.classifiers.misc.SerializedClassifier",
257:       "weka.core.TestInstances",
258:       "weka.core.stemmers.IteratedLovinsStemmer",
259:       "weka.classifiers.bayes.BayesNet",
260:       "weka.classifiers.bayes.net.BIFReader",
261:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
262:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
263:       "weka.classifiers.bayes.net.search.local.K2",
264:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
265:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
266:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
267:       "weka.classifiers.meta.CostSensitiveClassifier",
268:       "weka.classifiers.CostMatrix",
269:       "weka.classifiers.functions.supportVector.Kernel",
270:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
271:       "weka.core.tokenizers.AlphabeticTokenizer",
272:       "weka.core.SerializationHelper",
273:       "weka.core.FindWithCapabilities",
274:       "weka.core.SingleIndex",
275:       "weka.core.Attribute",
276:       "weka.core.ProtectedProperties",
277:       "weka.core.SerializedObject",
278:       "weka.core.neighboursearch.BallTree",
279:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
280:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
281:       "weka.core.neighboursearch.balltrees.BallSplitter",
282:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
284:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
285:       "weka.classifiers.lazy.IBk",
286:       "weka.core.neighboursearch.LinearNNSearch",
287:       "weka.classifiers.meta.FilteredClassifier",
288:       "weka.filters.supervised.attribute.AttributeSelection",
289:       "weka.attributeSelection.AttributeSelection",
290:       "weka.attributeSelection.CfsSubsetEval",
291:       "weka.attributeSelection.GreedyStepwise",
292:       "weka.classifiers.trees.J48",
293:       "weka.core.WekaEnumeration",
294:       "weka.core.Attribute$1",
295:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
296:       "weka.core.WekaException",
297:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
298:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
299:       "weka.attributeSelection.WrapperSubsetEval",
300:       "weka.classifiers.functions.SimpleLinearRegression",
301:       "weka.core.ClassDiscovery",
302:       "weka.core.UnassignedClassException"
303:     );
304:   }
305: }

[MASTER] 03:03:50.770 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
Integer integer0 = new Integer(820);
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
hashMap0.put(integer0, linkedHashMap0);
hashMap0.clone();
FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.getUseStopList();
Integer integer1 = new Integer((-369));
Integer integer2 = new Integer((-806));
hashMap0.put(integer2, linkedHashMap0);
naiveBayesMultinomialText0.getStopwords();
naiveBayesMultinomialText0.getLNorm();
NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText1.normalizeDocLengthTipText();
assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());

naiveBayesMultinomialText0.pruneDictionary();
String string0 = naiveBayesMultinomialText1.stopwordsTipText();
assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);

FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
double double0 = naiveBayesMultinomialText0.getLNorm();
assertEquals(2.0, double0, 0.01);

String string1 = naiveBayesMultinomialText0.globalInfo();
assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string1);

naiveBayesMultinomialText1.pruneDictionary();
String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);

String string3 = naiveBayesMultinomialText1.minWordFrequencyTipText();
assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string3);

naiveBayesMultinomialText1.getTokenizer();
assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());


[MASTER] 03:03:51.423 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1575428631391/weka/classifiers/bayes/NaiveBayesMultinomialText_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1575428631391/weka/classifiers/bayes/NaiveBayesMultinomialText_33_tmp__ESTest_scaffolding.java]]
[MASTER] 03:03:51.423 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.423 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.423 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 03:03:51.424 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1575428631391/weka/classifiers/bayes/NaiveBayesMultinomialText_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 03:03:51 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.io.File;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.mock.java.io.MockFile;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: import weka.core.stemmers.NullStemmer;
18: import weka.core.stemmers.SnowballStemmer;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class NaiveBayesMultinomialText_33_tmp__ESTest extends NaiveBayesMultinomialText_33_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=2.6930121983106288
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
30:       naiveBayesMultinomialText0.setLowercaseTokens(false);
31:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
32:       String[] stringArray0 = new String[6];
33:       stringArray0[0] = "KB~";
34:       stringArray0[1] = "A report published by a school or other institution, usually numbered within a series.";
35:       stringArray0[2] = "\tNumber of trees to build.";
36:       stringArray0[3] = ">?VuzFSR7lH#cP#B[";
37:       stringArray0[4] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
38:       stringArray0[5] = "";
39:       SnowballStemmer.main(stringArray0);
40:       NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
41:       NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText1.m_stemmer;
42:       naiveBayesMultinomialText1.setStemmer(nullStemmer0);
43:       SnowballStemmer.main(stringArray0);
44:       naiveBayesMultinomialText1.setStemmer(nullStemmer0);
45:       naiveBayesMultinomialText0.getStemmer();
46:       naiveBayesMultinomialText0.setUseStopList(false);
47:       naiveBayesMultinomialText1.useStopListTipText();
48:       naiveBayesMultinomialText0.periodicPruningTipText();
49:       naiveBayesMultinomialText0.setNormalizeDocLength(true);
50:       assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
51:       
52:       NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
53:       naiveBayesMultinomialText2.normTipText();
54:       MockFile.createTempFile("KB~", "\tNumber of trees to build.", (File) null);
55:       NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
56:       naiveBayesMultinomialText3.setStopwords((File) null);
57:       assertFalse(naiveBayesMultinomialText3.getNormalizeDocLength());
58:   }
59: }
RegularFileObject[/tmp/EvoSuite_33_1575428631391/weka/classifiers/bayes/NaiveBayesMultinomialText_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 03:03:51 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_33_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.classifiers.CostMatrix",
95:       "weka.core.logging.Logger$Level",
96:       "weka.core.neighboursearch.CoverTree$DistanceNode",
97:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
98:       "weka.core.DenseInstance",
99:       "weka.core.stemmers.Stemmer",
100:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
101:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
102:       "org.pentaho.packageManagement.DefaultPackageManager",
103:       "org.bounce.net.DefaultAuthenticator",
104:       "weka.core.neighboursearch.CoverTree$MyHeap",
105:       "weka.core.stemmers.NullStemmer",
106:       "weka.core.EnvironmentHandler",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.Utils",
109:       "weka.core.CustomDisplayStringProvider",
110:       "weka.core.tokenizers.Tokenizer",
111:       "weka.core.NormalizableDistance",
112:       "weka.core.NoSupportForMissingValuesException",
113:       "weka.classifiers.UpdateableClassifier",
114:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
115:       "weka.core.Copyable",
116:       "weka.core.Capabilities",
117:       "weka.core.BinarySparseInstance",
118:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
119:       "weka.core.SerializedObject",
120:       "weka.core.Summarizable",
121:       "weka.core.AdditionalMeasureProducer",
122:       "weka.core.neighboursearch.balltrees.BallNode",
123:       "org.pentaho.packageManagement.PackageManager$1",
124:       "weka.core.Drawable",
125:       "weka.core.matrix.Matrix",
126:       "weka.core.CapabilitiesHandler",
127:       "weka.core.AbstractInstance",
128:       "weka.core.scripting.JythonObject",
129:       "weka.core.SelectedTag",
130:       "org.pentaho.packageManagement.DefaultPackage",
131:       "weka.classifiers.misc.InputMappedClassifier",
132:       "weka.core.Version",
133:       "weka.core.Tag",
134:       "weka.core.neighboursearch.CoverTree",
135:       "weka.classifiers.AbstractClassifier",
136:       "weka.core.OptionHandler",
137:       "weka.core.WekaException",
138:       "weka.classifiers.trees.RandomForest",
139:       "weka.core.Range",
140:       "weka.core.PartitionGenerator",
141:       "weka.core.scripting.JythonSerializableObject",
142:       "weka.classifiers.Classifier",
143:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
144:       "weka.core.Capabilities$Capability",
145:       "weka.core.SparseInstance",
146:       "org.pentaho.packageManagement.PackageManager",
147:       "weka.core.tokenizers.WordTokenizer",
148:       "weka.core.stemmers.SnowballStemmer",
149:       "weka.core.stemmers.LovinsStemmer",
150:       "weka.classifiers.Evaluation",
151:       "weka.classifiers.functions.supportVector.Kernel",
152:       "weka.core.WekaPackageManager",
153:       "weka.core.TechnicalInformationHandler",
154:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
155:       "weka.classifiers.meta.CostSensitiveClassifier",
156:       "weka.core.Option",
157:       "weka.core.neighboursearch.PerformanceStats",
158:       "weka.core.Attribute",
159:       "weka.core.Stopwords",
160:       "weka.core.tokenizers.AlphabeticTokenizer",
161:       "weka.core.FastVector",
162:       "weka.core.UnassignedDatasetException",
163:       "weka.core.tokenizers.NGramTokenizer",
164:       "weka.classifiers.RandomizableClassifier",
165:       "weka.classifiers.SingleClassifierEnhancer",
166:       "weka.core.RevisionUtils",
167:       "weka.core.Instance",
168:       "weka.core.ProtectedProperties",
169:       "weka.core.AttributeStats",
170:       "weka.core.WeightedInstancesHandler",
171:       "weka.core.neighboursearch.NearestNeighbourSearch",
172:       "weka.core.neighboursearch.covertrees.Stack",
173:       "weka.core.Randomizable",
174:       "weka.core.EuclideanDistance",
175:       "weka.core.Instances",
176:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
177:       "weka.classifiers.bayes.NaiveBayesMultinomial",
178:       "weka.core.UnassignedClassException",
179:       "weka.classifiers.rules.ZeroR",
180:       "weka.core.stemmers.IteratedLovinsStemmer",
181:       "weka.core.stemmers.Stemming",
182:       "weka.core.TechnicalInformation",
183:       "weka.core.UnsupportedAttributeTypeException",
184:       "weka.classifiers.Sourcable",
185:       "weka.core.RevisionHandler",
186:       "weka.classifiers.evaluation.output.prediction.PlainText",
187:       "weka.core.neighboursearch.TreePerformanceStats",
188:       "weka.core.xml.XMLSerialization",
189:       "weka.classifiers.xml.XMLClassifier"
190:     );
191:   } 
192: 
193:   private static void resetClasses() {
194:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
195: 
196:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
197:       "weka.classifiers.AbstractClassifier",
198:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
199:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
200:       "weka.core.Capabilities$Capability",
201:       "weka.core.tokenizers.Tokenizer",
202:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
203:       "weka.core.tokenizers.WordTokenizer",
204:       "weka.core.stemmers.NullStemmer",
205:       "weka.classifiers.Evaluation",
206:       "weka.core.Utils",
207:       "weka.core.Option",
208:       "weka.core.AbstractInstance",
209:       "weka.core.SparseInstance",
210:       "weka.core.BinarySparseInstance",
211:       "weka.core.UnassignedDatasetException",
212:       "weka.filters.Filter",
213:       "weka.filters.supervised.attribute.Discretize",
214:       "weka.core.Range",
215:       "weka.core.TechnicalInformation",
216:       "weka.core.TechnicalInformation$Type",
217:       "weka.core.TechnicalInformation$Field",
218:       "weka.core.stemmers.SnowballStemmer",
219:       "weka.core.stemmers.Stemming",
220:       "weka.core.RevisionUtils",
221:       "weka.core.stemmers.LovinsStemmer",
222:       "weka.core.DenseInstance",
223:       "weka.classifiers.trees.RandomForest",
224:       "weka.classifiers.SingleClassifierEnhancer",
225:       "weka.classifiers.misc.InputMappedClassifier",
226:       "weka.classifiers.rules.ZeroR",
227:       "weka.classifiers.bayes.NaiveBayesMultinomial",
228:       "weka.core.Instances",
229:       "weka.core.Stopwords",
230:       "weka.attributeSelection.ASEvaluation",
231:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
232:       "weka.attributeSelection.PrincipalComponents",
233:       "weka.core.neighboursearch.NearestNeighbourSearch",
234:       "weka.core.neighboursearch.CoverTree",
235:       "weka.core.NormalizableDistance",
236:       "weka.core.EuclideanDistance",
237:       "weka.core.neighboursearch.KDTree",
238:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
239:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
240:       "weka.core.neighboursearch.balltrees.BallNode",
241:       "weka.core.converters.ArffLoader$ArffReader",
242:       "weka.core.tokenizers.NGramTokenizer",
243:       "weka.classifiers.RandomizableClassifier",
244:       "weka.core.Tag",
245:       "weka.classifiers.functions.SGDText",
246:       "weka.core.SelectedTag",
247:       "weka.core.Capabilities",
248:       "org.pentaho.packageManagement.PackageManager",
249:       "org.pentaho.packageManagement.DefaultPackageManager",
250:       "weka.core.Version",
251:       "weka.core.Environment",
252:       "weka.core.WekaPackageManager",
253:       "weka.classifiers.rules.DecisionTable",
254:       "weka.attributeSelection.ASSearch",
255:       "weka.attributeSelection.BestFirst",
256:       "weka.classifiers.misc.SerializedClassifier",
257:       "weka.core.TestInstances",
258:       "weka.core.stemmers.IteratedLovinsStemmer",
259:       "weka.classifiers.bayes.BayesNet",
260:       "weka.classifiers.bayes.net.BIFReader",
261:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
262:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
263:       "weka.classifiers.bayes.net.search.local.K2",
264:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
265:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
266:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
267:       "weka.classifiers.meta.CostSensitiveClassifier",
268:       "weka.classifiers.CostMatrix",
269:       "weka.classifiers.functions.supportVector.Kernel",
270:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
271:       "weka.core.tokenizers.AlphabeticTokenizer",
272:       "weka.core.SerializationHelper",
273:       "weka.core.FindWithCapabilities",
274:       "weka.core.SingleIndex",
275:       "weka.core.Attribute",
276:       "weka.core.ProtectedProperties",
277:       "weka.core.SerializedObject",
278:       "weka.core.neighboursearch.BallTree",
279:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
280:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
281:       "weka.core.neighboursearch.balltrees.BallSplitter",
282:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
284:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
285:       "weka.classifiers.lazy.IBk",
286:       "weka.core.neighboursearch.LinearNNSearch",
287:       "weka.classifiers.meta.FilteredClassifier",
288:       "weka.filters.supervised.attribute.AttributeSelection",
289:       "weka.attributeSelection.AttributeSelection",
290:       "weka.attributeSelection.CfsSubsetEval",
291:       "weka.attributeSelection.GreedyStepwise",
292:       "weka.classifiers.trees.J48",
293:       "weka.core.WekaEnumeration",
294:       "weka.core.Attribute$1",
295:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
296:       "weka.core.WekaException",
297:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
298:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
299:       "weka.attributeSelection.WrapperSubsetEval",
300:       "weka.classifiers.functions.SimpleLinearRegression",
301:       "weka.core.ClassDiscovery",
302:       "weka.core.UnassignedClassException"
303:     );
304:   }
305: }

[MASTER] 03:03:51.425 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.setLowercaseTokens(false);
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
String[] stringArray0 = new String[6];
stringArray0[0] = "KB~";
stringArray0[1] = "A report published by a school or other institution, usually numbered within a series.";
stringArray0[2] = "\tNumber of trees to build.";
stringArray0[3] = ">?VuzFSR7lH#cP#B[";
stringArray0[4] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
stringArray0[5] = "";
SnowballStemmer.main(stringArray0);
NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText1.m_stemmer;
naiveBayesMultinomialText1.setStemmer(nullStemmer0);
SnowballStemmer.main(stringArray0);
naiveBayesMultinomialText1.setStemmer(nullStemmer0);
naiveBayesMultinomialText0.getStemmer();
naiveBayesMultinomialText0.setUseStopList(false);
naiveBayesMultinomialText1.useStopListTipText();
naiveBayesMultinomialText0.periodicPruningTipText();
naiveBayesMultinomialText0.setNormalizeDocLength(true);
assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());

NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText2.normTipText();
MockFile.createTempFile("KB~", "\tNumber of trees to build.", (File) null);
NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText3.setStopwords((File) null);
assertFalse(naiveBayesMultinomialText3.getNormalizeDocLength());


[MASTER] 03:03:51.694 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_40_1575428631662/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_40_1575428631662/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.java]]
[MASTER] 03:03:51.694 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.694 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.694 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 37
[MASTER] 03:03:51.694 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 37
[MASTER] 03:03:51.695 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 38
[MASTER] 03:03:51.695 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_40_1575428631662/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 03:03:51 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.HashMap;
11: import java.util.LinkedHashMap;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: import weka.core.stemmers.NullStemmer;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class NaiveBayesMultinomialText_40_tmp__ESTest extends NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding {
21: 
22:   /**
23:   //Test case number: 0
24:   /*Coverage entropy=1.5271837172395382
25:   */
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       String[] stringArray0 = new String[22];
29:       stringArray0[1] = "Dg:cFYNnH6Q&Y<w3$";
30:       stringArray0[2] = "Dg:cFYNnH6Q&Y<w3$";
31:       stringArray0[3] = "a+1Kk-Ex,g)o9";
32:       stringArray0[4] = "lowercase";
33:       stringArray0[5] = "$Revision: 8097 $";
34:       NullStemmer nullStemmer0 = new NullStemmer();
35:       nullStemmer0.stem("$Revision: 8097 $");
36:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
37:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
38:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
39:       naiveBayesMultinomialText0.setStemmer(nullStemmer0);
40:       String string0 = naiveBayesMultinomialText0.stemmerTipText();
41:       assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
42:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
43:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
44:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
45:       assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
46:       assertEquals("The stemming algorithm to use on the words.", string0);
47:   }
48: }
RegularFileObject[/tmp/EvoSuite_40_1575428631662/weka/classifiers/bayes/NaiveBayesMultinomialText_40_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 03:03:51 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.classifiers.CostMatrix",
95:       "weka.core.logging.Logger$Level",
96:       "weka.core.neighboursearch.CoverTree$DistanceNode",
97:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
98:       "weka.core.DenseInstance",
99:       "weka.core.stemmers.Stemmer",
100:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
101:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
102:       "org.pentaho.packageManagement.DefaultPackageManager",
103:       "org.bounce.net.DefaultAuthenticator",
104:       "weka.core.neighboursearch.CoverTree$MyHeap",
105:       "weka.core.stemmers.NullStemmer",
106:       "weka.core.EnvironmentHandler",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.Utils",
109:       "weka.core.CustomDisplayStringProvider",
110:       "weka.core.tokenizers.Tokenizer",
111:       "weka.core.NormalizableDistance",
112:       "weka.core.NoSupportForMissingValuesException",
113:       "weka.classifiers.UpdateableClassifier",
114:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
115:       "weka.core.Copyable",
116:       "weka.core.Capabilities",
117:       "weka.core.BinarySparseInstance",
118:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
119:       "weka.core.SerializedObject",
120:       "weka.core.Summarizable",
121:       "weka.core.AdditionalMeasureProducer",
122:       "weka.core.neighboursearch.balltrees.BallNode",
123:       "org.pentaho.packageManagement.PackageManager$1",
124:       "weka.core.Drawable",
125:       "weka.core.matrix.Matrix",
126:       "weka.core.CapabilitiesHandler",
127:       "weka.core.AbstractInstance",
128:       "weka.core.scripting.JythonObject",
129:       "weka.core.SelectedTag",
130:       "org.pentaho.packageManagement.DefaultPackage",
131:       "weka.classifiers.misc.InputMappedClassifier",
132:       "weka.core.Version",
133:       "weka.core.Tag",
134:       "weka.core.neighboursearch.CoverTree",
135:       "weka.classifiers.AbstractClassifier",
136:       "weka.core.OptionHandler",
137:       "weka.core.WekaException",
138:       "weka.classifiers.trees.RandomForest",
139:       "weka.core.Range",
140:       "weka.core.PartitionGenerator",
141:       "weka.core.scripting.JythonSerializableObject",
142:       "weka.classifiers.Classifier",
143:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
144:       "weka.core.Capabilities$Capability",
145:       "weka.core.SparseInstance",
146:       "org.pentaho.packageManagement.PackageManager",
147:       "weka.core.tokenizers.WordTokenizer",
148:       "weka.core.stemmers.SnowballStemmer",
149:       "weka.core.stemmers.LovinsStemmer",
150:       "weka.classifiers.Evaluation",
151:       "weka.classifiers.functions.supportVector.Kernel",
152:       "weka.core.WekaPackageManager",
153:       "weka.core.TechnicalInformationHandler",
154:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
155:       "weka.classifiers.meta.CostSensitiveClassifier",
156:       "weka.core.Option",
157:       "weka.core.neighboursearch.PerformanceStats",
158:       "weka.core.Attribute",
159:       "weka.core.Stopwords",
160:       "weka.core.tokenizers.AlphabeticTokenizer",
161:       "weka.core.FastVector",
162:       "weka.core.UnassignedDatasetException",
163:       "weka.core.tokenizers.NGramTokenizer",
164:       "weka.classifiers.RandomizableClassifier",
165:       "weka.classifiers.SingleClassifierEnhancer",
166:       "weka.core.RevisionUtils",
167:       "weka.core.Instance",
168:       "weka.core.ProtectedProperties",
169:       "weka.core.AttributeStats",
170:       "weka.core.WeightedInstancesHandler",
171:       "weka.core.neighboursearch.NearestNeighbourSearch",
172:       "weka.core.neighboursearch.covertrees.Stack",
173:       "weka.core.Randomizable",
174:       "weka.core.EuclideanDistance",
175:       "weka.core.Instances",
176:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
177:       "weka.classifiers.bayes.NaiveBayesMultinomial",
178:       "weka.core.UnassignedClassException",
179:       "weka.classifiers.rules.ZeroR",
180:       "weka.core.stemmers.IteratedLovinsStemmer",
181:       "weka.core.stemmers.Stemming",
182:       "weka.core.TechnicalInformation",
183:       "weka.core.UnsupportedAttributeTypeException",
184:       "weka.classifiers.Sourcable",
185:       "weka.core.RevisionHandler",
186:       "weka.classifiers.evaluation.output.prediction.PlainText",
187:       "weka.core.neighboursearch.TreePerformanceStats",
188:       "weka.core.xml.XMLSerialization",
189:       "weka.classifiers.xml.XMLClassifier"
190:     );
191:   } 
192: 
193:   private static void resetClasses() {
194:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_40_tmp__ESTest_scaffolding.class.getClassLoader()); 
195: 
196:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
197:       "weka.classifiers.AbstractClassifier",
198:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
199:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
200:       "weka.core.Capabilities$Capability",
201:       "weka.core.tokenizers.Tokenizer",
202:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
203:       "weka.core.tokenizers.WordTokenizer",
204:       "weka.core.stemmers.NullStemmer",
205:       "weka.classifiers.Evaluation",
206:       "weka.core.Utils",
207:       "weka.core.Option",
208:       "weka.core.AbstractInstance",
209:       "weka.core.SparseInstance",
210:       "weka.core.BinarySparseInstance",
211:       "weka.core.UnassignedDatasetException",
212:       "weka.filters.Filter",
213:       "weka.filters.supervised.attribute.Discretize",
214:       "weka.core.Range",
215:       "weka.core.TechnicalInformation",
216:       "weka.core.TechnicalInformation$Type",
217:       "weka.core.TechnicalInformation$Field",
218:       "weka.core.stemmers.SnowballStemmer",
219:       "weka.core.stemmers.Stemming",
220:       "weka.core.RevisionUtils",
221:       "weka.core.stemmers.LovinsStemmer",
222:       "weka.core.DenseInstance",
223:       "weka.classifiers.trees.RandomForest",
224:       "weka.classifiers.SingleClassifierEnhancer",
225:       "weka.classifiers.misc.InputMappedClassifier",
226:       "weka.classifiers.rules.ZeroR",
227:       "weka.classifiers.bayes.NaiveBayesMultinomial",
228:       "weka.core.Instances",
229:       "weka.core.Stopwords",
230:       "weka.attributeSelection.ASEvaluation",
231:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
232:       "weka.attributeSelection.PrincipalComponents",
233:       "weka.core.neighboursearch.NearestNeighbourSearch",
234:       "weka.core.neighboursearch.CoverTree",
235:       "weka.core.NormalizableDistance",
236:       "weka.core.EuclideanDistance",
237:       "weka.core.neighboursearch.KDTree",
238:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
239:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
240:       "weka.core.neighboursearch.balltrees.BallNode",
241:       "weka.core.converters.ArffLoader$ArffReader",
242:       "weka.core.tokenizers.NGramTokenizer",
243:       "weka.classifiers.RandomizableClassifier",
244:       "weka.core.Tag",
245:       "weka.classifiers.functions.SGDText",
246:       "weka.core.SelectedTag",
247:       "weka.core.Capabilities",
248:       "org.pentaho.packageManagement.PackageManager",
249:       "org.pentaho.packageManagement.DefaultPackageManager",
250:       "weka.core.Version",
251:       "weka.core.Environment",
252:       "weka.core.WekaPackageManager",
253:       "weka.classifiers.rules.DecisionTable",
254:       "weka.attributeSelection.ASSearch",
255:       "weka.attributeSelection.BestFirst",
256:       "weka.classifiers.misc.SerializedClassifier",
257:       "weka.core.TestInstances",
258:       "weka.core.stemmers.IteratedLovinsStemmer",
259:       "weka.classifiers.bayes.BayesNet",
260:       "weka.classifiers.bayes.net.BIFReader",
261:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
262:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
263:       "weka.classifiers.bayes.net.search.local.K2",
264:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
265:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
266:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
267:       "weka.classifiers.meta.CostSensitiveClassifier",
268:       "weka.classifiers.CostMatrix",
269:       "weka.classifiers.functions.supportVector.Kernel",
270:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
271:       "weka.core.tokenizers.AlphabeticTokenizer",
272:       "weka.core.SerializationHelper",
273:       "weka.core.FindWithCapabilities",
274:       "weka.core.SingleIndex",
275:       "weka.core.Attribute",
276:       "weka.core.ProtectedProperties",
277:       "weka.core.SerializedObject",
278:       "weka.core.neighboursearch.BallTree",
279:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
280:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
281:       "weka.core.neighboursearch.balltrees.BallSplitter",
282:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
284:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
285:       "weka.classifiers.lazy.IBk",
286:       "weka.core.neighboursearch.LinearNNSearch",
287:       "weka.classifiers.meta.FilteredClassifier",
288:       "weka.filters.supervised.attribute.AttributeSelection",
289:       "weka.attributeSelection.AttributeSelection",
290:       "weka.attributeSelection.CfsSubsetEval",
291:       "weka.attributeSelection.GreedyStepwise",
292:       "weka.classifiers.trees.J48",
293:       "weka.core.WekaEnumeration",
294:       "weka.core.Attribute$1",
295:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
296:       "weka.core.WekaException",
297:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
298:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
299:       "weka.attributeSelection.WrapperSubsetEval",
300:       "weka.classifiers.functions.SimpleLinearRegression",
301:       "weka.core.ClassDiscovery",
302:       "weka.core.UnassignedClassException"
303:     );
304:   }
305: }

[MASTER] 03:03:51.696 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String[] stringArray0 = new String[22];
stringArray0[1] = "Dg:cFYNnH6Q&Y<w3$";
stringArray0[2] = "Dg:cFYNnH6Q&Y<w3$";
stringArray0[3] = "a+1Kk-Ex,g)o9";
stringArray0[4] = "lowercase";
stringArray0[5] = "$Revision: 8097 $";
NullStemmer nullStemmer0 = new NullStemmer();
nullStemmer0.stem("$Revision: 8097 $");
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
naiveBayesMultinomialText0.setStemmer(nullStemmer0);
String string0 = naiveBayesMultinomialText0.stemmerTipText();
assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
assertEquals("The stemming algorithm to use on the words.", string0);


[MASTER] 03:03:51.942 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_46_1575428631909/weka/classifiers/bayes/NaiveBayesMultinomialText_46_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_46_1575428631909/weka/classifiers/bayes/NaiveBayesMultinomialText_46_tmp__ESTest_scaffolding.java]]
[MASTER] 03:03:51.942 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.942 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 03:03:51.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 03:03:51.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 03:03:51.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 32
[MASTER] 03:03:51.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 34
[MASTER] 03:03:51.944 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 43
[MASTER] 03:03:51.945 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_46_1575428631909/weka/classifiers/bayes/NaiveBayesMultinomialText_46_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 03:03:51 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.LinkedHashMap;
13: import java.util.Map;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: import weka.classifiers.bayes.NaiveBayesMultinomialText;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class NaiveBayesMultinomialText_46_tmp__ESTest extends NaiveBayesMultinomialText_46_tmp__ESTest_scaffolding {
23: 
24:   /**
25:   //Test case number: 0
26:   /*Coverage entropy=2.297687147780183
27:   */
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
31:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
32:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
33:       Integer integer0 = new Integer((-1));
34:       hashMap0.put(integer0, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
35:       EvoSuiteFile evoSuiteFile0 = null;
36:       FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
37:       naiveBayesMultinomialText0.m_periodicP = 1784;
38:       naiveBayesMultinomialText0.setUseWordFrequencies(false);
39:       naiveBayesMultinomialText0.setPeriodicPruning(255);
40:       naiveBayesMultinomialText0.m_wordFrequencies = true;
41:       naiveBayesMultinomialText0.getUseStopList();
42:       Integer integer1 = new Integer(255);
43:       hashMap0.put(integer1, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
44:       naiveBayesMultinomialText0.getStopwords();
45:       naiveBayesMultinomialText0.getLNorm();
46:       // Undeclared exception!
47:       try { 
48:         naiveBayesMultinomialText0.pruneDictionary();
49:         fail("Expecting exception: NullPointerException");
50:       
51:       } catch(NullPointerException e) {
52:          //
53:          // no message in exception (getMessage() returned null)
54:          //
55:          verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
56:       }
57:   }
58: }
RegularFileObject[/tmp/EvoSuite_46_1575428631909/weka/classifiers/bayes/NaiveBayesMultinomialText_46_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 03:03:51 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_46_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_46_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.classifiers.CostMatrix",
95:       "weka.core.logging.Logger$Level",
96:       "weka.core.neighboursearch.CoverTree$DistanceNode",
97:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
98:       "weka.core.DenseInstance",
99:       "weka.core.stemmers.Stemmer",
100:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
101:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
102:       "org.pentaho.packageManagement.DefaultPackageManager",
103:       "org.bounce.net.DefaultAuthenticator",
104:       "weka.core.neighboursearch.CoverTree$MyHeap",
105:       "weka.core.stemmers.NullStemmer",
106:       "weka.core.EnvironmentHandler",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.Utils",
109:       "weka.core.CustomDisplayStringProvider",
110:       "weka.core.tokenizers.Tokenizer",
111:       "weka.core.NormalizableDistance",
112:       "weka.core.NoSupportForMissingValuesException",
113:       "weka.classifiers.UpdateableClassifier",
114:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
115:       "weka.core.Copyable",
116:       "weka.core.Capabilities",
117:       "weka.core.BinarySparseInstance",
118:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
119:       "weka.core.SerializedObject",
120:       "weka.core.Summarizable",
121:       "weka.core.AdditionalMeasureProducer",
122:       "weka.core.neighboursearch.balltrees.BallNode",
123:       "org.pentaho.packageManagement.PackageManager$1",
124:       "weka.core.Drawable",
125:       "weka.core.matrix.Matrix",
126:       "weka.core.CapabilitiesHandler",
127:       "weka.core.AbstractInstance",
128:       "weka.core.scripting.JythonObject",
129:       "weka.core.SelectedTag",
130:       "org.pentaho.packageManagement.DefaultPackage",
131:       "weka.classifiers.misc.InputMappedClassifier",
132:       "weka.core.Version",
133:       "weka.core.Tag",
134:       "weka.core.neighboursearch.CoverTree",
135:       "weka.classifiers.AbstractClassifier",
136:       "weka.core.OptionHandler",
137:       "weka.core.WekaException",
138:       "weka.classifiers.trees.RandomForest",
139:       "weka.core.Range",
140:       "weka.core.PartitionGenerator",
141:       "weka.core.scripting.JythonSerializableObject",
142:       "weka.classifiers.Classifier",
143:       "weka.core.neighboursearch.NearestNeighbourSearch$NeighborList",
144:       "weka.core.Capabilities$Capability",
145:       "weka.core.SparseInstance",
146:       "org.pentaho.packageManagement.PackageManager",
147:       "weka.core.tokenizers.WordTokenizer",
148:       "weka.core.stemmers.SnowballStemmer",
149:       "weka.core.stemmers.LovinsStemmer",
150:       "weka.classifiers.Evaluation",
151:       "weka.classifiers.functions.supportVector.Kernel",
152:       "weka.core.WekaPackageManager",
153:       "weka.core.TechnicalInformationHandler",
154:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
155:       "weka.classifiers.meta.CostSensitiveClassifier",
156:       "weka.core.Option",
157:       "weka.core.neighboursearch.PerformanceStats",
158:       "weka.core.Attribute",
159:       "weka.core.Stopwords",
160:       "weka.core.tokenizers.AlphabeticTokenizer",
161:       "weka.core.FastVector",
162:       "weka.core.UnassignedDatasetException",
163:       "weka.core.tokenizers.NGramTokenizer",
164:       "weka.classifiers.RandomizableClassifier",
165:       "weka.classifiers.SingleClassifierEnhancer",
166:       "weka.core.RevisionUtils",
167:       "weka.core.Instance",
168:       "weka.core.ProtectedProperties",
169:       "weka.core.AttributeStats",
170:       "weka.core.WeightedInstancesHandler",
171:       "weka.core.neighboursearch.NearestNeighbourSearch",
172:       "weka.core.neighboursearch.covertrees.Stack",
173:       "weka.core.Randomizable",
174:       "weka.core.EuclideanDistance",
175:       "weka.core.Instances",
176:       "weka.core.neighboursearch.CoverTree$CoverTreeNode",
177:       "weka.classifiers.bayes.NaiveBayesMultinomial",
178:       "weka.core.UnassignedClassException",
179:       "weka.classifiers.rules.ZeroR",
180:       "weka.core.stemmers.IteratedLovinsStemmer",
181:       "weka.core.stemmers.Stemming",
182:       "weka.core.TechnicalInformation",
183:       "weka.core.UnsupportedAttributeTypeException",
184:       "weka.classifiers.Sourcable",
185:       "weka.core.RevisionHandler",
186:       "weka.classifiers.evaluation.output.prediction.PlainText",
187:       "weka.core.neighboursearch.TreePerformanceStats",
188:       "weka.core.xml.XMLSerialization",
189:       "weka.classifiers.xml.XMLClassifier"
190:     );
191:   } 
192: 
193:   private static void resetClasses() {
194:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_46_tmp__ESTest_scaffolding.class.getClassLoader()); 
195: 
196:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
197:       "weka.classifiers.AbstractClassifier",
198:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
199:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
200:       "weka.core.Capabilities$Capability",
201:       "weka.core.tokenizers.Tokenizer",
202:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
203:       "weka.core.tokenizers.WordTokenizer",
204:       "weka.core.stemmers.NullStemmer",
205:       "weka.classifiers.Evaluation",
206:       "weka.core.Utils",
207:       "weka.core.Option",
208:       "weka.core.AbstractInstance",
209:       "weka.core.SparseInstance",
210:       "weka.core.BinarySparseInstance",
211:       "weka.core.UnassignedDatasetException",
212:       "weka.filters.Filter",
213:       "weka.filters.supervised.attribute.Discretize",
214:       "weka.core.Range",
215:       "weka.core.TechnicalInformation",
216:       "weka.core.TechnicalInformation$Type",
217:       "weka.core.TechnicalInformation$Field",
218:       "weka.core.stemmers.SnowballStemmer",
219:       "weka.core.stemmers.Stemming",
220:       "weka.core.RevisionUtils",
221:       "weka.core.stemmers.LovinsStemmer",
222:       "weka.core.DenseInstance",
223:       "weka.classifiers.trees.RandomForest",
224:       "weka.classifiers.SingleClassifierEnhancer",
225:       "weka.classifiers.misc.InputMappedClassifier",
226:       "weka.classifiers.rules.ZeroR",
227:       "weka.classifiers.bayes.NaiveBayesMultinomial",
228:       "weka.core.Instances",
229:       "weka.core.Stopwords",
230:       "weka.attributeSelection.ASEvaluation",
231:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
232:       "weka.attributeSelection.PrincipalComponents",
233:       "weka.core.neighboursearch.NearestNeighbourSearch",
234:       "weka.core.neighboursearch.CoverTree",
235:       "weka.core.NormalizableDistance",
236:       "weka.core.EuclideanDistance",
237:       "weka.core.neighboursearch.KDTree",
238:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
239:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
240:       "weka.core.neighboursearch.balltrees.BallNode",
241:       "weka.core.converters.ArffLoader$ArffReader",
242:       "weka.core.tokenizers.NGramTokenizer",
243:       "weka.classifiers.RandomizableClassifier",
244:       "weka.core.Tag",
245:       "weka.classifiers.functions.SGDText",
246:       "weka.core.SelectedTag",
247:       "weka.core.Capabilities",
248:       "org.pentaho.packageManagement.PackageManager",
249:       "org.pentaho.packageManagement.DefaultPackageManager",
250:       "weka.core.Version",
251:       "weka.core.Environment",
252:       "weka.core.WekaPackageManager",
253:       "weka.classifiers.rules.DecisionTable",
254:       "weka.attributeSelection.ASSearch",
255:       "weka.attributeSelection.BestFirst",
256:       "weka.classifiers.misc.SerializedClassifier",
257:       "weka.core.TestInstances",
258:       "weka.core.stemmers.IteratedLovinsStemmer",
259:       "weka.classifiers.bayes.BayesNet",
260:       "weka.classifiers.bayes.net.BIFReader",
261:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
262:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
263:       "weka.classifiers.bayes.net.search.local.K2",
264:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
265:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
266:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
267:       "weka.classifiers.meta.CostSensitiveClassifier",
268:       "weka.classifiers.CostMatrix",
269:       "weka.classifiers.functions.supportVector.Kernel",
270:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
271:       "weka.core.tokenizers.AlphabeticTokenizer",
272:       "weka.core.SerializationHelper",
273:       "weka.core.FindWithCapabilities",
274:       "weka.core.SingleIndex",
275:       "weka.core.Attribute",
276:       "weka.core.ProtectedProperties",
277:       "weka.core.SerializedObject",
278:       "weka.core.neighboursearch.BallTree",
279:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
280:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
281:       "weka.core.neighboursearch.balltrees.BallSplitter",
282:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
284:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
285:       "weka.classifiers.lazy.IBk",
286:       "weka.core.neighboursearch.LinearNNSearch",
287:       "weka.classifiers.meta.FilteredClassifier",
288:       "weka.filters.supervised.attribute.AttributeSelection",
289:       "weka.attributeSelection.AttributeSelection",
290:       "weka.attributeSelection.CfsSubsetEval",
291:       "weka.attributeSelection.GreedyStepwise",
292:       "weka.classifiers.trees.J48",
293:       "weka.core.WekaEnumeration",
294:       "weka.core.Attribute$1",
295:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
296:       "weka.core.WekaException",
297:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
298:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
299:       "weka.attributeSelection.WrapperSubsetEval",
300:       "weka.classifiers.functions.SimpleLinearRegression",
301:       "weka.core.ClassDiscovery",
302:       "weka.core.UnassignedClassException"
303:     );
304:   }
305: }

[MASTER] 03:03:51.945 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
Integer integer0 = new Integer((-1));
hashMap0.put(integer0, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
EvoSuiteFile evoSuiteFile0 = null;
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
naiveBayesMultinomialText0.m_periodicP = 1784;
naiveBayesMultinomialText0.setUseWordFrequencies(false);
naiveBayesMultinomialText0.setPeriodicPruning(255);
naiveBayesMultinomialText0.m_wordFrequencies = true;
naiveBayesMultinomialText0.getUseStopList();
Integer integer1 = new Integer(255);
hashMap0.put(integer1, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
naiveBayesMultinomialText0.getStopwords();
naiveBayesMultinomialText0.getLNorm();
naiveBayesMultinomialText0.pruneDictionary();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 10123
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/stemmers/LovinsStemmer.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1017
* Starting evolution
* Search finished after 127s and 10 generations, 14592 statements, best individual has fitness: 4032.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 217
* Number of covered goals: 168
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 54%
* Total number of goals: 428
* Number of covered goals: 233
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 80%
* Total number of goals: 260
* Number of covered goals: 209
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 54%
* Total number of goals: 428
* Number of covered goals: 229
* Generated 46 tests with total length 1101
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 70%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/qmosa/tests/s1017/107_weka/evosuite-tests
* Done!

* Computation finished
