* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: Newzgrabber.Base64Decoder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/99_newzgrabber/evosuite-files/evosuite.properties
* Connecting to master process on port 7485
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:15:42.335 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:15:42.341 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:15:42.351 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:15:44.454 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:15:44.546 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:15:44.549 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:15:50.552 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:15:50.865 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:15:50.883 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:15:50.883 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:15:50.905 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:15:50.906 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:15:50.907 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:15:50.908 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:15:50.908 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:15:51.267 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
* Finished analyzing classpath
* Generating tests for class Newzgrabber.Base64Decoder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/99_newzgrabber/src/main/java/Newzgrabber/Base64Decoder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1014
* Starting evolution
[MASTER] 00:15:58.123 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 00:17:35.107 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 121s and 25 generations, 27904 statements, best individual has fitness: 488.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 74%
* Total number of goals: 76
* Number of covered goals: 56
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 59
* Number of covered goals: 41
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 1
* Number of covered goals: 1
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 69
* Number of covered goals: 64
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 59
* Number of covered goals: 41
* Generated 8 tests with total length 164
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 57%
* Compiling and checking tests
[MASTER] 00:18:17.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-29982> but was:<-29978>
[MASTER] 00:18:17.960 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("CLER");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
mockPrintStream0.println("CLER");
mockPrintStream0.println((float) (byte) (-98));
byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-127);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)0;
mockPrintStream0.println((int) (byte)0);
mockPrintStream0.write(byteArray0);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream("CLER");
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(mockFileInputStream0, false);
BufferedCustomInputStream bufferedCustomInputStream3 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
BufferedCustomInputStream bufferedCustomInputStream4 = new BufferedCustomInputStream(bufferedCustomInputStream3, false);
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-117.0");
BufferedCustomInputStream bufferedCustomInputStream5 = new BufferedCustomInputStream(mockFileInputStream0, false);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, mockPrintStream0);
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
base64Decoder0.decodeStream();
assertEquals((-29982), mockFileInputStream0.available());
assertEquals(3L, base64Decoder0.getLineCount());


[MASTER] 00:18:18.130 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-9996> but was:<-9992>
[MASTER] 00:18:18.130 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("CLEAR");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
mockPrintStream1.println(1739);
byte[] byteArray0 = new byte[0];
mockPrintStream0.write(byteArray0);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream("CLEAR");
BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
Object object0 = new Object();
Object object1 = new Object();
BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(bufferedCustomInputStream1, false);
BufferedCustomInputStream bufferedCustomInputStream3 = new BufferedCustomInputStream(bufferedCustomInputStream1, false);
BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, bufferedOutputStream0);
base64Decoder0.foundbegin = true;
base64Decoder0.decodeStream();
assertEquals((-9996), mockFileInputStream0.available());
assertEquals(1L, base64Decoder0.getLineCount());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'Base64Decoder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1014/99_newzgrabber/evosuite-tests
* Done!

* Computation finished
