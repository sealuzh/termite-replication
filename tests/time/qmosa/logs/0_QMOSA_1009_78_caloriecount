* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 7356
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:37:59.235 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:37:59.252 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:37:59.253 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:37:59.746 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:38:00.203 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:38:00.204 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1009
* Starting evolution
[MASTER] 20:38:14.922 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 123s and 56 generations, 36410 statements, best individual has fitness: 704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 89%
* Total number of goals: 130
* Number of covered goals: 116
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 52
* Number of covered goals: 44
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 150
* Number of covered goals: 139
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 30%
* Total number of goals: 50
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 52
* Number of covered goals: 44
* Generated 43 tests with total length 577
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1009/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 7357
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:43:29.812 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:43:29.840 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:43:29.842 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:43:30.392 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:43:30.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:43:30.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1009
* Starting evolution
[MASTER] 20:43:43.621 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 122s and 81 generations, 66929 statements, best individual has fitness: 776.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 67
* Number of covered goals: 51
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 73%
* Total number of goals: 45
* Number of covered goals: 33
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 202
* Number of covered goals: 149
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 45
* Number of covered goals: 33
* Generated 26 tests with total length 525
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 20:45:50.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 20:45:50.069 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
Vector<InputStream> vector0 = new Vector<InputStream>();
Vector<InputStream> vector1 = new Vector<InputStream>();
PipedInputStream pipedInputStream0 = new PipedInputStream();
PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
vector0.removeElement(pipedInputStream0);
PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 8);
Predicate<Object> predicate0 = Predicate.isEqual((Object) pushbackInputStream2);
Predicate<Object> predicate1 = Predicate.isEqual((Object) "]mNA=jFv'bm`Nf96J");
Predicate<Object> predicate2 = predicate0.or(predicate1);
Predicate<Object> predicate3 = predicate0.and(predicate2);
Predicate<Object> predicate4 = predicate0.or(predicate3);
Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
Predicate<Object> predicate6 = predicate5.negate();
predicate6.and(predicate4);
predicate1.negate();
LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
vector1.addAll((Collection<? extends InputStream>) vector0);
vector0.removeIf(predicate5);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
vector1.forEach(consumer0);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
System.setCurrentTimeMillis(2);
archiveScanner0.toFileType(improvedFile0);

[MASTER] 20:45:50.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 20:45:50.603 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<InputStream> vector0 = new Vector<InputStream>();
vector0.clone();
PipedInputStream pipedInputStream0 = new PipedInputStream();
PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
pipedInputStream0.connect(pipedOutputStream0);
PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1248);
vector0.add((InputStream) pushbackInputStream0);
vector0.add((InputStream) null);
Vector<InputStream> vector1 = new Vector<InputStream>(1248);
Vector<InputStream> vector2 = new Vector<InputStream>(vector0);
MockFile mockFile0 = new MockFile("", "Yi:jbwVe3C{M4&ZM");
ImprovedFile improvedFile0 = new ImprovedFile("root should have null as its parent.", "Csn0435*7,HHJINFl5");
ImprovedFile improvedFile1 = new ImprovedFile("Csn0435*7,HHJINFl5", "");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
String[] stringArray0 = new String[4];
stringArray0[0] = "Csn0435*7,HHJINFl5";
stringArray0[1] = "";
stringArray0[2] = "root should have null as its parent.";
stringArray0[3] = "root should have null as its parent.";
archiveScanner0.toFileType(mockFile0);

[MASTER] 20:45:50.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 20:45:50.957 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
Vector<InputStream> vector0 = new Vector<InputStream>();
Vector<InputStream> vector1 = new Vector<InputStream>();
PipedInputStream pipedInputStream0 = new PipedInputStream();
PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
PipedInputStream pipedInputStream1 = new PipedInputStream();
vector0.removeElement(pipedInputStream1);
PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 8);
Predicate<Object> predicate0 = Predicate.isEqual((Object) pushbackInputStream2);
Predicate<Object> predicate1 = Predicate.isEqual((Object) "]mNA=jFv'bm`Nf96J");
Predicate<Object> predicate2 = predicate0.or(predicate1);
Predicate<Object> predicate3 = predicate0.and(predicate2);
Predicate<Object> predicate4 = predicate0.or(predicate3);
Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
Predicate<Object> predicate6 = predicate5.negate();
predicate6.and(predicate4);
MockFile mockFile0 = new MockFile("]mNA=jFv'bm`Nf96J", "NrySQ'g>a5y%P");
improvedFile0.setWritable(false);
ImprovedFile improvedFile1 = new ImprovedFile("fp`_o].FrhoGZ", "RlLj<");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
archiveScanner0.isArchive(improvedFile1);

[MASTER] 20:45:51.577 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 20:45:51.577 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vector<Object> vector0 = new Vector<Object>();
ImprovedFile improvedFile0 = new ImprovedFile((String) null, "H#if0T.jar");
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

[MASTER] 20:45:52.071 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 20:45:52.072 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
MockFile mockFile0 = new MockFile("BfaT");
EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("BfaT/\\H#iBfaT0\\H#iBfaT/q9.hcp^#@.60.jar1BfaT");
EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
FileSystemHandling.createFolder(evoSuiteFile2);
FileSystemHandling.createFolder(evoSuiteFile1);
System.setCurrentTimeMillis((-2197L));
ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(improvedFile0);

* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1009/78_caloriecount/evosuite-tests
* Done!

* Computation finished
