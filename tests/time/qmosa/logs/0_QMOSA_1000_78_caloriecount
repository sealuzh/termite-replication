* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.application.international.MessageFormatter
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 14957
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:15:36.263 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:15:36.275 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:15:36.287 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:15:37.099 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 14:15:37.703 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 14:15:37.704 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.application.international.MessageFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/application/international/MessageFormatter.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1000
* Starting evolution
[MASTER] 14:15:44.900 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 122s and 41 generations, 27157 statements, best individual has fitness: 792.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 130
* Number of covered goals: 110
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 52
* Number of covered goals: 44
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 150
* Number of covered goals: 136
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 26%
* Total number of goals: 50
* Number of covered goals: 13
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 52
* Number of covered goals: 44
* Generated 34 tests with total length 529
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
* Writing JUnit test case 'MessageFormatter_ESTest' to /home/ubuntu/termite/qmosa/tests/s1000/78_caloriecount/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: com.lts.io.ArchiveScanner
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/78_caloriecount/evosuite-files/evosuite.properties
* Connecting to master process on port 14955
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:25:38.065 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:25:38.117 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:25:38.143 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:25:38.603 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 14:25:39.030 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 14:25:39.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class com.lts.io.ArchiveScanner
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/78_caloriecount/src/main/java/com/lts/io/ArchiveScanner.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1000
* Starting evolution
[MASTER] 14:26:48.205 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 14:26:50.238 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 122s and 55 generations, 43281 statements, best individual has fitness: 712.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 76%
* Total number of goals: 67
* Number of covered goals: 51
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 45
* Number of covered goals: 31
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 79%
* Total number of goals: 202
* Number of covered goals: 159
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 45
* Number of covered goals: 31
* Generated 21 tests with total length 502
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 14:27:57.317 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 14:27:57.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 URI uRI0 = MockURI.aFileURI;
MockFile mockFile0 = new MockFile(uRI0);
ImprovedFile improvedFile0 = new ImprovedFile("M h>q;HtX*R4");
Integer integer0 = new Integer((-2371));
Vector<Integer> vector0 = new Vector<Integer>();
Vector<Object> vector1 = new Vector<Object>();
vector0.retainAll(vector1);
LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
Integer integer1 = new Integer(4);
Integer integer2 = new Integer(14);
linkedList0.add(integer2);
vector0.addAll((Collection<? extends Integer>) linkedList0);
UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
UnaryOperator.identity();
vector0.replaceAll(unaryOperator0);
Vector<Integer> vector2 = new Vector<Integer>();
Vector<Integer> vector3 = new Vector<Integer>();
vector3.removeAllElements();
Predicate<Object> predicate0 = Predicate.isEqual((Object) "M h>q;HtX*R4");
Predicate<Object> predicate1 = predicate0.or(predicate0);
Predicate<Object> predicate2 = predicate0.and(predicate1);
Predicate<Object> predicate3 = predicate2.negate();
predicate3.and(predicate1);
vector3.removeIf(predicate3);
vector3.iterator();
Integer integer3 = new Integer((-2371));
Integer integer4 = new Integer((-2371));
Vector<Integer> vector4 = new Vector<Integer>();
Integer integer5 = new Integer(0);
System.setCurrentTimeMillis(0L);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
DirectoryScanner.matchPatternStart("M h>q;HtX*R4", "M h>q;HtX*R4");
boolean boolean0 = archiveScanner0.isArchive(mockFile0);
assertTrue(boolean0);


[MASTER] 14:27:59.962 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 14:27:59.963 [logback-1] WARN  JUnitAnalyzer - Failing test:
 URI uRI0 = MockURI.aFileURI;
MockFile mockFile0 = new MockFile(uRI0);
ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<<~3^3R", "<<~3^3R", (File) mockFile0);
Integer integer0 = new Integer((-2371));
Vector<Integer> vector0 = new Vector<Integer>();
Vector<Object> vector1 = new Vector<Object>();
vector0.retainAll(vector1);
LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
Integer integer1 = new Integer(4);
Integer integer2 = new Integer(14);
linkedList0.add(integer2);
vector0.addAll((Collection<? extends Integer>) linkedList0);
UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
vector0.replaceAll(unaryOperator0);
Vector<Integer> vector2 = new Vector<Integer>();
Vector<Integer> vector3 = new Vector<Integer>();
Predicate<Object> predicate0 = Predicate.isEqual((Object) "M h>q;HtX*R4");
Predicate<Object> predicate1 = predicate0.or(predicate0);
Predicate<Object> predicate2 = predicate0.and(predicate1);
Predicate<Object> predicate3 = predicate2.negate();
predicate3.and(predicate1);
vector3.removeIf(predicate3);
vector3.iterator();
Integer integer3 = new Integer((-2371));
Integer integer4 = new Integer((-2371));
Vector<Integer> vector4 = new Vector<Integer>();
Integer integer5 = new Integer(0);
vector2.add((Integer) null);
System.setCurrentTimeMillis(0L);
ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
archiveScanner0.isArchive(mockFile0);
boolean boolean0 = archiveScanner0.isArchive(mockFile0);
assertTrue(boolean0);


* Writing JUnit test case 'ArchiveScanner_ESTest' to /home/ubuntu/termite/qmosa/tests/s1000/78_caloriecount/evosuite-tests
* Done!

* Computation finished
