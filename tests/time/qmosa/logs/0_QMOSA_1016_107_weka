* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19151
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:43:59.149 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:43:59.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:43:59.163 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:43:59.248 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/experiment/ResultMatrix.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
* Search finished after 128s and 3 generations, 3105 statements, best individual has fitness: 7168.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 647
* Number of covered goals: 539
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 76%
* Total number of goals: 441
* Number of covered goals: 334
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 72%
* Total number of goals: 678
* Number of covered goals: 487
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 17%
* Total number of goals: 244
* Number of covered goals: 42
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 56%
* Total number of goals: 124
* Number of covered goals: 70
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 54%
* Total number of goals: 124
* Number of covered goals: 67
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 61%
* Total number of goals: 441
* Number of covered goals: 271
* Generated 61 tests with total length 1119
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19148
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/stemmers/LovinsStemmer.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
* Search finished after 126s and 11 generations, 13243 statements, best individual has fitness: 4048.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 217
* Number of covered goals: 169
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 55%
* Total number of goals: 428
* Number of covered goals: 236
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 260
* Number of covered goals: 196
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 55%
* Total number of goals: 428
* Number of covered goals: 236
* Generated 46 tests with total length 1027
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 65%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19150
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19154
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:03:23.728 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:03:23.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:03:23.766 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:03:23.933 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:03:23.946 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:03:23.952 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/filters/unsupervised/attribute/Discretize.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
[MASTER] 02:03:29.075 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:03:29.115 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:03:29.120 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:03:32.147 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:03:32.828 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:03:32.830 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/rules/JRip.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
[MASTER] 02:03:45.527 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.RipperRule.<init>(Lweka/classifiers/rules/JRip;)V
[MASTER] 02:05:27.865 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 123s and 40 generations, 28700 statements, best individual has fitness: 8664.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 45%
* Total number of goals: 370
* Number of covered goals: 165
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 242
* Number of covered goals: 66
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 34%
* Total number of goals: 713
* Number of covered goals: 239
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 72
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 242
* Number of covered goals: 66
* Generated 46 tests with total length 674
* Resulting test suite's coverage: 38% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 125s and 19 generations, 12532 statements, best individual has fitness: 14760.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 29%
* Total number of goals: 705
* Number of covered goals: 203
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 19%
* Total number of goals: 416
* Number of covered goals: 81
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 41%
* Total number of goals: 993
* Number of covered goals: 406
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 93
* Number of covered goals: 23
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 72
* Number of covered goals: 70
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 72
* Number of covered goals: 70
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 19%
* Total number of goals: 416
* Number of covered goals: 81
* Generated 51 tests with total length 894
* Resulting test suite's coverage: 34% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
* Compiling and checking tests
[MASTER] 02:07:09.603 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 02:07:10.229 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19149
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:08:13.262 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:08:13.277 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:08:13.278 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:08:13.296 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/core/Optimization.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
[MASTER] 02:08:21.696 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
* Search finished after 122s and 38 generations, 35631 statements, best individual has fitness: 16704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 14 tests with total length 272
* Resulting test suite's coverage: 17% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19148
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 19151
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:18:34.905 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:18:34.907 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:18:34.909 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:18:34.958 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:18:34.981 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:18:34.994 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/bayes/NaiveBayesMultinomialText.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
[MASTER] 02:18:43.961 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [Output]: weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z:False
[MASTER] 02:18:43.963 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z
[MASTER] 02:18:43.964 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z
[MASTER] 02:18:43.975 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.getUseWordFrequencies()Z: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:getUseWordFrequencies()Z
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 02:18:53.902 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 02:18:53.913 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 02:18:53.915 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 02:18:56.278 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 02:18:58.197 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 02:18:58.241 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 02:19:02.031 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 02:19:02.139 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 02:19:02.141 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 02:19:02.141 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 02:19:02.143 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 02:19:02.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 02:19:02.145 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 02:19:02.146 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 02:19:02.149 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 02:19:02.277 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 02:19:02.296 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/107_weka/src/main/java/weka/classifiers/Evaluation.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1016
* Starting evolution
[MASTER] 02:19:21.582 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 02:20:28.106 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 123s and 12 generations, 10733 statements, best individual has fitness: 3904.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 67%
* Total number of goals: 338
* Number of covered goals: 225
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 54%
* Total number of goals: 194
* Number of covered goals: 104
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 476
* Number of covered goals: 353
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 112
* Number of covered goals: 44
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 194
* Number of covered goals: 103
* Generated 41 tests with total length 871
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 124s and 12 generations, 7896 statements, best individual has fitness: 20912.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 39%
* Total number of goals: 1378
* Number of covered goals: 544
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 32%
* Total number of goals: 809
* Number of covered goals: 261
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 46%
* Total number of goals: 424
* Number of covered goals: 195
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 11%
* Total number of goals: 278
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 59%
* Total number of goals: 103
* Number of covered goals: 61
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 58%
* Total number of goals: 103
* Number of covered goals: 60
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 20%
* Total number of goals: 809
* Number of covered goals: 158
* Generated 50 tests with total length 1003
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 39%
* Compiling and checking tests
[MASTER] 02:25:00.597 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_8_1575426300509/weka/classifiers/bayes/NaiveBayesMultinomialText_8_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_8_1575426300509/weka/classifiers/bayes/NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding.java]]
[MASTER] 02:25:00.598 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:00.598 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:00.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 36
[MASTER] 02:25:00.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 36
[MASTER] 02:25:00.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 37
[MASTER] 02:25:00.602 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_8_1575426300509/weka/classifiers/bayes/NaiveBayesMultinomialText_8_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 02:25:00.602 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 02:25:00.603 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_8_1575426300509/weka/classifiers/bayes/NaiveBayesMultinomialText_8_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 02:25:00 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Enumeration;
12: import java.util.HashMap;
13: import java.util.LinkedHashMap;
14: import java.util.Map;
15: import java.util.function.BiConsumer;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: import weka.classifiers.bayes.NaiveBayesMultinomialText;
21: import weka.core.Option;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
24: public class NaiveBayesMultinomialText_8_tmp__ESTest extends NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding {
25: 
26:   /**
27:   //Test case number: 0
28:   /*Coverage entropy=3.0952395734013582
29:   */
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
33:       naiveBayesMultinomialText0.getLNorm();
34:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
35:       Enumeration<Option> enumeration0 = naiveBayesMultinomialText0.listOptions();
36:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
37:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
38:       naiveBayesMultinomialText0.getPeriodicPruning();
39:       naiveBayesMultinomialText0.periodicPruningTipText();
40:       hashMap0.remove((Object) enumeration0);
41:       naiveBayesMultinomialText0.tokenizerTipText();
42:       naiveBayesMultinomialText0.setLowercaseTokens(true);
43:       naiveBayesMultinomialText0.getPeriodicPruning();
44:       naiveBayesMultinomialText0.stopwordsTipText();
45:       assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
46:       
47:       String[] stringArray0 = new String[9];
48:       stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
49:       stringArray0[1] = "The file containing the stopwords (if this is a directory then the default ones are used).";
50:       BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
51:       hashMap0.forEach(biConsumer0);
52:       stringArray0[2] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
53:       stringArray0[3] = "The tokenizing algorithm to use on the strings.";
54:       stringArray0[4] = "The file containing the stopwords (if this is a directory then the default ones are used).";
55:       stringArray0[5] = "The file containing the stopwords (if this is a directory then the default ones are used).";
56:       stringArray0[6] = "The tokenizing algorithm to use on the strings.";
57:       stringArray0[7] = "The file containing the stopwords (if this is a directory then the default ones are used).";
58:       stringArray0[8] = "If true then document length is normalized according to the settings for norm and lnorm";
59:       naiveBayesMultinomialText0.setOptions(stringArray0);
60:       String string0 = naiveBayesMultinomialText0.LNormTipText();
61:       assertEquals("The LNorm to use for document length normalization.", string0);
62:   }
63: }
RegularFileObject[/tmp/EvoSuite_8_1575426300509/weka/classifiers/bayes/NaiveBayesMultinomialText_8_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 02:25:00 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:     org.evosuite.runtime.util.SystemInUtil.getInstance().initForTestCase(); 
62:   } 
63: 
64:   @After 
65:   public void doneWithTestCase(){ 
66:     threadStopper.killAndJoinClientThreads();
67:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
68:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
69:     resetClasses(); 
70:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
71:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
72:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
73:   } 
74: 
75:   public static void setSystemProperties() {
76:  
77:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
78:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
79:     java.lang.System.setProperty("java.awt.headless", "true"); 
80:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
81:     java.lang.System.setProperty("user.country", "US"); 
82:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
83:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
84:     java.lang.System.setProperty("user.language", "en"); 
85:     java.lang.System.setProperty("user.name", "ubuntu"); 
86:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
87:   }
88: 
89:   private static void initializeClasses() {
90:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding.class.getClassLoader() ,
91:       "weka.core.Environment",
92:       "weka.core.TestInstances",
93:       "weka.core.DistanceFunction",
94:       "org.pentaho.packageManagement.PackageConstraint",
95:       "org.pentaho.packageManagement.Package",
96:       "weka.core.xml.XMLBasicSerialization",
97:       "weka.classifiers.CostMatrix",
98:       "weka.classifiers.bayes.net.search.local.K2",
99:       "weka.filters.UnsupervisedFilter",
100:       "weka.core.logging.Logger$Level",
101:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
102:       "weka.core.DenseInstance",
103:       "weka.core.stemmers.Stemmer",
104:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
105:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
106:       "org.pentaho.packageManagement.DefaultPackageManager",
107:       "org.bounce.net.DefaultAuthenticator",
108:       "weka.core.stemmers.NullStemmer",
109:       "weka.classifiers.functions.SGDText",
110:       "weka.core.RelationalLocator",
111:       "weka.core.Utils",
112:       "weka.core.CustomDisplayStringProvider",
113:       "weka.core.tokenizers.Tokenizer",
114:       "weka.core.NormalizableDistance",
115:       "weka.core.NoSupportForMissingValuesException",
116:       "weka.classifiers.UpdateableClassifier",
117:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
118:       "weka.core.Copyable",
119:       "weka.core.Capabilities",
120:       "weka.core.BinarySparseInstance",
121:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
122:       "weka.core.AttributeLocator",
123:       "weka.core.SerializedObject",
124:       "weka.clusterers.UpdateableClusterer",
125:       "weka.core.Summarizable",
126:       "weka.core.AdditionalMeasureProducer",
127:       "weka.core.neighboursearch.balltrees.BallNode",
128:       "org.pentaho.packageManagement.PackageManager$1",
129:       "weka.core.Drawable",
130:       "weka.core.matrix.Matrix",
131:       "weka.core.SingleIndex",
132:       "weka.core.CapabilitiesHandler",
133:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
134:       "weka.core.AbstractInstance",
135:       "weka.core.scripting.JythonObject",
136:       "weka.core.SelectedTag",
137:       "org.pentaho.packageManagement.DefaultPackage",
138:       "weka.classifiers.bayes.BayesNet",
139:       "weka.core.Version",
140:       "weka.filters.AllFilter",
141:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
142:       "weka.core.converters.ArffLoader$ArffReader",
143:       "weka.core.Tag",
144:       "weka.core.neighboursearch.CoverTree",
145:       "weka.classifiers.AbstractClassifier",
146:       "weka.core.FindWithCapabilities",
147:       "weka.core.OptionHandler",
148:       "weka.core.WekaException",
149:       "weka.core.ClassDiscovery",
150:       "weka.core.Range",
151:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
152:       "weka.core.scripting.JythonSerializableObject",
153:       "weka.classifiers.Classifier",
154:       "weka.core.Capabilities$Capability",
155:       "weka.core.SparseInstance",
156:       "org.pentaho.packageManagement.PackageManager",
157:       "weka.core.tokenizers.WordTokenizer",
158:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
159:       "weka.core.stemmers.SnowballStemmer",
160:       "weka.core.stemmers.LovinsStemmer",
161:       "weka.classifiers.Evaluation",
162:       "weka.classifiers.functions.supportVector.Kernel",
163:       "weka.core.WekaPackageManager",
164:       "weka.filters.SupervisedFilter",
165:       "weka.core.TechnicalInformationHandler",
166:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
167:       "weka.core.neighboursearch.LinearNNSearch",
168:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
169:       "weka.classifiers.meta.CostSensitiveClassifier",
170:       "weka.core.Option",
171:       "weka.core.neighboursearch.PerformanceStats",
172:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
173:       "weka.filters.Sourcable",
174:       "weka.core.Attribute",
175:       "weka.core.Stopwords",
176:       "weka.core.tokenizers.AlphabeticTokenizer",
177:       "weka.core.FastVector",
178:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
179:       "weka.core.UnassignedDatasetException",
180:       "weka.core.tokenizers.NGramTokenizer",
181:       "weka.classifiers.RandomizableClassifier",
182:       "weka.classifiers.SingleClassifierEnhancer",
183:       "weka.core.RevisionUtils",
184:       "weka.core.Instance",
185:       "weka.core.ProtectedProperties",
186:       "weka.estimators.Estimator",
187:       "weka.core.StringLocator",
188:       "weka.classifiers.bayes.net.ADNode",
189:       "weka.core.AttributeStats",
190:       "weka.core.WeightedInstancesHandler",
191:       "weka.core.neighboursearch.NearestNeighbourSearch",
192:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
193:       "weka.core.Randomizable",
194:       "weka.core.EuclideanDistance",
195:       "weka.core.Instances",
196:       "weka.core.UnassignedClassException",
197:       "weka.classifiers.bayes.net.ParentSet",
198:       "weka.classifiers.rules.ZeroR",
199:       "weka.core.stemmers.IteratedLovinsStemmer",
200:       "weka.core.TechnicalInformation",
201:       "weka.core.UnsupportedAttributeTypeException",
202:       "weka.classifiers.Sourcable",
203:       "weka.core.RevisionHandler",
204:       "weka.classifiers.evaluation.output.prediction.PlainText",
205:       "weka.core.neighboursearch.TreePerformanceStats",
206:       "weka.core.xml.XMLSerialization",
207:       "weka.classifiers.xml.XMLClassifier",
208:       "weka.filters.Filter",
209:       "weka.filters.supervised.attribute.Discretize"
210:     );
211:   } 
212:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
213:     mock(Class.forName("java.util.function.BiConsumer", false, NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding.class.getClassLoader()));
214:   }
215: 
216:   private static void resetClasses() {
217:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_8_tmp__ESTest_scaffolding.class.getClassLoader()); 
218: 
219:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
220:       "weka.classifiers.AbstractClassifier",
221:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
222:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
223:       "weka.core.Capabilities$Capability",
224:       "weka.core.tokenizers.Tokenizer",
225:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
226:       "weka.core.tokenizers.WordTokenizer",
227:       "weka.core.stemmers.NullStemmer",
228:       "weka.core.Utils",
229:       "weka.core.AbstractInstance",
230:       "weka.core.SparseInstance",
231:       "weka.core.BinarySparseInstance",
232:       "weka.core.UnassignedDatasetException",
233:       "weka.classifiers.Evaluation",
234:       "weka.core.Option",
235:       "weka.core.DenseInstance",
236:       "weka.core.TestInstances",
237:       "weka.classifiers.SingleClassifierEnhancer",
238:       "weka.classifiers.misc.InputMappedClassifier",
239:       "weka.classifiers.rules.ZeroR",
240:       "weka.core.neighboursearch.balltrees.BallNode",
241:       "weka.classifiers.bayes.NaiveBayes",
242:       "weka.core.Tag",
243:       "weka.classifiers.lazy.IBk",
244:       "weka.core.neighboursearch.NearestNeighbourSearch",
245:       "weka.core.neighboursearch.LinearNNSearch",
246:       "weka.core.NormalizableDistance",
247:       "weka.core.EuclideanDistance",
248:       "weka.core.Range",
249:       "weka.core.SerializedObject",
250:       "weka.classifiers.RandomizableClassifier",
251:       "weka.classifiers.functions.SGDText",
252:       "weka.core.stemmers.SnowballStemmer",
253:       "weka.core.RevisionUtils",
254:       "weka.core.FindWithCapabilities",
255:       "weka.core.Capabilities",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "org.pentaho.packageManagement.DefaultPackageManager",
258:       "weka.core.Version",
259:       "weka.core.Environment",
260:       "weka.core.WekaPackageManager",
261:       "weka.core.SingleIndex",
262:       "weka.core.Attribute",
263:       "weka.core.ProtectedProperties",
264:       "weka.core.Stopwords",
265:       "weka.core.neighboursearch.BallTree",
266:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
267:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
268:       "weka.core.neighboursearch.balltrees.BallSplitter",
269:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
270:       "weka.core.Instances",
271:       "weka.classifiers.functions.supportVector.Kernel",
272:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
273:       "weka.core.neighboursearch.CoverTree",
274:       "weka.attributeSelection.ASEvaluation",
275:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
276:       "weka.attributeSelection.PrincipalComponents",
277:       "weka.filters.Filter",
278:       "weka.filters.supervised.attribute.Discretize",
279:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
280:       "weka.classifiers.meta.CostSensitiveClassifier",
281:       "weka.classifiers.CostMatrix",
282:       "weka.core.stemmers.LovinsStemmer",
283:       "weka.core.stemmers.IteratedLovinsStemmer",
284:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
285:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
286:       "weka.core.tokenizers.NGramTokenizer",
287:       "weka.core.tokenizers.AlphabeticTokenizer",
288:       "weka.core.ClassDiscovery",
289:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
290:       "weka.filters.AllFilter",
291:       "weka.core.WekaException",
292:       "weka.classifiers.bayes.BayesNet",
293:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
294:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
295:       "weka.classifiers.bayes.net.search.local.K2",
296:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
297:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
298:       "weka.classifiers.bayes.NaiveBayesMultinomial",
299:       "weka.core.TechnicalInformation",
300:       "weka.core.TechnicalInformation$Type",
301:       "weka.core.TechnicalInformation$Field",
302:       "weka.core.converters.ArffLoader$ArffReader",
303:       "weka.classifiers.misc.SerializedClassifier",
304:       "weka.classifiers.meta.AttributeSelectedClassifier",
305:       "weka.attributeSelection.CfsSubsetEval",
306:       "weka.attributeSelection.ASSearch",
307:       "weka.attributeSelection.BestFirst",
308:       "weka.classifiers.trees.J48",
309:       "weka.core.neighboursearch.KDTree",
310:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
311:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
312:       "weka.core.stemmers.Stemming",
313:       "weka.attributeSelection.InfoGainAttributeEval",
314:       "weka.classifiers.functions.LinearRegression",
315:       "weka.core.WekaEnumeration",
316:       "weka.core.Attribute$1",
317:       "weka.core.UnassignedClassException"
318:     );
319:   }
320: }

[MASTER] 02:25:00.605 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.getLNorm();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
Enumeration<Option> enumeration0 = naiveBayesMultinomialText0.listOptions();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
naiveBayesMultinomialText0.getPeriodicPruning();
naiveBayesMultinomialText0.periodicPruningTipText();
hashMap0.remove((Object) enumeration0);
naiveBayesMultinomialText0.tokenizerTipText();
naiveBayesMultinomialText0.setLowercaseTokens(true);
naiveBayesMultinomialText0.getPeriodicPruning();
naiveBayesMultinomialText0.stopwordsTipText();
assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());

String[] stringArray0 = new String[9];
stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
stringArray0[1] = "The file containing the stopwords (if this is a directory then the default ones are used).";
BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
hashMap0.forEach(biConsumer0);
stringArray0[2] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
stringArray0[3] = "The tokenizing algorithm to use on the strings.";
stringArray0[4] = "The file containing the stopwords (if this is a directory then the default ones are used).";
stringArray0[5] = "The file containing the stopwords (if this is a directory then the default ones are used).";
stringArray0[6] = "The tokenizing algorithm to use on the strings.";
stringArray0[7] = "The file containing the stopwords (if this is a directory then the default ones are used).";
stringArray0[8] = "If true then document length is normalized according to the settings for norm and lnorm";
naiveBayesMultinomialText0.setOptions(stringArray0);
String string0 = naiveBayesMultinomialText0.LNormTipText();
assertEquals("The LNorm to use for document length normalization.", string0);


[MASTER] 02:25:00.818 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_12_1575426300774/weka/classifiers/bayes/NaiveBayesMultinomialText_12_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_12_1575426300774/weka/classifiers/bayes/NaiveBayesMultinomialText_12_tmp__ESTest_scaffolding.java]]
[MASTER] 02:25:00.818 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:00.818 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:00.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 35
[MASTER] 02:25:00.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 35
[MASTER] 02:25:00.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 36
[MASTER] 02:25:00.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 40
[MASTER] 02:25:00.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 41
[MASTER] 02:25:00.820 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_12_1575426300774/weka/classifiers/bayes/NaiveBayesMultinomialText_12_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 02:25:00 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.LinkedHashMap;
13: import java.util.Map;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.System;
17: import org.evosuite.runtime.mock.java.io.MockFile;
18: import org.evosuite.runtime.util.SystemInUtil;
19: import org.junit.runner.RunWith;
20: import weka.classifiers.bayes.NaiveBayesMultinomialText;
21: import weka.core.Instance;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
24: public class NaiveBayesMultinomialText_12_tmp__ESTest extends NaiveBayesMultinomialText_12_tmp__ESTest_scaffolding {
25: 
26:   /**
27:   //Test case number: 0
28:   /*Coverage entropy=2.449191882584089
29:   */
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
33:       naiveBayesMultinomialText0.setMinWordFrequency(1532.0174);
34:       SystemInUtil.addInputLine("-lowercase");
35:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
36:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
37:       Integer integer0 = new Integer(1973);
38:       Integer.compareUnsigned(175, 175);
39:       Integer.compare(1973, (-2322));
40:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
41:       hashMap0.put(integer0, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
42:       naiveBayesMultinomialText0.minWordFrequencyTipText();
43:       naiveBayesMultinomialText0.m_normalize = false;
44:       naiveBayesMultinomialText0.getMinWordFrequency();
45:       naiveBayesMultinomialText0.globalInfo();
46:       naiveBayesMultinomialText0.stemmerTipText();
47:       naiveBayesMultinomialText0.stemmerTipText();
48:       System.setCurrentTimeMillis(0L);
49:       naiveBayesMultinomialText0.getMinWordFrequency();
50:       naiveBayesMultinomialText0.tokenizerTipText();
51:       // Undeclared exception!
52:       try { 
53:         naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
54:         fail("Expecting exception: NullPointerException");
55:       
56:       } catch(NullPointerException e) {
57:          //
58:          // no message in exception (getMessage() returned null)
59:          //
60:          verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
61:       }
62:   }
63: }
RegularFileObject[/tmp/EvoSuite_12_1575426300774/weka/classifiers/bayes/NaiveBayesMultinomialText_12_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 02:25:00 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_12_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:     org.evosuite.runtime.util.SystemInUtil.getInstance().initForTestCase(); 
60:   } 
61: 
62:   @After 
63:   public void doneWithTestCase(){ 
64:     threadStopper.killAndJoinClientThreads();
65:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
66:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
67:     resetClasses(); 
68:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
69:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
70:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
71:   } 
72: 
73:   public static void setSystemProperties() {
74:  
75:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
76:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
77:     java.lang.System.setProperty("java.awt.headless", "true"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:     java.lang.System.setProperty("user.country", "US"); 
80:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
81:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
82:     java.lang.System.setProperty("user.language", "en"); 
83:     java.lang.System.setProperty("user.name", "ubuntu"); 
84:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
85:   }
86: 
87:   private static void initializeClasses() {
88:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_12_tmp__ESTest_scaffolding.class.getClassLoader() ,
89:       "weka.core.Environment",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "org.pentaho.packageManagement.Package",
94:       "weka.core.xml.XMLBasicSerialization",
95:       "weka.classifiers.CostMatrix",
96:       "weka.classifiers.bayes.net.search.local.K2",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
100:       "weka.core.DenseInstance",
101:       "weka.core.stemmers.Stemmer",
102:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
103:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.RelationalLocator",
109:       "weka.core.Utils",
110:       "weka.core.CustomDisplayStringProvider",
111:       "weka.core.tokenizers.Tokenizer",
112:       "weka.core.NormalizableDistance",
113:       "weka.core.NoSupportForMissingValuesException",
114:       "weka.classifiers.UpdateableClassifier",
115:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
116:       "weka.core.Copyable",
117:       "weka.core.Capabilities",
118:       "weka.core.BinarySparseInstance",
119:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
120:       "weka.core.AttributeLocator",
121:       "weka.core.SerializedObject",
122:       "weka.clusterers.UpdateableClusterer",
123:       "weka.core.Summarizable",
124:       "weka.core.AdditionalMeasureProducer",
125:       "weka.core.neighboursearch.balltrees.BallNode",
126:       "org.pentaho.packageManagement.PackageManager$1",
127:       "weka.core.Drawable",
128:       "weka.core.matrix.Matrix",
129:       "weka.core.SingleIndex",
130:       "weka.core.CapabilitiesHandler",
131:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
132:       "weka.core.AbstractInstance",
133:       "weka.core.scripting.JythonObject",
134:       "weka.core.SelectedTag",
135:       "org.pentaho.packageManagement.DefaultPackage",
136:       "weka.classifiers.bayes.BayesNet",
137:       "weka.core.Version",
138:       "weka.filters.AllFilter",
139:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
140:       "weka.core.converters.ArffLoader$ArffReader",
141:       "weka.core.Tag",
142:       "weka.core.neighboursearch.CoverTree",
143:       "weka.classifiers.AbstractClassifier",
144:       "weka.core.FindWithCapabilities",
145:       "weka.core.OptionHandler",
146:       "weka.core.WekaException",
147:       "weka.core.ClassDiscovery",
148:       "weka.core.Range",
149:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
150:       "weka.core.scripting.JythonSerializableObject",
151:       "weka.classifiers.Classifier",
152:       "weka.core.Capabilities$Capability",
153:       "weka.core.SparseInstance",
154:       "org.pentaho.packageManagement.PackageManager",
155:       "weka.core.tokenizers.WordTokenizer",
156:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
157:       "weka.core.stemmers.SnowballStemmer",
158:       "weka.core.stemmers.LovinsStemmer",
159:       "weka.classifiers.Evaluation",
160:       "weka.classifiers.functions.supportVector.Kernel",
161:       "weka.core.WekaPackageManager",
162:       "weka.filters.SupervisedFilter",
163:       "weka.core.TechnicalInformationHandler",
164:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
165:       "weka.core.neighboursearch.LinearNNSearch",
166:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
167:       "weka.classifiers.meta.CostSensitiveClassifier",
168:       "weka.core.Option",
169:       "weka.core.neighboursearch.PerformanceStats",
170:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
171:       "weka.filters.Sourcable",
172:       "weka.core.Attribute",
173:       "weka.core.Stopwords",
174:       "weka.core.tokenizers.AlphabeticTokenizer",
175:       "weka.core.FastVector",
176:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
177:       "weka.core.UnassignedDatasetException",
178:       "weka.core.tokenizers.NGramTokenizer",
179:       "weka.classifiers.RandomizableClassifier",
180:       "weka.classifiers.SingleClassifierEnhancer",
181:       "weka.core.RevisionUtils",
182:       "weka.core.Instance",
183:       "weka.core.ProtectedProperties",
184:       "weka.estimators.Estimator",
185:       "weka.core.StringLocator",
186:       "weka.classifiers.bayes.net.ADNode",
187:       "weka.core.AttributeStats",
188:       "weka.core.WeightedInstancesHandler",
189:       "weka.core.neighboursearch.NearestNeighbourSearch",
190:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
191:       "weka.core.Randomizable",
192:       "weka.core.EuclideanDistance",
193:       "weka.core.Instances",
194:       "weka.core.UnassignedClassException",
195:       "weka.classifiers.bayes.net.ParentSet",
196:       "weka.classifiers.rules.ZeroR",
197:       "weka.core.stemmers.IteratedLovinsStemmer",
198:       "weka.core.TechnicalInformation",
199:       "weka.core.UnsupportedAttributeTypeException",
200:       "weka.classifiers.Sourcable",
201:       "weka.core.RevisionHandler",
202:       "weka.classifiers.evaluation.output.prediction.PlainText",
203:       "weka.core.neighboursearch.TreePerformanceStats",
204:       "weka.core.xml.XMLSerialization",
205:       "weka.classifiers.xml.XMLClassifier",
206:       "weka.filters.Filter",
207:       "weka.filters.supervised.attribute.Discretize"
208:     );
209:   } 
210: 
211:   private static void resetClasses() {
212:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_12_tmp__ESTest_scaffolding.class.getClassLoader()); 
213: 
214:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
215:       "weka.classifiers.AbstractClassifier",
216:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
217:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
218:       "weka.core.Capabilities$Capability",
219:       "weka.core.tokenizers.Tokenizer",
220:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
221:       "weka.core.tokenizers.WordTokenizer",
222:       "weka.core.stemmers.NullStemmer",
223:       "weka.core.Utils",
224:       "weka.core.AbstractInstance",
225:       "weka.core.SparseInstance",
226:       "weka.core.BinarySparseInstance",
227:       "weka.core.UnassignedDatasetException",
228:       "weka.classifiers.Evaluation",
229:       "weka.core.Option",
230:       "weka.core.DenseInstance",
231:       "weka.core.TestInstances",
232:       "weka.classifiers.SingleClassifierEnhancer",
233:       "weka.classifiers.misc.InputMappedClassifier",
234:       "weka.classifiers.rules.ZeroR",
235:       "weka.core.neighboursearch.balltrees.BallNode",
236:       "weka.classifiers.bayes.NaiveBayes",
237:       "weka.core.Tag",
238:       "weka.classifiers.lazy.IBk",
239:       "weka.core.neighboursearch.NearestNeighbourSearch",
240:       "weka.core.neighboursearch.LinearNNSearch",
241:       "weka.core.NormalizableDistance",
242:       "weka.core.EuclideanDistance",
243:       "weka.core.Range",
244:       "weka.core.SerializedObject",
245:       "weka.classifiers.RandomizableClassifier",
246:       "weka.classifiers.functions.SGDText",
247:       "weka.core.stemmers.SnowballStemmer",
248:       "weka.core.RevisionUtils",
249:       "weka.core.FindWithCapabilities",
250:       "weka.core.Capabilities",
251:       "org.pentaho.packageManagement.PackageManager",
252:       "org.pentaho.packageManagement.DefaultPackageManager",
253:       "weka.core.Version",
254:       "weka.core.Environment",
255:       "weka.core.WekaPackageManager",
256:       "weka.core.SingleIndex",
257:       "weka.core.Attribute",
258:       "weka.core.ProtectedProperties",
259:       "weka.core.Stopwords",
260:       "weka.core.neighboursearch.BallTree",
261:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
262:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
263:       "weka.core.neighboursearch.balltrees.BallSplitter",
264:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
265:       "weka.core.Instances",
266:       "weka.classifiers.functions.supportVector.Kernel",
267:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
268:       "weka.core.neighboursearch.CoverTree",
269:       "weka.attributeSelection.ASEvaluation",
270:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
271:       "weka.attributeSelection.PrincipalComponents",
272:       "weka.filters.Filter",
273:       "weka.filters.supervised.attribute.Discretize",
274:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
275:       "weka.classifiers.meta.CostSensitiveClassifier",
276:       "weka.classifiers.CostMatrix",
277:       "weka.core.stemmers.LovinsStemmer",
278:       "weka.core.stemmers.IteratedLovinsStemmer",
279:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
280:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
281:       "weka.core.tokenizers.NGramTokenizer",
282:       "weka.core.tokenizers.AlphabeticTokenizer",
283:       "weka.core.ClassDiscovery",
284:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
285:       "weka.filters.AllFilter",
286:       "weka.core.WekaException",
287:       "weka.classifiers.bayes.BayesNet",
288:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
289:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
290:       "weka.classifiers.bayes.net.search.local.K2",
291:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
292:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
293:       "weka.classifiers.bayes.NaiveBayesMultinomial",
294:       "weka.core.TechnicalInformation",
295:       "weka.core.TechnicalInformation$Type",
296:       "weka.core.TechnicalInformation$Field",
297:       "weka.core.converters.ArffLoader$ArffReader",
298:       "weka.classifiers.misc.SerializedClassifier",
299:       "weka.classifiers.meta.AttributeSelectedClassifier",
300:       "weka.attributeSelection.CfsSubsetEval",
301:       "weka.attributeSelection.ASSearch",
302:       "weka.attributeSelection.BestFirst",
303:       "weka.classifiers.trees.J48",
304:       "weka.core.neighboursearch.KDTree",
305:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
306:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
307:       "weka.core.stemmers.Stemming",
308:       "weka.attributeSelection.InfoGainAttributeEval",
309:       "weka.classifiers.functions.LinearRegression",
310:       "weka.core.WekaEnumeration",
311:       "weka.core.Attribute$1",
312:       "weka.core.UnassignedClassException"
313:     );
314:   }
315: }

[MASTER] 02:25:00.822 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.setMinWordFrequency(1532.0174);
SystemInUtil.addInputLine("-lowercase");
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
Integer integer0 = new Integer(1973);
Integer.compareUnsigned(175, 175);
Integer.compare(1973, (-2322));
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
hashMap0.put(integer0, (LinkedHashMap<String, NaiveBayesMultinomialText.Count>) null);
naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.m_normalize = false;
naiveBayesMultinomialText0.getMinWordFrequency();
naiveBayesMultinomialText0.globalInfo();
naiveBayesMultinomialText0.stemmerTipText();
naiveBayesMultinomialText0.stemmerTipText();
System.setCurrentTimeMillis(0L);
naiveBayesMultinomialText0.getMinWordFrequency();
naiveBayesMultinomialText0.tokenizerTipText();
naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);

[MASTER] 02:25:01.110 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_18_1575426301070/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_18_1575426301070/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.java]]
[MASTER] 02:25:01.110 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:01.110 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 02:25:01.111 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 43
[MASTER] 02:25:01.111 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 43
[MASTER] 02:25:01.112 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_18_1575426301070/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 02:25:01 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.io.File;
12: import java.util.LinkedHashMap;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.mock.java.io.MockFile;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: import weka.classifiers.bayes.NaiveBayesMultinomialText;
20: import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
21: import weka.core.stemmers.NullStemmer;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
24: public class NaiveBayesMultinomialText_18_tmp__ESTest extends NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding {
25: 
26:   /**
27:   //Test case number: 0
28:   /*Coverage entropy=3.479191994756977
29:   */
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       byte[] byteArray0 = new byte[1];
33:       byteArray0[0] = (byte)5;
34:       FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
35:       FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lnorm");
36:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
37:       naiveBayesMultinomialText0.getCapabilities();
38:       NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
39:       naiveBayesMultinomialText0.setStemmer(nullStemmer0);
40:       String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
41:       naiveBayesMultinomialText0.globalInfo();
42:       naiveBayesMultinomialText0.stopwordsTipText();
43:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
44:       naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
45:       naiveBayesMultinomialText0.setOptions(stringArray0);
46:       naiveBayesMultinomialText0.getNorm();
47:       naiveBayesMultinomialText0.stemmerTipText();
48:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
49:       PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
50:       File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
51:       naiveBayesMultinomialText0.getRevision();
52:       MockFile mockFile0 = null;
53:       try {
54:         mockFile0 = new MockFile(file0, (String) null);
55:         fail("Expecting exception: NullPointerException");
56:       
57:       } catch(NullPointerException e) {
58:          //
59:          // no message in exception (getMessage() returned null)
60:          //
61:          verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
62:       }
63:   }
64: }
RegularFileObject[/tmp/EvoSuite_18_1575426301070/weka/classifiers/bayes/NaiveBayesMultinomialText_18_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 02:25:01 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:     org.evosuite.runtime.util.SystemInUtil.getInstance().initForTestCase(); 
60:   } 
61: 
62:   @After 
63:   public void doneWithTestCase(){ 
64:     threadStopper.killAndJoinClientThreads();
65:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
66:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
67:     resetClasses(); 
68:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
69:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
70:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
71:   } 
72: 
73:   public static void setSystemProperties() {
74:  
75:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
76:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
77:     java.lang.System.setProperty("java.awt.headless", "true"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:     java.lang.System.setProperty("user.country", "US"); 
80:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
81:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
82:     java.lang.System.setProperty("user.language", "en"); 
83:     java.lang.System.setProperty("user.name", "ubuntu"); 
84:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
85:   }
86: 
87:   private static void initializeClasses() {
88:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.class.getClassLoader() ,
89:       "weka.core.Environment",
90:       "weka.core.TestInstances",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "org.pentaho.packageManagement.Package",
94:       "weka.core.xml.XMLBasicSerialization",
95:       "weka.classifiers.CostMatrix",
96:       "weka.classifiers.bayes.net.search.local.K2",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
100:       "weka.core.DenseInstance",
101:       "weka.core.stemmers.Stemmer",
102:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
103:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.classifiers.functions.SGDText",
108:       "weka.core.RelationalLocator",
109:       "weka.core.Utils",
110:       "weka.core.CustomDisplayStringProvider",
111:       "weka.core.tokenizers.Tokenizer",
112:       "weka.core.NormalizableDistance",
113:       "weka.core.NoSupportForMissingValuesException",
114:       "weka.classifiers.UpdateableClassifier",
115:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
116:       "weka.core.Copyable",
117:       "weka.core.Capabilities",
118:       "weka.core.BinarySparseInstance",
119:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
120:       "weka.core.AttributeLocator",
121:       "weka.core.SerializedObject",
122:       "weka.clusterers.UpdateableClusterer",
123:       "weka.core.Summarizable",
124:       "weka.core.AdditionalMeasureProducer",
125:       "weka.core.neighboursearch.balltrees.BallNode",
126:       "org.pentaho.packageManagement.PackageManager$1",
127:       "weka.core.Drawable",
128:       "weka.core.matrix.Matrix",
129:       "weka.core.SingleIndex",
130:       "weka.core.CapabilitiesHandler",
131:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
132:       "weka.core.AbstractInstance",
133:       "weka.core.scripting.JythonObject",
134:       "weka.core.SelectedTag",
135:       "org.pentaho.packageManagement.DefaultPackage",
136:       "weka.classifiers.bayes.BayesNet",
137:       "weka.core.Version",
138:       "weka.filters.AllFilter",
139:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
140:       "weka.core.converters.ArffLoader$ArffReader",
141:       "weka.core.Tag",
142:       "weka.core.neighboursearch.CoverTree",
143:       "weka.classifiers.AbstractClassifier",
144:       "weka.core.FindWithCapabilities",
145:       "weka.core.OptionHandler",
146:       "weka.core.WekaException",
147:       "weka.core.ClassDiscovery",
148:       "weka.core.Range",
149:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
150:       "weka.core.scripting.JythonSerializableObject",
151:       "weka.classifiers.Classifier",
152:       "weka.core.Capabilities$Capability",
153:       "weka.core.SparseInstance",
154:       "org.pentaho.packageManagement.PackageManager",
155:       "weka.core.tokenizers.WordTokenizer",
156:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
157:       "weka.core.stemmers.SnowballStemmer",
158:       "weka.core.stemmers.LovinsStemmer",
159:       "weka.classifiers.Evaluation",
160:       "weka.classifiers.functions.supportVector.Kernel",
161:       "weka.core.WekaPackageManager",
162:       "weka.filters.SupervisedFilter",
163:       "weka.core.TechnicalInformationHandler",
164:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
165:       "weka.core.neighboursearch.LinearNNSearch",
166:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
167:       "weka.classifiers.meta.CostSensitiveClassifier",
168:       "weka.core.Option",
169:       "weka.core.neighboursearch.PerformanceStats",
170:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
171:       "weka.filters.Sourcable",
172:       "weka.core.Attribute",
173:       "weka.core.Stopwords",
174:       "weka.core.tokenizers.AlphabeticTokenizer",
175:       "weka.core.FastVector",
176:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
177:       "weka.core.UnassignedDatasetException",
178:       "weka.core.tokenizers.NGramTokenizer",
179:       "weka.classifiers.RandomizableClassifier",
180:       "weka.classifiers.SingleClassifierEnhancer",
181:       "weka.core.RevisionUtils",
182:       "weka.core.Instance",
183:       "weka.core.ProtectedProperties",
184:       "weka.estimators.Estimator",
185:       "weka.core.StringLocator",
186:       "weka.classifiers.bayes.net.ADNode",
187:       "weka.core.AttributeStats",
188:       "weka.core.WeightedInstancesHandler",
189:       "weka.core.neighboursearch.NearestNeighbourSearch",
190:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
191:       "weka.core.Randomizable",
192:       "weka.core.EuclideanDistance",
193:       "weka.core.Instances",
194:       "weka.core.UnassignedClassException",
195:       "weka.classifiers.bayes.net.ParentSet",
196:       "weka.classifiers.rules.ZeroR",
197:       "weka.core.stemmers.IteratedLovinsStemmer",
198:       "weka.core.TechnicalInformation",
199:       "weka.core.UnsupportedAttributeTypeException",
200:       "weka.classifiers.Sourcable",
201:       "weka.core.RevisionHandler",
202:       "weka.classifiers.evaluation.output.prediction.PlainText",
203:       "weka.core.neighboursearch.TreePerformanceStats",
204:       "weka.core.xml.XMLSerialization",
205:       "weka.classifiers.xml.XMLClassifier",
206:       "weka.filters.Filter",
207:       "weka.filters.supervised.attribute.Discretize"
208:     );
209:   } 
210: 
211:   private static void resetClasses() {
212:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_18_tmp__ESTest_scaffolding.class.getClassLoader()); 
213: 
214:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
215:       "weka.classifiers.AbstractClassifier",
216:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
217:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
218:       "weka.core.Capabilities$Capability",
219:       "weka.core.tokenizers.Tokenizer",
220:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
221:       "weka.core.tokenizers.WordTokenizer",
222:       "weka.core.stemmers.NullStemmer",
223:       "weka.core.Utils",
224:       "weka.core.AbstractInstance",
225:       "weka.core.SparseInstance",
226:       "weka.core.BinarySparseInstance",
227:       "weka.core.UnassignedDatasetException",
228:       "weka.classifiers.Evaluation",
229:       "weka.core.Option",
230:       "weka.core.DenseInstance",
231:       "weka.core.TestInstances",
232:       "weka.classifiers.SingleClassifierEnhancer",
233:       "weka.classifiers.misc.InputMappedClassifier",
234:       "weka.classifiers.rules.ZeroR",
235:       "weka.core.neighboursearch.balltrees.BallNode",
236:       "weka.classifiers.bayes.NaiveBayes",
237:       "weka.core.Tag",
238:       "weka.classifiers.lazy.IBk",
239:       "weka.core.neighboursearch.NearestNeighbourSearch",
240:       "weka.core.neighboursearch.LinearNNSearch",
241:       "weka.core.NormalizableDistance",
242:       "weka.core.EuclideanDistance",
243:       "weka.core.Range",
244:       "weka.core.SerializedObject",
245:       "weka.classifiers.RandomizableClassifier",
246:       "weka.classifiers.functions.SGDText",
247:       "weka.core.stemmers.SnowballStemmer",
248:       "weka.core.RevisionUtils",
249:       "weka.core.FindWithCapabilities",
250:       "weka.core.Capabilities",
251:       "org.pentaho.packageManagement.PackageManager",
252:       "org.pentaho.packageManagement.DefaultPackageManager",
253:       "weka.core.Version",
254:       "weka.core.Environment",
255:       "weka.core.WekaPackageManager",
256:       "weka.core.SingleIndex",
257:       "weka.core.Attribute",
258:       "weka.core.ProtectedProperties",
259:       "weka.core.Stopwords",
260:       "weka.core.neighboursearch.BallTree",
261:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
262:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
263:       "weka.core.neighboursearch.balltrees.BallSplitter",
264:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
265:       "weka.core.Instances",
266:       "weka.classifiers.functions.supportVector.Kernel",
267:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
268:       "weka.core.neighboursearch.CoverTree",
269:       "weka.attributeSelection.ASEvaluation",
270:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
271:       "weka.attributeSelection.PrincipalComponents",
272:       "weka.filters.Filter",
273:       "weka.filters.supervised.attribute.Discretize",
274:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
275:       "weka.classifiers.meta.CostSensitiveClassifier",
276:       "weka.classifiers.CostMatrix",
277:       "weka.core.stemmers.LovinsStemmer",
278:       "weka.core.stemmers.IteratedLovinsStemmer",
279:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
280:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
281:       "weka.core.tokenizers.NGramTokenizer",
282:       "weka.core.tokenizers.AlphabeticTokenizer",
283:       "weka.core.ClassDiscovery",
284:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
285:       "weka.filters.AllFilter",
286:       "weka.core.WekaException",
287:       "weka.classifiers.bayes.BayesNet",
288:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
289:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
290:       "weka.classifiers.bayes.net.search.local.K2",
291:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
292:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
293:       "weka.classifiers.bayes.NaiveBayesMultinomial",
294:       "weka.core.TechnicalInformation",
295:       "weka.core.TechnicalInformation$Type",
296:       "weka.core.TechnicalInformation$Field",
297:       "weka.core.converters.ArffLoader$ArffReader",
298:       "weka.classifiers.misc.SerializedClassifier",
299:       "weka.classifiers.meta.AttributeSelectedClassifier",
300:       "weka.attributeSelection.CfsSubsetEval",
301:       "weka.attributeSelection.ASSearch",
302:       "weka.attributeSelection.BestFirst",
303:       "weka.classifiers.trees.J48",
304:       "weka.core.neighboursearch.KDTree",
305:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
306:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
307:       "weka.core.stemmers.Stemming",
308:       "weka.attributeSelection.InfoGainAttributeEval",
309:       "weka.classifiers.functions.LinearRegression",
310:       "weka.core.WekaEnumeration",
311:       "weka.core.Attribute$1",
312:       "weka.core.UnassignedClassException"
313:     );
314:   }
315: }

[MASTER] 02:25:01.113 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)5;
FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lnorm");
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.getCapabilities();
NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
naiveBayesMultinomialText0.setStemmer(nullStemmer0);
String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
naiveBayesMultinomialText0.globalInfo();
naiveBayesMultinomialText0.stopwordsTipText();
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
naiveBayesMultinomialText0.setOptions(stringArray0);
naiveBayesMultinomialText0.getNorm();
naiveBayesMultinomialText0.stemmerTipText();
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
naiveBayesMultinomialText0.getRevision();
MockFile mockFile0 = new MockFile(file0, (String) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 3%
[MASTER] 02:29:13.362 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 02:29:19.233 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 02:29:19.354 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 02:29:19.531 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 02:29:19.531 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/qmosa/tests/s1016/107_weka/evosuite-tests
* Done!

* Computation finished
