* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.util.FileIterator
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2403
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:36:02.113 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:36:02.323 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:36:02.324 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:36:02.343 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.util.FileIterator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/util/FileIterator.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1008
* Starting evolution
* Search finished after 122s and 29 generations, 29679 statements, best individual has fitness: 704.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 107
* Number of covered goals: 102
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 67
* Number of covered goals: 65
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 53
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 74
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 28
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 87%
* Total number of goals: 67
* Number of covered goals: 58
* Generated 22 tests with total length 464
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 48%
* Compiling and checking tests
* Writing JUnit test case 'FileIterator_ESTest' to /home/ubuntu/termite/qmosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2403
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:47:09.254 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:47:09.261 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:47:09.262 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:47:09.367 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/residue/nt/DefaultNucleotideCodec.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1008
* Starting evolution
[MASTER] 19:47:25.157 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:47:25.168 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:48:33.952 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 123s and 24 generations, 14463 statements, best individual has fitness: 544.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 131
* Number of covered goals: 129
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 74
* Number of covered goals: 70
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 41
* Number of covered goals: 41
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 469
* Number of covered goals: 455
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 52
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 18
* Number of covered goals: 15
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 74
* Number of covered goals: 56
* Generated 69 tests with total length 1107
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 62%
* Compiling and checking tests
[MASTER] 19:50:37.295 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 19:50:37.296 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)112;
byteArray0[1] = (byte)1;
byteArray0[2] = (byte)76;
byteArray0[3] = (byte)100;
byteArray0[5] = (byte)13;
defaultNucleotideCodec0.toString(byteArray0);

* Writing JUnit test case 'DefaultNucleotideCodec_ESTest' to /home/ubuntu/termite/qmosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.core.Range
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2396
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:53:57.932 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:53:58.045 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 19:53:58.068 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToDoubleFunction
[MASTER] 19:53:58.070 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToIntFunction
[MASTER] 19:53:58.071 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.ToLongFunction
[MASTER] 19:53:58.196 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:53:58.211 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.core.Range
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/core/Range.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1008
* Starting evolution
* Search finished after 126s and 10 generations, 6750 statements, best individual has fitness: 9888.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 632
* Number of covered goals: 363
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 57%
* Total number of goals: 426
* Number of covered goals: 242
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 15
* Number of covered goals: 15
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 48%
* Total number of goals: 802
* Number of covered goals: 382
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 77
* Number of covered goals: 36
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 37%
* Total number of goals: 107
* Number of covered goals: 40
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 426
* Number of covered goals: 238
* Generated 93 tests with total length 1472
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 19:58:26.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:58:26.471 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range0.forEach(consumer0);
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
long long0 = range0.getEnd(range_CoordinateSystem1);
assertEquals(2147483647L, long0);

Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
Range.Builder range_Builder0 = new Range.Builder(2147483647L);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
range_Builder1.contractEnd(2147483647L);
Range range2 = range_Builder1.build();
range2.isSubRangeOf(range0);
range1.complement(range0);
boolean boolean0 = range2.intersects(range0);
assertFalse(range2.isEmpty());
assertFalse(boolean0);

Range range3 = Range.of(4208L);
range3.equals((Object) null);
range1.isSubRangeOf(range3);
assertTrue(range1.isEmpty());


[MASTER] 19:58:27.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:58:27.165 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1L);
Range.Builder range_Builder0 = new Range.Builder(range0);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
Iterator<Long> iterator0 = range0.iterator();
range0.spliterator();
range_Builder0.expandBegin(1L);
Range.Comparators.values();
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
Range range2 = range1.intersection(range0);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
range1.complementFrom(linkedList0);
Range.of(1L);
range_Builder1.expandEnd(1L);
range2.isSubRangeOf(range0);
Range range3 = Range.of((-32768L), 21L);
List<Range> list0 = range0.complement(range3);
assertFalse(list0.isEmpty());
assertFalse(list0.contains(range0));

boolean boolean0 = range0.intersects(range2);
Range range4 = Range.of(21L);
range4.equals(iterator0);
boolean boolean1 = range2.isSubRangeOf(range3);
assertTrue(boolean1 == boolean0);
assertSame(range2, range1);
assertTrue(boolean1);


[MASTER] 19:58:27.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 19:58:27.716 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Range range0 = Range.of(1L);
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
String string0 = range0.toString(range_CoordinateSystem0);
assertEquals("[ 2 .. 2 ]/RB", string0);

Range.Builder range_Builder0 = new Range.Builder(range0);
Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
range0.iterator();
range0.spliterator();
range_Builder0.contractBegin((-917L));
range_Builder0.expandBegin(1L);
Range.Comparators.values();
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
Range range2 = range1.intersection(range0);
LinkedList<Range> linkedList0 = new LinkedList<Range>();
range1.complementFrom(linkedList0);
Range.of(1L);
range_Builder1.expandEnd(1L);
boolean boolean0 = range2.isSubRangeOf(range0);
assertTrue(boolean0);

Range range3 = Range.of((-32768L), 21L);
List<Range> list0 = range0.complement(range3);
assertEquals(1, list0.size());

range0.intersects(range2);
Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
range0.toString(range_CoordinateSystem2);
range_Builder1.shift(0L);
Range.parseRange("[ 2 .. 2 ]/RB");
Range range4 = range_Builder1.build();
assertTrue(range4.equals((Object)range2));


[MASTER] 19:58:33.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.IndexOutOfBoundsException: given length -9223372036854775808 would make range [3633 - ? ] beyond max allowed end offset
[MASTER] 19:58:33.942 [logback-1] WARN  JUnitAnalyzer - Failing test:
 long long0 = 2147483647L;
Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
Range range1 = Range.of(2147483647L);
Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
range1.forEach(consumer0);
Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
range0.getEnd(range_CoordinateSystem2);
Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
Range.of(range_CoordinateSystem3, 3633L, (-9223372036854775808L));

* Writing JUnit test case 'Range_ESTest' to /home/ubuntu/termite/qmosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: QMOSA
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 2396
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:02:59.955 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:02:59.956 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:02:59.970 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 20:03:00.051 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:03:00.070 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:03:00.071 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:03:00.298 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 20:03:00.300 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 20:03:00.302 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 20:03:00.302 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 20:03:00.305 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 20:03:00.305 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 20:03:00.322 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 20:03:00.326 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 20:03:00.329 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.PhdBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
Production Code Path: /home/ubuntu/termite/SF110/92_jcvi-javacommon/src/main/java/org/jcvi/jillion/assembly/consed/phd/PhdBuilder.java
Ranking Type: org.evosuite.ga.metaheuristics.mosa.QualityBasedPreferenceSorting
* Using seed 1008
* Starting evolution
* Search finished after 122s and 81 generations, 36200 statements, best individual has fitness: 240.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 93
* Number of covered goals: 86
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 47
* Number of covered goals: 43
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 16
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 27
* Number of covered goals: 22
* Generated 18 tests with total length 280
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
* Writing JUnit test case 'PhdBuilder_ESTest' to /home/ubuntu/termite/qmosa/tests/s1008/92_jcvi-javacommon/evosuite-tests
* Done!

* Computation finished
