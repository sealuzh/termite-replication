/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:53:06 GMT 2018
 */

package glengineer.blocks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import glengineer.blocks.Block;
import glengineer.blocks.HorizontalBlock;
import glengineer.blocks.Scheme;
import glengineer.positions.HWordPosition;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HorizontalBlock_ESTest extends HorizontalBlock_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HorizontalBlock horizontalBlock0 = null;
      try {
        horizontalBlock0 = new HorizontalBlock((Block) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("glengineer.blocks.HorizontalBlock", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0, 0, 0, 0, 0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocks();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksWithoutLines();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RE-y";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocks();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      Set<HWordPosition> set0 = scheme0.getHLinesPositions();
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines(set0);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      LinkedHashSet<HWordPosition> linkedHashSet0 = new LinkedHashSet<HWordPosition>();
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines(linkedHashSet0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractSequentialSubblocks();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8019511397932633
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      LinkedHashSet<HWordPosition> linkedHashSet0 = new LinkedHashSet<HWordPosition>();
      HWordPosition hWordPosition0 = new HWordPosition(horizontalBlock0);
      linkedHashSet0.add(hWordPosition0);
      HWordPosition hWordPosition1 = new HWordPosition(0, 0, 0);
      linkedHashSet0.add(hWordPosition1);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(hWordPosition1));
      
      List<Block> list1 = horizontalBlock0.extractParallelSubblocksWithoutLines();
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9";
      Scheme scheme0 = new Scheme(stringArray0);
      HWordPosition hWordPosition0 = new HWordPosition(0, 0, 1);
      LinkedHashSet<HWordPosition> linkedHashSet0 = new LinkedHashSet<HWordPosition>();
      linkedHashSet0.add(hWordPosition0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocksSeparatedByLines(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(hWordPosition0));
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9";
      Scheme scheme0 = new Scheme(stringArray0);
      HWordPosition hWordPosition0 = new HWordPosition(0, 0, 1);
      LinkedHashSet<HWordPosition> linkedHashSet0 = new LinkedHashSet<HWordPosition>();
      linkedHashSet0.add(hWordPosition0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0, 1, 0, 1, 0);
      horizontalBlock0.extractParallelSubblocksSeparatedByLines(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(hWordPosition0));
      assertFalse(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6957425341696348
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E-";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractParallelSubblocks();
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3034884952192693
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cannot search in a trivial block";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractSequentialSubblocks();
      assertEquals(6, list0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.245171589411516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      Scheme scheme0 = new Scheme(stringArray0);
      HorizontalBlock horizontalBlock0 = new HorizontalBlock(scheme0);
      List<Block> list0 = horizontalBlock0.extractSequentialSubblocks();
      assertFalse(list0.isEmpty());
  }
}
