/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:24:56 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import weka.core.AlgVector;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlgVector_ESTest extends AlgVector_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      AlgVector algVector0 = new AlgVector(1893);
      AlgVector algVector1 = new AlgVector(doubleArray0);
      String string0 = algVector1.getRevision();
      assertEquals("8034", string0);
      
      double double0 = algVector1.dotMultiply(algVector0);
      assertEquals(0.0, algVector0.norm(), 0.01);
      assertEquals(1893, algVector0.numElements());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = algVector1.norm();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      AlgVector algVector0 = new AlgVector(doubleArray0);
      algVector0.getRevision();
      algVector0.setElements(doubleArray0);
      algVector0.changeLength(1355.000079795989);
      algVector0.getElements();
      AlgVector.main((String[]) null);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      algVector0.scalarMultiply(0);
      // Undeclared exception!
      try { 
        algVector0.setElement(1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = 1893;
      AlgVector algVector0 = new AlgVector(1893);
      // Undeclared exception!
      algVector0.toString();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8891591637540215
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      algVector0.scalarMultiply(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance();
      AlgVector algVector1 = null;
      try {
        algVector1 = new AlgVector((-1111));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      AlgVector algVector0 = new AlgVector(1893);
      MockRandom mockRandom0 = new MockRandom(1893);
      algVector0.initialize(mockRandom0);
      AlgVector algVector1 = new AlgVector(doubleArray0);
      algVector1.add(algVector0);
      algVector1.dotMultiply(algVector0);
      assertEquals(23.20991167583369, algVector0.norm(), 0.01);
      
      double double0 = algVector1.norm();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 13);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      MockRandom mockRandom0 = new MockRandom(1067L);
      AlgVector algVector1 = new AlgVector(instances1, mockRandom0);
      algVector1.scalarMultiply(0);
      System.setCurrentTimeMillis(2603L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      algVector0.scalarMultiply(0);
      algVector0.norm();
      double[] doubleArray0 = new double[4];
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      AlgVector algVector1 = null;
      try {
        algVector1 = new AlgVector(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      MockRandom mockRandom0 = new MockRandom((-272L));
      algVector0.initialize(mockRandom0);
      algVector0.scalarMultiply(0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_mn|'{";
      stringArray0[1] = "]`R='a.;!k-;lsj@BJ";
      stringArray0[2] = "";
      stringArray0[3] = "r2+!x";
      stringArray0[4] = "";
      AlgVector.main(stringArray0);
      AlgVector algVector0 = new AlgVector(0);
      String string0 = algVector0.getRevision();
      assertEquals("8034", string0);
      
      algVector0.scalarMultiply((-2766.610674779));
      AlgVector algVector1 = (AlgVector)algVector0.clone();
      algVector0.norm();
      algVector0.changeLength(0);
      double double0 = algVector0.norm();
      assertEquals(0.0, double0, 0.01);
      
      AlgVector algVector2 = algVector1.add(algVector0);
      algVector2.clone();
      AlgVector algVector3 = algVector1.add(algVector0);
      algVector3.normVector();
      assertNotSame(algVector3, algVector2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(5);
      algVector0.scalarMultiply(5);
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7379834485870498
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      AlgVector algVector0 = new AlgVector(1893);
      AlgVector algVector1 = new AlgVector(doubleArray0);
      double double0 = algVector1.dotMultiply(algVector0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = algVector1.norm();
      assertEquals(double1, double0, 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7=v-'n3U-TM*AH-E", arrayList0, 1893);
      MockRandom mockRandom0 = new MockRandom();
      Instance instance0 = algVector0.getAsInstance(instances0, mockRandom0);
      assertEquals(1893, algVector0.numElements());
      assertEquals(0.0, algVector0.norm(), 0.01);
      assertNotNull(instance0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      AlgVector algVector0 = new AlgVector(0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.setSeed(0);
      algVector0.initialize(mockRandom0);
      AlgVector algVector1 = new AlgVector(0);
      algVector0.substract(algVector1);
      Instances instances0 = null;
      try { 
        algVector0.getAsInstance((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1133.207082;
      AlgVector algVector0 = new AlgVector(doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1133.207082, doubleArray0);
      AlgVector algVector1 = algVector0.substract(algVector0);
      algVector0.getRevision();
      Random.setNextRandom((-1111));
      algVector1.setElement(1, (-1387.19355407767));
      // Undeclared exception!
      try { 
        algVector0.setElement((-2457), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2457
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      AlgVector algVector0 = new AlgVector(doubleArray0);
      algVector0.clone();
      algVector0.clone();
      AlgVector algVector1 = new AlgVector(460);
      // Undeclared exception!
      try { 
        algVector0.getElement(460);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 460
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("k8Wx$QRLN)uF=bzuTb", arrayList0, 1);
      instances0.deleteAttributeType(0);
      java.util.Random random0 = null;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      Attribute attribute0 = new Attribute(".bsi", list1, 1);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("PbIv-Y>>aut]", (String) null, 0);
      arrayList0.add(attribute1);
      arrayList0.clone();
      AlgVector algVector0 = null;
      try {
        algVector0 = new AlgVector(instances0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0075563074378375
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlgVector algVector0 = new AlgVector(0);
      algVector0.scalarMultiply(0);
      algVector0.norm();
      algVector0.m_Elements = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      AlgVector algVector1 = new AlgVector(doubleArray0);
      algVector1.m_Elements = null;
      algVector1.add(algVector0);
      AlgVector algVector2 = algVector1.add((AlgVector) null);
      assertNull(algVector2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Yd\"", arrayList0, 4386);
      MockRandom mockRandom0 = new MockRandom(4386);
      AlgVector algVector0 = new AlgVector(instances0, mockRandom0);
      algVector0.norm();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 4386;
      intArray0[1] = 4386;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 3012);
      // Undeclared exception!
      try { 
        sparseInstance0.setClassValue("jVMNQ5=9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(559);
      System.setCurrentTimeMillis(559);
      AlgVector algVector0 = new AlgVector(559);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/>Zo=o^.A$", arrayList0, 559);
      MockRandom mockRandom0 = new MockRandom(559);
      int int0 = (-3302);
      instances0.containsAll(arrayList0);
      mockRandom0.ints((-3302), 537);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("b");
      Attribute attribute0 = new Attribute("$Revision: 8034 $", linkedList0);
      arrayList0.add(attribute0);
      Instance instance0 = algVector0.getAsInstance(instances0, mockRandom0);
      AlgVector algVector1 = null;
      try {
        algVector1 = new AlgVector(instance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No numeric attributes in data!
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(559);
      System.setCurrentTimeMillis(0L);
      AlgVector algVector0 = new AlgVector(559);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/>Zo=o^.A$", arrayList0, 559);
      MockRandom mockRandom0 = new MockRandom(0L);
      instances0.containsAll(arrayList0);
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      Instance instance0 = algVector0.getAsInstance(instances0, mockRandom0);
      assertNotNull(instance0);
      
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0);
      AlgVector algVector1 = new AlgVector(instance0);
      assertEquals(1, algVector1.numElements());
      assertEquals(0.0, algVector1.norm(), 0.01);
      
      double double0 = algVector0.norm();
      assertEquals(559, algVector0.numElements());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6762349391347309
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ul=#&}j?Q";
      stringArray0[3] = "Ul=#&}j?Q";
      AlgVector.main(stringArray0);
      double[] doubleArray0 = new double[12];
      AlgVector algVector0 = new AlgVector(doubleArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("?n", arrayList0, 17);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(17);
      AlgVector algVector1 = new AlgVector(instances1, mockRandom0);
      algVector1.getAsInstance(instances1, mockRandom0);
      Random.setNextRandom(17);
      // Undeclared exception!
      try { 
        algVector0.dotMultiply(algVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-546L));
      AlgVector algVector0 = new AlgVector(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("test:\n ", arrayList0, 1);
      MockRandom mockRandom0 = new MockRandom(1);
      instances0.containsAll(arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      algVector0.getRevision();
      try { 
        algVector0.getAsInstance(instances0, mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Datatypes are not compatible.
         //
         verifyException("weka.core.AlgVector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom(559);
      AlgVector algVector0 = new AlgVector(559);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.core.AlgVector", arrayList0, 494);
      MockRandom mockRandom0 = new MockRandom((-1929L));
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      instances0.containsAll(arrayList1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.add(attribute0);
      algVector0.getAsInstance(instances0, mockRandom0);
      System.setCurrentTimeMillis(0);
      arrayList0.add(attribute0);
      Instance instance0 = algVector0.getAsInstance(instances0, mockRandom0);
      System.setCurrentTimeMillis(494);
      AlgVector algVector1 = new AlgVector(instance0);
      algVector1.dotMultiply(algVector0);
      algVector1.m_Elements = null;
      System.setCurrentTimeMillis((-3084L));
      algVector1.dotMultiply(algVector0);
      mockRandom0.ints();
      AlgVector algVector2 = new AlgVector(44);
      DenseInstance denseInstance0 = new DenseInstance(2);
      System.setCurrentTimeMillis(994L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1699929969668565
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Random.setNextRandom(559);
      System.setCurrentTimeMillis(0L);
      AlgVector algVector0 = new AlgVector(559);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/>Zo=o^.A$", arrayList0, 559);
      MockRandom mockRandom0 = new MockRandom(0L);
      instances0.containsAll(arrayList0);
      Attribute attribute0 = new Attribute("E;5I2!|=m");
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis((-1L));
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute((String) null, list0, protectedProperties0);
      arrayList0.add(attribute1);
      Instance instance0 = algVector0.getAsInstance(instances0, mockRandom0);
      System.setCurrentTimeMillis(0L);
      AlgVector algVector1 = new AlgVector(instance0);
      System.setCurrentTimeMillis((-2589L));
      double double0 = algVector1.dotMultiply(algVector0);
      assertEquals(1, algVector1.numElements());
      assertEquals(0.0, algVector1.norm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      AlgVector algVector2 = new AlgVector(2);
      assertEquals(0.0, algVector2.norm(), 0.01);
  }
}
