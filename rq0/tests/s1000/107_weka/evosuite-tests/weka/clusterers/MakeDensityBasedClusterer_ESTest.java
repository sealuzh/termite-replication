/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:19:34 GMT 2018
 */

package weka.clusterers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.Clusterer;
import weka.clusterers.Cobweb;
import weka.clusterers.FarthestFirst;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MakeDensityBasedClusterer_ESTest extends MakeDensityBasedClusterer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MakeDensityBasedClusterer.main((String[]) null);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String string0 = makeDensityBasedClusterer0.getRevision();
      assertEquals("8034", string0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String string0 = makeDensityBasedClusterer0.clustererTipText();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
      assertEquals("the clusterer to wrap", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      makeDensityBasedClusterer0.numberOfClusters();
      makeDensityBasedClusterer0.listOptions();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String string0 = makeDensityBasedClusterer0.minStdDevTipText();
      assertEquals("set minimum allowable standard deviation", string0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      MakeDensityBasedClusterer makeDensityBasedClusterer1 = new MakeDensityBasedClusterer(makeDensityBasedClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      assertEquals(2, instances0.numAttributes());
      
      makeDensityBasedClusterer1.buildClusterer(instances0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
      assertEquals(1.0E-6, makeDensityBasedClusterer1.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      makeDensityBasedClusterer0.setNumClusters(537);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String[] stringArray0 = new String[0];
      makeDensityBasedClusterer0.setOptions(stringArray0);
      String[] stringArray1 = makeDensityBasedClusterer0.getOptions();
      assertEquals(13, stringArray1.length);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String string0 = makeDensityBasedClusterer0.toString();
      assertEquals("No clusterer built yet!", string0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer((Clusterer) null);
      try { 
        makeDensityBasedClusterer0.setNumClusters((-4158));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't set the number of clusters to generate - no clusterer has been set yet.
         //
         verifyException("weka.clusterers.MakeDensityBasedClusterer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      String string0 = makeDensityBasedClusterer0.globalInfo();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
      assertEquals("Class for wrapping a Clusterer to make it return a distribution and density. Fits normal distributions and discrete distributions within each cluster produced by the wrapped clusterer. Supports the NumberOfClustersRequestable interface only if the wrapped Clusterer does.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FarthestFirst farthestFirst0 = new FarthestFirst();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer(farthestFirst0);
      try { 
        makeDensityBasedClusterer0.setNumClusters(2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't set the number of clusters to generate - wrapped clusterer does not support this facility.
         //
         verifyException("weka.clusterers.MakeDensityBasedClusterer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      makeDensityBasedClusterer0.defaultClustererString();
      String[] stringArray0 = makeDensityBasedClusterer0.getOptions();
      makeDensityBasedClusterer0.setOptions(stringArray0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
      assertEquals(13, stringArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer(cobweb0);
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      makeDensityBasedClusterer0.buildClusterer(instances0);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer((Clusterer) null);
      String[] stringArray0 = makeDensityBasedClusterer0.getOptions();
      assertEquals(5, stringArray0.length);
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3421507479335112
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      makeDensityBasedClusterer0.buildClusterer(instances0);
      makeDensityBasedClusterer0.toString();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer((Clusterer) null);
      makeDensityBasedClusterer0.getCapabilities();
      String string0 = makeDensityBasedClusterer0.toString();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
      assertEquals("No clusterer built yet!", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer((Clusterer) null);
      makeDensityBasedClusterer0.listOptions();
      assertEquals(1.0E-6, makeDensityBasedClusterer0.getMinStdDev(), 0.01);
  }
}
