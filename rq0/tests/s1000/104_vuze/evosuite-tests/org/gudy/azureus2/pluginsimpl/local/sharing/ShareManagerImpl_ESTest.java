/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:37:10 GMT 2018
 */

package org.gudy.azureus2.pluginsimpl.local.sharing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.core.impl.AzureusCoreImpl;
import com.aelitis.azureus.plugins.sharing.hoster.ShareHosterPlugin;
import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.gudy.azureus2.core3.config.impl.ConfigurationManager;
import org.gudy.azureus2.core3.torrent.impl.TOTorrentCreatorImpl;
import org.gudy.azureus2.core3.util.IndentWriter;
import org.gudy.azureus2.core3.util.SystemTime;
import org.gudy.azureus2.platform.win32.PlatformManagerImpl;
import org.gudy.azureus2.plugins.sharing.ShareManagerListener;
import org.gudy.azureus2.plugins.sharing.ShareResource;
import org.gudy.azureus2.plugins.sharing.ShareResourceDirContents;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareItemImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceDirContentsImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileImpl;
import org.gudy.azureus2.ui.swt.views.MySharesView;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShareManagerImpl_ESTest extends ShareManagerImpl_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCoreImpl.create();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      
      shareManagerImpl0.getShares();
      shareManagerImpl0.scanShares();
      String string0 = shareManagerImpl0.getNewTorrentLocation();
      assertEquals("cache1/0.torrent", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      MockFile mockFile0 = new MockFile("shares", "cache");
      try { 
        shareManagerImpl0.addFile((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File 'cache' not found
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      try { 
        shareManagerImpl0.addDir((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShareResource: Torrent create failed
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      ShareManagerImpl.getSingleton();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ConfigurationManager.getInstance((Map) hashMap0);
      MockFile mockFile0 = new MockFile("cache");
      URL uRL0 = MockURL.getFileExample();
      mockFile0.setWritable(false);
      TOTorrentCreatorImpl tOTorrentCreatorImpl0 = new TOTorrentCreatorImpl(mockFile0, uRL0, true, 1000);
      tOTorrentCreatorImpl0.addListener(shareManagerImpl0);
      shareManagerImpl0.setTorrentCreator(tOTorrentCreatorImpl0);
      shareManagerImpl0.reportProgress((-1191));
      ConfigurationManager.getInstance();
      shareManagerImpl0.getShareConfig();
      shareManagerImpl0.getAddHashes();
      shareManagerImpl0.reportProgress(2);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      // Undeclared exception!
      try { 
        shareManagerImpl0.getDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      MockFile mockFile0 = new MockFile("cache");
      ShareResourceFileImpl.getResource(shareManagerImpl0, mockFile0);
      shareManagerImpl0.initialise();
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      MySharesView mySharesView0 = new MySharesView();
      shareManagerImpl0.removeListener(mySharesView0);
      shareManagerImpl0.scanShares();
      URL[] uRLArray0 = shareManagerImpl0.getAnnounceURLs();
      assertEquals(1, uRLArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      // Undeclared exception!
      try { 
        shareManagerImpl0.getFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      boolean boolean0 = shareManagerImpl0.isInitialising();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      shareManagerImpl0.parameterChanged(" t!");
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShareManagerImpl.getSingleton();
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      shareManagerImpl0.getNewTorrentLocation();
      String string0 = shareManagerImpl0.getNewTorrentLocation();
      assertEquals("cache1/1.torrent", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      MockFile mockFile0 = new MockFile("cache");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        shareManagerImpl0.addDirContents((File) mockFile0, true, (Map<String, String>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Dir 'cache' not found
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceDirContentsImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      ShareManagerImpl.shareScanner shareManagerImpl_shareScanner0 = shareManagerImpl0.new shareScanner();
      assertNotNull(shareManagerImpl_shareScanner0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      assertNotNull(configurationManager0);
      assertTrue(configurationManager0.isNewInstall());
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.getDebugName((ShareResource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.addDirContents((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cache");
      assertNotNull(mockPrintWriter0);
      
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      assertNotNull(indentWriter0);
      assertEquals("    ", indentWriter0.getTab());
      
      shareManagerImpl0.generate(indentWriter0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals("    ", indentWriter0.getTab());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      ShareManagerImpl.shareScanner shareManagerImpl_shareScanner0 = shareManagerImpl0.new shareScanner();
      assertNotNull(shareManagerImpl_shareScanner0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      MySharesView mySharesView0 = new MySharesView();
      assertNotNull(mySharesView0);
      assertEquals("MySharesView", mySharesView0.getPropertiesPrefix());
      
      shareManagerImpl0.removeListener(mySharesView0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals("MySharesView", mySharesView0.getPropertiesPrefix());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PlatformManagerImpl.DLL_NAME = "shares";
      shareManagerImpl0.addListener(mySharesView0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals("MySharesView", mySharesView0.getPropertiesPrefix());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      shareManagerImpl0.reportProgress(2021);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      shareManagerImpl0.scanShares();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      HashMap<ShareResourceFileImpl, Object> hashMap0 = new HashMap<ShareResourceFileImpl, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.torrentExists((ShareItemImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      shareManagerImpl0.cancelOperation();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      SystemTime.useRawProvider();
      MockFile mockFile0 = new MockFile("shares", "shares");
      assertNotNull(mockFile0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ShareResource shareResource0 = shareManagerImpl0.getShare(mockFile0);
      assertNull(shareResource0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/shares", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockFile mockFile0 = new MockFile("cache", "shares");
      assertNotNull(mockFile0);
      
      HashMap<ShareResourceDirContentsImpl, ShareResourceFileImpl> hashMap0 = new HashMap<ShareResourceDirContentsImpl, ShareResourceFileImpl>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ShareResourceDirContentsImpl shareResourceDirContentsImpl0 = new ShareResourceDirContentsImpl(shareManagerImpl0, mockFile0, true, hashMap0);
      assertNotNull(shareResourceDirContentsImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", shareResourceDirContentsImpl0.getName());
      assertTrue(shareResourceDirContentsImpl0.isRecursive());
      assertEquals(3, shareResourceDirContentsImpl0.getType());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      assertNotNull(indentWriter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("    ", indentWriter0.getTab());
      
      shareManagerImpl0.generate(indentWriter0, (ShareResourceDirContents) shareResourceDirContentsImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", shareResourceDirContentsImpl0.getName());
      assertTrue(shareResourceDirContentsImpl0.isRecursive());
      assertEquals(3, shareResourceDirContentsImpl0.getType());
      assertEquals("    ", indentWriter0.getTab());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      URL[] uRLArray0 = shareManagerImpl0.getAnnounceURLs();
      assertEquals(1, uRLArray0.length);
      assertNotNull(uRLArray0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      URL[] uRLArray1 = shareManagerImpl0.getAnnounceURLs();
      assertEquals(1, uRLArray1.length);
      assertNotNull(uRLArray1);
      assertSame(uRLArray1, uRLArray0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      shareManagerImpl0.reportError(mockError0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.readTorrent((ShareItemImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.writeTorrent((ShareItemImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      ShareManagerImpl shareManagerImpl1 = ShareManagerImpl.singleton;
      assertNull(shareManagerImpl1);
      
      // Undeclared exception!
      try { 
        shareManagerImpl0.deleteTorrent((ShareItemImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareManagerImpl", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null/cache1/0.torrent");
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ShareManagerImpl shareManagerImpl0 = ShareManagerImpl.getSingleton();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      String string0 = shareManagerImpl0.getNewTorrentLocation();
      assertEquals("cache1/1.torrent", string0);
      assertNotNull(string0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8782183066708504
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockFile mockFile0 = new MockFile("cache");
      assertNotNull(mockFile0);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("cache", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("cache", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      
      ShareResourceDirContents shareResourceDirContents0 = shareManagerImpl0.addDirContents((File) mockFile0, true, (Map<String, String>) null);
      assertNotNull(shareResourceDirContents0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("cache", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("cache", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(3, shareResourceDirContents0.getType());
      assertEquals("cache", shareResourceDirContents0.getName());
      assertTrue(shareResourceDirContents0.isRecursive());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      try { 
        shareManagerImpl0.addDir((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShareResource: Torrent create failed
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      MockFile mockFile0 = new MockFile("shares", "cache");
      assertNotNull(mockFile0);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/cache", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      
      ShareResourceDirContents shareResourceDirContents0 = shareManagerImpl0.addDirContents((File) mockFile0, true, (Map<String, String>) null);
      assertNotNull(shareResourceDirContents0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/cache", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(shareResourceDirContents0.isRecursive());
      assertEquals(3, shareResourceDirContents0.getType());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/cache", shareResourceDirContents0.getName());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      ShareResourceDirContents shareResourceDirContents1 = shareManagerImpl0.addDirContents((File) mockFile0, true, (Map<String, String>) null);
      assertFalse(shareResourceDirContents1.equals((Object)shareResourceDirContents0));
      assertNotNull(shareResourceDirContents1);
      assertNotSame(shareResourceDirContents1, shareResourceDirContents0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/cache", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(shareResourceDirContents1.isRecursive());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/shares/cache", shareResourceDirContents1.getName());
      assertEquals(3, shareResourceDirContents1.getType());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      shareManagerImpl0.addListener((ShareManagerListener) null);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockFile mockFile0 = new MockFile("cache", "shares");
      assertNotNull(mockFile0);
      
      try { 
        shareManagerImpl0.addDir((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Dir 'shares' not found
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3933121229745242
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      MockFile mockFile0 = new MockFile("cache");
      assertNotNull(mockFile0);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("cache", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      ShareResourceDirContents shareResourceDirContents0 = shareManagerImpl0.addDirContents((File) mockFile0, true, (Map<String, String>) null);
      assertNotNull(shareResourceDirContents0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("cache", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("cache", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(shareResourceDirContents0.isRecursive());
      assertEquals("cache", shareResourceDirContents0.getName());
      assertEquals(3, shareResourceDirContents0.getType());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      
      shareManagerImpl0.scanShares();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("cache/shares");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ShareManagerImpl shareManagerImpl0 = new ShareManagerImpl();
      assertNotNull(shareManagerImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      MockFile mockFile0 = new MockFile("cache", "shares");
      assertNotNull(mockFile0);
      
      shareManagerImpl0.initialise();
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      ShareHosterPlugin shareHosterPlugin0 = new ShareHosterPlugin();
      assertNotNull(shareHosterPlugin0);
      
      shareManagerImpl0.addListener(shareHosterPlugin0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      ShareResourceDirContentsImpl shareResourceDirContentsImpl0 = (ShareResourceDirContentsImpl)shareManagerImpl0.addDirContents((File) mockFile0, false, (Map<String, String>) null);
      assertNotNull(shareResourceDirContentsImpl0);
      assertFalse(shareManagerImpl0.isInitialising());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", shareResourceDirContentsImpl0.getName());
      assertEquals(3, shareResourceDirContentsImpl0.getType());
      assertFalse(shareResourceDirContentsImpl0.isRecursive());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      shareManagerImpl0.delete(shareResourceDirContentsImpl0, false);
      assertFalse(shareManagerImpl0.isInitialising());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("shares", mockFile0.getName());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/104_vuze/cache/shares", shareResourceDirContentsImpl0.getName());
      assertEquals(3, shareResourceDirContentsImpl0.getType());
      assertFalse(shareResourceDirContentsImpl0.isRecursive());
      assertEquals(1000, ShareManagerImpl.MAX_FILES_PER_DIR);
      assertEquals(1000, ShareManagerImpl.MAX_DIRS);
      
      try { 
        shareManagerImpl0.addFileOrDir(shareResourceDirContentsImpl0, mockFile0, (-427), true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShareResource: Torrent create failed
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileOrDirImpl", e);
      }
  }
}
