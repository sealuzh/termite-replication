/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:58:02 GMT 2018
 */

package com.aelitis.azureus.ui.common.table.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.ui.common.table.TableCellCore;
import com.aelitis.azureus.ui.common.table.TableColumnCore;
import com.aelitis.azureus.ui.common.table.TableRowCore;
import com.aelitis.azureus.ui.common.table.TableView;
import com.aelitis.azureus.ui.common.table.impl.TableColumnImpl;
import com.aelitis.azureus.ui.common.table.impl.TableViewImpl;
import com.aelitis.azureus.ui.swt.columns.torrent.ColumnThumbAndName;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.widgets.Event;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.gudy.azureus2.core3.config.impl.ConfigurationManager;
import org.gudy.azureus2.core3.download.DownloadManager;
import org.gudy.azureus2.core3.tracker.host.TRHostTorrent;
import org.gudy.azureus2.core3.util.IndentWriter;
import org.gudy.azureus2.plugins.tracker.TrackerTorrent;
import org.gudy.azureus2.plugins.ui.tables.TableCell;
import org.gudy.azureus2.plugins.ui.tables.TableCellAddedListener;
import org.gudy.azureus2.plugins.ui.tables.TableCellClipboardListener;
import org.gudy.azureus2.plugins.ui.tables.TableCellDisposeListener;
import org.gudy.azureus2.plugins.ui.tables.TableCellMouseEvent;
import org.gudy.azureus2.plugins.ui.tables.TableCellMouseListener;
import org.gudy.azureus2.plugins.ui.tables.TableCellRefreshListener;
import org.gudy.azureus2.plugins.ui.tables.TableCellVisibilityListener;
import org.gudy.azureus2.plugins.ui.tables.TableColumn;
import org.gudy.azureus2.plugins.ui.tables.TableContextMenuItem;
import org.gudy.azureus2.plugins.ui.tables.TableRowMouseEvent;
import org.gudy.azureus2.pluginsimpl.local.disk.DiskManagerFileInfoImpl;
import org.gudy.azureus2.pluginsimpl.local.download.DownloadImpl;
import org.gudy.azureus2.pluginsimpl.local.download.DownloadManagerImpl;
import org.gudy.azureus2.pluginsimpl.local.peers.PeerImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceDirContentsImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceDirImpl;
import org.gudy.azureus2.pluginsimpl.local.sharing.ShareResourceFileImpl;
import org.gudy.azureus2.pluginsimpl.local.tracker.TrackerTorrentImpl;
import org.gudy.azureus2.pluginsimpl.local.ui.tables.TableContextMenuItemImpl;
import org.gudy.azureus2.pluginsimpl.remote.disk.RPDiskManagerFileInfo;
import org.gudy.azureus2.pluginsimpl.remote.tracker.RPTrackerTorrent;
import org.gudy.azureus2.ui.swt.components.BufferedTableRow;
import org.gudy.azureus2.ui.swt.views.PeerSuperView;
import org.gudy.azureus2.ui.swt.views.clientstats.ColumnCS_Count;
import org.gudy.azureus2.ui.swt.views.clientstats.ColumnCS_Discarded;
import org.gudy.azureus2.ui.swt.views.clientstats.ColumnCS_Name;
import org.gudy.azureus2.ui.swt.views.clientstats.ColumnCS_Pct;
import org.gudy.azureus2.ui.swt.views.clientstats.ColumnCS_Sent;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_ChosenColumn;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Info;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_NameInfo;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Sample;
import org.gudy.azureus2.ui.swt.views.table.TableCellSWT;
import org.gudy.azureus2.ui.swt.views.table.TableOrTreeSWT;
import org.gudy.azureus2.ui.swt.views.table.TableRowSWT;
import org.gudy.azureus2.ui.swt.views.table.impl.FakeTableCell;
import org.gudy.azureus2.ui.swt.views.table.impl.TableCellImpl;
import org.gudy.azureus2.ui.swt.views.table.impl.TableCellSWTBase;
import org.gudy.azureus2.ui.swt.views.table.impl.TableRowImpl;
import org.gudy.azureus2.ui.swt.views.table.impl.TableViewSWTImpl;
import org.gudy.azureus2.ui.swt.views.table.painted.TableCellPainted;
import org.gudy.azureus2.ui.swt.views.table.painted.TableRowPainted;
import org.gudy.azureus2.ui.swt.views.table.painted.TableViewPainted;
import org.gudy.azureus2.ui.swt.views.tableitems.files.NameItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TableColumnImpl_ESTest extends TableColumnImpl_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9661755171495705
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info(";isp.sr");
      columnTC_Info0.setPreferredWidthMax(120);
      columnTC_Info0.setWidth(120);
      assertEquals(120, columnTC_Info0.getWidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("; dispose=");
      columnTC_ChosenColumn0.setTableID("; dispose=");
      assertEquals("; dispose=", columnTC_ChosenColumn0.getTableID());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("TableColumnChosenColumn");
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("0");
      columnTC_Info0.setIconReference("0", true);
      columnTC_Info0.getTitleLanguageKey();
      NameItem nameItem0 = null;
      try {
        nameItem0 = new NameItem();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo(";tV/~I&\"&|");
      columnTC_NameInfo0.setSortValueLive(true);
      boolean boolean0 = columnTC_NameInfo0.hasCellRefreshListener();
      assertTrue(columnTC_NameInfo0.isSortValueLive());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1230455536602144
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      int int0 = columnTC_ChosenColumn0.getMinWidth();
      assertEquals(16, int0);
      
      columnTC_ChosenColumn0.remove();
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("", "");
      tableColumnImpl0.setConsecutiveErrCount((-490));
      assertEquals((-490), tableColumnImpl0.getConsecutiveErrCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("AllPeers");
      int int0 = columnTC_NameInfo0.getMinWidth();
      assertEquals(16, int0);
      
      boolean boolean0 = columnTC_NameInfo0.isMaxWidthAuto();
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(boolean0);
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertEquals(2, columnTC_NameInfo0.getType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("d|?l");
      columnTC_NameInfo0.hasCellMouseMoveListener();
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      
      columnTC_NameInfo0.setMaxWidthAuto(true);
      assertEquals((-1), columnTC_NameInfo0.getPosition());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("$XAEdF_I'7=$");
      ToLongFunction<DownloadImpl> toLongFunction0 = (ToLongFunction<DownloadImpl>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      columnTC_Info0.getContextMenuItems(0);
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      columnTC_Info0.invokeCellMouseListeners(tableCellMouseEvent0);
      columnTC_Info0.setAlignment(4);
      columnTC_Info0.isMinWidthAuto();
      ColumnCS_Pct columnCS_Pct0 = new ColumnCS_Pct(columnTC_Info0);
      columnTC_Info0.addListeners(tableCellMouseEvent0);
      assertEquals(2, columnTC_Info0.getAlignment());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("4!\t%02-<");
      columnTC_ChosenColumn0.setVisible(true);
      columnTC_ChosenColumn0.isMinWidthAuto();
      Comparator comparator0 = columnTC_ChosenColumn0.reversed();
      columnTC_ChosenColumn0.thenComparing(comparator0);
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample((String) null);
      columnTC_ChosenColumn0.getPreferredWidth();
      ColumnThumbAndName columnThumbAndName0 = null;
      try {
        columnThumbAndName0 = new ColumnThumbAndName("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info((String) null);
      columnTC_Info0.setDefaultSortAscending(false);
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      boolean boolean0 = columnTC_Info0.hasCellRefreshListener();
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(boolean0);
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("}<~H3^3R");
      StringWriter stringWriter0 = new StringWriter(1478);
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      columnTC_Info0.removeUserData("MyTracker");
      columnTC_Info0.getForDataSourceType();
      columnTC_Info0.showOnlyImage();
      columnTC_Info0.setPreferredWidthMax((-2511));
      columnTC_Info0.invalidateCells();
      Class<TableRowPainted> class0 = TableRowPainted.class;
      columnTC_Info0.addDataSourceType(class0);
      columnTC_Info0.preAdd();
      columnTC_Info0.invalidateCells();
      assertEquals((-2511), columnTC_Info0.getPreferredWidthMax());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("Bm=io~?t2hm");
      columnTC_NameInfo0.setLastSortValueChange(315360000L);
      boolean boolean0 = columnTC_NameInfo0.hasCellMouseMoveListener();
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals("Bm=io~?t2hm", columnTC_NameInfo0.getTableID());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(boolean0);
      assertEquals(2, columnTC_NameInfo0.getType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("}<~HA33R");
      String string0 = TableColumn.CAT_CONTENT;
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("}<~HA33R");
      columnTC_Info0.isObfusticated();
      columnTC_Info0.setLastSortValueChange(1478);
      columnTC_Info0.setMinimumRequiredUserMode(1478);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTraer");
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertNull(class0);
      
      columnTC_Info0.addDataSourceType((Class<?>) null);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("MyTraer", columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("ui.startfirst");
      columnTC_Info0.setSortAscending(true);
      // Undeclared exception!
      try { 
        columnTC_Info0.compare("ui.startfirst", "ui.startfirst");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.aelitis.azureus.ui.common.table.TableRowCore
         //
         verifyException("com.aelitis.azureus.ui.common.table.impl.TableColumnImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample(":");
      HashMap<ColumnThumbAndName, ColumnTC_Sample.Cell> hashMap0 = new HashMap<ColumnThumbAndName, ColumnTC_Sample.Cell>();
      columnTC_Sample0.getPreferredWidthMax();
      columnTC_Sample0.reset();
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(":", columnTC_Sample0.getTableID());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isSortAscending());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("lLastSortValueChange=");
      Class<ShareResourceDirImpl> class0 = ShareResourceDirImpl.class;
      columnTC_NameInfo0.handlesDataSourceType(class0);
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals("lLastSortValueChange=", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.915440198216515
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      Class<ColumnTC_ChosenColumn> class0 = ColumnTC_ChosenColumn.class;
      boolean boolean0 = columnTC_Info0.handlesDataSourceType(class0);
      assertFalse(boolean0);
      
      Class class1 = columnTC_Info0.getForDataSourceType();
      assertNotNull(class1);
      assertEquals("interface org.gudy.azureus2.plugins.tracker.TrackerTorrent", class1.toString());
      
      columnTC_Info0.setVisible(false);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8233967898648364
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("making space for LAN peer in doOptimisticDisconnect()", "making space for LAN peer in doOptimisticDisconnect()");
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("making space for LAN peer in doOptimisticDisconnect()");
      tableColumnImpl0.removeCellAddedListener(columnTC_Sample0);
      PeerSuperView peerSuperView0 = new PeerSuperView();
      assertEquals("AllPeersView", peerSuperView0.getPropertiesPrefix());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0652832886135526
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Protocol");
      columnTC_Info0.removeCellMouseListener((TableCellMouseListener) null);
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertEquals(0L, long0);
      
      Class<ShareResourceFileImpl> class0 = ShareResourceFileImpl.class;
      columnTC_Info0.addDataSourceType(class0);
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("Protocol", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("NEJGKCS3]pe[");
      columnTC_NameInfo0.invalidateCell("NEJGKCS3]pe[");
      boolean boolean0 = columnTC_NameInfo0.hasCellRefreshListener();
      assertEquals(2, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals("NEJGKCS3]pe[", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.898023387111105
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("AllPeers");
      columnTC_ChosenColumn0.setMinWidthAuto(true);
      columnTC_ChosenColumn0.getTitleLanguageKey();
      assertTrue(columnTC_ChosenColumn0.isMinWidthAuto());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("AllPeers");
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("/ZXjJ");
      columnTC_Info0.removeCellToolTipListener(columnTC_NameInfo0);
      assertEquals(2, columnTC_NameInfo0.getType());
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("AllPeers", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("&");
      columnTC_ChosenColumn0.preAdd();
      int int0 = columnTC_ChosenColumn0.getConsecutiveErrCount();
      assertEquals(0, int0);
      
      columnTC_ChosenColumn0.setMinimumRequiredUserMode(500);
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, columnTC_ChosenColumn0, 16);
      tableCellImpl0.setSortValue((-440.3204F));
      columnTC_ChosenColumn0.isPreferredWidthAuto();
      columnTC_ChosenColumn0.getCellAddedListeners();
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("&", columnTC_ChosenColumn0.getTableID());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl(", borderColor=", ", borderColor=");
      tableColumnImpl0.setUserData(", borderColor=", ", borderColor=");
      tableColumnImpl0.setMinWidthAuto(false);
      tableColumnImpl0.getForDataSourceTypes();
      tableColumnImpl0.addCellOtherListener(" =+G-{YnZ0kie$[}ary", ", borderColor=");
      Class[] classArray0 = tableColumnImpl0.getForDataSourceTypes();
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals(0, classArray0.length);
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn(" =+G-{YnZ0kie$[}ary");
      boolean boolean0 = columnTC_ChosenColumn0.isPreferredWidthAuto();
      assertTrue(boolean0);
      
      columnTC_ChosenColumn0.getCellAddedListeners();
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(" =+G-{YnZ0kie$[}ary", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(3, columnTC_ChosenColumn0.getType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8538800147028
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTeaker");
      columnTC_Info0.getCellAddedListeners();
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(class0);
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals("MyTeaker", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4185613241999815
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("I<oJ");
      boolean boolean0 = columnTC_NameInfo0.hasCellMouseMoveListener();
      assertTrue(boolean0);
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      columnTC_NameInfo0.invokeCellMouseListeners(tableCellMouseEvent0);
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("I<oJ", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(415, columnTC_NameInfo0.getWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9401243333353364
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("DLedFromOthers");
      columnTC_Info0.addRefreshTime(0L);
      columnTC_Info0.getLastSortValueChange();
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals("DLedFromOthers", columnTC_Info0.getTableID());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.687219894750558
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("6XAK}/~;6U!!");
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumn) columnTC_NameInfo0, (Object) columnTC_NameInfo0);
      columnTC_NameInfo0.refresh(fakeTableCell0);
      columnTC_NameInfo0.invokeCellDisposeListeners(fakeTableCell0);
      assertFalse(columnTC_NameInfo0.isVisible());
      
      columnTC_NameInfo0.setVisible(true);
      assertEquals(0, columnTC_NameInfo0.getPosition());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3784011886885814
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<ShareResourceFileImpl, Float> hashMap0 = new HashMap<ShareResourceFileImpl, Float>();
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("^W3<@'F/5DtG!\\0%");
      columnTC_NameInfo0.getUserData("^W3<@'F/5DtG!\\0%");
      columnTC_NameInfo0.invalidateCell((Object) null);
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals("^W3<@'F/5DtG!\\0%", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl((String) null, (String) null);
      boolean boolean0 = tableColumnImpl0.isVisible();
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(boolean0);
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertEquals(50, tableColumnImpl0.getWidth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.230923730266658
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      ColumnCS_Count columnCS_Count0 = new ColumnCS_Count(columnTC_Info0);
      columnTC_Info0.removeCellRefreshListener(columnCS_Count0);
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertEquals(50, columnTC_Info0.getWidth());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.268912946388149
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn(".^43ZM9d2>F");
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample(".^43ZM9d2>F");
      columnTC_ChosenColumn0.addCellAddedListener(columnTC_Sample0);
      ColumnTC_Sample columnTC_Sample1 = new ColumnTC_Sample(".^43ZM9d2>F");
      columnTC_ChosenColumn0.addCellAddedListener(columnTC_Sample1);
      assertEquals(16, columnTC_Sample1.getMinWidth());
      assertEquals(120, columnTC_Sample1.getWidth());
      assertEquals((-2), columnTC_Sample1.getRefreshInterval());
      
      columnTC_ChosenColumn0.reversed();
      columnTC_ChosenColumn0.setMinimumRequiredUserMode(270);
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(".^43ZM9d2>F", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.146833351308301
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTeaker");
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("TableColumnInfo");
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumnCore) columnTC_Sample0, (Object) "TableColumnInfo");
      columnTC_Info0.invokeCellAddedListeners(fakeTableCell0);
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(120, columnTC_Sample0.getWidth());
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("MyTeaker", columnTC_Info0.getTableID());
      assertNull(class0);
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(150, columnTC_Info0.getWidth());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("d'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TableColumnChosenColumn");
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      columnTC_ChosenColumn0.generateDiagnostics(indentWriter0);
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("d'", columnTC_ChosenColumn0.getTableID());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(3, columnTC_ChosenColumn0.getType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("B-X33vCnz");
      columnTC_Info0.setDefaultSortAscending(true);
      int int0 = columnTC_Info0.getRefreshInterval();
      assertEquals((-3), int0);
      
      HashMap<ShareResourceFileImpl, Float> hashMap0 = new HashMap<ShareResourceFileImpl, Float>();
      columnTC_Info0.triggerColumnSizeChange(4909);
      ColumnTC_Info columnTC_Info1 = new ColumnTC_Info("TableColumnInfo");
      columnTC_Info0.invalidateCells();
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("B-X33vCnz", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0805765279063007
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("G/. 1}Ng&`7");
      TableCellPainted tableCellPainted0 = new TableCellPainted((TableRowSWT) null, columnTC_Info0, 737);
      tableCellPainted0.getWidthRaw();
      try { 
        columnTC_Info0.invokeCellRefreshListeners(tableCellPainted0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Info", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("; mm=");
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      columnTC_ChosenColumn0.setMinimumRequiredUserMode(0);
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals("; mm=", columnTC_ChosenColumn0.getTableID());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info(")n\u0005K<B;+");
      columnTC_Info0.setWidthLimits((-1372), (-1372));
      assertEquals(150, columnTC_Info0.getMinWidth());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.269639374604125
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("MW8#?y-");
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(120, columnTC_Sample0.getWidth());
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MW8#?y-");
      columnTC_Info0.setWidth(3);
      assertEquals("MW8#?y-", columnTC_Info0.getTableID());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3327327311026895
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("outgoingreqcount");
      boolean boolean0 = columnTC_NameInfo0.hasCellRefreshListener();
      assertTrue(boolean0);
      
      columnTC_NameInfo0.addCellOtherListener("outgoingreqcount", "outgoingreqcount");
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals("outgoingreqcount", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTeaker");
      columnTC_Info0.removeContextMenuItem((TableContextMenuItem) null);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTeaker", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.898023387111105
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("AllPeers");
      columnTC_ChosenColumn0.addRefreshTime(1L);
      String string0 = columnTC_ChosenColumn0.getTitleLanguageKey();
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertNotNull(string0);
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("!TableColumnChosenColumn!", string0);
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("AllPeers", columnTC_ChosenColumn0.getTableID());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("N~1W =%66M/7`WJ4P;");
      columnTC_Info0.setPreferredWidth(546);
      assertEquals(546, columnTC_Info0.getPreferredWidth());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("^39/sT");
      columnTC_Info0.setPreferredWidth(2);
      columnTC_Info0.reset();
      assertEquals(16, columnTC_Info0.getPreferredWidth());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4583113296830845
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info(" (Live Sort)");
      columnTC_Info0.setPreferredWidthMax((-1383));
      columnTC_Info0.getLastSortValueChange();
      assertEquals((-1383), columnTC_Info0.getPreferredWidthMax());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Protocol");
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, columnTC_Info0, (-1846));
      tableCellImpl0.setSortValue(934.66F);
      try { 
        columnTC_Info0.invokeCellRefreshListeners(tableCellImpl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Info", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MySeeders.big");
      columnTC_Info0.triggerColumnSizeChange(907);
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      columnTC_Info0.thenComparingLong(toLongFunction0);
      String string0 = columnTC_Info0.getIconReference();
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(string0);
      assertEquals("MySeeders.big", columnTC_Info0.getTableID());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.016576491357352
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      columnTC_Info0.triggerColumnSizeChange(842);
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertNotNull(class0);
      assertEquals("interface org.gudy.azureus2.plugins.tracker.TrackerTorrent", class0.toString());
      
      String string0 = columnTC_Info0.getTitleLanguageKey();
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("!TableColumnInfo!", string0);
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertNotNull(string0);
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.488327743368588
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Set-cookie");
      columnTC_Info0.setWidthLimits((-1472443645), 6);
      assertEquals(6, columnTC_Info0.getMaxWidth());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6023807799324814
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<ShareResourceFileImpl, Float> hashMap0 = new HashMap<ShareResourceFileImpl, Float>();
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("f9b,K `/dK/mW");
      columnTC_Sample0.setPreferredWidth(2253);
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("TableColumnSample");
      columnTC_Info0.setMaxWidth(2253);
      columnTC_Info0.setWidthLimits(3360, 2253);
      columnTC_Sample0.hasCellMouseMoveListener();
      assertEquals(2253, columnTC_Sample0.getPreferredWidth());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.171115529932704
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("C\tmXm");
      columnTC_Info0.setWidthLimits(546, (-1189));
      assertEquals(546, columnTC_Info0.getMinWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1506161048031833
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("TableColumn");
      columnTC_Info0.setWidthLimits(150, 3);
      assertEquals(3, columnTC_Info0.getMaxWidth());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("&");
      columnTC_Sample0.getCellOtherListeners("&");
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals("&", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      columnTC_ChosenColumn0.addColumnExtraInfoListener(columnTC_ChosenColumn0);
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn0.getTableID());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8387986929374454
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("AllPeers");
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("AllPeers");
      columnTC_Info0.invokeCellRefreshListeners((TableCell) null, false);
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("AllPeers", columnTC_Info0.getTableID());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(150, columnTC_Info0.getWidth());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.065283288613552
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info((String) null);
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumnCore) columnTC_Info0, (Object) null);
      columnTC_Info0.invokeCellRefreshListeners(fakeTableCell0, false);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("Unopened.big");
      columnTC_Sample0.postConfigLoad();
      columnTC_Sample0.isInplaceEdit();
      columnTC_Sample0.isRemoved();
      StringWriter stringWriter0 = new StringWriter(4544);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.645449071886851
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MySeeders.big");
      columnTC_Info0.triggerColumnSizeChange(907);
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("MySeeders.big");
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      
      columnTC_NameInfo0.setPreferredWidthMax(907);
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("TableColumnNameInfo");
      columnTC_Sample0.addCellRefreshListener(columnTC_NameInfo0);
      columnTC_Info0.getForDataSourceTypes();
      columnTC_NameInfo0.setMinimumRequiredUserMode(907);
      assertEquals((-1), columnTC_NameInfo0.getPosition());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3056044915866347
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("", "");
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("H2\"");
      ColumnCS_Count columnCS_Count0 = new ColumnCS_Count(columnTC_Info0);
      tableColumnImpl0.removeCellRefreshListener(columnCS_Count0);
      PeerSuperView peerSuperView0 = new PeerSuperView();
      org.gudy.azureus2.ui.swt.views.tableitems.mytorrents.NameItem nameItem0 = null;
      try {
        nameItem0 = new org.gudy.azureus2.ui.swt.views.tableitems.mytorrents.NameItem("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("}<~H3^3R");
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("}<~H3^3R", columnTC_ChosenColumn0.getTableID());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("TableColumnChosenColumn");
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertNotNull(columnTC_NameInfo0);
      
      ColumnTC_NameInfo columnTC_NameInfo1 = new ColumnTC_NameInfo("TableColumnNameInfo");
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertNotNull(columnTC_NameInfo1);
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      
      columnTC_NameInfo0.removeCellMouseMoveListener(columnTC_NameInfo1);
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      int int0 = columnTC_NameInfo0.getAlignment();
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertEquals(5, int0);
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
      
      boolean boolean0 = columnTC_NameInfo0.isMaxWidthAuto();
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertFalse(boolean0);
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("-X33Yvnz");
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals("-X33Yvnz", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.setSortAscending(false);
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals("-X33Yvnz", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      
      boolean boolean0 = columnTC_NameInfo0.hasCellRefreshListener();
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals("-X33Yvnz", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(boolean0);
      
      Object[] objectArray0 = columnTC_NameInfo0.getCellOtherListeners("-X33Yvnz");
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals("-X33Yvnz", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(objectArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3985790243745666
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("My65Teaker");
      assertEquals("My65Teaker", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertNotNull(columnTC_NameInfo0);
      
      ColumnTC_NameInfo columnTC_NameInfo1 = new ColumnTC_NameInfo("My65Teaker");
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("My65Teaker", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertNotNull(columnTC_NameInfo1);
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      
      columnTC_NameInfo0.removeCellMouseListener(columnTC_NameInfo1);
      assertEquals("My65Teaker", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("My65Teaker", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      boolean boolean0 = columnTC_NameInfo0.hasCellMouseMoveListener();
      assertEquals("My65Teaker", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertTrue(boolean0);
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "TableColumnSample";
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("TableColumnSample");
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnSample", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setColumnAdded();
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnSample", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      
      columnTC_Info0.setWidthLimits(6, 3);
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnSample", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(3, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      
      ColumnCS_Count columnCS_Count0 = null;
      try {
        columnCS_Count0 = new ColumnCS_Count(columnTC_Info0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't set properties. Column 'TableColumnInfo already added
         //
         verifyException("com.aelitis.azureus.ui.common.table.impl.TableColumnImpl", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1546193098639694
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Tdi@3");
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertNotNull(columnTC_Info0);
      
      TableCellPainted tableCellPainted0 = new TableCellPainted((TableRowSWT) null, columnTC_Info0, 2305);
      assertFalse(tableCellPainted0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(tableCellPainted0.needsPainting());
      assertFalse(tableCellPainted0.getVisuallyChangedSinceRefresh());
      assertEquals(0, tableCellPainted0.getMarginHeight());
      assertFalse(tableCellPainted0.isDisposed());
      assertFalse(tableCellPainted0.getFillCell());
      assertFalse(tableCellPainted0.isValid());
      assertEquals(1, tableCellPainted0.getMaxLines());
      assertEquals(255, tableCellPainted0.getTextAlpha());
      assertEquals(0, tableCellPainted0.getCursorID());
      assertFalse(tableCellPainted0.isUpToDate());
      assertEquals(0, tableCellPainted0.getMarginWidth());
      assertEquals("", tableCellPainted0.getText());
      assertNotNull(tableCellPainted0);
      
      boolean boolean0 = tableCellPainted0.setText("TableColumnInfo");
      assertFalse(tableCellPainted0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(tableCellPainted0.needsPainting());
      assertEquals(0, tableCellPainted0.getMarginHeight());
      assertFalse(tableCellPainted0.isDisposed());
      assertFalse(tableCellPainted0.getFillCell());
      assertFalse(tableCellPainted0.isValid());
      assertEquals(1, tableCellPainted0.getMaxLines());
      assertTrue(tableCellPainted0.getVisuallyChangedSinceRefresh());
      assertEquals(255, tableCellPainted0.getTextAlpha());
      assertEquals(0, tableCellPainted0.getCursorID());
      assertFalse(tableCellPainted0.isUpToDate());
      assertEquals("TableColumnInfo", tableCellPainted0.getText());
      assertEquals(0, tableCellPainted0.getMarginWidth());
      assertTrue(boolean0);
      
      try { 
        columnTC_Info0.invokeCellRefreshListeners(tableCellPainted0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Info", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.242973226438147
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Unopened");
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("Unopened", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNotNull(columnTC_Info0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("Unopened", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1537, class0.getModifiers());
      assertEquals("interface org.gudy.azureus2.plugins.download.Download", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertNotNull(class0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0707496021528033
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNotNull(columnTC_Info0);
      
      String string0 = columnTC_Info0.getTitleLanguageKey();
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNotNull(string0);
      assertEquals("!TableColumnInfo!", string0);
      
      columnTC_Info0.setVisible(true);
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(0, columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(0, columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(0L, long0);
      
      columnTC_Info0.initialize((-1914), (-1914), 723, (-60));
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1914), columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals((-60), columnTC_Info0.getRefreshInterval());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(723, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1914), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1546193098639694
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("0");
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertNotNull(columnTC_Info0);
      
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, columnTC_Info0, 0);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertEquals("", tableCellImpl0.getText());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.isValid());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertNotNull(tableCellImpl0);
      
      boolean boolean0 = tableCellImpl0.setSortValue((Comparable) null);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertEquals("", tableCellImpl0.getText());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.isValid());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertFalse(boolean0);
      
      try { 
        columnTC_Info0.invokeCellRefreshListeners(tableCellImpl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_Info", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("AllPeers");
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals("AllPeers", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("AllPeers");
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_ChosenColumn0.removeColumnExtraInfoListener(columnTC_NameInfo0);
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals("AllPeers", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("MyTeaker");
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("MyTeaker", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_ChosenColumn0.setPreferredWidthAuto(false);
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("MyTeaker", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("quB");
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals("quB", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNotNull(columnTC_NameInfo0);
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("TableColumnNameInfo");
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_ChosenColumn0.preAdd();
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      
      int int0 = columnTC_ChosenColumn0.getConsecutiveErrCount();
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, int0);
      
      columnTC_ChosenColumn0.setMinWidthAuto(false);
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, columnTC_NameInfo0, 2591);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals("quB", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(tableCellImpl0.isUpToDate());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(1, tableCellImpl0.getMarginHeight());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(1, tableCellImpl0.getMarginWidth());
      assertTrue(tableCellImpl0.needsPainting());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals("", tableCellImpl0.getText());
      assertNotNull(tableCellImpl0);
      
      boolean boolean0 = tableCellImpl0.setSortValue((-532.3F));
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals("quB", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(tableCellImpl0.isUpToDate());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(1, tableCellImpl0.getMarginHeight());
      assertTrue(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(1, tableCellImpl0.getMarginWidth());
      assertTrue(tableCellImpl0.needsPainting());
      assertFalse(tableCellImpl0.isDisposed());
      assertEquals("", tableCellImpl0.getText());
      assertTrue(boolean0);
      
      boolean boolean1 = columnTC_ChosenColumn0.inplaceValueSet(tableCellImpl0, "TableColumnNameInfo", false);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals("quB", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(tableCellImpl0.isUpToDate());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(1, tableCellImpl0.getMarginHeight());
      assertTrue(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(1, tableCellImpl0.getMarginWidth());
      assertTrue(tableCellImpl0.needsPainting());
      assertFalse(tableCellImpl0.isDisposed());
      assertEquals("", tableCellImpl0.getText());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = columnTC_ChosenColumn0.isPreferredWidthAuto();
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnNameInfo", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1112976110789727
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("MW8#?y-");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertNotNull(columnTC_Sample0);
      
      List list0 = columnTC_Sample0.getCellAddedListeners();
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      long long0 = columnTC_Sample0.getLastSortValueChange();
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0L, long0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Sample0.getContextMenuItems(3);
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "+Fn";
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("GJUTMY>!l_RG^r");
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("GJUTMY>!l_RG^r", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setPreferredWidthMax(16777232);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("GJUTMY>!l_RG^r", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(16777232, columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      
      ToDoubleFunction<NameItem> toDoubleFunction0 = (ToDoubleFunction<NameItem>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator comparator0 = Comparator.comparingDouble((ToDoubleFunction) toDoubleFunction0);
      assertNotNull(comparator0);
      
      int int0 = columnTC_Info0.getMaxWidth();
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("GJUTMY>!l_RG^r", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(16777232, columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), int0);
      
      HashMap<PeerImpl, ColumnCS_Name> hashMap0 = new HashMap<PeerImpl, ColumnCS_Name>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      columnTC_Info0.loadSettings(hashMap0);
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("GJUTMY>!l_RG^r", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(16777232, columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("+Fn");
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals("+Fn", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertNotNull(columnTC_Sample0);
      
      Class<TableContextMenuItemImpl> class0 = TableContextMenuItemImpl.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[8];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_Info0;
      tableColumnCoreArray0[1] = (TableColumnCore) columnTC_Sample0;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_Info0;
      tableColumnCoreArray0[3] = (TableColumnCore) columnTC_Sample0;
      tableColumnCoreArray0[4] = (TableColumnCore) columnTC_Sample0;
      tableColumnCoreArray0[5] = (TableColumnCore) columnTC_Sample0;
      tableColumnCoreArray0[6] = (TableColumnCore) columnTC_Info0;
      tableColumnCoreArray0[7] = (TableColumnCore) columnTC_Info0;
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "GJUTMY>!l_RG^r", "+Fn", tableColumnCoreArray0, "TableColumnSample", 16777232);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals(0, tableViewPainted0.getRowCount());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertFalse(tableViewPainted0.isDragging());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals("", tableViewPainted0.getFilterText());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertEquals("GJUTMY>!l_RG^r", tableViewPainted0.getTableID());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertEquals("+Fn", tableViewPainted0.getPropertiesPrefix());
      assertEquals(8, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      // Undeclared exception!
      try { 
        tableViewPainted0.getTableCell((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.table.painted.TableViewPainted", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("%ailed");
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals("%ailed", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertNotNull(columnTC_NameInfo0);
      
      ColumnTC_NameInfo columnTC_NameInfo1 = new ColumnTC_NameInfo("TableColumnNameInfo");
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertNotNull(columnTC_NameInfo1);
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      
      columnTC_NameInfo0.addCellMouseMoveListener(columnTC_NameInfo1);
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals("%ailed", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_NameInfo0.getContextMenuItems((-48941788));
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals("%ailed", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
      assertFalse(columnTC_NameInfo0.equals((Object)columnTC_NameInfo1));
      assertNotSame(columnTC_NameInfo0, columnTC_NameInfo1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3348985622018286
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("C\tXm", "!");
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isVisible());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertNull(tableColumnImpl0.getIconReference());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals("C\tXm", tableColumnImpl0.getTableID());
      assertEquals("!", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertNotNull(tableColumnImpl0);
      
      tableColumnImpl0.addCellOtherListener("!", (Object) null);
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isVisible());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertNull(tableColumnImpl0.getIconReference());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals("C\tXm", tableColumnImpl0.getTableID());
      assertEquals("!", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      
      Class[] classArray0 = tableColumnImpl0.getForDataSourceTypes();
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isVisible());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertNull(tableColumnImpl0.getIconReference());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals("C\tXm", tableColumnImpl0.getTableID());
      assertEquals("!", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[5];
      tableColumnCoreArray0[1] = (TableColumnCore) tableColumnImpl0;
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("!");
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("!", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_ChosenColumn0.setMinWidthAuto(true);
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("!", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, tableColumnCoreArray0[1], (-1935301426));
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNotNull(tableCellImpl0);
      
      boolean boolean0 = tableCellImpl0.setSortValue(100.0F);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertEquals(5, tableColumnCoreArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = columnTC_ChosenColumn0.inplaceValueSet(tableCellImpl0, "qaU^5cvHd|90Uln5;", true);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("!", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertEquals(5, tableColumnCoreArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = columnTC_ChosenColumn0.isPreferredWidthAuto();
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("!", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      List list0 = columnTC_ChosenColumn0.getCellAddedListeners();
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("!", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.242390013225787
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTtuc~er");
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("MyTtuc~er", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setColumnAdded();
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("MyTtuc~er", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      
      columnTC_Info0.setColumnAdded();
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("MyTtuc~er", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      
      columnTC_Info0.setWidthLimits(77, 77);
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("MyTtuc~er", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(77, columnTC_Info0.getMinWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(77, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(77, columnTC_Info0.getMaxWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("; vis=");
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("; vis=", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertNotNull(columnTC_ChosenColumn0);
      
      long long0 = columnTC_ChosenColumn0.getLastSortValueChange();
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("; vis=", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(0L, long0);
      
      List<TableCellRefreshListener> list0 = columnTC_ChosenColumn0.getCellRefreshListeners();
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("; vis=", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("}<~H3^3R");
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("}<~H3^3R", columnTC_ChosenColumn0.getTableID());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertNotNull(columnTC_ChosenColumn0);
      
      StringWriter stringWriter0 = new StringWriter(1478);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("    ", indentWriter0.getTab());
      assertNotNull(indentWriter0);
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("TableColumnChosenColumn");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_Sample0.getTableID());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.removeCellAddedListener((TableCellAddedListener) null);
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_Sample0.getTableID());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1220577460600016
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("MyLibrary.big");
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertNotNull(columnTC_Sample0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Sample0.getContextMenuItems((-1952789126));
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
      
      Class[] classArray0 = columnTC_Sample0.getForDataSourceTypes();
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, classArray0.length);
      assertNotNull(classArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.2880227662042087
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("wpf");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals("wpf", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.removeUserData("wpf");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals("wpf", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Sample0.getContextMenuItems((-1124));
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals("wpf", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
      
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumn) columnTC_Sample0, (Object) "wpf");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals("wpf", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertFalse(fakeTableCell0.isUpToDate());
      assertFalse(fakeTableCell0.isValid());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertNull(fakeTableCell0.getObfusticatedText());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.isShown());
      assertTrue(fakeTableCell0.isDisposed());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getCursorID());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertTrue(fakeTableCell0.needsPainting());
      assertNotNull(fakeTableCell0);
      
      columnTC_Sample0.invokeCellRefreshListeners(fakeTableCell0, false);
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals("wpf", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertFalse(fakeTableCell0.isUpToDate());
      assertFalse(fakeTableCell0.isValid());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertNull(fakeTableCell0.getObfusticatedText());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.isShown());
      assertTrue(fakeTableCell0.isDisposed());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getCursorID());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertTrue(fakeTableCell0.needsPainting());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn0.getTableID());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("TableColumnChosenColumn");
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals("TableColumnChosenColumn", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.addDataSourceTypes((Class[]) null);
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals("TableColumnChosenColumn", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      
      columnTC_Info0.removeUserData("TableColumnChosenColumn");
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals("TableColumnChosenColumn", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.634161779538392
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo((String) null);
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertNull(columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertNotNull(columnTC_NameInfo0);
      
      ColumnCS_Sent columnCS_Sent0 = new ColumnCS_Sent(columnTC_NameInfo0);
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getAlignment());
      assertEquals(80, columnTC_NameInfo0.getWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-2), columnTC_NameInfo0.getPosition());
      assertNull(columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertNotNull(columnCS_Sent0);
      
      columnTC_NameInfo0.removeCellOtherListener("Wn38~DDi{G", columnCS_Sent0);
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getAlignment());
      assertEquals(80, columnTC_NameInfo0.getWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-2), columnTC_NameInfo0.getPosition());
      assertNull(columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumn) columnTC_NameInfo0, (Object) null);
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getAlignment());
      assertEquals(80, columnTC_NameInfo0.getWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-2), columnTC_NameInfo0.getPosition());
      assertNull(columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(fakeTableCell0.isValid());
      assertFalse(fakeTableCell0.isUpToDate());
      assertTrue(fakeTableCell0.isShown());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertEquals(0, fakeTableCell0.getCursorID());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertTrue(fakeTableCell0.needsPainting());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertTrue(fakeTableCell0.isDisposed());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertNull(fakeTableCell0.getObfusticatedText());
      assertNotNull(fakeTableCell0);
      
      columnTC_NameInfo0.invokeCellDisposeListeners(fakeTableCell0);
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getAlignment());
      assertEquals(80, columnTC_NameInfo0.getWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals((-2), columnTC_NameInfo0.getPosition());
      assertNull(columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(fakeTableCell0.isValid());
      assertFalse(fakeTableCell0.isUpToDate());
      assertTrue(fakeTableCell0.isShown());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertEquals(0, fakeTableCell0.getCursorID());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertTrue(fakeTableCell0.needsPainting());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertTrue(fakeTableCell0.isDisposed());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertNull(fakeTableCell0.getObfusticatedText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7516666169315167
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("AllPeers");
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.removeCellToolTipListener(columnTC_NameInfo0);
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      
      boolean boolean0 = columnTC_NameInfo0.hasCellRefreshListener();
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("AllPeers", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("AllPeers");
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals("AllPeers", columnTC_ChosenColumn0.getTableID());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNotNull(columnTC_ChosenColumn0);
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertNotNull(tableCellMouseEvent0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("TableColumnChosenColumn");
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.addCellMouseListener(columnTC_NameInfo0);
      assertEquals("TableColumnChosenColumn", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      
      boolean boolean0 = columnTC_ChosenColumn0.hasCellRefreshListener();
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals("AllPeers", columnTC_ChosenColumn0.getTableID());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4463822782062867
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("Tdi@3");
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.triggerColumnSizeChange((-21));
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      
      columnTC_NameInfo0.invokeCellDisposeListeners((TableCell) null);
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.4473295314451593
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("6&_I");
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("6&_I", columnTC_ChosenColumn0.getTableID());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("6&_I");
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("6&_I", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_ChosenColumn0.removeCellMouseMoveListener(columnTC_NameInfo0);
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("6&_I", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("6&_I", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isRemoved());
      
      columnTC_ChosenColumn0.setMinimumRequiredUserMode((-904));
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("6&_I", columnTC_ChosenColumn0.getTableID());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("+H~&d'x_qy9[5lE.I}b", "+H~&d'x_qy9[5lE.I}b");
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertEquals("+H~&d'x_qy9[5lE.I}b", tableColumnImpl0.getTableID());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isVisible());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertNull(tableColumnImpl0.getIconReference());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("+H~&d'x_qy9[5lE.I}b", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertNotNull(tableColumnImpl0);
      
      tableColumnImpl0.setMinimumRequiredUserMode((-673));
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertEquals("+H~&d'x_qy9[5lE.I}b", tableColumnImpl0.getTableID());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isVisible());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertNull(tableColumnImpl0.getIconReference());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("+H~&d'x_qy9[5lE.I}b", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info((String) null);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertNotNull(columnTC_Info0);
      
      HashMap<NameItem, ColumnTC_Sample> hashMap0 = new HashMap<NameItem, ColumnTC_Sample>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      columnTC_Info0.loadSettings(hashMap0);
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isSortAscending());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      columnTC_Info0.setDefaultSortAscending(true);
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      
      // Undeclared exception!
      try { 
        columnTC_Info0.addContextMenuItem((String) null, 1436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8444397270569681
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Peers");
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals("Peers", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNotNull(columnTC_Info0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals("Peers", columnTC_Info0.getTableID());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(class0.isPrimitive());
      assertEquals("interface org.gudy.azureus2.plugins.peers.Peer", class0.toString());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8233967898648364
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.azureus/tables.config.bak");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("", "");
      assertFalse(tableColumnImpl0.isVisible());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals("", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNotNull(tableColumnImpl0);
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.azureus/.lock");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(evoSuiteFile1, evoSuiteFile0);
      
      tableColumnImpl0.reset();
      assertFalse(tableColumnImpl0.isVisible());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals("", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals((-1), tableColumnImpl0.getPosition());
      
      PeerSuperView peerSuperView0 = new PeerSuperView();
      assertEquals("AllPeersView", peerSuperView0.getPropertiesPrefix());
      assertNotNull(peerSuperView0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.074965128809928
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("C\tXm", "C\tXm");
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertEquals("C\tXm", tableColumnImpl0.getName());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(3, tableColumnImpl0.getType());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals("C\tXm", tableColumnImpl0.getTableID());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertNotNull(tableColumnImpl0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("Files");
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("Files", columnTC_NameInfo0.getTableID());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.preConfigSave();
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals("Files", columnTC_NameInfo0.getTableID());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      
      ColumnTC_NameInfo columnTC_NameInfo1 = new ColumnTC_NameInfo("*Cb3t^NM/h");
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("*Cb3t^NM/h", columnTC_NameInfo1.getTableID());
      assertNotNull(columnTC_NameInfo1);
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      
      List<TableCellRefreshListener> list0 = columnTC_NameInfo1.getCellRefreshListeners();
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("*Cb3t^NM/h", columnTC_NameInfo1.getTableID());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Files");
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("Files", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setUserData("Files", columnTC_NameInfo1);
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("*Cb3t^NM/h", columnTC_NameInfo1.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("Files", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      columnTC_Info0.removeUserData("invalid reply: ");
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("Files", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      
      ColumnTC_Info columnTC_Info1 = new ColumnTC_Info("TableColumnNameInfo");
      assertFalse(columnTC_Info1.isRemoved());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals(150, columnTC_Info1.getWidth());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertTrue(columnTC_Info1.isSortAscending());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertFalse(columnTC_Info1.isSortValueLive());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.isObfusticated());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnNameInfo", columnTC_Info1.getTableID());
      assertNotNull(columnTC_Info1);
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      
      columnTC_Info1.setPositionNoShift(2074);
      assertFalse(columnTC_Info1.isRemoved());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals(150, columnTC_Info1.getWidth());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertTrue(columnTC_Info1.isSortAscending());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertFalse(columnTC_Info1.isSortValueLive());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertEquals(2074, columnTC_Info1.getPosition());
      assertFalse(columnTC_Info1.isObfusticated());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnNameInfo", columnTC_Info1.getTableID());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("Files", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(class0.isInterface());
      assertEquals("interface org.gudy.azureus2.plugins.disk.DiskManagerFileInfo", class0.toString());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      assertFalse(columnTC_Info0.equals((Object)columnTC_Info1));
      assertNotSame(columnTC_Info0, columnTC_Info1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = columnTC_NameInfo1.getMinWidth();
      assertFalse(columnTC_NameInfo1.isSortValueLive());
      assertFalse(columnTC_NameInfo1.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo1.getMinWidth());
      assertFalse(columnTC_NameInfo1.isMaxWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo1.getName());
      assertEquals(2, columnTC_NameInfo1.getType());
      assertTrue(columnTC_NameInfo1.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo1.isInplaceEdit());
      assertEquals((-1), columnTC_NameInfo1.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo1.isFirstLoad());
      assertTrue(columnTC_NameInfo1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo1.getPosition());
      assertFalse(columnTC_NameInfo1.showOnlyImage());
      assertFalse(columnTC_NameInfo1.isRemoved());
      assertEquals(5, columnTC_NameInfo1.getAlignment());
      assertNull(columnTC_NameInfo1.getIconReference());
      assertEquals(0, columnTC_NameInfo1.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo1.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo1.isMinWidthAuto());
      assertFalse(columnTC_NameInfo1.isVisible());
      assertTrue(columnTC_NameInfo1.isSortAscending());
      assertTrue(columnTC_NameInfo1.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo1.getWidth());
      assertTrue(columnTC_NameInfo1.isPreferredWidthAuto());
      assertEquals((-3), columnTC_NameInfo1.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo1.getMaxWidth());
      assertFalse(columnTC_NameInfo1.getColumnAdded());
      assertFalse(columnTC_NameInfo1.isObfusticated());
      assertEquals("*Cb3t^NM/h", columnTC_NameInfo1.getTableID());
      assertFalse(columnTC_NameInfo1.equals((Object)columnTC_NameInfo0));
      assertEquals(16, int0);
      assertNotSame(columnTC_NameInfo1, columnTC_NameInfo0);
      
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[7];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[4] = (TableColumnCore) columnTC_NameInfo1;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_Info1;
      tableColumnCoreArray0[3] = (TableColumnCore) columnTC_Info1;
      tableColumnCoreArray0[4] = (TableColumnCore) columnTC_NameInfo0;
      ColumnTC_NameInfo columnTC_NameInfo2 = new ColumnTC_NameInfo("X}M");
      assertFalse(columnTC_NameInfo2.isFirstLoad());
      assertFalse(columnTC_NameInfo2.isRemoved());
      assertTrue(columnTC_NameInfo2.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo2.getPreferredWidth());
      assertFalse(columnTC_NameInfo2.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo2.getMaxWidth());
      assertFalse(columnTC_NameInfo2.isMaxWidthAuto());
      assertEquals(5, columnTC_NameInfo2.getAlignment());
      assertEquals("X}M", columnTC_NameInfo2.getTableID());
      assertEquals((-1), columnTC_NameInfo2.getPosition());
      assertEquals(415, columnTC_NameInfo2.getWidth());
      assertTrue(columnTC_NameInfo2.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo2.isObfusticated());
      assertNull(columnTC_NameInfo2.getIconReference());
      assertTrue(columnTC_NameInfo2.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo2.isSortAscending());
      assertTrue(columnTC_NameInfo2.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo2.isSortValueLive());
      assertEquals(16, columnTC_NameInfo2.getMinWidth());
      assertEquals((-1), columnTC_NameInfo2.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo2.isInplaceEdit());
      assertFalse(columnTC_NameInfo2.getColumnAdded());
      assertFalse(columnTC_NameInfo2.isVisible());
      assertEquals((-3), columnTC_NameInfo2.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo2.getName());
      assertFalse(columnTC_NameInfo2.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo2.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo2.isMinWidthAuto());
      assertEquals(2, columnTC_NameInfo2.getType());
      assertNotNull(columnTC_NameInfo2);
      assertFalse(columnTC_NameInfo2.equals((Object)columnTC_NameInfo0));
      assertFalse(columnTC_NameInfo2.equals((Object)columnTC_NameInfo1));
      
      tableColumnCoreArray0[5] = (TableColumnCore) columnTC_NameInfo2;
      tableColumnCoreArray0[6] = (TableColumnCore) columnTC_NameInfo0;
      ColumnThumbAndName columnThumbAndName0 = null;
      try {
        columnThumbAndName0 = new ColumnThumbAndName("; mouse=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.230923730266658
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("5W/0[(s");
      assertEquals("5W/0[(s", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.addCellToolTipListener(columnTC_NameInfo0);
      assertEquals("5W/0[(s", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      
      String string0 = TableColumn.CAT_SWARM;
      assertNotNull(string0);
      assertEquals("swarm", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0319562238569695
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn0.getTableID());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn1 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      assertEquals((-3), columnTC_ChosenColumn1.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn1.hasCellRefreshListener());
      assertNull(columnTC_ChosenColumn1.getIconReference());
      assertFalse(columnTC_ChosenColumn1.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn1.isObfusticated());
      assertFalse(columnTC_ChosenColumn1.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn1.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn1.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn1.getPreferredWidthMax());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn1.getName());
      assertEquals((-1), columnTC_ChosenColumn1.getPosition());
      assertFalse(columnTC_ChosenColumn1.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn1.isVisible());
      assertEquals(0, columnTC_ChosenColumn1.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn1.isSortValueLive());
      assertEquals(0, columnTC_ChosenColumn1.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn1.getColumnAdded());
      assertFalse(columnTC_ChosenColumn1.doesAutoTooltip());
      assertTrue(columnTC_ChosenColumn1.getUseCoreDataSource());
      assertEquals((-1), columnTC_ChosenColumn1.getMaxWidth());
      assertFalse(columnTC_ChosenColumn1.showOnlyImage());
      assertFalse(columnTC_ChosenColumn1.isRemoved());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn1.getTableID());
      assertFalse(columnTC_ChosenColumn1.isFirstLoad());
      assertFalse(columnTC_ChosenColumn1.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn1.getType());
      assertEquals(5, columnTC_ChosenColumn1.getAlignment());
      assertEquals(175, columnTC_ChosenColumn1.getWidth());
      assertEquals(16, columnTC_ChosenColumn1.getMinWidth());
      assertNotNull(columnTC_ChosenColumn1);
      assertFalse(columnTC_ChosenColumn1.equals((Object)columnTC_ChosenColumn0));
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTorrents");
      assertEquals("MyTorrents", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNotNull(columnTC_Info0);
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertEquals("MyTorrents", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(0L, long0);
      
      Comparator comparator0 = columnTC_Info0.reversed();
      assertEquals("MyTorrents", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNotNull(comparator0);
      
      Class[] classArray0 = columnTC_Info0.getForDataSourceTypes();
      assertEquals("MyTorrents", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(1, classArray0.length);
      assertNotNull(classArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info((String) null);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertNull(columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setUserData("YIe<W_.Ffwk J|", (Object) null);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertNull(columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      
      columnTC_Info0.removeUserData("YIe<W_.Ffwk J|");
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertNull(columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0742344046078056
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("#z(h 6yN&qW0YE/");
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setMinimumRequiredUserMode(1);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      
      columnTC_Info0.removeCellDisposeListener((TableCellDisposeListener) null);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1871169048422634
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("C\tXm", "C\tXm");
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals("C\tXm", tableColumnImpl0.getName());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertEquals(3, tableColumnImpl0.getType());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals("C\tXm", tableColumnImpl0.getTableID());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isVisible());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertNotNull(tableColumnImpl0);
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("C\tXm");
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("C\tXm", columnTC_Info0.getTableID());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertNotNull(columnTC_Info0);
      
      ColumnCS_Count columnCS_Count0 = new ColumnCS_Count(columnTC_Info0);
      assertEquals(50, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("C\tXm", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertNotNull(columnCS_Count0);
      
      columnTC_Info0.setUserData("C\tXm", columnCS_Count0);
      assertEquals(50, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("C\tXm", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(0, tableCellMouseEvent0.x);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertNotNull(tableCellMouseEvent0);
      
      Class<RPDiskManagerFileInfo> class0 = RPDiskManagerFileInfo.class;
      TableViewSWTImpl<DiskManagerFileInfoImpl> tableViewSWTImpl0 = new TableViewSWTImpl<DiskManagerFileInfoImpl>(class0, "/w/$,n*pv", "@IF_vAzCf<<fu;8uNj", (String) null);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertEquals("@IF_vAzCf<<fu;8uNj", tableViewSWTImpl0.getPropertiesPrefix());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertEquals("/w/$,n*pv", tableViewSWTImpl0.getTableID());
      assertNotNull(tableViewSWTImpl0);
      
      String string0 = "}<~H3^3R";
      Object object0 = columnTC_Info0.getUserData("}<~H3^3R");
      assertEquals(50, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("C\tXm", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        tableViewSWTImpl0.createNewRow((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.ui.swt.views.table.impl.TableRowImpl", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("", "");
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertEquals("", tableColumnImpl0.getName());
      assertNotNull(tableColumnImpl0);
      
      tableColumnImpl0.addRefreshTime(2060L);
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertEquals("", tableColumnImpl0.getName());
      
      List<TableCellRefreshListener> list0 = tableColumnImpl0.getCellRefreshListeners();
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(tableColumnImpl0.isRemoved());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertEquals("", tableColumnImpl0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      PeerSuperView peerSuperView0 = new PeerSuperView();
      assertEquals("AllPeersView", peerSuperView0.getPropertiesPrefix());
      assertNotNull(peerSuperView0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("6XXK}/~;6U!Qs!");
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("6XXK}/~;6U!Qs!", columnTC_NameInfo0.getTableID());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.saveSettings((Map) null);
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("6XXK}/~;6U!Qs!", columnTC_NameInfo0.getTableID());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.4013567455599403
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("ncd${$1");
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("ncd${$1", columnTC_Info0.getTableID());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.removeCellClipboardListener((TableCellClipboardListener) null);
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("ncd${$1", columnTC_Info0.getTableID());
      
      ColumnCS_Discarded columnCS_Discarded0 = new ColumnCS_Discarded(columnTC_Info0);
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(80, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("ncd${$1", columnTC_Info0.getTableID());
      assertNotNull(columnCS_Discarded0);
      
      columnTC_Info0.removeCellOtherListener("ncd${$1", columnCS_Discarded0);
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(80, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("ncd${$1", columnTC_Info0.getTableID());
      
      HashMap<Long, DiskManagerFileInfoImpl> hashMap0 = new HashMap<Long, DiskManagerFileInfoImpl>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      columnTC_Info0.saveSettings(hashMap0);
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(80, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(2, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-2), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("ncd${$1", columnTC_Info0.getTableID());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.2086392785133713
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.setPreferredWidth(2253);
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_Sample0.getTableID());
      assertEquals(2253, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      
      columnTC_Sample0.setMinWidth(3);
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(3, columnTC_Sample0.getMinWidth());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_Sample0.getTableID());
      assertEquals(2253, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      
      Class<org.gudy.azureus2.ui.swt.views.tableitems.mytorrents.NameItem> class0 = org.gudy.azureus2.ui.swt.views.tableitems.mytorrents.NameItem.class;
      columnTC_Sample0.addDataSourceType(class0);
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(3, columnTC_Sample0.getMinWidth());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_Sample0.getTableID());
      assertEquals(2253, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.02506641665738
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate");
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals("org.eclipse.swt.internal.cocoa.SWTApplicationDelegate", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertNotNull(columnTC_ChosenColumn0);
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("; mm=");
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.removeCellVisibilityListener((TableCellVisibilityListener) null);
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals((-1), columnTC_Sample0.getPosition());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.8133554045006157
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Attempt to destroy indestructable timer '");
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("Attempt to destroy indestructable timer '", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertNotNull(columnTC_Info0);
      
      HashMap<ColumnTC_Sample, Long> hashMap0 = new HashMap<ColumnTC_Sample, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      columnTC_Info0.saveSettings(hashMap0);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("Attempt to destroy indestructable timer '", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ColumnTC_Info columnTC_Info1 = new ColumnTC_Info("TableColumnInfo");
      assertFalse(columnTC_Info1.isVisible());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertNull(columnTC_Info1.getIconReference());
      assertFalse(columnTC_Info1.isRemoved());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertFalse(columnTC_Info1.isSortValueLive());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(3, columnTC_Info1.getType());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertEquals(150, columnTC_Info1.getWidth());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info1.getTableID());
      assertNotNull(columnTC_Info1);
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      
      columnTC_Info1.loadSettings(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertNull(columnTC_Info1.getIconReference());
      assertFalse(columnTC_Info1.isRemoved());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertFalse(columnTC_Info1.isSortValueLive());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(3, columnTC_Info1.getType());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertEquals(150, columnTC_Info1.getWidth());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info1.getTableID());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      HashMap<ColumnCS_Name, ShareResourceDirContentsImpl> hashMap1 = new HashMap<ColumnCS_Name, ShareResourceDirContentsImpl>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      columnTC_Info0.saveSettings(hashMap1);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals("Attempt to destroy indestructable timer '", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(columnTC_Info0.equals((Object)columnTC_Info1));
      assertNotSame(columnTC_Info0, columnTC_Info1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.014946880179594
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("");
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertNotNull(columnTC_ChosenColumn0);
      
      Class<ColumnCS_Count>[] classArray0 = (Class<ColumnCS_Count>[]) Array.newInstance(Class.class, 9);
      Class<ColumnCS_Count> class0 = ColumnCS_Count.class;
      classArray0[0] = class0;
      Class<ColumnCS_Count> class1 = ColumnCS_Count.class;
      classArray0[1] = class1;
      Class<ColumnCS_Count> class2 = ColumnCS_Count.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      Class<ColumnCS_Count> class3 = ColumnCS_Count.class;
      classArray0[4] = class3;
      Class<ColumnCS_Count> class4 = ColumnCS_Count.class;
      classArray0[5] = class4;
      Class<ColumnCS_Count> class5 = ColumnCS_Count.class;
      classArray0[6] = class5;
      Class<ColumnCS_Count> class6 = ColumnCS_Count.class;
      classArray0[7] = class6;
      Class<ColumnCS_Count> class7 = ColumnCS_Count.class;
      classArray0[8] = class7;
      columnTC_ChosenColumn0.addDataSourceTypes(classArray0);
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(9, classArray0.length);
      
      columnTC_ChosenColumn0.setWidth((-1967));
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      
      System.setCurrentTimeMillis((-1967));
      columnTC_ChosenColumn0.remove();
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertTrue(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[3];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray0[1] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_ChosenColumn0;
      TableViewSWTImpl<ColumnTC_Sample> tableViewSWTImpl0 = new TableViewSWTImpl<ColumnTC_Sample>(class0, "N'bXGC1", "arse", tableColumnCoreArray0, "arse", (-1967));
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertEquals("N'bXGC1", tableViewSWTImpl0.getTableID());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals("arse", tableViewSWTImpl0.getPropertiesPrefix());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertEquals(3, tableColumnCoreArray0.length);
      assertNotNull(tableViewSWTImpl0);
      
      TableOrTreeSWT tableOrTreeSWT0 = tableViewSWTImpl0.getTableOrTreeSWT();
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertEquals("N'bXGC1", tableViewSWTImpl0.getTableID());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals("arse", tableViewSWTImpl0.getPropertiesPrefix());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertEquals(3, tableColumnCoreArray0.length);
      assertNull(tableOrTreeSWT0);
      assertSame(class0, class5);
      assertSame(class0, class7);
      assertSame(class0, class1);
      assertSame(class0, class6);
      assertSame(class0, class3);
      assertSame(class0, class4);
      assertSame(class0, class2);
      
      TableColumnCore[] tableColumnCoreArray1 = new TableColumnCore[6];
      assertFalse(tableColumnCoreArray1.equals((Object)tableColumnCoreArray0));
      
      tableColumnCoreArray1[0] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray1[1] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray1[2] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray1[3] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray1[4] = (TableColumnCore) columnTC_ChosenColumn0;
      tableColumnCoreArray1[5] = (TableColumnCore) columnTC_ChosenColumn0;
      TableRowImpl<PeerImpl> tableRowImpl0 = new TableRowImpl<PeerImpl>((TableView<PeerImpl>) null, (TableOrTreeSWT) null, tableColumnCoreArray1, class6, false);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertEquals(255, tableRowImpl0.getAlpha());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertEquals(6, tableColumnCoreArray1.length);
      assertNotNull(tableRowImpl0);
      assertFalse(tableColumnCoreArray1.equals((Object)tableColumnCoreArray0));
      
      TableRowCore tableRowCore0 = tableRowImpl0.getParentRowCore();
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertEquals(255, tableRowImpl0.getAlpha());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertEquals(6, tableColumnCoreArray1.length);
      assertNull(tableRowCore0);
      assertFalse(tableColumnCoreArray1.equals((Object)tableColumnCoreArray0));
      assertNotSame(tableColumnCoreArray1, tableColumnCoreArray0);
      assertSame(class6, class0);
      assertSame(class6, class1);
      assertSame(class6, class5);
      assertSame(class6, class2);
      assertSame(class6, class4);
      assertSame(class6, class3);
      assertSame(class6, class7);
      
      Class<ShareResourceDirImpl> class8 = ShareResourceDirImpl.class;
      TableViewSWTImpl<ShareResourceFileImpl> tableViewSWTImpl1 = new TableViewSWTImpl<ShareResourceFileImpl>(class8, "", "", "");
      assertFalse(tableViewSWTImpl1.bEnableTabViews);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals("", tableViewSWTImpl1.getFilterText());
      assertEquals(0, tableViewSWTImpl1.getSelectedRowsSize());
      assertTrue(tableViewSWTImpl1.isDisposed());
      assertEquals(0, tableViewSWTImpl1.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl1.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl1.isMenuEnabled());
      assertFalse(tableViewSWTImpl1.canHaveSubItems());
      assertTrue(tableViewSWTImpl1.getHeaderVisible());
      assertEquals("", tableViewSWTImpl1.getPropertiesPrefix());
      assertFalse(tableViewSWTImpl1.isSingleSelection());
      assertEquals((-1), tableViewSWTImpl1.getMaxItemShown());
      assertTrue(tableViewSWTImpl1.getSkipFirstColumn());
      assertEquals(0, tableViewSWTImpl1.getRowCount());
      assertFalse(tableViewSWTImpl1.isTabViewsEnabled());
      assertEquals("", tableViewSWTImpl1.getTableID());
      assertFalse(tableViewSWTImpl1.isDragging());
      assertTrue(tableViewSWTImpl1.isProvideIndexesOnRemove());
      assertNotNull(tableViewSWTImpl1);
      
      TableRowImpl<ShareResourceFileImpl> tableRowImpl1 = new TableRowImpl<ShareResourceFileImpl>((TableRowCore) null, tableViewSWTImpl1, (TableOrTreeSWT) null, tableColumnCoreArray1, "", class5, (-33), false);
      assertFalse(tableViewSWTImpl1.bEnableTabViews);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals("", tableViewSWTImpl1.getFilterText());
      assertEquals(0, tableViewSWTImpl1.getSelectedRowsSize());
      assertTrue(tableViewSWTImpl1.isDisposed());
      assertEquals(0, tableViewSWTImpl1.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl1.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl1.isMenuEnabled());
      assertFalse(tableViewSWTImpl1.canHaveSubItems());
      assertTrue(tableViewSWTImpl1.getHeaderVisible());
      assertEquals("", tableViewSWTImpl1.getPropertiesPrefix());
      assertFalse(tableViewSWTImpl1.isSingleSelection());
      assertEquals((-1), tableViewSWTImpl1.getMaxItemShown());
      assertTrue(tableViewSWTImpl1.getSkipFirstColumn());
      assertEquals(0, tableViewSWTImpl1.getRowCount());
      assertFalse(tableViewSWTImpl1.isTabViewsEnabled());
      assertEquals("", tableViewSWTImpl1.getTableID());
      assertFalse(tableViewSWTImpl1.isDragging());
      assertTrue(tableViewSWTImpl1.isProvideIndexesOnRemove());
      assertFalse(tableRowImpl1.isInPaintItem());
      assertEquals(0, tableRowImpl1.getFontStyle());
      assertFalse(tableRowImpl1.isExpanded());
      assertEquals(0, tableRowImpl1.getSubItemCount());
      assertEquals("", tableRowImpl1.getTableID());
      assertFalse(tableRowImpl1.isRowDisposed());
      assertEquals(255, tableRowImpl1.getAlpha());
      assertFalse(tableRowImpl1.inPaintItem());
      assertEquals(0, tableRowImpl1.getHeight());
      assertFalse(tableRowImpl1.isSelected());
      assertEquals(6, tableColumnCoreArray1.length);
      assertNotNull(tableRowImpl1);
      assertFalse(tableColumnCoreArray1.equals((Object)tableColumnCoreArray0));
      
      TableCellCore tableCellCore0 = tableRowImpl1.getSortColumnCell("N'bXGC1");
      assertFalse(tableViewSWTImpl1.bEnableTabViews);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals("", tableViewSWTImpl1.getFilterText());
      assertEquals(0, tableViewSWTImpl1.getSelectedRowsSize());
      assertTrue(tableViewSWTImpl1.isDisposed());
      assertEquals(0, tableViewSWTImpl1.uiGuessMaxVisibleRows());
      assertEquals(0, tableViewSWTImpl1.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl1.isMenuEnabled());
      assertFalse(tableViewSWTImpl1.canHaveSubItems());
      assertTrue(tableViewSWTImpl1.getHeaderVisible());
      assertEquals("", tableViewSWTImpl1.getPropertiesPrefix());
      assertFalse(tableViewSWTImpl1.isSingleSelection());
      assertEquals((-1), tableViewSWTImpl1.getMaxItemShown());
      assertTrue(tableViewSWTImpl1.getSkipFirstColumn());
      assertEquals(0, tableViewSWTImpl1.getRowCount());
      assertFalse(tableViewSWTImpl1.isTabViewsEnabled());
      assertEquals("", tableViewSWTImpl1.getTableID());
      assertFalse(tableViewSWTImpl1.isDragging());
      assertTrue(tableViewSWTImpl1.isProvideIndexesOnRemove());
      assertFalse(tableRowImpl1.isInPaintItem());
      assertEquals(0, tableRowImpl1.getFontStyle());
      assertFalse(tableRowImpl1.isExpanded());
      assertEquals(0, tableRowImpl1.getSubItemCount());
      assertEquals("", tableRowImpl1.getTableID());
      assertFalse(tableRowImpl1.isRowDisposed());
      assertEquals(255, tableRowImpl1.getAlpha());
      assertFalse(tableRowImpl1.inPaintItem());
      assertEquals(0, tableRowImpl1.getHeight());
      assertFalse(tableRowImpl1.isSelected());
      assertEquals(6, tableColumnCoreArray1.length);
      assertNull(tableCellCore0);
      assertFalse(tableColumnCoreArray1.equals((Object)tableColumnCoreArray0));
      assertNotSame(tableColumnCoreArray1, tableColumnCoreArray0);
      assertSame(class5, class0);
      assertSame(class5, class7);
      assertSame(class5, class2);
      assertSame(class5, class3);
      assertSame(class5, class1);
      assertSame(class5, class6);
      assertSame(class5, class4);
      
      columnTC_ChosenColumn0.invokeCellToolTipListeners((TableCellCore) null, 2);
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertTrue(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("", columnTC_ChosenColumn0.getTableID());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("DragSource");
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("DragSource", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.initialize(7, 7, 7, 50);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("DragSource", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(7, columnTC_Info0.getAlignment());
      assertEquals(50, columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(7, columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(7, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("DragSource", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(7, columnTC_Info0.getAlignment());
      assertEquals(50, columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(7, columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(7, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(0L, long0);
      
      Short short0 = new Short((short) (-999));
      assertNotNull(short0);
      assertEquals((short) (-999), (short)short0);
      
      columnTC_Info0.addListeners(short0);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("DragSource", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(7, columnTC_Info0.getAlignment());
      assertEquals(50, columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(7, columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(7, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      
      columnTC_Info0.setVisible(false);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("DragSource", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(7, columnTC_Info0.getAlignment());
      assertEquals(50, columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(7, columnTC_Info0.getPosition());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(7, columnTC_Info0.getWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("mOLk&)d Q");
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals("mOLk&)d Q", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertNotNull(columnTC_ChosenColumn0);
      
      String string0 = columnTC_ChosenColumn0.getTitleLanguageKey();
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals("mOLk&)d Q", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertNotNull(string0);
      assertEquals("!TableColumnChosenColumn!", string0);
      
      String string1 = columnTC_ChosenColumn0.getTitleLanguageKey();
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals("mOLk&)d Q", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertNotNull(string1);
      assertEquals("!TableColumnChosenColumn!", string1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.1602985171522895
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTorrents.big");
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals("MyTorrents.big", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertNotNull(columnTC_Info0);
      
      HashMap<ShareResourceDirImpl, Double> hashMap0 = new HashMap<ShareResourceDirImpl, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      columnTC_Info0.loadSettings(hashMap0);
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals("MyTorrents.big", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(150, columnTC_Info0.getWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals("MyTorrents.big", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertEquals("interface org.gudy.azureus2.plugins.download.DownloadTypeIncomplete", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MyTracker");
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.removeUserData("MyTracker");
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertEquals("interface org.gudy.azureus2.plugins.tracker.TrackerTorrent", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      String string0 = columnTC_Info0.getTitleLanguageKey();
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(string0);
      assertEquals("!TableColumnInfo!", string0);
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(0L, long0);
      
      boolean boolean0 = columnTC_Info0.handlesDataSourceType(class0);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("MyTracker", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertEquals("interface org.gudy.azureus2.plugins.tracker.TrackerTorrent", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        RPTrackerTorrent.create((TrackerTorrent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.pluginsimpl.remote.tracker.RPTrackerTorrent", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.930749705272877
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("AllPeers");
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals("AllPeers", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.setPreferredWidth((-1790263675));
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals("AllPeers", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      
      columnTC_Sample0.preConfigSave();
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals("AllPeers", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      
      columnTC_Sample0.setMinWidth(50);
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(50, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals("AllPeers", columnTC_Sample0.getTableID());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(50, columnTC_Sample0.getMinWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      
      ColumnThumbAndName columnThumbAndName0 = null;
      try {
        columnThumbAndName0 = new ColumnThumbAndName("AllPeers");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.9743423462932612
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = null;
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info((String) null);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertNull(columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setUserData("TableColumnInfo", (Object) null);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertNull(columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertNotNull(tableCellMouseEvent0);
      
      columnTC_Info0.setUserData((String) null, (Object) null);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertNull(columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      
      // Undeclared exception!
      try { 
        columnTC_Info0.getTitleLanguageKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TableColumnImpl tableColumnImpl0 = new TableColumnImpl("", (String) null);
      assertFalse(tableColumnImpl0.isRemoved());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertNotNull(tableColumnImpl0);
      
      ToIntFunction<ColumnCS_Count> toIntFunction0 = (ToIntFunction<ColumnCS_Count>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator comparator0 = Comparator.comparingInt((ToIntFunction) toIntFunction0);
      assertNotNull(comparator0);
      
      boolean boolean0 = tableColumnImpl0.isFirstLoad();
      assertFalse(tableColumnImpl0.isRemoved());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(boolean0);
      
      boolean boolean1 = tableColumnImpl0.isSortAscending();
      assertFalse(tableColumnImpl0.isRemoved());
      assertFalse(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      tableColumnImpl0.setMinWidthAuto(true);
      assertFalse(tableColumnImpl0.isRemoved());
      assertTrue(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      tableColumnImpl0.setInplaceEdit(false);
      assertFalse(tableColumnImpl0.isRemoved());
      assertTrue(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("org.gudy.azureus2.core3.util.ListenerManager$1");
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("org.gudy.azureus2.core3.util.ListenerManager$1", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertNotNull(columnTC_Info0);
      
      tableColumnImpl0.removeColumnExtraInfoListener(columnTC_Info0);
      assertFalse(tableColumnImpl0.isRemoved());
      assertTrue(tableColumnImpl0.isMinWidthAuto());
      assertEquals(3, tableColumnImpl0.getType());
      assertFalse(tableColumnImpl0.isVisible());
      assertEquals(50, tableColumnImpl0.getWidth());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-3), tableColumnImpl0.getRefreshInterval());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-1), tableColumnImpl0.getPosition());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertEquals(1, tableColumnImpl0.getAlignment());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("org.gudy.azureus2.core3.util.ListenerManager$1", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      assertTrue(configurationManager0.isNewInstall());
      assertNotNull(configurationManager0);
      
      tableColumnImpl0.initialize(2320, 2320, (-57), (-57));
      assertEquals((-57), tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.isRemoved());
      assertTrue(tableColumnImpl0.isMinWidthAuto());
      assertEquals(2320, tableColumnImpl0.getAlignment());
      assertTrue(tableColumnImpl0.isVisible());
      assertEquals(3, tableColumnImpl0.getType());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-57), tableColumnImpl0.getRefreshInterval());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(2320, tableColumnImpl0.getPosition());
      
      tableColumnImpl0.invalidateCell((Object) null);
      assertEquals((-57), tableColumnImpl0.getWidth());
      assertFalse(tableColumnImpl0.isRemoved());
      assertTrue(tableColumnImpl0.isMinWidthAuto());
      assertEquals(2320, tableColumnImpl0.getAlignment());
      assertTrue(tableColumnImpl0.isVisible());
      assertEquals(3, tableColumnImpl0.getType());
      assertTrue(tableColumnImpl0.isSortAscending());
      assertEquals(0, tableColumnImpl0.getConsecutiveErrCount());
      assertFalse(tableColumnImpl0.doesAutoTooltip());
      assertEquals(0, tableColumnImpl0.getPreferredWidth());
      assertFalse(tableColumnImpl0.hasCellMouseMoveListener());
      assertEquals((-1), tableColumnImpl0.getMaxWidth());
      assertFalse(tableColumnImpl0.isSortValueLive());
      assertFalse(tableColumnImpl0.isMaxWidthAuto());
      assertFalse(tableColumnImpl0.getColumnAdded());
      assertNull(tableColumnImpl0.getIconReference());
      assertFalse(tableColumnImpl0.isObfusticated());
      assertEquals(16, tableColumnImpl0.getMinWidth());
      assertFalse(tableColumnImpl0.hasCellRefreshListener());
      assertFalse(tableColumnImpl0.isInplaceEdit());
      assertEquals((-1), tableColumnImpl0.getPreferredWidthMax());
      assertEquals("", tableColumnImpl0.getTableID());
      assertEquals((-57), tableColumnImpl0.getRefreshInterval());
      assertNull(tableColumnImpl0.getName());
      assertTrue(tableColumnImpl0.isPreferredWidthAuto());
      assertFalse(tableColumnImpl0.isFirstLoad());
      assertFalse(tableColumnImpl0.getUseCoreDataSource());
      assertFalse(tableColumnImpl0.showOnlyImage());
      assertEquals(2320, tableColumnImpl0.getPosition());
      
      try { 
        DownloadManagerImpl.getDownloadStatic((DownloadManager) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // DownloadManager not initialised
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.download.DownloadManagerImpl", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("MyTeaker");
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("MyTeaker", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertNotNull(columnTC_ChosenColumn0);
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(0, tableCellMouseEvent0.x);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertNotNull(tableCellMouseEvent0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("");
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertNotNull(columnTC_NameInfo0);
      
      FakeTableCell fakeTableCell0 = new FakeTableCell((TableColumnCore) columnTC_NameInfo0, (Object) columnTC_ChosenColumn0);
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("MyTeaker", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(fakeTableCell0.isValid());
      assertFalse(fakeTableCell0.isUpToDate());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertNull(fakeTableCell0.getObfusticatedText());
      assertTrue(fakeTableCell0.isDisposed());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.isShown());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertTrue(fakeTableCell0.needsPainting());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getCursorID());
      assertNotNull(fakeTableCell0);
      
      columnTC_NameInfo0.invokeCellToolTipListeners(fakeTableCell0, 0);
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("MyTeaker", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(fakeTableCell0.isValid());
      assertFalse(fakeTableCell0.isUpToDate());
      assertEquals((-1), fakeTableCell0.getMaxLines());
      assertNull(fakeTableCell0.getObfusticatedText());
      assertTrue(fakeTableCell0.isDisposed());
      assertEquals(0, fakeTableCell0.getMarginWidth());
      assertEquals(0, fakeTableCell0.getMarginHeight());
      assertEquals(0, fakeTableCell0.getTextAlpha());
      assertTrue(fakeTableCell0.isShown());
      assertTrue(fakeTableCell0.getVisuallyChangedSinceRefresh());
      assertTrue(fakeTableCell0.needsPainting());
      assertNull(fakeTableCell0.getText());
      assertEquals(0, fakeTableCell0.getCursorID());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("My65Teaker");
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("My65Teaker", columnTC_Info0.getTableID());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(columnTC_Info0);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters");
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals("org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_NameInfo0.setDefaultSortAscending(false);
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals("org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      
      columnTC_NameInfo0.invokeCellToolTipListeners((TableCellCore) null, (-1970633441));
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals("org.bouncycastle.jce.provider.JDKAlgorithmParameters$CAST5AlgorithmParameters", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9909502341783103
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("; mm=");
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.addCellVisibilityListener((TableCellVisibilityListener) null);
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      
      columnTC_Sample0.removeCellVisibilityListener((TableCellVisibilityListener) null);
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      
      Class[] classArray0 = columnTC_Sample0.getForDataSourceTypes();
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals("; mm=", columnTC_Sample0.getTableID());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.17157089695751
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Unopened.big");
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("Unopened.big", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertNotNull(columnTC_Info0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals("Unopened.big", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1537, class0.getModifiers());
      assertEquals("interface org.gudy.azureus2.plugins.download.Download", class0.toString());
      assertNotNull(class0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.7271760442979476
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("Unopened.big");
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals("Unopened.big", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertNotNull(columnTC_NameInfo0);
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertNotNull(tableCellMouseEvent0);
      
      Class<Double> class0 = Double.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[3];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[1] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_NameInfo0;
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "TableColumnNameInfo", "TableColumnNameInfo", tableColumnCoreArray0, ">setNwm=P@d%&Yh54", 0);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertEquals("", tableViewPainted0.getFilterText());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getTableID());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getPropertiesPrefix());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isDragging());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertEquals(3, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      columnTC_NameInfo0.invokeCellMouseListeners(tableCellMouseEvent0);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertEquals("Unopened.big", columnTC_NameInfo0.getTableID());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      
      // Undeclared exception!
      try { 
        columnTC_NameInfo0.setPosition((-1914));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't set properties. Column 'TableColumnNameInfo already added
         //
         verifyException("com.aelitis.azureus.ui.common.table.impl.TableColumnImpl", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.3118106396602034
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("AllPeers");
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("AllPeers", columnTC_Info0.getTableID());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setColumnAdded();
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals("AllPeers", columnTC_Info0.getTableID());
      
      columnTC_Info0.setWidthLimits(6, 6);
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals("AllPeers", columnTC_Info0.getTableID());
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertNotNull(tableCellMouseEvent0);
      
      // Undeclared exception!
      try { 
        columnTC_Info0.setType(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't set properties. Column 'TableColumnInfo already added
         //
         verifyException("com.aelitis.azureus.ui.common.table.impl.TableColumnImpl", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 26;
      String string0 = "TableColumnSample";
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("TableColumnSample");
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnSample", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setColumnAdded();
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnSample", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      
      int int1 = 6;
      // Undeclared exception!
      try { 
        columnTC_Info0.initialize(41, 515, 515, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't set properties. Column 'TableColumnInfo already added
         //
         verifyException("com.aelitis.azureus.ui.common.table.impl.TableColumnImpl", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.314663721384631
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("?J<?Miu!}Mf%");
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals("?J<?Miu!}Mf%", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setWidthLimits(60, 60);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(60, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(60, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals("?J<?Miu!}Mf%", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(60, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isObfusticated());
      
      columnTC_Info0.setPreferredWidthMax(60);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(60, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(60, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals("?J<?Miu!}Mf%", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(60, columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(60, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isObfusticated());
      
      columnTC_Info0.setWidth(124);
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertFalse(columnTC_Info0.isRemoved());
      assertNull(columnTC_Info0.getIconReference());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(60, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(60, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals("?J<?Miu!}Mf%", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(60, columnTC_Info0.getPreferredWidthMax());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(60, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isObfusticated());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("#z(h 6yN&qW0YE/");
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setPreferredWidthMax(1292);
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(1292, columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      
      columnTC_Info0.setPreferredWidth(1292);
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(1292, columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(1292, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      
      columnTC_Info0.setWidth(1292);
      assertEquals(1292, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(1292, columnTC_Info0.getPreferredWidthMax());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals("#z(h 6yN&qW0YE/", columnTC_Info0.getTableID());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(1292, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.286260660467041
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("H{<zFWsq^");
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(150, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("H{<zFWsq^", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setWidthLimits(1, 4);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(1, columnTC_Info0.getMinWidth());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("H{<zFWsq^", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(4, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(4, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setPreferredWidthMax(4);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(1, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("H{<zFWsq^", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(4, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(4, columnTC_Info0.getPreferredWidthMax());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(4, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setPreferredWidth(4);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(1, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(4, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("H{<zFWsq^", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(4, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(4, columnTC_Info0.getPreferredWidthMax());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(4, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setWidth(4);
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertEquals(1, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals(4, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals("H{<zFWsq^", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals(4, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(4, columnTC_Info0.getPreferredWidthMax());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(4, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(5, columnTC_Info0.getAlignment());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.1877019230893464
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("osY};iihdsfEqs&fx");
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("osY};iihdsfEqs&fx", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setWidthLimits(6, 6);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("osY};iihdsfEqs&fx", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      
      Comparator comparator0 = Comparator.nullsLast((Comparator) columnTC_Info0);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("osY};iihdsfEqs&fx", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(comparator0);
      
      columnTC_Info0.setPreferredWidth(378);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(6, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("osY};iihdsfEqs&fx", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
      
      columnTC_Info0.setWidth(1406);
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(6, columnTC_Info0.getPreferredWidth());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals("osY};iihdsfEqs&fx", columnTC_Info0.getTableID());
      assertEquals((-1), columnTC_Info0.getPosition());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.320010119403465
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("0");
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setColumnAdded();
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setWidthLimits((-410), 222);
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(150, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(222, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      int int0 = columnTC_Info0.getMinWidth();
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(150, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertFalse(columnTC_Info0.isVisible());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals("0", columnTC_Info0.getTableID());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals(222, columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(150, int0);
      
      ColumnTC_Info columnTC_Info1 = new ColumnTC_Info("TableColumnInfo");
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertEquals(3, columnTC_Info1.getType());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertNull(columnTC_Info1.getIconReference());
      assertFalse(columnTC_Info1.isRemoved());
      assertEquals(150, columnTC_Info1.getWidth());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertEquals("TableColumnInfo", columnTC_Info1.getTableID());
      assertFalse(columnTC_Info1.isObfusticated());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertNotNull(columnTC_Info1);
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.206583351910944
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      assertEquals("v", stringWriter0.toString());
      assertEquals("    ", indentWriter0.getTab());
      assertNotNull(indentWriter0);
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("i'7{.6i uMUu0");
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("i'7{.6i uMUu0", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_ChosenColumn0.setSortValueLive(true);
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("i'7{.6i uMUu0", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      
      columnTC_ChosenColumn0.initialize((-2855), (-2855), 1480, (-2703));
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-2703), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-2855), columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals((-2855), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("i'7{.6i uMUu0", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(1480, columnTC_ChosenColumn0.getWidth());
      
      columnTC_ChosenColumn0.generateDiagnostics(indentWriter0);
      assertEquals("vColumn i'7{.6i uMUu0:TableColumnChosenColumn (Live Sort)\n    Listeners: refresh=1; dispose=-0; mouse=-0; mm=-0; vis=-0; added=-0; tooltip=-0\n    lLastSortValueChange=0\n", stringWriter0.toString());
      assertEquals("    ", indentWriter0.getTab());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-2703), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertTrue(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-2855), columnTC_ChosenColumn0.getAlignment());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals((-2855), columnTC_ChosenColumn0.getPosition());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertEquals("i'7{.6i uMUu0", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(1480, columnTC_ChosenColumn0.getWidth());
      assertSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.094640938826062
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("pieces");
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("pieces", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertNotNull(columnTC_Info0);
      
      columnTC_Info0.setPreferredWidthMax(120);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("pieces", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(120, columnTC_Info0.getPreferredWidthMax());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      
      columnTC_Info0.setPreferredWidth(8912896);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(120, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("pieces", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(120, columnTC_Info0.getPreferredWidthMax());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      
      columnTC_Info0.setWidth(8912896);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(8912896, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(120, columnTC_Info0.getPreferredWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("pieces", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(120, columnTC_Info0.getPreferredWidthMax());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.isMinWidthAuto());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("MW8#?y-");
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertNull(columnTC_Sample0.getIconReference());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertNotNull(columnTC_Sample0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Sample0.getContextMenuItems(2);
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertNull(columnTC_Sample0.getIconReference());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals("MW8#?y-", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8771109532844326
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("yekr");
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("yekr", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_ChosenColumn0.addCellVisibilityListener((TableCellVisibilityListener) null);
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("yekr", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      
      columnTC_ChosenColumn0.addCellVisibilityListener((TableCellVisibilityListener) null);
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertEquals("yekr", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.5458574133936582
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info(".efnn`Vv84");
      assertFalse(columnTC_Info0.getColumnAdded());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(".efnn`Vv84", columnTC_Info0.getTableID());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertNotNull(columnTC_Info0);
      
      ColumnTC_Info columnTC_Info1 = new ColumnTC_Info("timetosend");
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertNotNull(columnTC_Info1);
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      
      columnTC_Info1.addCellDisposeListener((TableCellDisposeListener) null);
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      columnTC_Info1.addCellDisposeListener((TableCellDisposeListener) null);
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getPosition());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertFalse(columnTC_Info1.isVisible());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      columnTC_Info1.setPosition(916);
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertTrue(columnTC_Info1.isVisible());
      assertEquals(916, columnTC_Info1.getPosition());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      columnTC_Info1.removeCellDisposeListener((TableCellDisposeListener) null);
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertTrue(columnTC_Info1.isVisible());
      assertEquals(916, columnTC_Info1.getPosition());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Info1.getContextMenuItems((-1804));
      assertFalse(columnTC_Info1.isSortValueLive());
      assertFalse(columnTC_Info1.doesAutoTooltip());
      assertFalse(columnTC_Info1.getColumnAdded());
      assertEquals(16, columnTC_Info1.getMinWidth());
      assertFalse(columnTC_Info1.isObfusticated());
      assertEquals(150, columnTC_Info1.getWidth());
      assertNull(columnTC_Info1.getIconReference());
      assertEquals("timetosend", columnTC_Info1.getTableID());
      assertEquals((-1), columnTC_Info1.getMaxWidth());
      assertEquals((-3), columnTC_Info1.getRefreshInterval());
      assertFalse(columnTC_Info1.isMaxWidthAuto());
      assertTrue(columnTC_Info1.hasCellRefreshListener());
      assertFalse(columnTC_Info1.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info1.getPreferredWidthMax());
      assertTrue(columnTC_Info1.isSortAscending());
      assertEquals(0, columnTC_Info1.getPreferredWidth());
      assertEquals(3, columnTC_Info1.getType());
      assertFalse(columnTC_Info1.isMinWidthAuto());
      assertEquals(0, columnTC_Info1.getConsecutiveErrCount());
      assertTrue(columnTC_Info1.isVisible());
      assertEquals(916, columnTC_Info1.getPosition());
      assertEquals(5, columnTC_Info1.getAlignment());
      assertFalse(columnTC_Info1.isRemoved());
      assertTrue(columnTC_Info1.isPreferredWidthAuto());
      assertFalse(columnTC_Info1.showOnlyImage());
      assertTrue(columnTC_Info1.getUseCoreDataSource());
      assertEquals("TableColumnInfo", columnTC_Info1.getName());
      assertFalse(columnTC_Info1.isFirstLoad());
      assertFalse(columnTC_Info1.isInplaceEdit());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
      assertFalse(columnTC_Info1.equals((Object)columnTC_Info0));
      assertNotSame(columnTC_Info1, columnTC_Info0);
      
      Class<ShareResourceDirImpl> class0 = ShareResourceDirImpl.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[3];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_Info1;
      tableColumnCoreArray0[1] = (TableColumnCore) columnTC_Info1;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_Info0;
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "TableColumnInfo", "HC@4*`B^<k@", tableColumnCoreArray0, "'M#`Xj#AQ/:RlM-qP", 3048);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals("TableColumnInfo", tableViewPainted0.getTableID());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertFalse(tableViewPainted0.isDragging());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertEquals("", tableViewPainted0.getFilterText());
      assertEquals(3, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      TRHostTorrent tRHostTorrent0 = mock(TRHostTorrent.class, new ViolatedAssumptionAnswer());
      TrackerTorrentImpl trackerTorrentImpl0 = new TrackerTorrentImpl(tRHostTorrent0);
      assertFalse(trackerTorrentImpl0.isPassive());
      assertEquals(0L, trackerTorrentImpl0.getDateAdded());
      assertNotNull(trackerTorrentImpl0);
      
      columnTC_Info0.setWidth(773);
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isSortAscending());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertEquals(".efnn`Vv84", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(773, columnTC_Info0.getWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.equals((Object)columnTC_Info1));
      assertNotSame(columnTC_Info0, columnTC_Info1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.8570395244941453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("MyShares");
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertNotNull(columnTC_NameInfo0);
      
      Double double0 = new Double(1090.52);
      assertNotNull(double0);
      assertEquals(1090.52, (double)double0, 0.01);
      
      double double1 = Double.min(0.0, 1090.52);
      assertEquals(0.0, double1, 0.01);
      
      columnTC_NameInfo0.addCellOtherListener("MyShares", "MyShares");
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      
      boolean boolean0 = Double.isFinite((-360.8190809109652));
      assertTrue(boolean0);
      
      double double2 = Double.min(829.5271816, (-2184.2647911461));
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2184.2647911461), double2, 0.01);
      
      double double3 = Double.sum(812.982, 2219.49114674694);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(3032.47314674694, double3, 0.01);
      
      boolean boolean1 = Double.isFinite(1090.52);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      columnTC_NameInfo0.setUserData("MyShares", double0);
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class[] classArray0 = columnTC_NameInfo0.getForDataSourceTypes();
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(1, classArray0.length);
      assertNotNull(classArray0);
      
      Class[] classArray1 = columnTC_NameInfo0.getForDataSourceTypes();
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotSame(classArray1, classArray0);
      
      HashMap<DiskManagerFileInfoImpl, Short> hashMap0 = new HashMap<DiskManagerFileInfoImpl, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      columnTC_NameInfo0.saveSettings(hashMap0);
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      columnTC_NameInfo0.invokeCellVisibilityListeners((TableCellCore) null, (-737));
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals("MyShares", columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      
      ColumnThumbAndName columnThumbAndName0 = null;
      try {
        columnThumbAndName0 = new ColumnThumbAndName("TableColumnNameInfo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PluginInitializer not instantiated by AzureusCore.create yet
         //
         verifyException("org.gudy.azureus2.pluginsimpl.local.PluginInitializer", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.2200880912962377
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("MyLibrary.big");
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertNotNull(columnTC_Sample0);
      
      columnTC_Sample0.setUserData("?format=html\">html</a></font></LI>", "MyLibrary.big");
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      
      Class[] classArray0 = columnTC_Sample0.getForDataSourceTypes();
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(1, classArray0.length);
      assertNotNull(classArray0);
      
      columnTC_Sample0.setVisible(false);
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      
      HashMap<TableRowPainted, Object> hashMap0 = new HashMap<TableRowPainted, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      columnTC_Sample0.saveSettings(hashMap0);
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Class[] classArray1 = columnTC_Sample0.getForDataSourceTypes();
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals("MyLibrary.big", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      assertFalse(classArray1.equals((Object)classArray0));
      assertNotSame(classArray1, classArray0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      IndentWriter indentWriter0 = new IndentWriter(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("    ", indentWriter0.getTab());
      assertNotNull(indentWriter0);
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("MySeeders");
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("MySeeders", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertNotNull(columnTC_ChosenColumn0);
      
      String string0 = columnTC_ChosenColumn0.getTitleLanguageKey();
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals("MySeeders", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertNotNull(string0);
      assertEquals("!TableColumnChosenColumn!", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.509852691248759
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("Pee(rs");
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("Pee(rs", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNotNull(columnTC_Info0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.isVisible());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("Pee(rs", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(class0);
      
      ToIntFunction<Short> toIntFunction0 = (ToIntFunction<Short>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator comparator0 = Comparator.comparingInt((ToIntFunction) toIntFunction0);
      assertNotNull(comparator0);
      
      columnTC_Info0.setPosition((-1722469031));
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1722469031), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isObfusticated());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("Pee(rs", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setColumnAdded();
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1722469031), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("Pee(rs", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals(150, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
      
      columnTC_Info0.setWidthLimits(6, 6);
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertTrue(columnTC_Info0.isSortAscending());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals(6, columnTC_Info0.getMinWidth());
      assertEquals((-1722469031), columnTC_Info0.getPosition());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertEquals("Pee(rs", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertNull(columnTC_Info0.getIconReference());
      assertEquals(6, columnTC_Info0.getWidth());
      assertFalse(columnTC_Info0.isRemoved());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(6, columnTC_Info0.getMaxWidth());
      assertEquals(5, columnTC_Info0.getAlignment());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.871476118054867
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("MyTracker");
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("MyTracker", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertNotNull(columnTC_NameInfo0);
      
      TableCellImpl tableCellImpl0 = new TableCellImpl((TableRowSWT) null, columnTC_NameInfo0, 0);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("MyTracker", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(1, tableCellImpl0.getMarginWidth());
      assertEquals(1, tableCellImpl0.getMarginHeight());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertTrue(tableCellImpl0.needsPainting());
      assertFalse(tableCellImpl0.isDisposed());
      assertNotNull(tableCellImpl0);
      
      Event event0 = new Event();
      assertEquals(0, event0.count);
      assertTrue(event0.doit);
      assertEquals(0, event0.yDirection);
      assertEquals(0, event0.detail);
      assertEquals(0.0, event0.rotation, 0.01);
      assertEquals(0, event0.type);
      assertEquals('\u0000', event0.character);
      assertEquals(0.0, event0.magnification, 0.01);
      assertEquals(0, event0.keyLocation);
      assertEquals(0, event0.xDirection);
      assertEquals(0, event0.start);
      assertEquals(0, event0.height);
      assertEquals(0, event0.width);
      assertEquals(0, event0.time);
      assertEquals(0, event0.end);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.index);
      assertEquals(0, event0.keyCode);
      assertEquals(0, event0.button);
      assertEquals(0, event0.stateMask);
      assertNotNull(event0);
      
      GC gC0 = event0.gc;
      assertNull(gC0);
      
      tableCellImpl0.invokeSWTPaintListeners((GC) null);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("MyTracker", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(1, tableCellImpl0.getMarginWidth());
      assertEquals(1, tableCellImpl0.getMarginHeight());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertTrue(tableCellImpl0.needsPainting());
      assertFalse(tableCellImpl0.isDisposed());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("incomingreqcount");
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals("incomingreqcount", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.isSortAscending());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertNotNull(columnTC_Info0);
      
      Class<Double> class0 = Double.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[1];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_Info0;
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "T~5", "T~5", tableColumnCoreArray0, "\ffZN@v!_z7VGMO(4", 1);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals("", tableViewPainted0.getFilterText());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals("T~5", tableViewPainted0.getTableID());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertFalse(tableViewPainted0.isDragging());
      assertEquals("T~5", tableViewPainted0.getPropertiesPrefix());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      TableOrTreeSWT tableOrTreeSWT0 = tableViewPainted0.getTableOrTreeSWT();
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals("", tableViewPainted0.getFilterText());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals("T~5", tableViewPainted0.getTableID());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertFalse(tableViewPainted0.isDragging());
      assertEquals("T~5", tableViewPainted0.getPropertiesPrefix());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNull(tableOrTreeSWT0);
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("\ffZN@v!_z7VGMO(4");
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("\ffZN@v!_z7VGMO(4", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isVisible());
      assertNotNull(columnTC_Sample0);
      
      TableRowImpl<ShareResourceDirImpl> tableRowImpl0 = new TableRowImpl<ShareResourceDirImpl>((TableView<ShareResourceDirImpl>) null, (TableOrTreeSWT) null, tableColumnCoreArray0, columnTC_Sample0, false);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("\ffZN@v!_z7VGMO(4", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertEquals(255, tableRowImpl0.getAlpha());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNotNull(tableRowImpl0);
      
      TableCellImpl tableCellImpl0 = new TableCellImpl(tableRowImpl0, columnTC_Info0, 427);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("incomingreqcount", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("\ffZN@v!_z7VGMO(4", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertEquals(255, tableRowImpl0.getAlpha());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(0, tableCellImpl0.getHeight());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNotNull(tableCellImpl0);
      
      columnTC_Info0.invokeCellRefreshListeners(tableCellImpl0, true);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertEquals(64, TableCellSWTBase.FLAG_VISUALLY_CHANGED_SINCE_REFRESH);
      assertFalse(tableCellImpl0.bDebug);
      assertEquals(5, columnTC_Info0.getAlignment());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertFalse(columnTC_Info0.isVisible());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertEquals("incomingreqcount", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertTrue(columnTC_Info0.isFirstLoad());
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.isSortAscending());
      assertTrue(columnTC_Info0.getColumnAdded());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals(3, columnTC_Info0.getType());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("\ffZN@v!_z7VGMO(4", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isVisible());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertEquals(255, tableRowImpl0.getAlpha());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertEquals(0, tableCellImpl0.getMarginHeight());
      assertEquals("", tableCellImpl0.getText());
      assertEquals(0, tableCellImpl0.getHeight());
      assertFalse(tableCellImpl0.getVisuallyChangedSinceRefresh());
      assertEquals(255, tableCellImpl0.getTextAlpha());
      assertFalse(tableCellImpl0.isValid());
      assertEquals(0, tableCellImpl0.getCursorID());
      assertEquals(0, tableCellImpl0.getMarginWidth());
      assertFalse(tableCellImpl0.isUpToDate());
      assertFalse(tableCellImpl0.isDisposed());
      assertFalse(tableCellImpl0.getFillCell());
      assertFalse(tableCellImpl0.needsPainting());
      assertEquals(1, tableCellImpl0.getMaxLines());
      assertEquals(1, tableColumnCoreArray0.length);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.059317997207515
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("");
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertNotNull(columnTC_NameInfo0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      columnTC_NameInfo0.setMinWidthAuto(true);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      
      columnTC_NameInfo0.initializeAsGraphic((-1937637551), (-1937637551));
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_NameInfo0.getContextMenuItems((-1813146780));
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
      
      Class<Integer> class0 = Integer.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[5];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[1] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[2] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[3] = (TableColumnCore) columnTC_NameInfo0;
      tableColumnCoreArray0[4] = (TableColumnCore) columnTC_NameInfo0;
      TableViewSWTImpl<ColumnTC_Sample> tableViewSWTImpl0 = new TableViewSWTImpl<ColumnTC_Sample>(class0, "TableColumnNameInfo", "", tableColumnCoreArray0, " samples): ", (-1813146780));
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals("", tableViewSWTImpl0.getPropertiesPrefix());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals("TableColumnNameInfo", tableViewSWTImpl0.getTableID());
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNotNull(tableViewSWTImpl0);
      
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "TableColumnNameInfo", "upload", tableColumnCoreArray0, " samples): ", (-1813146780));
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertFalse(tableViewPainted0.isDragging());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getTableID());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals("upload", tableViewPainted0.getPropertiesPrefix());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertEquals("", tableViewPainted0.getFilterText());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      ColumnTC_Sample[] columnTC_SampleArray0 = new ColumnTC_Sample[9];
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("");
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.isRemoved());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals("", columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertNotNull(columnTC_Sample0);
      
      columnTC_SampleArray0[0] = columnTC_Sample0;
      ColumnTC_Sample columnTC_Sample1 = new ColumnTC_Sample("arse");
      assertFalse(columnTC_Sample1.isFirstLoad());
      assertFalse(columnTC_Sample1.isRemoved());
      assertFalse(columnTC_Sample1.showOnlyImage());
      assertEquals((-1), columnTC_Sample1.getMaxWidth());
      assertEquals((-2), columnTC_Sample1.getRefreshInterval());
      assertEquals(0, columnTC_Sample1.getConsecutiveErrCount());
      assertEquals(1, columnTC_Sample1.getAlignment());
      assertFalse(columnTC_Sample1.isInplaceEdit());
      assertFalse(columnTC_Sample1.isMinWidthAuto());
      assertEquals(120, columnTC_Sample1.getWidth());
      assertTrue(columnTC_Sample1.isPreferredWidthAuto());
      assertTrue(columnTC_Sample1.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample1.getPosition());
      assertTrue(columnTC_Sample1.isSortAscending());
      assertFalse(columnTC_Sample1.isObfusticated());
      assertFalse(columnTC_Sample1.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample1.getColumnAdded());
      assertFalse(columnTC_Sample1.isSortValueLive());
      assertEquals(16, columnTC_Sample1.getMinWidth());
      assertNull(columnTC_Sample1.getIconReference());
      assertEquals("TableColumnSample", columnTC_Sample1.getName());
      assertFalse(columnTC_Sample1.doesAutoTooltip());
      assertEquals(3, columnTC_Sample1.getType());
      assertFalse(columnTC_Sample1.isMaxWidthAuto());
      assertEquals("arse", columnTC_Sample1.getTableID());
      assertEquals(0, columnTC_Sample1.getPreferredWidth());
      assertFalse(columnTC_Sample1.hasCellRefreshListener());
      assertFalse(columnTC_Sample1.isVisible());
      assertEquals((-1), columnTC_Sample1.getPreferredWidthMax());
      assertNotNull(columnTC_Sample1);
      assertFalse(columnTC_Sample1.equals((Object)columnTC_Sample0));
      
      columnTC_SampleArray0[1] = columnTC_Sample1;
      ColumnTC_Sample columnTC_Sample2 = new ColumnTC_Sample("arse");
      assertFalse(columnTC_Sample2.isVisible());
      assertEquals("arse", columnTC_Sample2.getTableID());
      assertTrue(columnTC_Sample2.isPreferredWidthAuto());
      assertTrue(columnTC_Sample2.isSortAscending());
      assertEquals(0, columnTC_Sample2.getPreferredWidth());
      assertEquals(0, columnTC_Sample2.getConsecutiveErrCount());
      assertEquals(1, columnTC_Sample2.getAlignment());
      assertNull(columnTC_Sample2.getIconReference());
      assertFalse(columnTC_Sample2.isRemoved());
      assertFalse(columnTC_Sample2.hasCellRefreshListener());
      assertEquals((-2), columnTC_Sample2.getRefreshInterval());
      assertFalse(columnTC_Sample2.hasCellMouseMoveListener());
      assertEquals((-1), columnTC_Sample2.getPreferredWidthMax());
      assertEquals(3, columnTC_Sample2.getType());
      assertEquals((-1), columnTC_Sample2.getPosition());
      assertFalse(columnTC_Sample2.isFirstLoad());
      assertEquals("TableColumnSample", columnTC_Sample2.getName());
      assertEquals((-1), columnTC_Sample2.getMaxWidth());
      assertFalse(columnTC_Sample2.isSortValueLive());
      assertEquals(16, columnTC_Sample2.getMinWidth());
      assertFalse(columnTC_Sample2.doesAutoTooltip());
      assertFalse(columnTC_Sample2.isMaxWidthAuto());
      assertFalse(columnTC_Sample2.showOnlyImage());
      assertFalse(columnTC_Sample2.getColumnAdded());
      assertFalse(columnTC_Sample2.isObfusticated());
      assertFalse(columnTC_Sample2.isInplaceEdit());
      assertTrue(columnTC_Sample2.getUseCoreDataSource());
      assertFalse(columnTC_Sample2.isMinWidthAuto());
      assertEquals(120, columnTC_Sample2.getWidth());
      assertNotNull(columnTC_Sample2);
      assertFalse(columnTC_Sample2.equals((Object)columnTC_Sample1));
      assertFalse(columnTC_Sample2.equals((Object)columnTC_Sample0));
      
      columnTC_SampleArray0[2] = columnTC_Sample2;
      ColumnTC_Sample columnTC_Sample3 = new ColumnTC_Sample("TableColumnSample");
      assertEquals(1, columnTC_Sample3.getAlignment());
      assertEquals(0, columnTC_Sample3.getConsecutiveErrCount());
      assertFalse(columnTC_Sample3.isMinWidthAuto());
      assertEquals(0, columnTC_Sample3.getPreferredWidth());
      assertFalse(columnTC_Sample3.isVisible());
      assertEquals(120, columnTC_Sample3.getWidth());
      assertTrue(columnTC_Sample3.isPreferredWidthAuto());
      assertEquals(3, columnTC_Sample3.getType());
      assertTrue(columnTC_Sample3.isSortAscending());
      assertFalse(columnTC_Sample3.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample3.isObfusticated());
      assertFalse(columnTC_Sample3.hasCellRefreshListener());
      assertEquals("TableColumnSample", columnTC_Sample3.getTableID());
      assertFalse(columnTC_Sample3.isSortValueLive());
      assertEquals((-1), columnTC_Sample3.getMaxWidth());
      assertFalse(columnTC_Sample3.isMaxWidthAuto());
      assertEquals("TableColumnSample", columnTC_Sample3.getName());
      assertFalse(columnTC_Sample3.getColumnAdded());
      assertFalse(columnTC_Sample3.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample3.getPreferredWidthMax());
      assertFalse(columnTC_Sample3.isInplaceEdit());
      assertEquals((-1), columnTC_Sample3.getPosition());
      assertTrue(columnTC_Sample3.getUseCoreDataSource());
      assertNull(columnTC_Sample3.getIconReference());
      assertFalse(columnTC_Sample3.isFirstLoad());
      assertFalse(columnTC_Sample3.isRemoved());
      assertFalse(columnTC_Sample3.showOnlyImage());
      assertEquals(16, columnTC_Sample3.getMinWidth());
      assertEquals((-2), columnTC_Sample3.getRefreshInterval());
      assertNotNull(columnTC_Sample3);
      assertFalse(columnTC_Sample3.equals((Object)columnTC_Sample1));
      assertFalse(columnTC_Sample3.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample3.equals((Object)columnTC_Sample2));
      
      columnTC_SampleArray0[3] = columnTC_Sample3;
      ColumnTC_Sample columnTC_Sample4 = new ColumnTC_Sample("");
      assertEquals(3, columnTC_Sample4.getType());
      assertEquals(0, columnTC_Sample4.getConsecutiveErrCount());
      assertFalse(columnTC_Sample4.isMinWidthAuto());
      assertEquals(0, columnTC_Sample4.getPreferredWidth());
      assertEquals(1, columnTC_Sample4.getAlignment());
      assertFalse(columnTC_Sample4.showOnlyImage());
      assertFalse(columnTC_Sample4.isVisible());
      assertTrue(columnTC_Sample4.getUseCoreDataSource());
      assertTrue(columnTC_Sample4.isSortAscending());
      assertTrue(columnTC_Sample4.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample4.getWidth());
      assertEquals((-1), columnTC_Sample4.getMaxWidth());
      assertFalse(columnTC_Sample4.isObfusticated());
      assertEquals("TableColumnSample", columnTC_Sample4.getName());
      assertFalse(columnTC_Sample4.isSortValueLive());
      assertEquals(16, columnTC_Sample4.getMinWidth());
      assertFalse(columnTC_Sample4.doesAutoTooltip());
      assertFalse(columnTC_Sample4.getColumnAdded());
      assertFalse(columnTC_Sample4.isMaxWidthAuto());
      assertEquals("", columnTC_Sample4.getTableID());
      assertFalse(columnTC_Sample4.hasCellRefreshListener());
      assertFalse(columnTC_Sample4.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample4.isInplaceEdit());
      assertEquals((-1), columnTC_Sample4.getPreferredWidthMax());
      assertFalse(columnTC_Sample4.isFirstLoad());
      assertEquals((-1), columnTC_Sample4.getPosition());
      assertEquals((-2), columnTC_Sample4.getRefreshInterval());
      assertFalse(columnTC_Sample4.isRemoved());
      assertNull(columnTC_Sample4.getIconReference());
      assertNotNull(columnTC_Sample4);
      assertFalse(columnTC_Sample4.equals((Object)columnTC_Sample3));
      assertFalse(columnTC_Sample4.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample4.equals((Object)columnTC_Sample2));
      assertFalse(columnTC_Sample4.equals((Object)columnTC_Sample1));
      
      columnTC_SampleArray0[4] = columnTC_Sample4;
      ColumnTC_Sample columnTC_Sample5 = new ColumnTC_Sample(" samples): ");
      assertEquals(0, columnTC_Sample5.getPreferredWidth());
      assertFalse(columnTC_Sample5.isMinWidthAuto());
      assertEquals(3, columnTC_Sample5.getType());
      assertFalse(columnTC_Sample5.showOnlyImage());
      assertEquals(1, columnTC_Sample5.getAlignment());
      assertEquals(0, columnTC_Sample5.getConsecutiveErrCount());
      assertEquals((-1), columnTC_Sample5.getMaxWidth());
      assertEquals((-2), columnTC_Sample5.getRefreshInterval());
      assertFalse(columnTC_Sample5.isRemoved());
      assertFalse(columnTC_Sample5.isVisible());
      assertFalse(columnTC_Sample5.isMaxWidthAuto());
      assertEquals((-1), columnTC_Sample5.getPosition());
      assertFalse(columnTC_Sample5.hasCellMouseMoveListener());
      assertTrue(columnTC_Sample5.isSortAscending());
      assertFalse(columnTC_Sample5.hasCellRefreshListener());
      assertNull(columnTC_Sample5.getIconReference());
      assertEquals((-1), columnTC_Sample5.getPreferredWidthMax());
      assertFalse(columnTC_Sample5.getColumnAdded());
      assertFalse(columnTC_Sample5.isObfusticated());
      assertEquals(16, columnTC_Sample5.getMinWidth());
      assertFalse(columnTC_Sample5.isInplaceEdit());
      assertFalse(columnTC_Sample5.isSortValueLive());
      assertFalse(columnTC_Sample5.doesAutoTooltip());
      assertEquals("TableColumnSample", columnTC_Sample5.getName());
      assertEquals(120, columnTC_Sample5.getWidth());
      assertEquals(" samples): ", columnTC_Sample5.getTableID());
      assertFalse(columnTC_Sample5.isFirstLoad());
      assertTrue(columnTC_Sample5.getUseCoreDataSource());
      assertTrue(columnTC_Sample5.isPreferredWidthAuto());
      assertNotNull(columnTC_Sample5);
      assertFalse(columnTC_Sample5.equals((Object)columnTC_Sample2));
      assertFalse(columnTC_Sample5.equals((Object)columnTC_Sample3));
      assertFalse(columnTC_Sample5.equals((Object)columnTC_Sample1));
      assertFalse(columnTC_Sample5.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample5.equals((Object)columnTC_Sample4));
      
      columnTC_SampleArray0[5] = columnTC_Sample5;
      ColumnTC_Sample columnTC_Sample6 = new ColumnTC_Sample("TableColumnSample");
      assertEquals(0, columnTC_Sample6.getPreferredWidth());
      assertFalse(columnTC_Sample6.isMinWidthAuto());
      assertFalse(columnTC_Sample6.showOnlyImage());
      assertEquals(1, columnTC_Sample6.getAlignment());
      assertEquals(3, columnTC_Sample6.getType());
      assertEquals((-1), columnTC_Sample6.getMaxWidth());
      assertEquals((-2), columnTC_Sample6.getRefreshInterval());
      assertEquals(0, columnTC_Sample6.getConsecutiveErrCount());
      assertFalse(columnTC_Sample6.isRemoved());
      assertTrue(columnTC_Sample6.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample6.getWidth());
      assertFalse(columnTC_Sample6.isFirstLoad());
      assertTrue(columnTC_Sample6.getUseCoreDataSource());
      assertEquals((-1), columnTC_Sample6.getPreferredWidthMax());
      assertFalse(columnTC_Sample6.isSortValueLive());
      assertEquals(16, columnTC_Sample6.getMinWidth());
      assertFalse(columnTC_Sample6.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample6.getName());
      assertFalse(columnTC_Sample6.hasCellRefreshListener());
      assertFalse(columnTC_Sample6.getColumnAdded());
      assertFalse(columnTC_Sample6.doesAutoTooltip());
      assertNull(columnTC_Sample6.getIconReference());
      assertFalse(columnTC_Sample6.isObfusticated());
      assertTrue(columnTC_Sample6.isSortAscending());
      assertEquals("TableColumnSample", columnTC_Sample6.getTableID());
      assertFalse(columnTC_Sample6.isMaxWidthAuto());
      assertEquals((-1), columnTC_Sample6.getPosition());
      assertFalse(columnTC_Sample6.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample6.isVisible());
      assertNotNull(columnTC_Sample6);
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample3));
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample2));
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample4));
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample5));
      assertFalse(columnTC_Sample6.equals((Object)columnTC_Sample1));
      
      columnTC_SampleArray0[6] = columnTC_Sample6;
      ColumnTC_Sample columnTC_Sample7 = new ColumnTC_Sample("TableColumnSample");
      assertEquals("TableColumnSample", columnTC_Sample7.getTableID());
      assertFalse(columnTC_Sample7.isVisible());
      assertEquals(120, columnTC_Sample7.getWidth());
      assertTrue(columnTC_Sample7.isPreferredWidthAuto());
      assertEquals((-1), columnTC_Sample7.getPosition());
      assertEquals(3, columnTC_Sample7.getType());
      assertFalse(columnTC_Sample7.isMinWidthAuto());
      assertFalse(columnTC_Sample7.isRemoved());
      assertEquals(16, columnTC_Sample7.getMinWidth());
      assertFalse(columnTC_Sample7.showOnlyImage());
      assertNull(columnTC_Sample7.getIconReference());
      assertEquals((-2), columnTC_Sample7.getRefreshInterval());
      assertTrue(columnTC_Sample7.getUseCoreDataSource());
      assertEquals(1, columnTC_Sample7.getAlignment());
      assertFalse(columnTC_Sample7.isFirstLoad());
      assertFalse(columnTC_Sample7.isInplaceEdit());
      assertFalse(columnTC_Sample7.getColumnAdded());
      assertFalse(columnTC_Sample7.hasCellRefreshListener());
      assertFalse(columnTC_Sample7.isObfusticated());
      assertEquals((-1), columnTC_Sample7.getPreferredWidthMax());
      assertEquals((-1), columnTC_Sample7.getMaxWidth());
      assertEquals("TableColumnSample", columnTC_Sample7.getName());
      assertEquals(0, columnTC_Sample7.getConsecutiveErrCount());
      assertFalse(columnTC_Sample7.doesAutoTooltip());
      assertTrue(columnTC_Sample7.isSortAscending());
      assertFalse(columnTC_Sample7.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample7.isMaxWidthAuto());
      assertFalse(columnTC_Sample7.isSortValueLive());
      assertEquals(0, columnTC_Sample7.getPreferredWidth());
      assertNotNull(columnTC_Sample7);
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample5));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample4));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample1));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample6));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample2));
      assertFalse(columnTC_Sample7.equals((Object)columnTC_Sample3));
      
      columnTC_SampleArray0[7] = columnTC_Sample7;
      ColumnTC_Sample columnTC_Sample8 = new ColumnTC_Sample("TableColumnSample");
      assertFalse(columnTC_Sample8.isMinWidthAuto());
      assertEquals(0, columnTC_Sample8.getPreferredWidth());
      assertEquals(3, columnTC_Sample8.getType());
      assertEquals(1, columnTC_Sample8.getAlignment());
      assertEquals(0, columnTC_Sample8.getConsecutiveErrCount());
      assertEquals((-2), columnTC_Sample8.getRefreshInterval());
      assertFalse(columnTC_Sample8.isRemoved());
      assertTrue(columnTC_Sample8.isPreferredWidthAuto());
      assertEquals(120, columnTC_Sample8.getWidth());
      assertFalse(columnTC_Sample8.showOnlyImage());
      assertTrue(columnTC_Sample8.getUseCoreDataSource());
      assertFalse(columnTC_Sample8.isFirstLoad());
      assertFalse(columnTC_Sample8.isInplaceEdit());
      assertEquals((-1), columnTC_Sample8.getPreferredWidthMax());
      assertEquals("TableColumnSample", columnTC_Sample8.getName());
      assertFalse(columnTC_Sample8.isSortValueLive());
      assertFalse(columnTC_Sample8.getColumnAdded());
      assertEquals(16, columnTC_Sample8.getMinWidth());
      assertFalse(columnTC_Sample8.doesAutoTooltip());
      assertNull(columnTC_Sample8.getIconReference());
      assertFalse(columnTC_Sample8.isObfusticated());
      assertTrue(columnTC_Sample8.isSortAscending());
      assertEquals((-1), columnTC_Sample8.getPosition());
      assertEquals((-1), columnTC_Sample8.getMaxWidth());
      assertFalse(columnTC_Sample8.isMaxWidthAuto());
      assertFalse(columnTC_Sample8.isVisible());
      assertEquals("TableColumnSample", columnTC_Sample8.getTableID());
      assertFalse(columnTC_Sample8.hasCellRefreshListener());
      assertFalse(columnTC_Sample8.hasCellMouseMoveListener());
      assertNotNull(columnTC_Sample8);
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample3));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample4));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample0));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample5));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample7));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample1));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample6));
      assertFalse(columnTC_Sample8.equals((Object)columnTC_Sample2));
      
      columnTC_SampleArray0[8] = columnTC_Sample8;
      tableViewSWTImpl0.addDataSources(columnTC_SampleArray0, false);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals("", tableViewSWTImpl0.getPropertiesPrefix());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals("TableColumnNameInfo", tableViewSWTImpl0.getTableID());
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertEquals(5, tableColumnCoreArray0.length);
      assertEquals(9, columnTC_SampleArray0.length);
      
      TableOrTreeSWT tableOrTreeSWT0 = tableViewPainted0.getTableOrTreeSWT();
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertTrue(tableViewPainted0.isSingleSelection());
      assertFalse(tableViewPainted0.isDragging());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getTableID());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals("upload", tableViewPainted0.getPropertiesPrefix());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertEquals("", tableViewPainted0.getFilterText());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertTrue(tableViewPainted0.isDisposed());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNull(tableOrTreeSWT0);
      
      TableRowImpl<ColumnTC_Sample> tableRowImpl0 = new TableRowImpl<ColumnTC_Sample>((TableRowCore) null, tableViewSWTImpl0, (TableOrTreeSWT) null, tableColumnCoreArray0, " samples): ", "", (-1813146780), true);
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertEquals(255, tableRowImpl0.getAlpha());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals("TableColumnNameInfo", tableRowImpl0.getTableID());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertFalse(tableRowImpl0.isSelected());
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals("", tableViewSWTImpl0.getPropertiesPrefix());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals("TableColumnNameInfo", tableViewSWTImpl0.getTableID());
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNotNull(tableRowImpl0);
      
      TableCellCore tableCellCore0 = tableRowImpl0.getSortColumnCell("-Xri,7/Y9Y'(:");
      assertEquals(1, BufferedTableRow.REQUIRE_TABLEITEM_INITIALIZED);
      assertEquals(0, BufferedTableRow.REQUIRE_TABLEITEM);
      assertEquals(2, BufferedTableRow.REQUIRE_VISIBILITY);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(tableViewSWTImpl0.bEnableTabViews);
      assertEquals(255, tableRowImpl0.getAlpha());
      assertEquals(0, tableRowImpl0.getSubItemCount());
      assertEquals(0, tableRowImpl0.getHeight());
      assertFalse(tableRowImpl0.isExpanded());
      assertFalse(tableRowImpl0.isInPaintItem());
      assertEquals("TableColumnNameInfo", tableRowImpl0.getTableID());
      assertFalse(tableRowImpl0.inPaintItem());
      assertEquals(0, tableRowImpl0.getFontStyle());
      assertFalse(tableRowImpl0.isRowDisposed());
      assertFalse(tableRowImpl0.isSelected());
      assertEquals((-1), tableViewSWTImpl0.getMaxItemShown());
      assertEquals("", tableViewSWTImpl0.getPropertiesPrefix());
      assertTrue(tableViewSWTImpl0.getSkipFirstColumn());
      assertFalse(tableViewSWTImpl0.isSingleSelection());
      assertEquals(0, tableViewSWTImpl0.getRowCount());
      assertEquals(0, tableViewSWTImpl0.getRowDefaultHeight());
      assertTrue(tableViewSWTImpl0.getHeaderVisible());
      assertTrue(tableViewSWTImpl0.isDisposed());
      assertEquals("TableColumnNameInfo", tableViewSWTImpl0.getTableID());
      assertEquals(0, tableViewSWTImpl0.uiGuessMaxVisibleRows());
      assertFalse(tableViewSWTImpl0.canHaveSubItems());
      assertFalse(tableViewSWTImpl0.isDragging());
      assertTrue(tableViewSWTImpl0.isMenuEnabled());
      assertFalse(tableViewSWTImpl0.isTabViewsEnabled());
      assertTrue(tableViewSWTImpl0.isProvideIndexesOnRemove());
      assertEquals("", tableViewSWTImpl0.getFilterText());
      assertEquals(0, tableViewSWTImpl0.getSelectedRowsSize());
      assertEquals(5, tableColumnCoreArray0.length);
      assertNull(tableCellCore0);
      
      columnTC_NameInfo0.invokeCellDisposeListeners((TableCell) null);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("upload");
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals("upload", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      assertNotNull(columnTC_ChosenColumn0);
      
      columnTC_NameInfo0.addCellOtherListener("M", columnTC_ChosenColumn0);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals("upload", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      
      columnTC_ChosenColumn0.setMinimumRequiredUserMode(2);
      assertEquals((-1), columnTC_ChosenColumn0.getMaxWidth());
      assertFalse(columnTC_ChosenColumn0.showOnlyImage());
      assertTrue(columnTC_ChosenColumn0.getUseCoreDataSource());
      assertFalse(columnTC_ChosenColumn0.isMaxWidthAuto());
      assertEquals(0, columnTC_ChosenColumn0.getPreferredWidth());
      assertEquals("upload", columnTC_ChosenColumn0.getTableID());
      assertFalse(columnTC_ChosenColumn0.isFirstLoad());
      assertEquals(0, columnTC_ChosenColumn0.getConsecutiveErrCount());
      assertFalse(columnTC_ChosenColumn0.doesAutoTooltip());
      assertFalse(columnTC_ChosenColumn0.isMinWidthAuto());
      assertFalse(columnTC_ChosenColumn0.isObfusticated());
      assertEquals((-1), columnTC_ChosenColumn0.getPosition());
      assertEquals("TableColumnChosenColumn", columnTC_ChosenColumn0.getName());
      assertTrue(columnTC_ChosenColumn0.isPreferredWidthAuto());
      assertEquals((-3), columnTC_ChosenColumn0.getRefreshInterval());
      assertTrue(columnTC_ChosenColumn0.hasCellRefreshListener());
      assertFalse(columnTC_ChosenColumn0.getColumnAdded());
      assertFalse(columnTC_ChosenColumn0.isSortValueLive());
      assertFalse(columnTC_ChosenColumn0.isInplaceEdit());
      assertTrue(columnTC_ChosenColumn0.isSortAscending());
      assertEquals((-1), columnTC_ChosenColumn0.getPreferredWidthMax());
      assertFalse(columnTC_ChosenColumn0.isVisible());
      assertFalse(columnTC_ChosenColumn0.hasCellMouseMoveListener());
      assertEquals(175, columnTC_ChosenColumn0.getWidth());
      assertEquals(3, columnTC_ChosenColumn0.getType());
      assertEquals(5, columnTC_ChosenColumn0.getAlignment());
      assertEquals(16, columnTC_ChosenColumn0.getMinWidth());
      assertNull(columnTC_ChosenColumn0.getIconReference());
      assertFalse(columnTC_ChosenColumn0.isRemoved());
      
      columnTC_NameInfo0.addCellOtherListener("M", tableColumnCoreArray0[1]);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(5, tableColumnCoreArray0.length);
      
      long long0 = columnTC_NameInfo0.getLastSortValueChange();
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertEquals(0L, long0);
      
      String string0 = columnTC_NameInfo0.getClipboardText((TableCell) null);
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-1), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1937637551), columnTC_NameInfo0.getPosition());
      assertTrue(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertTrue(columnTC_NameInfo0.isVisible());
      assertEquals(3, columnTC_NameInfo0.getAlignment());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertTrue(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.isFirstLoad());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertEquals("", columnTC_NameInfo0.getTableID());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n$'$xhP,O~r&4brO<\"D");
      assertNotNull(mockPrintWriter0);
      
      ColumnTC_Info columnTC_Info0 = new ColumnTC_Info("MySeeders");
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("MySeeders", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertNotNull(columnTC_Info0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)25;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-57), (byte)104, (byte) (-90), (byte)25}, byteArray0);
      assertFalse(boolean0);
      
      Class class0 = columnTC_Info0.getForDataSourceType();
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("MySeeders", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface org.gudy.azureus2.plugins.download.DownloadTypeComplete", class0.toString());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isInterface());
      assertNotNull(class0);
      
      long long0 = columnTC_Info0.getLastSortValueChange();
      assertFalse(columnTC_Info0.isMinWidthAuto());
      assertEquals(3, columnTC_Info0.getType());
      assertFalse(columnTC_Info0.showOnlyImage());
      assertEquals(0, columnTC_Info0.getPreferredWidth());
      assertTrue(columnTC_Info0.getUseCoreDataSource());
      assertTrue(columnTC_Info0.isSortAscending());
      assertFalse(columnTC_Info0.isVisible());
      assertFalse(columnTC_Info0.isMaxWidthAuto());
      assertEquals("MySeeders", columnTC_Info0.getTableID());
      assertFalse(columnTC_Info0.isObfusticated());
      assertEquals((-1), columnTC_Info0.getMaxWidth());
      assertFalse(columnTC_Info0.doesAutoTooltip());
      assertEquals((-3), columnTC_Info0.getRefreshInterval());
      assertFalse(columnTC_Info0.getColumnAdded());
      assertEquals(0, columnTC_Info0.getConsecutiveErrCount());
      assertEquals((-1), columnTC_Info0.getPreferredWidthMax());
      assertFalse(columnTC_Info0.isInplaceEdit());
      assertEquals(16, columnTC_Info0.getMinWidth());
      assertFalse(columnTC_Info0.isSortValueLive());
      assertFalse(columnTC_Info0.hasCellMouseMoveListener());
      assertTrue(columnTC_Info0.hasCellRefreshListener());
      assertTrue(columnTC_Info0.isPreferredWidthAuto());
      assertEquals(150, columnTC_Info0.getWidth());
      assertEquals("TableColumnInfo", columnTC_Info0.getName());
      assertFalse(columnTC_Info0.isFirstLoad());
      assertEquals((-1), columnTC_Info0.getPosition());
      assertEquals(5, columnTC_Info0.getAlignment());
      assertNull(columnTC_Info0.getIconReference());
      assertFalse(columnTC_Info0.isRemoved());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.898205407843075
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo("|mk6");
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertEquals("|mk6", columnTC_NameInfo0.getTableID());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertNotNull(columnTC_NameInfo0);
      
      Class<Long> class0 = Long.class;
      TableColumnCore[] tableColumnCoreArray0 = new TableColumnCore[1];
      tableColumnCoreArray0[0] = (TableColumnCore) columnTC_NameInfo0;
      TableViewPainted tableViewPainted0 = new TableViewPainted(class0, "TableColumnNameInfo", "|mk6", tableColumnCoreArray0, "TableColumnNameInfo", 50);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isDragging());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertFalse(tableViewPainted0.isSingleSelection());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getTableID());
      assertEquals("", tableViewPainted0.getFilterText());
      assertTrue(tableViewPainted0.isDisposed());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertEquals("|mk6", tableViewPainted0.getPropertiesPrefix());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNotNull(tableViewPainted0);
      
      TableRowSWT tableRowSWT0 = tableViewPainted0.getRowSWT(class0);
      assertFalse(TableViewImpl.DEBUGADDREMOVE);
      assertFalse(TableViewImpl.DEBUG_SELECTION);
      assertFalse(tableViewPainted0.isProvideIndexesOnRemove());
      assertEquals(17, tableViewPainted0.getRowDefaultHeight());
      assertTrue(tableViewPainted0.isMenuEnabled());
      assertFalse(tableViewPainted0.isDragging());
      assertTrue(tableViewPainted0.canHaveSubItems());
      assertEquals(0, tableViewPainted0.getMaxItemShown());
      assertFalse(tableViewPainted0.isTabViewsEnabled());
      assertFalse(tableViewPainted0.isSingleSelection());
      assertEquals("TableColumnNameInfo", tableViewPainted0.getTableID());
      assertEquals("", tableViewPainted0.getFilterText());
      assertTrue(tableViewPainted0.isDisposed());
      assertTrue(tableViewPainted0.getHeaderVisible());
      assertEquals(0, tableViewPainted0.getSelectedRowsSize());
      assertEquals(0, tableViewPainted0.getRowCount());
      assertEquals("|mk6", tableViewPainted0.getPropertiesPrefix());
      assertEquals(1, tableColumnCoreArray0.length);
      assertNull(tableRowSWT0);
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample("|mk6");
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals("|mk6", columnTC_Sample0.getTableID());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertNotNull(columnTC_Sample0);
      
      ColumnCS_Sent columnCS_Sent0 = new ColumnCS_Sent(columnTC_Sample0);
      assertTrue(columnTC_Sample0.isVisible());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("|mk6", columnTC_Sample0.getTableID());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals(80, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-2), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(2, columnTC_Sample0.getAlignment());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertNotNull(columnCS_Sent0);
      
      TableContextMenuItem[] tableContextMenuItemArray0 = columnTC_Sample0.getContextMenuItems(50);
      assertTrue(columnTC_Sample0.isVisible());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(3, columnTC_Sample0.getType());
      assertEquals("|mk6", columnTC_Sample0.getTableID());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getIconReference());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertEquals(80, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals((-2), columnTC_Sample0.getPosition());
      assertTrue(columnTC_Sample0.hasCellRefreshListener());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertEquals(2, columnTC_Sample0.getAlignment());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertEquals(0, tableContextMenuItemArray0.length);
      assertNotNull(tableContextMenuItemArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.0592794887184103
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ColumnTC_Sample columnTC_Sample0 = new ColumnTC_Sample((String) null);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertNotNull(columnTC_Sample0);
      
      boolean boolean1 = columnTC_Sample0.hasCellRefreshListener();
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertEquals(0, columnTC_Sample0.getPreferredWidth());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ColumnTC_NameInfo columnTC_NameInfo0 = new ColumnTC_NameInfo((String) null);
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertNull(columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      assertNotNull(columnTC_NameInfo0);
      
      columnTC_Sample0.setPreferredWidthMax((-1));
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      
      columnTC_Sample0.addCellToolTipListener(columnTC_NameInfo0);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertNull(columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      
      String string0 = columnTC_Sample0.getClipboardText((TableCell) null);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertNull(string0);
      
      TableCellClipboardListener tableCellClipboardListener0 = null;
      columnTC_Sample0.removeCellClipboardListener((TableCellClipboardListener) null);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isSortAscending());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      
      columnTC_Sample0.setSortAscending(false);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      
      TableCellMouseEvent tableCellMouseEvent0 = new TableCellMouseEvent();
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertNotNull(tableCellMouseEvent0);
      
      columnTC_Sample0.invokeCellMouseListeners(tableCellMouseEvent0);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(0, tableCellMouseEvent0.keyboardState);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      
      HashMap<Float, org.gudy.azureus2.core3.disk.impl.DiskManagerFileInfoImpl> hashMap0 = new HashMap<Float, org.gudy.azureus2.core3.disk.impl.DiskManagerFileInfoImpl>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Float float0 = new Float((double) 3);
      assertNotNull(float0);
      assertEquals(3.0F, (float)float0, 0.01F);
      
      float float1 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      org.gudy.azureus2.core3.disk.impl.DiskManagerFileInfoImpl diskManagerFileInfoImpl0 = hashMap0.putIfAbsent(float0, (org.gudy.azureus2.core3.disk.impl.DiskManagerFileInfoImpl) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(diskManagerFileInfoImpl0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      columnTC_Sample0.saveSettings(hashMap0);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      tableCellMouseEvent0.keyboardState = 441;
      String string1 = columnTC_Sample0.getClipboardText((TableCell) null);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      assertNull(string1);
      
      columnTC_NameInfo0.invokeCellMouseListeners(tableCellMouseEvent0);
      assertEquals(0, tableCellMouseEvent0.x);
      assertEquals(2, TableRowMouseEvent.EVENT_MOUSEDOUBLECLICK);
      assertEquals(0, tableCellMouseEvent0.y);
      assertEquals(4, TableRowMouseEvent.EVENT_MOUSEENTER);
      assertFalse(tableCellMouseEvent0.skipCoreFunctionality);
      assertEquals(3, TableRowMouseEvent.EVENT_MOUSEMOVE);
      assertEquals(5, TableRowMouseEvent.EVENT_MOUSEEXIT);
      assertEquals(0, tableCellMouseEvent0.button);
      assertEquals(1, TableRowMouseEvent.EVENT_MOUSEUP);
      assertEquals(0, TableRowMouseEvent.EVENT_MOUSEDOWN);
      assertEquals(0, tableCellMouseEvent0.eventType);
      assertEquals(441, tableCellMouseEvent0.keyboardState);
      assertEquals(2, columnTC_NameInfo0.getType());
      assertFalse(columnTC_NameInfo0.isSortValueLive());
      assertEquals("TableColumnNameInfo", columnTC_NameInfo0.getName());
      assertFalse(columnTC_NameInfo0.getColumnAdded());
      assertFalse(columnTC_NameInfo0.doesAutoTooltip());
      assertEquals(16, columnTC_NameInfo0.getMinWidth());
      assertNull(columnTC_NameInfo0.getIconReference());
      assertFalse(columnTC_NameInfo0.isObfusticated());
      assertTrue(columnTC_NameInfo0.hasCellMouseMoveListener());
      assertTrue(columnTC_NameInfo0.isSortAscending());
      assertEquals((-1), columnTC_NameInfo0.getPosition());
      assertEquals((-3), columnTC_NameInfo0.getRefreshInterval());
      assertEquals((-1), columnTC_NameInfo0.getMaxWidth());
      assertFalse(columnTC_NameInfo0.isMaxWidthAuto());
      assertTrue(columnTC_NameInfo0.hasCellRefreshListener());
      assertEquals((-1), columnTC_NameInfo0.getPreferredWidthMax());
      assertFalse(columnTC_NameInfo0.isVisible());
      assertEquals(0, columnTC_NameInfo0.getPreferredWidth());
      assertFalse(columnTC_NameInfo0.isMinWidthAuto());
      assertEquals(0, columnTC_NameInfo0.getConsecutiveErrCount());
      assertEquals(5, columnTC_NameInfo0.getAlignment());
      assertFalse(columnTC_NameInfo0.isRemoved());
      assertEquals(415, columnTC_NameInfo0.getWidth());
      assertTrue(columnTC_NameInfo0.isPreferredWidthAuto());
      assertTrue(columnTC_NameInfo0.getUseCoreDataSource());
      assertFalse(columnTC_NameInfo0.showOnlyImage());
      assertNull(columnTC_NameInfo0.getTableID());
      assertFalse(columnTC_NameInfo0.isFirstLoad());
      assertFalse(columnTC_NameInfo0.isInplaceEdit());
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TableColumnSample");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      columnTC_Sample0.setVisible(false);
      assertEquals(120, columnTC_Sample0.getWidth());
      assertFalse(columnTC_Sample0.isVisible());
      assertTrue(columnTC_Sample0.isPreferredWidthAuto());
      assertEquals(1, columnTC_Sample0.getAlignment());
      assertEquals(0, columnTC_Sample0.getConsecutiveErrCount());
      assertFalse(columnTC_Sample0.hasCellMouseMoveListener());
      assertFalse(columnTC_Sample0.isSortAscending());
      assertFalse(columnTC_Sample0.hasCellRefreshListener());
      assertNull(columnTC_Sample0.getIconReference());
      assertEquals((-1), columnTC_Sample0.getPreferredWidthMax());
      assertEquals(16, columnTC_Sample0.getMinWidth());
      assertEquals((-2), columnTC_Sample0.getRefreshInterval());
      assertFalse(columnTC_Sample0.isRemoved());
      assertEquals((-1), columnTC_Sample0.getPosition());
      assertEquals(3, columnTC_Sample0.getType());
      assertFalse(columnTC_Sample0.isFirstLoad());
      assertFalse(columnTC_Sample0.doesAutoTooltip());
      assertEquals((-1), columnTC_Sample0.getMaxWidth());
      assertFalse(columnTC_Sample0.isMaxWidthAuto());
      assertFalse(columnTC_Sample0.showOnlyImage());
      assertFalse(columnTC_Sample0.isSortValueLive());
      assertFalse(columnTC_Sample0.getColumnAdded());
      assertFalse(columnTC_Sample0.isObfusticated());
      assertFalse(columnTC_Sample0.isInplaceEdit());
      assertEquals("TableColumnSample", columnTC_Sample0.getName());
      assertTrue(columnTC_Sample0.getUseCoreDataSource());
      assertNull(columnTC_Sample0.getTableID());
      assertFalse(columnTC_Sample0.isMinWidthAuto());
      assertEquals(16, columnTC_Sample0.getPreferredWidth());
      
      System.setCurrentTimeMillis(72057594037927936L);
      IndentWriter indentWriter0 = new IndentWriter((PrintWriter) null);
      assertEquals("    ", indentWriter0.getTab());
      assertNotNull(indentWriter0);
      
      // Undeclared exception!
      try { 
        columnTC_Sample0.generateDiagnostics(indentWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gudy.azureus2.core3.util.IndentWriter", e);
      }
  }
}
