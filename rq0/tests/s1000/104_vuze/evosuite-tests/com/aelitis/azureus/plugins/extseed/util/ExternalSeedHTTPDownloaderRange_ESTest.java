/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:43:47 GMT 2018
 */

package com.aelitis.azureus.plugins.extseed.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderListener;
import com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.gudy.azureus2.core3.config.impl.ConfigurationManager;
import org.gudy.azureus2.core3.util.Constants;
import org.gudy.azureus2.core3.util.SystemProperties;
import org.gudy.azureus2.core3.util.protocol.socks5.Handler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExternalSeedHTTPDownloaderRange_ESTest extends ExternalSeedHTTPDownloaderRange_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "QTEpA}");
      externalSeedHTTPDownloaderRange0.getLast503RetrySecs();
      SystemProperties.getUserPath();
      externalSeedHTTPDownloaderRange0.clearPasswords();
      SystemProperties.getUserPath();
      externalSeedHTTPDownloaderRange0.getAuthentication("#MmY~t>%Dw3", uRL0);
      externalSeedHTTPDownloaderRange0.getLastResponse();
      externalSeedHTTPDownloaderRange0.deactivate();
      externalSeedHTTPDownloaderRange0.getLastResponse();
      externalSeedHTTPDownloaderRange0.getURL();
      externalSeedHTTPDownloaderRange0.getAuthentication("QTEpA}", uRL0);
      String[] stringArray0 = new String[20];
      stringArray0[2] = "";
      stringArray0[3] = "#MmY~t>%Dw3";
      stringArray0[4] = "#MmY~t>%Dw3";
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, (-229), externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange((URL) null, "");
      Constants.APP_NAME = "jVJ>";
      externalSeedHTTPDownloaderRange0.setAuthenticationOutcome("i}ch", (URL) null, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ConfigurationManager.getInstance();
      stringArray0[3] = "i}ch";
      stringArray0[4] = "i}ch";
      stringArray0[6] = "";
      stringArray0[7] = "i}ch";
      stringArray0[8] = "";
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 0, externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "");
      int int0 = 0;
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(0, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = null;
      String[] stringArray0 = null;
      int int0 = 770;
      boolean boolean0 = true;
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "ra*");
      try { 
        externalSeedHTTPDownloaderRange0.download(2804, (ExternalSeedHTTPDownloaderListener) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalSeedHTTPDownloaderRange.main((String[]) null);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "u!lZy52=}Tn?b+V+vk");
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange(440, 440, (ExternalSeedHTTPDownloaderListener) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      String[] stringArray0 = new String[0];
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 5, externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange(0, 0, externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange(5, 5, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2959);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL("Zqo", "Zqo", 2959, "Zqo", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "Zqo");
      String[] stringArray0 = new String[0];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(2959, 2959).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 2959, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: input too short reading header, Retry-After: 0 seconds
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "z");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn((-5), (-5)).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange((-5), (-5), externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Timeout during connect, Retry-After: 0 seconds
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "g");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn((-4), (-4)).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange((-4), (-4), externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Timeout during connect
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2959);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL(":ead ", ":ead ", 2959, "|:mRqnlUj@z+HKgxH`", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, ":ead ");
      String[] stringArray0 = new String[0];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 2959, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: input too short reading header, Retry-After: 0 seconds
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL("Zqo", "Zqo", 2959, "Zqo", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "Zqo");
      String[] stringArray0 = new String[0];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 2959, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@86d25c28
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2959);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL("Zqo", "Zqo", 2959, "Zqo", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "Zqo");
      String[] stringArray0 = new String[1];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 2959, externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: input too short reading header, Retry-After: 0 seconds
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2959);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Handler handler0 = new Handler();
      URL uRL0 = MockURL.URL(":ead ", ":ead ", 2959, "|:mRqnlUj@z+HKgxH`", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, ":ead ");
      String[] stringArray0 = new String[0];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn((-1970), (-1970)).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadSocket(stringArray0, stringArray0, 2959, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Timeout during connect, Retry-After: 0 seconds
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "EO?p0ba");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "EO?p0ba");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange((-1), (-1), externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: data too short - -1/0 [No buffer assigned]
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.40945861869508926
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "\r\n");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      externalSeedHTTPDownloaderRange0.downloadRange(0, 0, externalSeedHTTPDownloaderListener0, true);
      assertEquals(200, externalSeedHTTPDownloaderRange0.getLastResponse());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "U-6mdv|_ZJ}G");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "\r\n");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(externalSeedHTTPDownloaderListener0).getBuffer();
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getBufferLength();
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getBufferPosition();
      doReturn(0).when(externalSeedHTTPDownloaderListener0).getPermittedBytes();
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange(443, 443, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.40945861869508926
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL0, "U-6mdv|_ZJ}G");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "U-6mdv|_ZJ}G");
      byte[] byteArray0 = new byte[1];
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(externalSeedHTTPDownloaderListener0).getBuffer();
      doReturn(336).when(externalSeedHTTPDownloaderListener0).getBufferLength();
      doReturn((int)(byte)0).when(externalSeedHTTPDownloaderListener0).getBufferPosition();
      doReturn((int)(byte)0, (int)(byte)0, (int)(byte)0, 0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedBytes();
      doReturn((int)(byte)0, (int)(byte)0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange((byte)0, 336, externalSeedHTTPDownloaderListener0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4437572842601484
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2959);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      URL uRL0 = MockURL.getFtpExample();
      org.gudy.azureus2.core3.util.protocol.i2p.Handler handler0 = new org.gudy.azureus2.core3.util.protocol.i2p.Handler();
      URL uRL1 = MockURL.URL(uRL0, ":ead ", (URLStreamHandler) handler0);
      ExternalSeedHTTPDownloaderRange externalSeedHTTPDownloaderRange0 = new ExternalSeedHTTPDownloaderRange(uRL1, "NO90zTSRN\"P_G]");
      ExternalSeedHTTPDownloaderListener externalSeedHTTPDownloaderListener0 = mock(ExternalSeedHTTPDownloaderListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(externalSeedHTTPDownloaderListener0).getPermittedTime();
      try { 
        externalSeedHTTPDownloaderRange0.downloadRange(0L, 2522, externalSeedHTTPDownloaderListener0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection failed: Could not find: ftp.someFakeButWellFormedURL.org
         //
         verifyException("com.aelitis.azureus.plugins.extseed.util.ExternalSeedHTTPDownloaderRange", e);
      }
  }
}
