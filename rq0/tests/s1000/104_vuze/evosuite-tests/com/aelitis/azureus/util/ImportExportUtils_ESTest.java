/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:25:08 GMT 2018
 */

package com.aelitis.azureus.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.util.ImportExportUtils;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gudy.azureus2.core3.config.impl.ConfigurationManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImportExportUtils_ESTest extends ImportExportUtils_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, (String) null);
      ImportExportUtils.exportInt(hashMap0, (String) null, 16);
      float float0 = ImportExportUtils.importFloat(hashMap0, "", 16);
      assertEquals(16.0F, float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      ImportExportUtils.exportJSONString(hashMap0, "Q,3\"gLFOyM2Jq(DOE", "Q,3\"gLFOyM2Jq(DOE");
      ImportExportUtils importExportUtils0 = new ImportExportUtils();
      ImportExportUtils.importStringArray(hashMap0, "T}?]=>HGH|UObL]");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      hashMap0.put(long0, integer0);
      String[] stringArray0 = ImportExportUtils.importStringArray(hashMap0, "");
      ImportExportUtils importExportUtils0 = new ImportExportUtils();
      String string0 = ImportExportUtils.importString((Map) hashMap0, "", "");
      assertNotNull(string0);
      
      float float0 = ImportExportUtils.importFloat(hashMap0, (String) null, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      long long1 = ImportExportUtils.importLong((Map) hashMap0, "Plugin.DHT.dht.portdefault");
      assertEquals(0L, long1);
      
      ImportExportUtils.exportJSONStringArray(hashMap0, "", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(1540L);
      Long.max(332L, 0L);
      Long.compareUnsigned(1540L, 1540L);
      Long.min(2391L, 2391L);
      Long long1 = Long.getLong("Alg.Alias.Signature.RIPEMD160WithRSA", 1540L);
      Long long2 = Long.getLong("}f8}at6=R", long0);
      Long.compare(0L, 1L);
      hashMap0.put(long0, long0);
      hashMap0.put(long1, long2);
      Long.compareUnsigned(0L, 3L);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.computeIfPresent(long1, biFunction0);
      ImportExportUtils.importLong((Map) hashMap0, "kPFEUwD=P:I0j1QUqs.");
      ImportExportUtils.exportJSONString(hashMap0, (String) null, (String) null);
      ImportExportUtils.importIntArray(hashMap0, "Alg.Alias.Signature.RIPEMD160WithRSA");
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kPFEUwD=P:I0j1QUqs.";
      ImportExportUtils.exportStringArray(hashMap0, (String) null, stringArray0);
      int int0 = ImportExportUtils.importInt((Map) hashMap0, "Alg.Alias.Signature.RIPEMD160WithRSA");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      ImportExportUtils.importURL(hashMap0, "");
      ImportExportUtils.importString((Map) hashMap0, "", (String) null);
      // Undeclared exception!
      try { 
        ImportExportUtils.exportStringArray(hashMap0, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.util.ImportExportUtils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      ImportExportUtils.importStringArray(hashMap0, "");
      ImportExportUtils importExportUtils0 = new ImportExportUtils();
      ImportExportUtils.exportLong(hashMap0, "", 0L);
      ImportExportUtils.importString((Map) hashMap0, "", "");
      ImportExportUtils.importURL(hashMap0, "MD5withRSA/ISO9796-2");
      ImportExportUtils.importFloat((Map) null, "u2x+kb/+C)C", 0L);
      ImportExportUtils.importLong((Map) hashMap0, "");
      ImportExportUtils.importFloat(hashMap0, "", (-1709.602F));
      ImportExportUtils.importBoolean((Map) null, "");
      ImportExportUtils.importStringArray(hashMap0, (String) null);
      ImportExportUtils.importBoolean((Map) hashMap0, "", false);
      ImportExportUtils.importURL(hashMap0, "");
      // Undeclared exception!
      try { 
        ImportExportUtils.importStringArray(hashMap0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.util.List
         //
         verifyException("com.aelitis.azureus.util.ImportExportUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>(1846, 1846);
      Integer integer0 = new Integer(577);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      ImportExportUtils.exportURL(hashMap0, (String) null, (String) null);
      assertFalse(hashMap0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ImportExportUtils.exportIntArray(hashMap0, " aV", intArray0);
      // Undeclared exception!
      try { 
        ImportExportUtils.importStringArray(hashMap0, " aV");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.util.List
         //
         verifyException("com.aelitis.azureus.util.ImportExportUtils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ImportExportUtils.exportBoolean(hashMap0, "[UcX#'m3D", false);
      assertFalse(hashMap0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(1000L);
      Object object0 = new Object();
      Long long1 = new Long(1000L);
      Long.compareUnsigned(300000L, 8L);
      Object object1 = new Object();
      int int0 = ImportExportUtils.importInt((Map) hashMap0, "UTF-8", (-1247));
      assertEquals((-1247), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("\"34gu", "\"34gu");
      hashMap0.entrySet();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      hashMap0.put("com.aelitis.azureus.core.versioncheck.VersionCheckClient$1", boolean0);
      hashMap0.put("o y@yf", "o y@yf");
      hashMap0.put("", (Object) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.computeIfPresent("o y@yf", biFunction0);
      ImportExportUtils.exportFloat(hashMap0, "", (-1.0F));
      Object object0 = new Object();
      hashMap0.put("", object0);
      ImportExportUtils.importFloat(hashMap0, "", (-1.0F));
      ImportExportUtils.exportURL(hashMap0, "o y@yf", "o y@yf");
      ImportExportUtils.importIntArray(hashMap0, "o y@yf");
      ImportExportUtils.exportString(hashMap0, "g^43$o\"u:N+6TA ev5P", "");
      hashMap0.keySet();
      ImportExportUtils.importBoolean((Map) hashMap0, (String) null);
      ImportExportUtils.importLong((Map) hashMap0, "613WcU#'Yr1", 1030L);
      int int0 = ImportExportUtils.importInt((Map) hashMap0, "");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      long long0 = ImportExportUtils.importLong((Map) null, "[");
      assertEquals(0L, long0);
      
      boolean boolean0 = ImportExportUtils.importBoolean((Map) null, "].9B0gz-$o-NB1G\"Z!H");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("UOslAt{F'({)K1ia{6", (Object) null);
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      ImportExportUtils.importString((Map) hashMap0, "m5P10", "m5P10");
      ImportExportUtils.importIntArray(hashMap0, "m5P10");
      hashMap0.put("m5P10", "(c[Mx\"o%na;rA67&W");
      ImportExportUtils.exportJSONURL(hashMap0, "UTF-8", "m5P10");
      Boolean boolean0 = Boolean.valueOf("UTF-8");
      hashMap0.put("m5P10", boolean0);
      ImportExportUtils.exportJSONBoolean(hashMap0, "6GWkwT`=,c24*", false);
      Object object1 = new Object();
      Object object2 = new Object();
      hashMap0.remove(object1, object2);
      ImportExportUtils.importStringArray(hashMap0, "com.aelitis.azureus.util.ImportExportUtils");
      ImportExportUtils.exportIntArray(hashMap0, "com.aelitis.azureus.util.ImportExportUtils", (int[]) null);
      ImportExportUtils.importString((Map) hashMap0, "UTF-8", "UOslAt{F'({)K1ia{6");
      ImportExportUtils.importFloat(hashMap0, "", 0.0F);
      int[] intArray0 = new int[0];
      ImportExportUtils.exportIntArray(hashMap0, "}yx'Wx::4RYzpJi$#", intArray0);
      ImportExportUtils.exportBoolean(hashMap0, "UTF-8", true);
      assertFalse(hashMap0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("CN", "");
      String string0 = ImportExportUtils.importURL(hashMap0, "CN");
      assertNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("SystemProperties::getUserPath: user_path = ", "AYXl4oc_xN:$XgAp-");
      // Undeclared exception!
      try { 
        ImportExportUtils.importFloat(hashMap0, "SystemProperties::getUserPath: user_path = ", 6.1F);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ImportExportUtils.importString((Map) hashMap0, (String) null);
      String string0 = ImportExportUtils.importString((Map) hashMap0, (String) null, "KgbH");
      assertNotNull(string0);
      
      ImportExportUtils.exportLong(hashMap0, "KgbH", 1L);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = new Object();
      float float0 = new Long(1L);
      boolean boolean0 = ImportExportUtils.importBoolean((Map) hashMap0, "KgbH", false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2161022480912638
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      hashMap0.put(long0, integer0);
      ImportExportUtils.importStringArray(hashMap0, "");
      ImportExportUtils importExportUtils0 = new ImportExportUtils();
      ImportExportUtils.exportFloat(hashMap0, (String) null, 0);
      ImportExportUtils.importString((Map) hashMap0, "", "");
      ImportExportUtils.importLong((Map) hashMap0, "Plugin.DHT.dht.portdefault");
      ImportExportUtils.importFloat(hashMap0, (String) null, 0L);
      ImportExportUtils.importBoolean((Map) hashMap0, "");
      long long1 = ImportExportUtils.importLong((Map) hashMap0, (String) null, 1L);
      assertEquals(2, hashMap0.size());
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        ImportExportUtils.importLong((Map) hashMap0, "", 1L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ImportExportUtils.importURL(hashMap0, "+");
      hashMap0.put((String) null, "+");
      String string0 = ImportExportUtils.importURL(hashMap0, (String) null);
      assertEquals(" ", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalAnd(true, true);
      hashMap0.put("eB#%\u0006E", boolean0);
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.put("eB#%\u0006E", boolean1);
      ImportExportUtils.importBoolean((Map) hashMap0, "eB#%\u0006E", false);
      boolean boolean2 = ImportExportUtils.importBoolean((Map) hashMap0, "eB#%\u0006E", false);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q";
      ImportExportUtils.exportStringArray(hashMap0, "q", stringArray0);
      String[] stringArray1 = ImportExportUtils.importStringArray(hashMap0, "q");
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImportExportUtils importExportUtils0 = new ImportExportUtils();
      ConfigurationManager.getInstance();
      ConfigurationManager.getInstance();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String[] stringArray0 = new String[7];
      stringArray0[3] = "L(T$XAEdF_I'";
      stringArray0[1] = "L(T$XAEdF_I'";
      stringArray0[2] = "L(T$XAEdF_I'";
      stringArray0[4] = "L(T$XAEdF_I'";
      stringArray0[5] = "L(T$XAEdF_I'";
      stringArray0[6] = "L(T$XAEdF_I'";
      ImportExportUtils.exportJSONStringArray(hashMap0, "L(T$XAEdF_I'", stringArray0);
      String[] stringArray1 = ImportExportUtils.importStringArray(hashMap0, "L(T$XAEdF_I'");
      assertEquals(7, stringArray1.length);
  }
}
