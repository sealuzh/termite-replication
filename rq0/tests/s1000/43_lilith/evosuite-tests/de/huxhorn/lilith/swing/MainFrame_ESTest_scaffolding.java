/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Aug 07 14:05:56 GMT 2018
 */

package de.huxhorn.lilith.swing;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class MainFrame_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "de.huxhorn.lilith.swing.MainFrame"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/home/ubuntu/evosuite_readability_gen/projects/43_lilith"); 
    java.lang.System.setProperty("user.home", "/home/ubuntu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ubuntu"); 
    java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MainFrame_ESTest_scaffolding.class.getClassLoader() ,
      "de.huxhorn.lilith.engine.LoggingFileBufferFactory",
      "de.huxhorn.sulky.buffers.AppendOperation",
      "de.huxhorn.lilith.swing.ViewContainerFrame",
      "de.huxhorn.sulky.tasks.TaskListener",
      "org.simplericity.macify.eawt.ApplicationListener",
      "de.huxhorn.lilith.swing.OpenPreviousDialog",
      "de.huxhorn.lilith.swing.HelpFrame",
      "de.huxhorn.lilith.swing.MainFrame$AutostartRunnable",
      "de.huxhorn.sulky.buffers.ResetOperation",
      "de.huxhorn.lilith.swing.filefilters.XmlImportFileFilter",
      "de.huxhorn.sulky.buffers.RemoveOperation",
      "de.huxhorn.lilith.swing.debug.DebugDialog",
      "de.huxhorn.lilith.engine.EventSourceListener",
      "de.huxhorn.lilith.engine.AccessFileBufferFactory",
      "de.huxhorn.lilith.engine.EventSourceProducer",
      "de.huxhorn.lilith.swing.StatisticsDialog",
      "de.huxhorn.lilith.swing.MainFrame$CheckForUpdateRunnable",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$ErrorConsumerRunnable",
      "de.huxhorn.lilith.engine.EventSource",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$OutConsumerRunnable",
      "de.huxhorn.sulky.buffers.CircularBuffer",
      "de.huxhorn.lilith.swing.AboutDialog",
      "de.huxhorn.lilith.swing.MainFrame$MainTaskListener",
      "de.huxhorn.lilith.swing.MainFrame$ShowUpdateDialog",
      "de.huxhorn.sulky.buffers.Buffer",
      "de.huxhorn.lilith.engine.FileBufferFactory",
      "de.huxhorn.lilith.swing.MainFrame",
      "de.huxhorn.sulky.codec.filebuffer.FileHeaderStrategy",
      "de.huxhorn.lilith.swing.taskmanager.TaskManagerInternalFrame",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable",
      "de.huxhorn.lilith.engine.SourceManager",
      "de.huxhorn.lilith.swing.ViewWindow",
      "de.huxhorn.lilith.swing.preferences.PreferencesDialog",
      "de.huxhorn.lilith.swing.filefilters.LilithFileFilter",
      "de.huxhorn.lilith.swing.MainFrame$4",
      "de.huxhorn.lilith.swing.ViewContainerInternalFrame",
      "org.simplericity.macify.eawt.Application",
      "de.huxhorn.sulky.swing.MemoryStatus",
      "de.huxhorn.lilith.LilithBuffer",
      "de.huxhorn.lilith.engine.LogFileFactory",
      "de.huxhorn.sulky.buffers.BlockingCircularBuffer",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$AbstractOutputConsumerRunnable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.lang.Process", false, MainFrame_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MainFrame_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "de.huxhorn.lilith.swing.MainFrame",
      "de.huxhorn.lilith.swing.MainFrame$MainWindowListener",
      "de.huxhorn.lilith.swing.MainFrame$ShutdownRunnable",
      "de.huxhorn.lilith.swing.MainFrame$MainTaskListener",
      "de.huxhorn.lilith.swing.MainFrame$PreferencesChangeListener",
      "de.huxhorn.lilith.swing.MainFrame$LoggingEventSourceListener",
      "de.huxhorn.lilith.swing.MainFrame$AccessEventSourceListener",
      "de.huxhorn.lilith.swing.MainFrame$1",
      "de.huxhorn.lilith.swing.MainFrame$2",
      "de.huxhorn.lilith.swing.MainFrame$3",
      "de.huxhorn.lilith.swing.MainFrame$AutostartRunnable",
      "de.huxhorn.lilith.swing.MainFrame$MyApplicationListener",
      "de.huxhorn.lilith.swing.MainFrame$CheckForUpdateRunnable",
      "de.huxhorn.lilith.swing.MainFrame$ShowViewRunnable",
      "de.huxhorn.lilith.swing.MainFrame$ScrollToBottomRunnable",
      "de.huxhorn.lilith.swing.MainFrame$EventSourceComparator",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable",
      "de.huxhorn.lilith.swing.MainFrame$ImportType",
      "de.huxhorn.lilith.data.logging.LoggingEvent$Level",
      "de.huxhorn.lilith.swing.table.ColorScheme",
      "de.huxhorn.lilith.data.access.HttpStatus$Type",
      "de.huxhorn.lilith.swing.ApplicationPreferences",
      "de.huxhorn.lilith.data.eventsource.SourceIdentifier",
      "de.huxhorn.lilith.engine.impl.LogFileFactoryImpl",
      "de.huxhorn.lilith.engine.FileBufferFactory",
      "de.huxhorn.lilith.engine.LoggingFileBufferFactory",
      "de.huxhorn.sulky.codec.filebuffer.CodecFileBuffer",
      "de.huxhorn.sulky.codec.filebuffer.DefaultFileHeaderStrategy",
      "de.huxhorn.sulky.codec.DelegatingCodecBase",
      "de.huxhorn.sulky.codec.filebuffer.MetaDataCodec",
      "de.huxhorn.sulky.codec.filebuffer.MetaDataEncoder",
      "de.huxhorn.sulky.codec.filebuffer.MetaDataDecoder",
      "de.huxhorn.sulky.codec.filebuffer.DefaultIndexStrategy",
      "de.huxhorn.lilith.appender.InternalLilithAppender",
      "de.huxhorn.lilith.data.access.HttpStatus",
      "de.huxhorn.lilith.swing.LoggingViewState",
      "de.huxhorn.lilith.swing.ApplicationPreferences$SourceFiltering",
      "de.huxhorn.lilith.swing.MainFrame$4",
      "de.huxhorn.lilith.swing.SplashScreen",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$AbstractOutputConsumerRunnable",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$ErrorConsumerRunnable",
      "de.huxhorn.sulky.buffers.BlockingCircularBuffer",
      "de.huxhorn.sulky.buffers.OverwritingCircularBuffer",
      "de.huxhorn.lilith.data.eventsource.EventWrapper",
      "de.huxhorn.lilith.data.eventsource.EventIdentifier",
      "de.huxhorn.lilith.swing.filefilters.GroovyConditionFileFilter",
      "de.huxhorn.lilith.Lilith",
      "de.huxhorn.sulky.sounds.jlayer.JLayerSounds",
      "de.huxhorn.sulky.sounds.jlayer.JLayerSounds$PlayRunnable",
      "de.huxhorn.lilith.data.access.AccessEvent",
      "de.huxhorn.lilith.swing.MainFrame$ProcessConsumerRunnable$OutConsumerRunnable",
      "org.xhtmlrenderer.protocols.data.Handler",
      "org.apache.commons.io.IOUtils",
      "de.huxhorn.lilith.data.logging.LoggingEvent",
      "de.huxhorn.sulky.io.IOUtilities",
      "de.huxhorn.sulky.codec.filebuffer.MetaData",
      "de.huxhorn.sulky.codec.filebuffer.FileHeader",
      "de.huxhorn.sulky.codec.filebuffer.DefaultDataStrategy",
      "de.huxhorn.sulky.codec.SerializableCodec",
      "de.huxhorn.sulky.codec.SerializableEncoder",
      "de.huxhorn.sulky.codec.SerializableDecoder",
      "de.huxhorn.lilith.swing.ApplicationPreferences$1",
      "de.huxhorn.lilith.swing.ApplicationPreferences$EnumPersistenceDelegate",
      "de.huxhorn.lilith.data.logging.LoggerContext",
      "de.huxhorn.sulky.codec.CompressingSerializableCodec",
      "org.objectweb.asm.Opcodes",
      "de.huxhorn.sulky.buffers.SerializingFileBuffer"
    );
  }
}
