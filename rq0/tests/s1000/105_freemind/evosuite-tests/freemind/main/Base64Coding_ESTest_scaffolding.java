/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Aug 07 14:12:55 GMT 2018
 */

package freemind.main;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class Base64Coding_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "freemind.main.Base64Coding"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/home/ubuntu/evosuite_readability_gen/projects/105_freemind"); 
    java.lang.System.setProperty("user.home", "/home/ubuntu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ubuntu"); 
    java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Base64Coding_ESTest_scaffolding.class.getClassLoader() ,
      "freemind.controller.MapModuleManager$MapModuleChangeObserver",
      "org.apache.xml.serializer.WriterToUTF8Buffered",
      "freemind.controller.Controller",
      "freemind.controller.filter.FilterController",
      "freemind.main.FreeMind",
      "org.apache.xml.serializer.ToHTMLStream$Trie$Node",
      "freemind.modes.mindmapmode.attributeactors.AttributeManagerDialog",
      "org.apache.xml.serializer.SecuritySupport12",
      "org.apache.xml.serializer.SerializationHandler",
      "org.apache.xml.serializer.AttributesImplSerializer",
      "freemind.main.IFreeMindSplash",
      "freemind.controller.MapMouseWheelListener",
      "freemind.controller.FreeMindToolBar",
      "org.apache.xml.serializer.SecuritySupport12$4",
      "freemind.main.Base64Coding",
      "org.apache.xml.serializer.ToHTMLStream$Trie",
      "org.apache.xml.serializer.EncodingInfo",
      "org.apache.xml.serializer.NamespaceMappings$Stack",
      "org.apache.xml.serializer.SerializerBase",
      "freemind.modes.filemode.FileToolBar",
      "org.apache.xml.serializer.SecuritySupport",
      "org.apache.batik.ext.awt.image.IdentityTransfer",
      "freemind.controller.NodeDropListener",
      "org.apache.xml.serializer.SerializerConstants",
      "freemind.modes.filemode.FileMode",
      "freemind.controller.MapModuleManager$MapTitleContributor",
      "freemind.main.FreeMindMain",
      "org.apache.xml.serializer.ExtendedContentHandler",
      "freemind.main.LoggingOutputStream",
      "freemind.controller.MainToolBar",
      "freemind.controller.MapModuleManager",
      "freemind.controller.NodeMouseMotionListener",
      "freemind.main.FreeMindStarter$ProxyAuthenticator",
      "org.apache.xml.serializer.ExtendedLexicalHandler",
      "org.apache.xml.serializer.ElemDesc",
      "org.apache.xml.serializer.DOMSerializer",
      "freemind.controller.NodeMotionListener",
      "freemind.main.Resources",
      "org.apache.batik.ext.awt.image.TransferFunction",
      "org.apache.xml.serializer.Serializer",
      "org.apache.xml.serializer.ToHTMLStream",
      "org.apache.xml.serializer.WriterChain",
      "freemind.controller.MapMouseMotionListener",
      "org.apache.xml.serializer.ToStream$WritertoStringBuffer",
      "freemind.preferences.FreemindPropertyListener",
      "freemind.controller.Controller$LocalLinkConverter",
      "org.apache.xml.serializer.WriterToASCI",
      "org.apache.xml.serializer.NamespaceMappings",
      "org.apache.xml.serializer.utils.WrappedRuntimeException",
      "freemind.main.FreeMindMain$VersionInformation",
      "org.apache.xml.serializer.CharInfo$CharKey",
      "freemind.controller.ZoomListener",
      "org.apache.xml.serializer.SerializerTraceWriter",
      "freemind.view.MapModule",
      "freemind.controller.MenuBar",
      "freemind.controller.LastOpenedList",
      "org.apache.xml.serializer.XSLOutputAttributes",
      "freemind.modes.Mode",
      "org.apache.xml.serializer.CharInfo",
      "org.apache.xml.serializer.CharInfo$1",
      "freemind.view.mindmapview.MapView",
      "org.apache.xml.serializer.ToStream$BoolStack",
      "org.apache.xml.serializer.EncodingInfo$InEncoding",
      "freemind.controller.filter.FilterToolbar",
      "org.apache.xml.serializer.NamespaceMappings$MappingRecord",
      "freemind.controller.MapModuleManager$MapTitleChangeListener",
      "freemind.main.LogFileLogHandler",
      "freemind.main.FreeMindSecurityManager",
      "freemind.main.XMLParseException",
      "freemind.view.mindmapview.MapView$ScrollPane",
      "org.apache.xml.serializer.ElemContext",
      "freemind.main.StdFormatter",
      "org.apache.xml.serializer.utils.StringToIntTable",
      "freemind.modes.MindMap",
      "freemind.controller.NodeKeyListener",
      "org.apache.xml.serializer.ToStream",
      "freemind.common.TextTranslator",
      "tests.freemind.FreeMindMainMock",
      "freemind.controller.NodeDragListener",
      "freemind.common.NamedObject",
      "org.apache.xml.serializer.SerializerTrace",
      "freemind.main.FreeMindStarter",
      "freemind.modes.ModeController"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Base64Coding_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "freemind.main.Resources",
      "tests.freemind.FreeMindMainMock",
      "freemind.main.FreeMindStarter",
      "freemind.main.Base64Coding",
      "freemind.modes.Mode",
      "freemind.modes.schememode.SchemeMode",
      "freemind.modes.ControllerAdapter",
      "freemind.modes.viewmodes.ViewControllerAdapter",
      "freemind.modes.browsemode.BrowseController",
      "freemind.modes.ControllerAdapter$ControllerPopupMenuListener",
      "freemind.modes.mindmapmode.MindMapMode",
      "freemind.modes.mindmapmode.MindMapController",
      "freemind.modes.filemode.FileMode",
      "org.apache.xml.serializer.SerializerBase",
      "org.apache.xml.serializer.SecuritySupport12",
      "org.apache.xml.serializer.SecuritySupport",
      "org.apache.xml.serializer.SecuritySupport12$4",
      "org.apache.xml.serializer.ToStream",
      "org.apache.xml.serializer.ToHTMLStream$Trie",
      "org.apache.xml.serializer.ToHTMLStream$Trie$Node",
      "org.apache.xml.serializer.ElemDesc",
      "org.apache.xml.serializer.utils.StringToIntTable",
      "org.apache.xml.serializer.ToHTMLStream",
      "org.apache.xml.serializer.AttributesImplSerializer",
      "org.apache.xml.serializer.ElemContext",
      "org.apache.xml.serializer.ToStream$BoolStack",
      "org.apache.xml.serializer.EncodingInfo",
      "org.apache.xml.serializer.CharInfo",
      "org.apache.xml.serializer.CharInfo$1",
      "org.apache.xml.serializer.CharInfo$CharKey",
      "org.apache.xml.serializer.NamespaceMappings",
      "org.apache.xml.serializer.NamespaceMappings$Stack",
      "org.apache.xml.serializer.NamespaceMappings$MappingRecord",
      "freemind.main.FreeMindMain$VersionInformation",
      "freemind.main.FreeMind",
      "freemind.main.FreeMindApplet",
      "org.openstreetmap.gui.jmapviewer.OsmTileLoader",
      "org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader",
      "org.apache.xml.utils.DefaultErrorHandler",
      "org.apache.xml.utils.UnImplNode",
      "org.apache.xalan.templates.ElemTemplateElement",
      "org.apache.xalan.templates.Stylesheet",
      "org.apache.xalan.templates.StylesheetComposed",
      "org.apache.xalan.templates.StylesheetRoot",
      "org.apache.xpath.XPath",
      "org.apache.xpath.Expression",
      "org.apache.xpath.functions.Function",
      "org.apache.xpath.functions.FuncCurrent",
      "org.apache.xpath.functions.FuncLast",
      "org.apache.xpath.functions.FuncPosition",
      "org.apache.xpath.functions.FunctionOneArg",
      "org.apache.xpath.functions.FuncCount",
      "org.apache.xpath.functions.FuncId",
      "org.apache.xpath.functions.Function2Args",
      "org.apache.xalan.templates.FuncKey",
      "org.apache.xpath.functions.FunctionDef1Arg",
      "org.apache.xpath.functions.FuncLocalPart",
      "org.apache.xpath.functions.FuncNamespace",
      "org.apache.xpath.functions.FuncQname",
      "org.apache.xpath.functions.FuncGenerateId",
      "org.apache.xpath.functions.FuncNot",
      "org.apache.xpath.functions.FuncTrue",
      "org.apache.xpath.functions.FuncFalse",
      "org.apache.xpath.functions.FuncBoolean",
      "org.apache.xpath.functions.FuncLang",
      "org.apache.xpath.functions.FuncNumber",
      "org.apache.xpath.functions.FuncFloor",
      "org.apache.xpath.functions.FuncCeiling",
      "org.apache.xpath.functions.FuncRound",
      "org.apache.xpath.functions.FuncSum",
      "org.apache.xpath.functions.FuncString",
      "org.apache.xpath.functions.FuncStartsWith",
      "org.apache.xpath.functions.FuncContains",
      "org.apache.xpath.functions.FuncSubstringBefore",
      "org.apache.xpath.functions.FuncSubstringAfter",
      "org.apache.xpath.functions.FuncNormalizeSpace",
      "org.apache.xpath.functions.Function3Args",
      "org.apache.xpath.functions.FuncTranslate",
      "org.apache.xpath.functions.FunctionMultiArgs",
      "org.apache.xpath.functions.FuncConcat",
      "org.apache.xpath.functions.FuncSystemProperty",
      "org.apache.xpath.functions.FuncExtFunctionAvailable",
      "org.apache.xpath.functions.FuncExtElementAvailable",
      "org.apache.xpath.functions.FuncSubstring",
      "org.apache.xpath.functions.FuncStringLength",
      "org.apache.xpath.functions.FuncDoclocation",
      "org.apache.xpath.functions.FuncUnparsedEntityURI",
      "org.apache.xpath.compiler.FunctionTable",
      "org.apache.xpath.compiler.XPathParser",
      "org.apache.xpath.compiler.OpMap",
      "org.apache.xpath.compiler.Compiler",
      "org.apache.xml.utils.ObjectVector",
      "org.apache.xpath.compiler.Lexer",
      "org.apache.xpath.compiler.OpMapVector",
      "org.apache.xpath.compiler.Keywords",
      "org.apache.xpath.axes.WalkerFactory",
      "org.apache.xpath.objects.XObject",
      "org.apache.xpath.objects.XNumber",
      "org.apache.xpath.patterns.NodeTest",
      "org.apache.xpath.axes.PredicatedNodeTest",
      "org.apache.xpath.axes.LocPathIterator",
      "org.apache.xpath.axes.ChildIterator",
      "org.apache.xpath.axes.IteratorPool",
      "org.apache.xalan.templates.ElemTemplate",
      "org.apache.xpath.patterns.StepPattern",
      "org.apache.xalan.templates.ElemForEach",
      "org.apache.xalan.templates.ElemCallTemplate",
      "org.apache.xalan.templates.ElemApplyTemplates",
      "org.apache.xpath.patterns.UnionPattern",
      "org.apache.xalan.templates.ElemValueOf",
      "org.apache.xpath.axes.SelfIteratorNoPredicate",
      "org.apache.xalan.templates.ElemExtensionDecl",
      "org.apache.xml.utils.StringVector",
      "freemind.modes.browsemode.BrowseMode",
      "org.apache.fop.pdf.PDFDocument",
      "org.apache.xalan.templates.OutputProperties",
      "org.apache.xml.serializer.OutputPropertiesFactory",
      "org.apache.xml.serializer.OutputPropertiesFactory$1",
      "freemind.main.Tools",
      "org.apache.batik.ext.awt.image.IdentityTransfer"
    );
  }
}
