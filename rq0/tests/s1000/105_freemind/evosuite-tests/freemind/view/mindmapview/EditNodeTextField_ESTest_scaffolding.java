/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Aug 07 14:07:08 GMT 2018
 */

package freemind.view.mindmapview;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class EditNodeTextField_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "freemind.view.mindmapview.EditNodeTextField"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(EditNodeTextField_ESTest_scaffolding.class.getClassLoader() ,
      "freemind.view.mindmapview.EditNodeTextField",
      "freemind.view.mindmapview.NodeView",
      "freemind.main.FreeMindMain",
      "freemind.main.FreeMindStarter$ProxyAuthenticator",
      "freemind.main.Tools$NameMnemonicHolder",
      "freemind.main.Resources",
      "freemind.main.Tools",
      "freemind.view.mindmapview.MapView",
      "freemind.common.TextTranslator",
      "freemind.view.mindmapview.EditNodeBase",
      "tests.freemind.FreeMindMainMock",
      "freemind.view.mindmapview.MainView",
      "freemind.main.FreeMindStarter",
      "freemind.modes.ModeController"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(EditNodeTextField_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "freemind.main.Resources",
      "tests.freemind.FreeMindMainMock",
      "freemind.main.FreeMindStarter",
      "freemind.main.Tools",
      "freemind.view.mindmapview.EditNodeBase",
      "freemind.view.mindmapview.EditNodeTextField",
      "freemind.view.mindmapview.EditNodeTextField$1TextFieldListener",
      "freemind.view.mindmapview.EditNodeTextField$1",
      "com.inet.jortho.SpellCheckerOptions",
      "com.inet.jortho.SpellChecker",
      "com.inet.jortho.SpellChecker$AbtsractLanguageAction",
      "com.inet.jortho.Utils",
      "com.inet.jortho.SpellChecker$DisableLanguageAction",
      "com.inet.jortho.RedZigZagPainter",
      "com.inet.jortho.AutoSpellChecker",
      "freemind.modes.ControllerAdapter",
      "freemind.modes.viewmodes.ViewControllerAdapter",
      "freemind.modes.browsemode.BrowseController",
      "freemind.modes.ControllerAdapter$ControllerPopupMenuListener",
      "freemind.modes.Mode",
      "freemind.modes.mindmapmode.MindMapMode",
      "freemind.modes.browsemode.BrowseMode",
      "freemind.modes.schememode.SchemeController",
      "freemind.modes.filemode.FileMode",
      "org.openstreetmap.gui.jmapviewer.Tile",
      "freemind.modes.schememode.SchemeMode",
      "freemind.main.FreeMindMain$VersionInformation",
      "freemind.main.FreeMind",
      "freemind.main.FreeMindApplet",
      "freemind.view.mindmapview.MainView",
      "freemind.view.mindmapview.BubbleMainView",
      "org.openstreetmap.gui.jmapviewer.OsmTileLoader",
      "org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader",
      "org.openstreetmap.gui.jmapviewer.JMapViewer",
      "org.openstreetmap.gui.jmapviewer.MemoryTileCache",
      "org.openstreetmap.gui.jmapviewer.MemoryTileCache$CacheLinkedListElement",
      "org.openstreetmap.gui.jmapviewer.AttributionSupport",
      "org.openstreetmap.gui.jmapviewer.tilesources.AbstractTileSource",
      "org.openstreetmap.gui.jmapviewer.tilesources.AbstractTMSTileSource",
      "org.openstreetmap.gui.jmapviewer.tilesources.AbstractOsmTileSource",
      "org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource$Mapnik",
      "org.openstreetmap.gui.jmapviewer.TileController",
      "org.openstreetmap.gui.jmapviewer.JobDispatcher$JobThread",
      "org.openstreetmap.gui.jmapviewer.JobDispatcher",
      "org.openstreetmap.gui.jmapviewer.JMapViewer$1",
      "org.openstreetmap.gui.jmapviewer.JMapViewer$2",
      "org.openstreetmap.gui.jmapviewer.JMapViewer$3",
      "org.openstreetmap.gui.jmapviewer.OsmMercator",
      "org.openstreetmap.gui.jmapviewer.JMapController",
      "org.openstreetmap.gui.jmapviewer.DefaultMapController",
      "freemind.modes.mindmapmode.MindMapController",
      "freemind.view.mindmapview.NodeView"
    );
  }
}
