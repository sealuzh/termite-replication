/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:05:56 GMT 2018
 */

package de.huxhorn.lilith.swing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import de.huxhorn.lilith.swing.MainFrame;
import java.io.File;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MainFrame_ESTest extends MainFrame_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile("9](iv", (String) null);
      MainFrame.AutostartRunnable mainFrame_AutostartRunnable0 = new MainFrame.AutostartRunnable(file0);
      mainFrame_AutostartRunnable0.run();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile("9]_(iv", (String) null);
      MainFrame.AutostartRunnable mainFrame_AutostartRunnable0 = new MainFrame.AutostartRunnable(file0);
      mainFrame_AutostartRunnable0.destroyProcess();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MainFrame.ProcessConsumerRunnable mainFrame_ProcessConsumerRunnable0 = new MainFrame.ProcessConsumerRunnable((Process) null);
      mainFrame_ProcessConsumerRunnable0.destroyProcess();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1796);
      Process process0 = mock(Process.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(process0).getErrorStream();
      doReturn(pipedInputStream0).when(process0).getInputStream();
      doReturn(0).when(process0).waitFor();
      MainFrame.ProcessConsumerRunnable mainFrame_ProcessConsumerRunnable0 = new MainFrame.ProcessConsumerRunnable(process0);
      mainFrame_ProcessConsumerRunnable0.destroyProcess();
      mainFrame_ProcessConsumerRunnable0.run();
  }
}
