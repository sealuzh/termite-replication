/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:58:17 GMT 2018
 */

package org.jsecurity.mgt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationInfo;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.credential.SimpleCredentialsMatcher;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.crypto.Cipher;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.ProxiedSession;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.SessionManager;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.RememberMeManager;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.WebRememberMeManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultSecurityManager_ESTest extends DefaultSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      defaultSecurityManager0.createAuthorizer();
      defaultSecurityManager0.getSubject();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("] threw an exception during onFailedLogin for AuthenticationToken [");
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(simpleAccountRealm0);
      defaultSecurityManager0.getRememberMeManager();
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeEncryptionCipherKeyBase64("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      Cipher cipher0 = webRememberMeManager0.getCipher();
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeCipher(cipher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.getRememberedIdentity();
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("%}*yvCt*q-");
      defaultSecurityManager0.unbind((Subject) null);
      defaultSecurityManager0.setRememberMeEncryptionCipherKeyHex("");
      defaultSecurityManager0.bind((Subject) null);
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      defaultSecurityManager0.setRememberMeManager(webRememberMeManager0);
      assertFalse(webRememberMeManager0.equals((Object)webRememberMeManager1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      defaultSecurityManager0.getRememberedIdentity();
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.createAuthorizer();
      defaultSecurityManager0.getSubject();
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm((String) null);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeDecryptionCipherKeyHex((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (char[]) null, false);
      try { 
        defaultSecurityManager0.login(usernamePasswordToken0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Authentication failed for token submission [org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
         //
         verifyException("org.jsecurity.authc.AbstractAuthenticator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      SessionManager sessionManager0 = defaultSecurityManager0.getSessionManager();
      defaultSecurityManager0.sessionManager = sessionManager0;
      defaultSecurityManager0.beforeLogout((PrincipalCollection) null);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultSecurityManager defaultSecurityManager1 = new DefaultSecurityManager(simpleAccountRealm0);
      assertFalse(defaultSecurityManager1.equals((Object)defaultSecurityManager0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimpleCredentialsMatcher simpleCredentialsMatcher0 = new SimpleCredentialsMatcher();
      simpleAccountRealm0.setCredentialsMatcher(simpleCredentialsMatcher0);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeCipherKeyHex("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DefaultSecurityManager defaultSecurityManager1 = new DefaultSecurityManager();
      Subject subject0 = defaultSecurityManager1.getSubject();
      defaultSecurityManager0.bind(subject0);
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager1.setRememberMeManager(webRememberMeManager0);
      assertFalse(defaultSecurityManager1.equals((Object)defaultSecurityManager0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection0, simplePrincipalCollection0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      defaultSecurityManager0.rememberMeSuccessfulLogin(usernamePasswordToken0, simpleAccount0);
      // Undeclared exception!
      try { 
        defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Authentication info returned from Authenticator must have non null and non empty principals.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Class<AuthenticationListener> class0 = AuthenticationListener.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "X[Vwp#EFw\"]");
      Collection<AuthenticationListener> collection0 = simplePrincipalCollection0.byType(class0);
      Class<Realm> class1 = Realm.class;
      Collection<Realm> collection1 = simplePrincipalCollection0.byType(class1);
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(collection1);
      Collection<Realm> collection2 = modularRealmAuthorizer0.getRealms();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(collection2);
      defaultSecurityManager0.setAuthenticationListeners(collection0);
      defaultSecurityManager0.createSubject();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeEncryptionCipherKey(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.getRememberedIdentity();
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("%}*yvCt*q-");
      defaultSecurityManager0.unbind((Subject) null);
      defaultSecurityManager0.setRememberMeEncryptionCipherKeyHex("");
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      defaultSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      defaultSecurityManager0.createSubject((PrincipalCollection) null, (Session) null);
      defaultSecurityManager0.setRememberMeCipherKeyBase64("rememberMe");
      defaultSecurityManager0.rememberMeLogout((PrincipalCollection) null);
      defaultSecurityManager0.logout((PrincipalCollection) null);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<SimpleAccountRealm> linkedHashSet0 = new LinkedHashSet<SimpleAccountRealm>();
      LinkedHashSet<Realm> linkedHashSet1 = new LinkedHashSet<Realm>(linkedHashSet0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Class<UsernamePasswordToken> class0 = UsernamePasswordToken.class;
      simpleAccountRealm0.setAuthenticationTokenClass(class0);
      linkedHashSet1.add(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      linkedHashSet1.add(simpleAccountRealm1);
      linkedHashSet1.add(simpleAccountRealm1);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(linkedHashSet1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)86;
      // Undeclared exception!
      try { 
        defaultSecurityManager0.setRememberMeCipherKey(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DefaultSecurityManager defaultSecurityManager1 = new DefaultSecurityManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(")+|MV");
      DefaultSecurityManager defaultSecurityManager2 = new DefaultSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultSecurityManager2.getRealms();
      defaultSecurityManager1.realms = collection0;
      defaultSecurityManager1.getSubject();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q8V]", "");
      DefaultSecurityManager defaultSecurityManager3 = new DefaultSecurityManager();
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) collection0, "a non-null Subject instance");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Set<String> set0 = simplePrincipalCollection1.getRealmNames();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount(defaultSecurityManager3, object0, "]y[h+o7!As#Q`0", set0, linkedHashSet0);
      Subject subject0 = defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
      assertTrue(subject0.isAuthenticated());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DefaultSecurityManager defaultSecurityManager1 = new DefaultSecurityManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultSecurityManager defaultSecurityManager2 = new DefaultSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultSecurityManager2.getRealms();
      defaultSecurityManager1.realms = collection0;
      defaultSecurityManager1.getSubject();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q8V]", "");
      DefaultSecurityManager defaultSecurityManager3 = new DefaultSecurityManager();
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) collection0, "a non-null Subject instance");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      // Undeclared exception!
      try { 
        defaultSecurityManager1.setRememberMeDecryptionCipherKey((byte[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting remember me cipher attributes are only available when the underlying RememberMeManager implementation is a subclass of org.jsecurity.subject.AbstractRememberMeManager.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.getRememberedIdentity();
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("%}*yvCt*q-");
      defaultSecurityManager0.getRememberedIdentity();
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      InetAddress inetAddress0 = MockInetAddress.getByName("rememberMe");
      Session session0 = defaultSecurityManager0.start(inetAddress0);
      ProxiedSession proxiedSession0 = new ProxiedSession(session0);
      InetAddress inetAddress1 = proxiedSession0.getHostAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      SimpleAccount simpleAccount0 = new SimpleAccount("%}*yvCt*q-", "%}*yvCt*q-", "Ql", linkedHashSet0, linkedHashSet1);
      Subject subject0 = defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
      assertTrue(subject0.isAuthenticated());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DefaultSecurityManager defaultSecurityManager1 = new DefaultSecurityManager();
      Subject subject0 = defaultSecurityManager1.getSubject();
      defaultSecurityManager0.getRememberedIdentity();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      Session session0 = defaultSecurityManager1.start(inetAddress0);
      defaultSecurityManager1.createSubject((PrincipalCollection) null, session0);
      defaultSecurityManager1.bind(subject0);
      defaultSecurityManager0.logout((PrincipalCollection) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("CATc,mO7wO", (char[]) null, inetAddress0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Object object0 = new Object();
      defaultSecurityManager0.rememberMeLogout((PrincipalCollection) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      defaultSecurityManager0.getRememberedIdentity();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      Session session0 = defaultSecurityManager0.start(inetAddress0);
      Subject subject0 = defaultSecurityManager0.createSubject((PrincipalCollection) null, session0);
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>((byte)98, (byte)98);
      defaultSecurityManager0.checkPermissions((PrincipalCollection) null, (Collection<Permission>) linkedHashSet0);
      defaultSecurityManager0.bind(subject0);
      defaultSecurityManager0.logout((PrincipalCollection) null);
      char[] charArray0 = new char[0];
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      AllPermission allPermission0 = new AllPermission();
      SimpleAccount simpleAccount0 = null;
      try {
        simpleAccount0 = new SimpleAccount((Object) null, allPermission0, "@?G", linkedHashSet1, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // principal argument cannot be null.
         //
         verifyException("org.jsecurity.subject.SimplePrincipalCollection", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4410152780267027
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("%}*yvCt*q-");
      defaultSecurityManager0.unbind((Subject) null);
      defaultSecurityManager0.setRememberMeEncryptionCipherKeyHex("");
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener0);
      defaultSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      defaultSecurityManager0.getRememberedIdentity();
      defaultSecurityManager0.logout((PrincipalCollection) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "9<1`_`2)-KQ+)Gp");
      try { 
        defaultSecurityManager0.login(usernamePasswordToken0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Authentication failed for token submission [org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
         //
         verifyException("org.jsecurity.authc.AbstractAuthenticator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'h';
      charArray0[2] = ' ';
      charArray0[3] = 'j';
      charArray0[4] = '-';
      charArray0[5] = '~';
      charArray0[6] = 'P';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("will not be performed for account [", charArray0, false, inetAddress0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("will not be performed for account [", "will not be performed for account [");
      Class<Integer> class0 = Integer.class;
      simplePrincipalCollection0.spliterator();
      simplePrincipalCollection0.oneByType(class0);
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection0, defaultSecurityManager0);
      Subject subject0 = defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
      defaultSecurityManager0.bind(subject0);
      defaultSecurityManager0.stopSession(subject0);
      defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
      System.setCurrentTimeMillis(0L);
      defaultSecurityManager0.onSuccessfulLogin(usernamePasswordToken0, simpleAccount0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.615630577027551
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("%}*yvCt*q-");
      Subject subject0 = defaultSecurityManager0.createSubject();
      defaultSecurityManager0.bind(subject0);
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%}*yvCt*q-", "%}*yvCt*q-", inetAddress0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Object object0 = new Object();
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection0, object0);
      defaultSecurityManager0.rememberMeSuccessfulLogin(usernamePasswordToken0, simpleAccount0);
      // Undeclared exception!
      try { 
        defaultSecurityManager0.createSubject(usernamePasswordToken0, simpleAccount0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Authentication info returned from Authenticator must have non null and non empty principals.
         //
         verifyException("org.jsecurity.mgt.DefaultSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultSecurityManager0.rememberMeManager = (RememberMeManager) webRememberMeManager0;
      defaultSecurityManager0.setRememberMeDecryptionCipherKeyBase64("]");
      Subject subject0 = defaultSecurityManager0.getSubject();
      defaultSecurityManager0.bind(subject0);
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Object object0 = new Object();
      SimpleAccount simpleAccount0 = new SimpleAccount(simplePrincipalCollection0, "]");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%}*yvCt*q-", (char[]) null, inetAddress0);
      defaultSecurityManager0.rememberMeSuccessfulLogin(usernamePasswordToken0, (AuthenticationInfo) null);
      defaultSecurityManager0.logout(simplePrincipalCollection0);
  }
}
