/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:49:05 GMT 2018
 */

package com.liferay.portlet.shopping.model.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.util.ServerDetector;
import com.liferay.portal.model.EmailAddress;
import com.liferay.portal.model.EmailAddressWrapper;
import com.liferay.portal.model.Phone;
import com.liferay.portal.model.PhoneWrapper;
import com.liferay.portal.model.PortletItem;
import com.liferay.portal.model.PortletItemWrapper;
import com.liferay.portal.model.Team;
import com.liferay.portal.model.TeamWrapper;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.shopping.model.ShoppingItem;
import com.liferay.portlet.shopping.model.ShoppingItemSoap;
import com.liferay.portlet.shopping.model.ShoppingItemWrapper;
import com.liferay.portlet.shopping.model.impl.ShoppingItemImpl;
import com.liferay.portlet.shopping.model.impl.ShoppingItemModelImpl;
import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.time.FixedMillisecond;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShoppingItemModelImpl_ESTest extends ShoppingItemModelImpl_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.2766661190160535
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      ShoppingItemImpl shoppingItemImpl0 = (ShoppingItemImpl)shoppingItemModelImpl0.clone();
      assertEquals("", shoppingItemImpl0.getUserName());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals("", shoppingItemImpl0.getSmallImageURL());
      assertEquals(0L, shoppingItemImpl0.getOriginalLargeImageId());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getPrimaryKey());
      assertEquals("", shoppingItemImpl0.getSku());
      assertEquals("", shoppingItemImpl0.getDescription());
      assertFalse(shoppingItemImpl0.isRequiresShipping());
      assertEquals(0.0, shoppingItemImpl0.getPrice(), 0.01);
      assertEquals(0L, shoppingItemImpl0.getOriginalCompanyId());
      assertFalse(shoppingItemImpl0.getSale());
      assertEquals(0L, shoppingItemImpl0.getOriginalCategoryId());
      assertEquals("", shoppingItemImpl0.getFieldsQuantities());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals("", shoppingItemImpl0.getProperties());
      assertEquals("", shoppingItemImpl0.getMediumImageURL());
      assertEquals("", shoppingItemImpl0.getName());
      assertEquals(0L, shoppingItemImpl0.getOriginalMediumImageId());
      assertEquals(0, shoppingItemImpl0.getStockQuantity());
      
      shoppingItemModelImpl0.toCacheModel();
      assertFalse(shoppingItemModelImpl0.getTaxable());
      assertEquals(0.0, shoppingItemModelImpl0.getShipping(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      // Undeclared exception!
      try { 
        shoppingItemImpl0.setPrimaryKeyObj((Serializable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.shopping.model.impl.ShoppingItemModelImpl", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9675961830591184
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setLargeImageURL("boundary");
      shoppingItemImpl0.toCacheModel();
      assertEquals("boundary", shoppingItemImpl0.getLargeImageURL());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.isSale();
      assertFalse(boolean0);
      
      shoppingItemImpl0.toCacheModel();
      assertFalse(shoppingItemImpl0.getTaxable());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0.0, shoppingItemImpl0.getShipping(), 0.01);
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertFalse(shoppingItemImpl0.getSmallImage());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0274318817346964
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      // Undeclared exception!
      try { 
        shoppingItemImpl0.setExpandoBridgeAttributes(serviceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.isTaxable();
      shoppingItemImpl0.toCacheModel();
      assertEquals(0, shoppingItemImpl0.getMaxQuantity());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getSale());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0, shoppingItemImpl0.getStockQuantity());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      String string0 = shoppingItemImpl0.getOriginalSku();
      assertEquals("", string0);
      
      boolean boolean0 = shoppingItemImpl0.equals(shoppingItemImpl0);
      assertEquals(0L, shoppingItemImpl0.getPrimaryKey());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      ShoppingItemModelImpl.SKU_COLUMN_BITMASK = 4L;
      shoppingItemModelImpl0.setFields(false);
      shoppingItemModelImpl0.getPrimaryKeyObj();
      shoppingItemModelImpl0.getMediumImageURL();
      shoppingItemModelImpl0.setFeatured(true);
      shoppingItemModelImpl0.getModelClass();
      shoppingItemModelImpl0.setMinQuantity(907);
      shoppingItemModelImpl0.isSmallImage();
      shoppingItemModelImpl0.setSmallImageId(0L);
      assertTrue(shoppingItemModelImpl0.isFeatured());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.248495242049361
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemSoap shoppingItemSoap0 = ShoppingItemSoap.toSoapModel(shoppingItemImpl0);
      ShoppingItemImpl shoppingItemImpl1 = (ShoppingItemImpl)ShoppingItemModelImpl.toModel(shoppingItemSoap0);
      int int0 = shoppingItemImpl0.compareTo((ShoppingItem) shoppingItemImpl1);
      assertEquals("", shoppingItemImpl1.getUserName());
      assertEquals(0L, shoppingItemImpl1.getOriginalLargeImageId());
      assertEquals(0.0, shoppingItemSoap0.getShipping(), 0.01);
      assertEquals(0L, shoppingItemImpl1.getLargeImageId());
      assertEquals("", shoppingItemImpl1.getSku());
      assertEquals((-1L), shoppingItemImpl1.getColumnBitmask());
      assertEquals(0.0, shoppingItemImpl1.getPrice(), 0.01);
      assertEquals("", shoppingItemImpl1.getProperties());
      assertFalse(shoppingItemImpl1.isRequiresShipping());
      assertFalse(shoppingItemImpl1.isTaxable());
      assertEquals("", shoppingItemImpl1.getMediumImageURL());
      assertEquals(0, int0);
      assertEquals(0L, shoppingItemImpl1.getMediumImageId());
      assertEquals(0, shoppingItemImpl1.getStockQuantity());
      assertEquals(0L, shoppingItemImpl1.getOriginalSmallImageId());
      assertEquals(0L, shoppingItemImpl1.getUserId());
      assertEquals(0L, shoppingItemImpl1.getOriginalCategoryId());
      assertEquals(0, shoppingItemImpl1.getMaxQuantity());
      assertEquals(0L, shoppingItemImpl1.getSmallImageId());
      assertEquals(0L, shoppingItemImpl1.getCompanyId());
      assertEquals("", shoppingItemImpl1.getSmallImageURL());
      assertEquals(0L, shoppingItemImpl1.getPrimaryKey());
      assertEquals("", shoppingItemImpl1.getDescription());
      assertEquals(0L, shoppingItemImpl1.getOriginalCompanyId());
      assertFalse(shoppingItemImpl1.getLargeImage());
      assertEquals(0L, shoppingItemImpl1.getGroupId());
      assertFalse(shoppingItemImpl1.isMediumImage());
      assertEquals(0L, shoppingItemImpl1.getOriginalGroupId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemSoap[] shoppingItemSoapArray0 = new ShoppingItemSoap[0];
      ShoppingItemModelImpl.toModels(shoppingItemSoapArray0);
      shoppingItemImpl0.toCacheModel();
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertFalse(shoppingItemImpl0.getLargeImage());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertFalse(shoppingItemImpl0.getSale());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0, shoppingItemImpl0.getStockQuantity());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertFalse(shoppingItemImpl0.getTaxable());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0, shoppingItemImpl0.getMaxQuantity());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      String string0 = shoppingItemModelImpl0.toString();
      assertEquals("{itemId=0, groupId=0, companyId=0, userId=0, userName=, createDate=null, modifiedDate=null, categoryId=0, sku=, name=, description=, properties=, fields=false, fieldsQuantities=, minQuantity=0, maxQuantity=0, price=0.0, discount=0.0, taxable=false, shipping=0.0, useShippingFormula=false, requiresShipping=false, stockQuantity=0, featured=false, sale=false, smallImage=false, smallImageId=0, smallImageURL=, mediumImage=false, mediumImageId=0, mediumImageURL=, largeImage=false, largeImageId=0, largeImageURL=}", string0);
      
      ShoppingItemSoap[] shoppingItemSoapArray0 = new ShoppingItemSoap[1];
      List<ShoppingItem> list0 = ShoppingItemModelImpl.toModels(shoppingItemSoapArray0);
      boolean boolean0 = shoppingItemModelImpl0.equals(list0);
      assertFalse(boolean0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemImpl shoppingItemImpl1 = new ShoppingItemImpl();
      shoppingItemImpl0.hashCode();
      assertEquals(0L, shoppingItemImpl0.getPrimaryKey());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.967596183059118
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setDescription("j015");
      shoppingItemModelImpl0.toCacheModel();
      assertEquals("j015", shoppingItemModelImpl0.getDescription());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setFieldsQuantities(", name=");
      shoppingItemImpl0.toCacheModel();
      assertEquals(", name=", shoppingItemImpl0.getFieldsQuantities());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.isSmallImage();
      assertFalse(boolean0);
      
      shoppingItemImpl0.toCacheModel();
      assertEquals(0, shoppingItemImpl0.getMaxQuantity());
      assertFalse(shoppingItemImpl0.getLargeImage());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0, shoppingItemImpl0.getStockQuantity());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0.0, shoppingItemImpl0.getPrice(), 0.01);
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getSale());
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertEquals(0L, shoppingItemImpl0.getItemId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.getModelClassName();
      shoppingItemModelImpl0.toCacheModel();
      assertFalse(shoppingItemModelImpl0.getUseShippingFormula());
      assertEquals(0.0, shoppingItemModelImpl0.getShipping(), 0.01);
      assertEquals(0L, shoppingItemModelImpl0.getCategoryId());
      assertEquals(0.0, shoppingItemModelImpl0.getDiscount(), 0.01);
      assertFalse(shoppingItemModelImpl0.getSmallImage());
      assertEquals(0L, shoppingItemModelImpl0.getItemId());
      assertEquals(0, shoppingItemModelImpl0.getStockQuantity());
      assertEquals(0L, shoppingItemModelImpl0.getLargeImageId());
      assertFalse(shoppingItemModelImpl0.getLargeImage());
      assertFalse(shoppingItemModelImpl0.getRequiresShipping());
      assertEquals(0L, shoppingItemModelImpl0.getMediumImageId());
      assertFalse(shoppingItemModelImpl0.getFields());
      assertFalse(shoppingItemModelImpl0.getSale());
      assertEquals(0L, shoppingItemModelImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemModelImpl0.getUserId());
      assertEquals(0L, shoppingItemModelImpl0.getGroupId());
      assertFalse(shoppingItemModelImpl0.getFeatured());
      assertEquals(0L, shoppingItemModelImpl0.getCompanyId());
      assertFalse(shoppingItemModelImpl0.getTaxable());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.500478972018642
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-3099L));
      System.setCurrentTimeMillis((-1700L));
      System.setCurrentTimeMillis(2419200L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis(2895L);
      System.setCurrentTimeMillis(1545L);
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      Map<String, Object> map0 = shoppingItemModelImpl0.getModelAttributes();
      shoppingItemModelImpl0.setModelAttributes(map0);
      shoppingItemModelImpl0.setMediumImageId(2419200L);
      shoppingItemModelImpl0.setCategoryId((-3099L));
      shoppingItemModelImpl0.setSku("");
      shoppingItemModelImpl0.toCacheModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(64L);
      shoppingItemModelImpl0.toCacheModel();
      System.setCurrentTimeMillis(4L);
      shoppingItemModelImpl0.toCacheModel();
      assertEquals(2419200L, shoppingItemModelImpl0.getMediumImageId());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setUserUuid("W_0f@7IYOY");
      shoppingItemImpl0.toCacheModel();
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertFalse(shoppingItemImpl0.getLargeImage());
      assertEquals(0.0, shoppingItemImpl0.getPrice(), 0.01);
      assertFalse(shoppingItemImpl0.getSale());
      assertFalse(shoppingItemImpl0.getTaxable());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertEquals(0, shoppingItemImpl0.getStockQuantity());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0, shoppingItemImpl0.getMaxQuantity());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getItemId());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.isNew();
      shoppingItemModelImpl0.setPrice(2.5);
      shoppingItemModelImpl0.setMediumImageURL(" ORDER BY shoppingItem.itemId ASC");
      shoppingItemModelImpl0.setSku("liferayTransactionManager");
      shoppingItemModelImpl0.getCategoryId();
      shoppingItemModelImpl0.getOriginalGroupId();
      shoppingItemModelImpl0.setRequiresShipping(false);
      shoppingItemModelImpl0.getFieldsQuantities();
      shoppingItemModelImpl0.setCategoryId((-2413L));
      shoppingItemModelImpl0.setProperties("liferayTransactionManager");
      shoppingItemModelImpl0.isLargeImage();
      long long0 = shoppingItemModelImpl0.getOriginalCategoryId();
      assertEquals(" ORDER BY shoppingItem.itemId ASC", shoppingItemModelImpl0.getMediumImageURL());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.getFeatured();
      shoppingItemImpl0.getDescription();
      shoppingItemImpl0.setLargeImageId(32L);
      shoppingItemImpl0.getOriginalSku();
      shoppingItemImpl0.toCacheModel();
      shoppingItemImpl0.getLargeImageURL();
      shoppingItemImpl0.setLargeImageId((-5490L));
      System.setCurrentTimeMillis(0L);
      shoppingItemImpl0.toCacheModel();
      shoppingItemImpl0.toXmlString();
      System.setCurrentTimeMillis(4L);
      System.setCurrentTimeMillis(4L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      long long0 = (-3026L);
      ServerDetector.init("");
      ShoppingItemModelImpl.SKU_COLUMN_BITMASK = long0;
      boolean boolean0 = true;
      shoppingItemModelImpl0.isNew();
      shoppingItemModelImpl0.setFields(boolean0);
      shoppingItemModelImpl0.setTaxable(boolean0);
      shoppingItemModelImpl0.getOriginalSmallImageId();
      shoppingItemModelImpl0.setFeatured(boolean0);
      shoppingItemModelImpl0.setCompanyId(long0);
      assertTrue(shoppingItemModelImpl0.getFeatured());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.getProperties();
      shoppingItemModelImpl0.setUserId(2132L);
      shoppingItemModelImpl0.setLargeImage(true);
      shoppingItemModelImpl0.setSku(">*E!i~'");
      shoppingItemModelImpl0.setGroupId(0L);
      shoppingItemModelImpl0.isSmallImage();
      shoppingItemModelImpl0.getOriginalGroupId();
      PortletItem portletItem0 = mock(PortletItem.class, new ViolatedAssumptionAnswer());
      PortletItemWrapper portletItemWrapper0 = new PortletItemWrapper(portletItem0);
      boolean boolean0 = shoppingItemModelImpl0.getSale();
      assertEquals(">*E!i~'", shoppingItemModelImpl0.getSku());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.isNew();
      shoppingItemModelImpl0.setPrice(2.5);
      shoppingItemModelImpl0.setMediumImageURL("(hY'6AwP");
      shoppingItemModelImpl0.setSku("(hY'6AwP");
      shoppingItemModelImpl0.getCategoryId();
      shoppingItemModelImpl0.getOriginalGroupId();
      shoppingItemModelImpl0.setRequiresShipping(false);
      shoppingItemModelImpl0.setSmallImageId((-367L));
      shoppingItemModelImpl0.getFieldsQuantities();
      shoppingItemModelImpl0.setSmallImageId(0L);
      shoppingItemModelImpl0.setProperties("(hY'6AwP");
      shoppingItemModelImpl0.isLargeImage();
      MockDate mockDate0 = new MockDate(0, 1440, 1440);
      shoppingItemModelImpl0.setModifiedDate(mockDate0);
      long long0 = shoppingItemModelImpl0.getOriginalCategoryId();
      assertEquals("(hY'6AwP", shoppingItemModelImpl0.getProperties());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setProperties("liferayDataSource");
      shoppingItemImpl0.toCacheModel();
      assertEquals("liferayDataSource", shoppingItemImpl0.getProperties());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      // Undeclared exception!
      try { 
        shoppingItemImpl0.getUserUuid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.util.PortalUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      boolean boolean0 = ShoppingItemModelImpl.COLUMN_BITMASK_ENABLED;
      long long0 = shoppingItemModelImpl0.getOriginalCompanyId();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.955447307323008
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.isRequiresShipping();
      assertFalse(boolean0);
      
      shoppingItemImpl0.toCacheModel();
      assertFalse(shoppingItemImpl0.getSale());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getLargeImage());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setMediumImageURL("create table ShoppingItem (itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryId LONG,sku VARCHAR(75) null,name VARCHAR(200) null,description STRING null,properties STRING null,fields_ BOOLEAN,fieldsQuantities STRING null,minQuantity INTEGER,maxQuantity INTEGER,price DOUBLE,discount DOUBLE,taxable BOOLEAN,shipping DOUBLE,useShippingFormula BOOLEAN,requiresShipping BOOLEAN,stockQuantity INTEGER,featured_ BOOLEAN,sale_ BOOLEAN,smallImage BOOLEAN,smallImageId LONG,smallImageURL STRING null,mediumImage BOOLEAN,mediumImageId LONG,mediumImageURL STRING null,largeImage BOOLEAN,largeImageId LONG,largeImageURL STRING null)");
      shoppingItemModelImpl0.toCacheModel();
      assertEquals("create table ShoppingItem (itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryId LONG,sku VARCHAR(75) null,name VARCHAR(200) null,description STRING null,properties STRING null,fields_ BOOLEAN,fieldsQuantities STRING null,minQuantity INTEGER,maxQuantity INTEGER,price DOUBLE,discount DOUBLE,taxable BOOLEAN,shipping DOUBLE,useShippingFormula BOOLEAN,requiresShipping BOOLEAN,stockQuantity INTEGER,featured_ BOOLEAN,sale_ BOOLEAN,smallImage BOOLEAN,smallImageId LONG,smallImageURL STRING null,mediumImage BOOLEAN,mediumImageId LONG,mediumImageURL STRING null,largeImage BOOLEAN,largeImageId LONG,largeImageURL STRING null)", shoppingItemModelImpl0.getMediumImageURL());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7376696182833657
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setCategoryId(562949953421312L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      shoppingItemImpl0.setCategoryId(562949953421312L);
      shoppingItemImpl0.getOriginalSku();
      shoppingItemImpl0.getDescription();
      shoppingItemImpl0.getCreateDate();
      shoppingItemImpl0.toXmlString();
      shoppingItemImpl0.resetOriginalValues();
      shoppingItemImpl0.setMinQuantity((-1910));
      shoppingItemImpl0.toCacheModel();
      shoppingItemImpl0.isFields();
      System.setCurrentTimeMillis((-2855L));
      shoppingItemImpl0.toCacheModel();
      System.setCurrentTimeMillis((-2855L));
      shoppingItemImpl0.toCacheModel();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.304065093204166
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShoppingItemSoap[] shoppingItemSoapArray0 = new ShoppingItemSoap[8];
      ShoppingItemSoap shoppingItemSoap0 = new ShoppingItemSoap();
      ShoppingItem shoppingItem0 = ShoppingItemModelImpl.toModel(shoppingItemSoap0);
      ShoppingItemSoap shoppingItemSoap1 = ShoppingItemSoap.toSoapModel(shoppingItem0);
      shoppingItemSoapArray0[0] = shoppingItemSoap1;
      ((ShoppingItemModelImpl) shoppingItem0).setSku("2\".nLB&1X+k1{-;L");
      ((ShoppingItemModelImpl) shoppingItem0).setUserId(385L);
      ((ShoppingItemModelImpl) shoppingItem0).setGroupId(2092L);
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.getSmallImageId();
      PortletItem portletItem0 = mock(PortletItem.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(portletItem0).getCreateDate();
      PortletItemWrapper portletItemWrapper0 = new PortletItemWrapper(portletItem0);
      PortletItemWrapper portletItemWrapper1 = new PortletItemWrapper(portletItemWrapper0);
      portletItemWrapper1.setPrimaryKey((-1951L));
      portletItemWrapper1.getCreateDate();
      ShoppingItemModelImpl shoppingItemModelImpl1 = new ShoppingItemModelImpl();
      shoppingItemModelImpl1.setModifiedDate((Date) null);
      ((ShoppingItemModelImpl) shoppingItem0).getSmallImageURL();
      assertEquals(2092L, shoppingItem0.getGroupId());
      
      shoppingItemModelImpl1.setFieldsQuantities("");
      Proxy proxy0 = (Proxy)shoppingItemModelImpl0.toEscapedModel();
      ShoppingItemModelImpl shoppingItemModelImpl2 = new ShoppingItemModelImpl();
      shoppingItemModelImpl2.compareTo((ShoppingItem) proxy0);
      shoppingItemModelImpl1.getItemId();
      shoppingItemModelImpl2.getMediumImageURL();
      shoppingItemModelImpl1.toXmlString();
      shoppingItemModelImpl0.setSmallImage(false);
      shoppingItemModelImpl0.getColumnBitmask();
      assertEquals(0L, shoppingItemModelImpl0.getCompanyId());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      ShoppingItemModelImpl.GROUPID_COLUMN_BITMASK = 8L;
      Team team0 = mock(Team.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(team0).getCompanyId();
      doReturn((Date) null).when(team0).getCreateDate();
      doReturn((String) null).when(team0).getDescription();
      doReturn(0L).when(team0).getGroupId();
      doReturn((Date) null).when(team0).getModifiedDate();
      doReturn((String) null).when(team0).getName();
      doReturn(0L).when(team0).getTeamId();
      doReturn(0L).when(team0).getUserId();
      doReturn((String) null).when(team0).getUserName();
      TeamWrapper teamWrapper0 = new TeamWrapper(team0);
      Map<String, Object> map0 = teamWrapper0.getModelAttributes();
      shoppingItemModelImpl0.setModelAttributes(map0);
      shoppingItemModelImpl0.setModelAttributes(map0);
      assertEquals(10L, shoppingItemModelImpl0.getColumnBitmask());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.toEscapedModel();
      Proxy proxy0 = (Proxy)shoppingItemImpl0.toEscapedModel();
      // Undeclared exception!
      try { 
        shoppingItemImpl0.compareTo((ShoppingItem) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.HtmlUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7841896339182655
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setLargeImageId((-2032L));
      shoppingItemModelImpl0.isEscapedModel();
      shoppingItemModelImpl0.setMinQuantity(9);
      shoppingItemModelImpl0.toCacheModel();
      shoppingItemModelImpl0.isFeatured();
      shoppingItemModelImpl0.getPrimaryKeyObj();
      shoppingItemModelImpl0.setSku("%2p/RtTbs&R");
      shoppingItemModelImpl0.setRequiresShipping(true);
      shoppingItemModelImpl0.setDiscount(1273.507051893);
      shoppingItemModelImpl0.getFeatured();
      shoppingItemModelImpl0.getMediumImageId();
      long long0 = shoppingItemModelImpl0.getOriginalLargeImageId();
      assertEquals(9, shoppingItemModelImpl0.getMinQuantity());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setName(" ORDER BY shoppingItem.itemId ASC");
      shoppingItemImpl0.toCacheModel();
      assertEquals(" ORDER BY shoppingItem.itemId ASC", shoppingItemImpl0.getName());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.isMediumImage();
      assertFalse(boolean0);
      
      shoppingItemImpl0.toCacheModel();
      assertEquals(0, shoppingItemImpl0.getMaxQuantity());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertFalse(shoppingItemImpl0.getTaxable());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertEquals(0.0, shoppingItemImpl0.getDiscount(), 0.01);
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertFalse(shoppingItemImpl0.getSale());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertFalse(shoppingItemImpl0.getLargeImage());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      shoppingItemModelImpl0.setModelAttributes(hashtable0);
      shoppingItemModelImpl0.toCacheModel();
      assertEquals(0L, shoppingItemModelImpl0.getLargeImageId());
      assertEquals(0, shoppingItemModelImpl0.getStockQuantity());
      assertFalse(shoppingItemModelImpl0.getMediumImage());
      assertFalse(shoppingItemModelImpl0.getFields());
      assertEquals(0L, shoppingItemModelImpl0.getUserId());
      assertEquals(0L, shoppingItemModelImpl0.getCompanyId());
      assertEquals(0L, shoppingItemModelImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemModelImpl0.getCategoryId());
      assertEquals(0, shoppingItemModelImpl0.getMaxQuantity());
      assertEquals(0.0, shoppingItemModelImpl0.getShipping(), 0.01);
      assertEquals(0L, shoppingItemModelImpl0.getGroupId());
      assertFalse(shoppingItemModelImpl0.getFeatured());
      assertEquals(0L, shoppingItemModelImpl0.getItemId());
      assertFalse(shoppingItemModelImpl0.getTaxable());
      assertFalse(shoppingItemModelImpl0.getSale());
      assertFalse(shoppingItemModelImpl0.getRequiresShipping());
      assertFalse(shoppingItemModelImpl0.getUseShippingFormula());
      assertEquals(0L, shoppingItemModelImpl0.getMediumImageId());
      assertFalse(shoppingItemModelImpl0.getLargeImage());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.290459441148392
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      byte[] byteArray0 = new byte[0];
      shoppingItemModelImpl0.setLargeImage(false);
      shoppingItemModelImpl0.clone();
      shoppingItemModelImpl0.setStockQuantity(11);
      shoppingItemModelImpl0.getOriginalMediumImageId();
      shoppingItemModelImpl0.setSku("");
      shoppingItemModelImpl0.getPrimaryKeyObj();
      shoppingItemModelImpl0.setDescription(" ORDER BY ShoppingItem.itemId ASC");
      Map<String, Object> map0 = null;
      ServerDetector.init("liferayDataSource");
      // Undeclared exception!
      try { 
        shoppingItemModelImpl0.setModelAttributes(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.shopping.model.impl.ShoppingItemModelImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      boolean boolean0 = shoppingItemImpl0.isUseShippingFormula();
      boolean boolean1 = shoppingItemImpl0.equals(shoppingItemImpl0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, shoppingItemImpl0.getPrimaryKey());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemModelImpl.toModels((ShoppingItemSoap[]) null);
      shoppingItemImpl0.toCacheModel();
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
      assertFalse(shoppingItemImpl0.getMediumImage());
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertFalse(shoppingItemImpl0.getLargeImage());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertEquals(0.0, shoppingItemImpl0.getPrice(), 0.01);
      assertEquals(0.0, shoppingItemImpl0.getShipping(), 0.01);
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertFalse(shoppingItemImpl0.getSale());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertFalse(shoppingItemImpl0.getTaxable());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.481703979822216
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setSku(">fr{0<T:>*FX\"");
      shoppingItemImpl0.toCacheModel();
      assertEquals(32L, shoppingItemImpl0.getColumnBitmask());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.234106504597258
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setSku("");
      shoppingItemModelImpl0.setSku((String) null);
      PhoneWrapper phoneWrapper0 = new PhoneWrapper((Phone) null);
      Map<String, Object> map0 = shoppingItemModelImpl0.getModelAttributes();
      shoppingItemModelImpl0.setModelAttributes(map0);
      assertEquals((-1L), shoppingItemModelImpl0.getColumnBitmask());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setUserName("yyyy-MM-dd HH:9m:ss.S 'Un]'");
      shoppingItemModelImpl0.toCacheModel();
      assertEquals("yyyy-MM-dd HH:9m:ss.S 'Un]'", shoppingItemModelImpl0.getUserName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemImpl shoppingItemImpl1 = new ShoppingItemImpl();
      shoppingItemImpl1.setSmallImageURL(" ORDER BY shoppingItem.itemId ASC");
      shoppingItemImpl1.toCacheModel();
      assertEquals(" ORDER BY shoppingItem.itemId ASC", shoppingItemImpl1.getSmallImageURL());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      MockDate mockDate0 = new MockDate(32L);
      EmailAddress emailAddress0 = mock(EmailAddress.class, new ViolatedAssumptionAnswer());
      doReturn("LNM'Gcb!*V<@").when(emailAddress0).getAddress();
      doReturn(8L).when(emailAddress0).getClassNameId();
      doReturn(8L).when(emailAddress0).getClassPK();
      doReturn(16L).when(emailAddress0).getCompanyId();
      doReturn(mockDate0).when(emailAddress0).getCreateDate();
      doReturn(1L).when(emailAddress0).getEmailAddressId();
      doReturn(mockDate0).when(emailAddress0).getModifiedDate();
      doReturn(true).when(emailAddress0).getPrimary();
      doReturn(33).when(emailAddress0).getTypeId();
      doReturn(8L).when(emailAddress0).getUserId();
      doReturn("oD9;/t,]lu$x8A(.L").when(emailAddress0).getUserName();
      EmailAddressWrapper emailAddressWrapper0 = new EmailAddressWrapper(emailAddress0);
      Map<String, Object> map0 = emailAddressWrapper0.getModelAttributes();
      shoppingItemImpl0.setModelAttributes(map0);
      assertEquals(8L, shoppingItemImpl0.getUserId());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.toCacheModel();
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemImpl0.setItemId(16L);
      int int0 = shoppingItemModelImpl0.compareTo((ShoppingItem) shoppingItemImpl0);
      assertEquals(16L, shoppingItemImpl0.getPrimaryKey());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      shoppingItemModelImpl0.setItemId(64L);
      ShoppingItemWrapper shoppingItemWrapper0 = new ShoppingItemWrapper(shoppingItemImpl0);
      int int0 = shoppingItemModelImpl0.compareTo((ShoppingItem) shoppingItemWrapper0);
      assertEquals((-1L), shoppingItemModelImpl0.getColumnBitmask());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5502500180019503
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      MockDate mockDate0 = new MockDate();
      shoppingItemImpl0.setModifiedDate(mockDate0);
      shoppingItemImpl0.toCacheModel();
      assertEquals(0L, shoppingItemImpl0.getSmallImageId());
      assertEquals(0L, shoppingItemImpl0.getMediumImageId());
      assertFalse(shoppingItemImpl0.getFields());
      assertEquals(0L, shoppingItemImpl0.getCompanyId());
      assertFalse(shoppingItemImpl0.getFeatured());
      assertEquals(0L, shoppingItemImpl0.getUserId());
      assertFalse(shoppingItemImpl0.getUseShippingFormula());
      assertEquals(0, shoppingItemImpl0.getMinQuantity());
      assertEquals(0L, shoppingItemImpl0.getCategoryId());
      assertEquals(0L, shoppingItemImpl0.getGroupId());
      assertFalse(shoppingItemImpl0.getRequiresShipping());
      assertFalse(shoppingItemImpl0.getLargeImage());
      assertEquals(0L, shoppingItemImpl0.getItemId());
      assertFalse(shoppingItemImpl0.getSale());
      assertFalse(shoppingItemImpl0.getTaxable());
      assertFalse(shoppingItemImpl0.getSmallImage());
      assertEquals(0L, shoppingItemImpl0.getLargeImageId());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.294251909730539
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ShoppingItemModelImpl shoppingItemModelImpl0 = new ShoppingItemModelImpl();
      shoppingItemModelImpl0.setTaxable(false);
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      ShoppingItemWrapper shoppingItemWrapper0 = new ShoppingItemWrapper(shoppingItemImpl0);
      shoppingItemWrapper0.setPrimaryKey(64L);
      shoppingItemModelImpl0.equals(shoppingItemWrapper0);
      System.setCurrentTimeMillis(48L);
      shoppingItemImpl0.setName("create table ShoppingItem (itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryId LONG,sku VARCHAR(75) null,name VARCHAR(200) null,description STRING null,properties STRING null,fields_ BOOLEAN,fieldsQuantities STRING null,minQuantity INTEGER,maxQuantity INTEGER,price DOUBLE,discount DOUBLE,taxable BOOLEAN,shipping DOUBLE,useShippingFormula BOOLEAN,requiresShipping BOOLEAN,stockQuantity INTEGER,featured_ BOOLEAN,sale_ BOOLEAN,smallImage BOOLEAN,smallImageId LONG,smallImageURL STRING null,mediumImage BOOLEAN,mediumImageId LONG,mediumImageURL STRING null,largeImage BOOLEAN,largeImageId LONG,largeImageURL STRING null)");
      System.setCurrentTimeMillis(32L);
      ShoppingItemImpl shoppingItemImpl1 = new ShoppingItemImpl();
      System.setCurrentTimeMillis((-3245L));
      shoppingItemImpl0.getFieldsQuantities();
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(65536L);
      ShoppingItemSoap[] shoppingItemSoapArray0 = new ShoppingItemSoap[6];
      ShoppingItemSoap shoppingItemSoap0 = ShoppingItemSoap.toSoapModel(shoppingItemImpl0);
      shoppingItemSoapArray0[0] = shoppingItemSoap0;
      ShoppingItemSoap shoppingItemSoap1 = new ShoppingItemSoap();
      shoppingItemSoapArray0[1] = shoppingItemSoap1;
      ShoppingItemSoap shoppingItemSoap2 = new ShoppingItemSoap();
      shoppingItemSoapArray0[2] = shoppingItemSoap2;
      ShoppingItemSoap shoppingItemSoap3 = new ShoppingItemSoap();
      shoppingItemSoapArray0[3] = shoppingItemSoap3;
      ShoppingItemSoap shoppingItemSoap4 = new ShoppingItemSoap();
      shoppingItemSoapArray0[4] = shoppingItemSoap4;
      ShoppingItemSoap shoppingItemSoap5 = new ShoppingItemSoap();
      shoppingItemSoap5.setUserName("A(4%i}L0dOOe+jg,Y");
      ShoppingItemModelImpl.toModels(shoppingItemSoapArray0);
      shoppingItemImpl0.equals(shoppingItemModelImpl0);
      System.setCurrentTimeMillis(64L);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.921385106568027
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ShoppingItemImpl shoppingItemImpl0 = new ShoppingItemImpl();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      shoppingItemImpl0.setCreateDate(date0);
      shoppingItemImpl0.toCacheModel();
      shoppingItemImpl0.toCacheModel();
  }
}
