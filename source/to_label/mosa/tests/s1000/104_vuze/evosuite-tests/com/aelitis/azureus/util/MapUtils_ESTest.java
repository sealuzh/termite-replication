/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:27:34 GMT 2018
 */

package com.aelitis.azureus.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.aelitis.azureus.util.MapUtils;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapUtils mapUtils0 = new MapUtils();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = MapUtils.getMapInt(hashMap0, "", 2);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      long long0 = MapUtils.getMapLong(hashMap0, "", 546L);
      assertEquals(546L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      List list0 = MapUtils.getMapList((Map) null, "", linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = MapUtils.getMapLong((Map) null, "", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(15000.0);
      Class<String> class0 = String.class;
      Object object0 = MapUtils.getMapObject((Map) null, ".p^", double0, class0);
      assertEquals(15000.0, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = MapUtils.getMapByteArray((Map) null, "Peer Source Selection Default.Incoming", (byte[]) null);
      assertNull(byteArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = MapUtils.getMapBoolean((Map) null, "&~x7;", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = MapUtils.getMapString((Map) null, "l1)n|(v\"&E1k79xk?tj", "l1)n|(v\"&E1k79xk?tj");
      assertEquals("l1)n|(v\"&E1k79xk?tj", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Map map0 = MapUtils.getMapMap(hashMap0, "", hashMap0);
      assertTrue(map0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      boolean boolean0 = MapUtils.getMapBoolean(hashMap0, "", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("Use Request Limiting", "Use Request Limiting");
      String string0 = MapUtils.getMapString(hashMap0, "Use Request Limiting", (String) null);
      assertEquals("Use Request Limiting", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, (String) null);
      String string0 = MapUtils.getMapString(hashMap0, (String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = MapUtils.getMapInt((Map) null, "", 9);
      assertEquals(9, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Integer integer0 = new Integer(292);
      int int0 = Integer.compareUnsigned((byte)0, 0);
      Byte byte0 = new Byte((byte)0);
      Integer integer1 = new Integer(0);
      hashMap0.put((String) null, byte0);
      int int1 = MapUtils.getMapInt(hashMap0, (String) null, (byte)0);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Map map0 = MapUtils.getMapMap((Map) null, "-BSEy;.g_!", (Map) null);
      assertNull(map0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      Byte byte0 = new Byte((byte)37);
      hashMap0.put("com.aelitis.azureus.util.MapUtils", byte0);
      hashMap0.put("com.aelitis.azureus.util.MapUtils", byte0);
      MapUtils.getMapString(hashMap0, "com.aelitis.azureus.util.MapUtils", "com.aelitis.azureus.util.MapUtils");
      long long0 = MapUtils.getMapLong(hashMap0, "com.aelitis.azureus.util.MapUtils", (byte)37);
      assertEquals(37L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(hashMap0, "l1)n|(v\"&E1kh7xk?tj");
      hashMap0.put("l1)n|(v\"&E1kh7xk?tj", (String) null);
      Map map0 = MapUtils.getMapMap(hashMap0, "l1)n|(v\"&E1kh7xk?tj", hashMap0);
      assertNull(map0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Short short0 = new Short((short) (-3739));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("UX^'2l<NsOFj=<A_%~").when(biFunction0).apply(any() , anyString());
      hashMap0.compute(short0, biFunction0);
      hashMap0.put((Object) null, "fU|");
      Class<Object> class0 = Object.class;
      MapUtils.getMapObject(hashMap0, (String) null, (Object) null, class0);
      String string0 = hashMap0.put("fU|", "l1)n|(v\"&E1k7xk?tj");
      assertNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      hashMap0.put((Double) null, long0);
      boolean boolean0 = MapUtils.getMapBoolean(hashMap0, (String) null, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, (String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      List list0 = MapUtils.getMapList(hashMap0, (String) null, linkedList0);
      assertNull(list0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("#xLDIB^0O7Z,st");
      boolean boolean1 = Boolean.logicalXor(true, true);
      hashMap0.put("#xLDIB^0O7Z,st", boolean0);
      boolean boolean2 = MapUtils.getMapBoolean(hashMap0, "#xLDIB^0O7Z,st", false);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      MapUtils.getMapList(hashMap0, (String) null, linkedList0);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = MapUtils.getMapObject(hashMap0, (String) null, hashMap1, class0);
      hashMap1.put((Long) null, object0);
      MapUtils.getMapMap(hashMap1, (String) null, hashMap1);
      List list0 = MapUtils.getMapList(hashMap1, (String) null, linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("uXMBRH@ NfN", linkedList0);
      List list0 = MapUtils.getMapList(hashMap0, "uXMBRH@ NfN", linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9164648855394713
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      byte[] byteArray0 = new byte[3];
      Long.toUnsignedString((long) (byte)0);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      MapUtils.getMapString(hashMap0, "0", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t>_}/JY.B32");
      Long long0 = new Long(1L);
      hashMap1.put((Double) null, long0);
      MapUtils.getMapBoolean(hashMap1, (String) null, false);
      byte[] byteArray1 = MapUtils.getMapByteArray(hashMap0, (String) null, byteArray0);
      MapUtils.getMapByteArray(hashMap0, "0", byteArray1);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      hashMap0.put("t8.B64.B64.B32", (Long) null);
      byte[] byteArray1 = MapUtils.getMapByteArray(hashMap0, "t8.B64.B64", byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long((-4275L));
      hashMap0.put("null.B64", long0);
      byte[] byteArray1 = MapUtils.getMapByteArray(hashMap0, (String) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
  }
}
