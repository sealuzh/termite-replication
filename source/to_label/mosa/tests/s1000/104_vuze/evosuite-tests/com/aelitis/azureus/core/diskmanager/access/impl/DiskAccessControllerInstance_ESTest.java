/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:24:20 GMT 2018
 */

package com.aelitis.azureus.core.diskmanager.access.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.core.diskmanager.access.DiskAccessRequestListener;
import com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance;
import com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessRequestImpl;
import com.aelitis.azureus.core.diskmanager.cache.CacheFile;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gudy.azureus2.core3.config.impl.ConfigurationManager;
import org.gudy.azureus2.core3.torrent.TOTorrent;
import org.gudy.azureus2.core3.torrent.TOTorrentFile;
import org.gudy.azureus2.core3.util.DirectByteBuffer;
import org.gudy.azureus2.core3.util.DirectByteBufferPool;
import org.gudy.azureus2.core3.util.ReferenceCountedDirectByteBuffer;
import org.gudy.azureus2.core3.util.SystemProperties;
import org.gudy.azureus2.core3.util.SystemTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiskAccessControllerInstance_ESTest extends DiskAccessControllerInstance_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      stringArray0[1] = "'FPl*Q10";
      DiskAccessControllerInstance.main(stringArray0);
      DiskAccessControllerInstance.groupSemaphore.mutableInteger diskAccessControllerInstance_groupSemaphore_mutableInteger0 = new DiskAccessControllerInstance.groupSemaphore.mutableInteger(705);
      diskAccessControllerInstance_groupSemaphore_mutableInteger0.release();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiskAccessControllerInstance.groupSemaphore.mutableInteger diskAccessControllerInstance_groupSemaphore_mutableInteger0 = new DiskAccessControllerInstance.groupSemaphore.mutableInteger((-1914));
      diskAccessControllerInstance_groupSemaphore_mutableInteger0.setValue((-1914));
      DiskAccessControllerInstance diskAccessControllerInstance0 = null;
      try {
        diskAccessControllerInstance0 = new DiskAccessControllerInstance((String) null, false, (-1914), (-1914), (-1914), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("GDR|~MOK;", false, (-1112), (-541), 7, 7);
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher(1697);
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime((-1112));
      diskAccessControllerInstance_requestDispatcher0.getLastRequestTime();
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      long long0 = diskAccessControllerInstance0.getIOTime();
      DirectByteBufferPool directByteBufferPool0 = mock(DirectByteBufferPool.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      long long1 = diskAccessControllerInstance0.getBlockCount();
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("", true, 0, 906, 0, 906);
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("");
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)0, byteBuffer0, (DirectByteBufferPool) null);
      directByteBuffer0.capacity((byte)0);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 500L, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)8, (byte)7);
      diskAccessRequestImpl0.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      SystemTime.useRawProvider();
      diskAccessControllerInstance0.getTotalAggregatedBytes();
      diskAccessControllerInstance0.getQueuedBytes();
      diskAccessControllerInstance0.getBlockCount();
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher((byte)0);
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime((byte)8);
      long long0 = diskAccessControllerInstance0.getTotalBytes();
      diskAccessControllerInstance0.getTotalRequests();
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((byte)3);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((byte)15);
      DiskAccessControllerInstance.groupSemaphore.mutableInteger diskAccessControllerInstance_groupSemaphore_mutableInteger0 = new DiskAccessControllerInstance.groupSemaphore.mutableInteger(100);
      diskAccessControllerInstance_groupSemaphore_mutableInteger0.getValue();
      long long1 = diskAccessControllerInstance0.getBlockCount();
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("#HZKnUx==`O/vI", false, 0, 0, 0, 32);
      diskAccessControllerInstance0.getTotalRequests();
      String string0 = diskAccessControllerInstance0.getString();
      assertEquals("#HZKnUx==`O/vI,agg=false,max_t=0,max_mb=32,q_byte=0 !Formats.units.B!,q_req=0,t_req=0,t_byte=0 !Formats.units.B!,io=0", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("#HZKnUx==`O/vI", false, 0, 0, 0, 32);
      long long0 = diskAccessControllerInstance0.getTotalRequests();
      long long1 = diskAccessControllerInstance0.getTotalAggregatedRequests();
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("&~}dw)]w'oeLEIX0@1", true, 2640, (-374), 18, (-2195));
      diskAccessControllerInstance0.getIOCount();
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher(21);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 100, (int) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("", true, 0, 906, 0, 906);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("");
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)0, byteBuffer0, (DirectByteBufferPool) null);
      directByteBuffer0.capacity((byte)0);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 500L, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)8, (byte)7);
      diskAccessRequestImpl0.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      SystemTime.useRawProvider();
      diskAccessControllerInstance0.getQueueSize();
      diskAccessControllerInstance0.getTotalSingleBytes();
      diskAccessControllerInstance0.getTotalRequests();
      // Undeclared exception!
      try { 
        diskAccessControllerInstance0.releaseSpaceAllowance((DiskAccessRequestImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("#HZKnUx==`O/vI", false, 0, 0, 0, 32);
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher(2754);
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime(2754);
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn((TOTorrent) null).when(tOTorrentFile0).getTorrent();
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrentFile0).when(cacheFile0).getTorrentFile();
      SystemTime.useRawProvider();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2754);
      DirectByteBufferPool directByteBufferPool0 = mock(DirectByteBufferPool.class, new ViolatedAssumptionAnswer());
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte) (-1), byteBuffer0, directByteBufferPool0);
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      SystemProperties.setUserPath("application/x-magnet");
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 3638L, directByteBuffer0, diskAccessRequestListener0, (short)844, (byte)25);
      // Undeclared exception!
      try { 
        diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7804663689386815
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("", true, 0, 906, 0, 906);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("");
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)0, byteBuffer0, (DirectByteBufferPool) null);
      directByteBuffer0.capacity((byte)0);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(diskAccessRequestListener0).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 500L, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)8, (byte)7);
      diskAccessRequestImpl0.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      SystemTime.useRawProvider();
      diskAccessControllerInstance0.getQueueSize();
      diskAccessControllerInstance0.getTotalSingleBytes();
      diskAccessControllerInstance0.getBlockCount();
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher((byte)0);
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime((byte)8);
      diskAccessControllerInstance_requestDispatcher0.getLastRequestTime();
      diskAccessControllerInstance0.getTotalBytes();
      diskAccessControllerInstance0.getTotalRequests();
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((byte)3);
      CacheFile cacheFile1 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestListener diskAccessRequestListener1 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl1 = new DiskAccessRequestImpl(cacheFile1, 3600L, referenceCountedDirectByteBuffer0, diskAccessRequestListener1, (short) (-3817), (byte)16);
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl0);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(1349);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("", true, 0, 906, 0, 906);
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'FPl*Q10";
      stringArray0[1] = "";
      stringArray0[2] = "'FPl*Q10";
      stringArray0[3] = "";
      stringArray0[4] = "com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance$groupSemaphore$mutableInteger";
      stringArray0[5] = "HI";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DiskAccessControllerInstance.main(stringArray0);
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore(1);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((-1277));
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(71);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(0);
      long long0 = diskAccessControllerInstance0.getTotalSingleRequests();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4101942093687723
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((-2457));
      diskAccessControllerInstance_groupSemaphore0.reserveGroup((-2457));
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("PeerRead", false, 11, 35, 11, (-2457));
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn((TOTorrent) null).when(tOTorrentFile0).getTorrent();
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrentFile0).when(cacheFile0).getTorrentFile();
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)26, (byte)26);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(diskAccessRequestListener0).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, (-2457), referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (short)137, (short)120);
      diskAccessControllerInstance0.releaseSpaceAllowance(diskAccessRequestImpl0);
      diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
      Random.setNextRandom(1213);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2459520807289133
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      stringArray0[1] = "'FPl*Q10";
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("PeerRead", true, (-2200), (-2200), 22, 22);
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DirectByteBufferPool directByteBufferPool0 = mock(DirectByteBufferPool.class, new ViolatedAssumptionAnswer());
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)14, byteBuffer0, directByteBufferPool0);
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn((-891)).when(diskAccessRequestListener0).getPriority();
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrent0).when(tOTorrentFile0).getTorrent();
      CacheFile cacheFile1 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrentFile0).when(cacheFile1).getTorrentFile();
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile1, (byte)1, directByteBuffer0, diskAccessRequestListener0, (byte)17, (byte)5);
      diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
      assertEquals(4, diskAccessRequestImpl0.getSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.058223904131167
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((-2457));
      diskAccessControllerInstance_groupSemaphore0.reserveGroup((-2457));
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("PeerRead", false, 11, 35, 11, (-2457));
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)26, (byte)26);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(diskAccessRequestListener0).getPriority();
      SystemProperties.APPLICATION_NAME = "PeerRead";
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, (-2457), referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (short)137, (short)120);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(Integer.MAX_VALUE);
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher((byte)13);
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl0);
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl0);
      assertFalse(diskAccessRequestImpl0.isCancelled());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.231566949043833
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      stringArray0[1] = "'FPl*Q10";
      DiskAccessControllerInstance.main(stringArray0);
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("PeerRead", true, (-2200), (-2200), 22, 22);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrent0).when(tOTorrentFile0).getTorrent();
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrentFile0, (TOTorrentFile) null).when(cacheFile0).getTorrentFile();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DirectByteBufferPool directByteBufferPool0 = mock(DirectByteBufferPool.class, new ViolatedAssumptionAnswer());
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)14, byteBuffer0, directByteBufferPool0);
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(diskAccessRequestListener0).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 4611L, directByteBuffer0, diskAccessRequestListener0, (byte)20, (short) (-1));
      diskAccessRequestImpl0.getPriority();
      diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore(8);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(5938);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((byte)18);
      // Undeclared exception!
      try { 
        diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2208599566291167
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("", true, 0, 906, 0, 906);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("");
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)0, byteBuffer0, (DirectByteBufferPool) null);
      directByteBuffer0.capacity((byte)0);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 500L, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)8, (byte)7);
      diskAccessRequestImpl0.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      SystemTime.useRawProvider();
      diskAccessControllerInstance0.getTotalAggregatedBytes();
      diskAccessControllerInstance0.getTotalSingleBytes();
      diskAccessControllerInstance0.getTotalAggregatedBytes();
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher((byte)0);
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime((byte)8);
      diskAccessControllerInstance_requestDispatcher0.getLastRequestTime();
      diskAccessControllerInstance0.getTotalBytes();
      diskAccessControllerInstance0.getTotalRequests();
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((byte)3);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((byte)15);
      CacheFile cacheFile1 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestListener diskAccessRequestListener1 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(diskAccessRequestListener1).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl1 = new DiskAccessRequestImpl(cacheFile1, (byte)24, directByteBuffer0, diskAccessRequestListener1, (byte)6, (byte)19);
      diskAccessRequestImpl1.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl1);
      System.setCurrentTimeMillis((byte)29);
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl1);
      assertEquals(24L, diskAccessRequestImpl1.getOffset());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.435738601827367
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("M", true, 0, 906, 0, 906);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      SystemProperties.setApplicationName("M");
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)0, byteBuffer0, (DirectByteBufferPool) null);
      directByteBuffer0.capacity((byte)0);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 500L, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)8, (byte)7);
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      SystemTime.useRawProvider();
      diskAccessControllerInstance0.getTotalAggregatedBytes();
      diskAccessControllerInstance0.getTotalSingleBytes();
      diskAccessControllerInstance0.getTotalAggregatedBytes();
      DiskAccessControllerInstance.requestDispatcher diskAccessControllerInstance_requestDispatcher0 = diskAccessControllerInstance0.new requestDispatcher((byte)0);
      diskAccessControllerInstance_requestDispatcher0.setLastRequestTime((byte)8);
      diskAccessControllerInstance_requestDispatcher0.getLastRequestTime();
      diskAccessControllerInstance0.getTotalBytes();
      diskAccessControllerInstance0.getTotalRequests();
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore((byte)3);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((byte)15);
      CacheFile cacheFile1 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestListener diskAccessRequestListener1 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(diskAccessRequestListener1).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl1 = new DiskAccessRequestImpl(cacheFile1, (byte)24, directByteBuffer0, diskAccessRequestListener1, (byte)6, (byte)19);
      diskAccessRequestImpl1.cancel();
      diskAccessControllerInstance0.getSpaceAllowance(diskAccessRequestImpl0);
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl1);
      System.setCurrentTimeMillis((byte)29);
      diskAccessControllerInstance_requestDispatcher0.requestQueued();
      diskAccessControllerInstance_requestDispatcher0.queue(diskAccessRequestImpl1);
      assertTrue(diskAccessRequestImpl1.isCancelled());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.155107982454755
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PeerRead";
      stringArray0[1] = "'FPl*Q10";
      DiskAccessControllerInstance.main(stringArray0);
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("PeerRead", true, (-2200), (-2200), 22, 22);
      TOTorrent tOTorrent0 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrent tOTorrent1 = mock(TOTorrent.class, new ViolatedAssumptionAnswer());
      TOTorrentFile tOTorrentFile0 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrent0).when(tOTorrentFile0).getTorrent();
      TOTorrentFile tOTorrentFile1 = mock(TOTorrentFile.class, new ViolatedAssumptionAnswer());
      doReturn((TOTorrent) null).when(tOTorrentFile1).getTorrent();
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      doReturn(tOTorrentFile0, tOTorrentFile1).when(cacheFile0).getTorrentFile();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DirectByteBufferPool directByteBufferPool0 = mock(DirectByteBufferPool.class, new ViolatedAssumptionAnswer());
      DirectByteBuffer directByteBuffer0 = new DirectByteBuffer((byte)14, byteBuffer0, directByteBufferPool0);
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)19, (int)(byte)14, (int)(byte)21).when(diskAccessRequestListener0).getPriority();
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, 4611L, directByteBuffer0, diskAccessRequestListener0, (byte)20, (short) (-1));
      diskAccessRequestImpl0.getPriority();
      diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore(8);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup(5938);
      diskAccessControllerInstance_groupSemaphore0.releaseGroup((byte)18);
      diskAccessControllerInstance0.queueRequest(diskAccessRequestImpl0);
      diskAccessControllerInstance_groupSemaphore0.reserveGroup((byte)32);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DiskAccessControllerInstance.main(stringArray0);
      DiskAccessControllerInstance.groupSemaphore diskAccessControllerInstance_groupSemaphore0 = new DiskAccessControllerInstance.groupSemaphore(430);
      diskAccessControllerInstance_groupSemaphore0.reserveGroup(430);
      DiskAccessControllerInstance diskAccessControllerInstance0 = new DiskAccessControllerInstance("r_G>5,FzU\"-Yif%JrR!", false, (-2457), 430, 1, (-1107));
      DirectByteBuffer directByteBuffer0 = DirectByteBufferPool.getBuffer((byte)65, 357);
      ReferenceCountedDirectByteBuffer referenceCountedDirectByteBuffer0 = directByteBuffer0.getReferenceCountedBuffer();
      CacheFile cacheFile0 = mock(CacheFile.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestListener diskAccessRequestListener0 = mock(DiskAccessRequestListener.class, new ViolatedAssumptionAnswer());
      DiskAccessRequestImpl diskAccessRequestImpl0 = new DiskAccessRequestImpl(cacheFile0, (byte)11, referenceCountedDirectByteBuffer0, diskAccessRequestListener0, (byte)15, (byte)25);
      diskAccessControllerInstance0.releaseSpaceAllowance(diskAccessRequestImpl0);
      ConfigurationManager.getInstance();
      // Undeclared exception!
      try { 
        diskAccessControllerInstance0.queueRequest((DiskAccessRequestImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.core.diskmanager.access.impl.DiskAccessControllerInstance", e);
      }
  }
}
