/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:52:50 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.main((String[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("date");
      assertTrue(attribute1.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertEquals((-1), attribute1.index());
      assertEquals("date", attribute1.name());
      assertFalse(attribute1.hasZeropoint());
      assertEquals("", attribute0.name());
      assertFalse(attribute1.upperNumericBoundIsOpen());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Rs_", linkedList0, protectedProperties1);
      properties0.putAll(protectedProperties0);
      attribute0.getUpperNumericBound();
      attribute0.equals("Rs_");
      attribute0.isNominal();
      attribute0.getUpperNumericBound();
      // Undeclared exception!
      try { 
        attribute0.formatDate(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only format date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8587543173837989
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      // Undeclared exception!
      try { 
        attribute0.formatDate(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only format date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("kecond");
      Instances instances0 = null;
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("numeric", (Instances) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      String string0 = Attribute.typeToStringShort(attribute0);
      assertEquals("", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("Num", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      String string0 = Attribute.typeToStringShort(attribute0);
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("Dat", string0);
      assertFalse(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.359849252163834
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, 0);
      boolean boolean0 = attribute0.isDate();
      assertFalse(boolean0);
      
      attribute0.setWeight(1027.21);
      String string0 = Attribute.typeToStringShort(4);
      assertEquals("Rel", string0);
      
      Enumeration enumeration0 = attribute0.enumerateValues();
      assertNotNull(enumeration0);
      
      attribute0.weight();
      int int0 = attribute0.addStringValue("inf");
      assertEquals((-1), int0);
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.ordering());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2265558156134033
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, (String) null);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      
      int int0 = attribute0.indexOfValue((String) null);
      assertTrue(attribute0.isRegular());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", attribute0.getDateFormat());
      assertEquals((-1), int0);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Attribute.typeToString(1);
      assertEquals("nominal", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Attribute.typeToString((-872));
      assertEquals("unknown(-872)", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        attribute0.delete(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("-\"h*PiR");
      String string0 = attribute0.getRevision();
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("9172", string0);
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals("-\"h*PiR", attribute0.name());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute.typeToString(3);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("date", "date", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6081583698769648
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("}");
      // Undeclared exception!
      try { 
        attribute0.setValue(2, "date");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only set values for nominal or string attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "N:;&";
      Attribute attribute0 = new Attribute("N:;&");
      // Undeclared exception!
      try { 
        attribute0.addValue("N:;&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.7371823152157605
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      assertFalse(attribute0.isString());
      
      int int0 = attribute0.addStringValue("");
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), int0);
      assertFalse(attribute0.upperNumericBoundIsOpen());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("ProtectedProperties cannot be modified!");
      int int0 = Attribute.ORDERING_SYMBOLIC;
      boolean boolean0 = attribute0.isRegular();
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("ProtectedProperties cannot be modified!", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = new Attribute("X: ");
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      
      attribute0.value(27);
      assertTrue(attribute0.isAveragable());
      assertEquals("X: ", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("", (List<String>) null);
      int int0 = attribute0.addStringValue("");
      assertEquals(0, int0);
      
      String string0 = attribute0.value(0);
      assertEquals("", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", string0);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isNominal());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      String string0 = attribute0.equalsMsg((Object) null);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", attribute0.getDateFormat());
      assertEquals("Comparing with null object", string0);
      assertFalse(attribute0.isAveragable());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.900368082936878
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("s%C5@*;eR_", (List<String>) null);
      // Undeclared exception!
      try { 
        attribute0.setValue(3, "@attribute");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, 1614);
      attribute0.name();
      attribute0.setWeight(1342.7366155945892);
      Attribute.typeToStringShort(1244);
      attribute0.getMetadata();
      attribute0.setStringValue("");
      assertEquals(1342.7366155945892, attribute0.weight(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = Attribute.typeToString(3);
      assertEquals("date", string0);
      
      Attribute attribute0 = new Attribute("date", 3);
      assertEquals("date", attribute0.name());
      assertEquals(3, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Attribute.typeToStringShort(92);
      assertEquals("???", string0);
      
      Attribute attribute0 = new Attribute("???", 92);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("???", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(92, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("second");
      int int0 = attribute0.addStringValue(attribute0, 1);
      assertEquals((-1), attribute0.index());
      assertEquals((-1), int0);
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("second", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.186092030664543
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      attribute0.enumerateValues();
      // Undeclared exception!
      try { 
        attribute0.delete(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove value of nominal, string or relation- valued attribute!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      // Undeclared exception!
      try { 
        attribute0.parseDate((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only parse date values for date attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = new Attribute(">0ugyL. 7iQG1|zpj");
      // Undeclared exception!
      try { 
        attribute0.setValue(2, (Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only set value for relation-valued attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", "");
      int int0 = attribute0.ordering();
      assertEquals(1, int0);
      
      String string0 = attribute0.getRevision();
      assertFalse(attribute0.isAveragable());
      assertEquals("9172", string0);
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.name());
      assertFalse(attribute0.hasZeropoint());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = new Attribute("Can only parse date values for date attributes!");
      attribute0.setWeight(1);
      attribute0.setWeight(0);
      assertEquals("Can only parse date values for date attributes!", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.7371823152157605
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = new Attribute("Can only parse date vluesfo? date attributes!");
      attribute0.setWeight(1);
      Attribute attribute1 = attribute0.copy("\"position\" is date");
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertTrue(attribute1.isAveragable());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals("\"position\" is date", attribute1.name());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("numeric");
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("numeric", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      
      String string0 = Attribute.typeToStringShort(2);
      assertEquals("Str", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("Can only parse date values fr date attrcbutes!");
      boolean boolean0 = attribute0.hasZeropoint();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("Can only parse date values fr date attrcbutes!", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Attribute.NUMERIC;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Attribute attribute0 = new Attribute("M<~$#wtP", instances0);
      attribute0.setWeight(0);
      attribute0.relation();
      assertEquals(0.0, attribute0.weight(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Copy with first attribute deleted and inserted: ");
      Attribute attribute0 = new Attribute("Copy with first attribute deleted and inserted: ", linkedList0);
      assertEquals(1, attribute0.numValues());
      
      attribute0.setValue(0, "Copy with first attribute deleted and inserted: ");
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isNominal());
      assertEquals("Copy with first attribute deleted and inserted: ", attribute0.name());
      assertEquals(0, attribute0.ordering());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8587543173837989
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      attribute0.relation(19);
      attribute0.setWeight(19);
      assertEquals(19.0, attribute0.weight(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6081583698769648
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("5 >,!snc%V8+'X");
      boolean boolean0 = attribute0.isInRange(0);
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals("5 >,!snc%V8+'X", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(boolean0);
      assertFalse(attribute0.upperNumericBoundIsOpen());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, 1614);
      attribute0.equals("t4");
      attribute0.setWeight(1614);
      Integer.sum((-902), 1);
      attribute0.equals("t4");
      attribute0.getLowerNumericBound();
      // Undeclared exception!
      try { 
        attribute0.delete((-1803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove value of nominal, string or relation- valued attribute!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, (String) null);
      boolean boolean0 = attribute0.isDate();
      assertFalse(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.hasZeropoint());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", attribute0.getDateFormat());
      assertEquals((-1), attribute0.index());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9547078905567681
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("s%C5@*;eC_", (List<String>) null);
      boolean boolean0 = attribute0.isInRange(2);
      assertFalse(boolean0);
      assertEquals("s%C5@*;eC_", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.numValues());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.7371823152157605
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("second");
      assertFalse(attribute0.isRelationValued());
      
      int int0 = attribute0.addRelation((Instances) null);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), int0);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("second", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8587543173837989
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute(">0ugyL. 7iQG1|zpj");
      attribute0.relation();
      String string0 = attribute0.toString();
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals("@attribute '>0ugyL. 7iQG1|zpj' numeric", string0);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1851956848497927
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      attribute0.upperNumericBoundIsOpen();
      boolean boolean0 = attribute0.isNumeric();
      boolean boolean1 = attribute0.isAveragable();
      assertTrue(boolean1 == boolean0);
      assertFalse(attribute0.isDate());
      
      attribute0.getDateFormat();
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      String string0 = Attribute.typeToString(0);
      assertEquals("numeric", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute(": ");
      attribute0.numValues();
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(": ", attribute0.name());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0237842771157732
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = new Attribute("T<4|Po%kBzEgr", (List<String>) null);
      boolean boolean0 = attribute0.isInRange(0);
      assertEquals((-1), attribute0.index());
      assertEquals("T<4|Po%kBzEgr", attribute0.name());
      assertEquals(0, attribute0.ordering());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("1\"GH@ [#kh(Ru(ySAA", linkedList0);
      int int0 = attribute0.indexOfValue("@end");
      assertEquals((-1), int0);
      
      boolean boolean0 = attribute0.isInRange((-1));
      assertFalse(boolean0);
      assertEquals("1\"GH@ [#kh(Ru(ySAA", attribute0.name());
      assertFalse(attribute0.isRegular());
      assertTrue(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'h^t.cs7", arrayList0, 5708);
      Instances instances1 = new Instances(instances0, 0);
      Attribute attribute0 = new Attribute("@relation", instances1, 36);
      // Undeclared exception!
      try { 
        attribute0.relation((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("second");
      boolean boolean0 = attribute0.lowerNumericBoundIsOpen();
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertFalse(boolean0);
      assertEquals("second", attribute0.name());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("1\"GH@ [#kh(Ru(ySAA", linkedList0);
      String string0 = Attribute.typeToStringShort(attribute0);
      assertEquals("Nom", string0);
      assertEquals("1\"GH@ [#kh(Ru(ySAA", attribute0.name());
      assertEquals(0, attribute0.ordering());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.139820771427714
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("3iQ{", (List<String>) null);
      attribute0.setStringValue("3iQ{");
      int int0 = attribute0.addStringValue(attribute0, 0);
      assertFalse(attribute0.isRegular());
      assertEquals(0, int0);
      assertEquals((-1), attribute0.index());
      assertEquals("3iQ{", attribute0.name());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.006981213752692
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      attribute0.getRevision();
      attribute0.setWeight(3);
      attribute0.getRevision();
      attribute0.relation();
      attribute0.isInRange(0.0);
      attribute0.isAveragable();
      attribute0.getDateFormat();
      // Undeclared exception!
      try { 
        attribute0.setValue(0, "Comparing with null object");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only set values for nominal or string attributes!
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9547078905567681
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("8<~$#gOP", (List<String>) null);
      Attribute attribute1 = new Attribute("string", (List<String>) null);
      String string0 = attribute0.equalsMsg(attribute1);
      assertTrue(attribute1.isString());
      assertEquals("Names differ: 8<~$#gOP != string", string0);
      assertNotNull(string0);
      assertFalse(attribute1.isRegular());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.139820771427714
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("", (List<String>) null);
      int int0 = attribute0.indexOfValue("");
      assertEquals(0, attribute0.ordering());
      assertEquals(0, int0);
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.name());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6786071516914347
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Index of value \"first\" of \"position\" (should be 0): ");
      linkedList0.add("Index of value \"first\" of \"position\" (should be 0): ");
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Index of value \"first\" of \"position\" (should be 0): ", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute (Index of value \"first\" of \"position\" (should be 0): ) cannot have duplicate labels (Index of value \"first\" of \"position\" (should be 0): ).
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("M<~$#wtP", (List<String>) null);
      int int0 = attribute0.numValues();
      assertEquals((-1), attribute0.index());
      assertEquals("M<~$#wtP", attribute0.name());
      assertEquals(1, int0);
      assertEquals(0, attribute0.ordering());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9371558530657009
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = new Attribute("}", "}");
      boolean boolean0 = attribute0.isNumeric();
      assertFalse(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertTrue(boolean0);
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertEquals("}", attribute0.name());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.830720856220939
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute(": ");
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(": ", attribute0.name());
      
      String string0 = Attribute.typeToString(4);
      assertEquals("relational", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0739744781558367
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attribute attribute0 = new Attribute(":`TOb~P,k(ISsg", (List<String>) null);
      int int0 = Attribute.NUMERIC;
      String string0 = attribute0.toString();
      assertEquals("@attribute ':`TOb~P,k(ISsg' string", string0);
      assertEquals(0, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("M<~$#wtP", (List<String>) null);
      attribute0.relation();
      Enumeration enumeration0 = attribute0.enumerateValues();
      assertEquals("M<~$#wtP", attribute0.name());
      assertNotNull(enumeration0);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRegular());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.07468728385077
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";L.!u", arrayList0, 3468);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("dmMG<", instances0, protectedProperties1);
      int int0 = attribute0.addStringValue(".bsi");
      assertEquals((-1), int0);
      
      attribute0.numValues();
      assertEquals("dmMG<", attribute0.name());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0, attribute0.ordering());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6893790613840401
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attribute attribute0 = new Attribute("E>G972|l|=.t(");
      attribute0.isInRange(Double.NaN);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("E>G972|l|=.t(", attribute0.name());
      assertEquals((-1), attribute0.index());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5990147122062977
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attribute attribute0 = new Attribute("string", (List<String>) null);
      attribute0.addStringValue("Can only remove value of nominal, string or relation- valued attribute!");
      assertEquals(2, attribute0.numValues());
      
      attribute0.delete(1);
      assertFalse(attribute0.isNominal());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4836940556458569
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      assertFalse(attribute0.isRelationValued());
      
      String string0 = attribute0.equalsMsg(attribute0);
      assertFalse(attribute0.isAveragable());
      assertEquals("", attribute0.name());
      assertNull(string0);
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertEquals(3, attribute0.type());
      assertTrue(attribute0.isRegular());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attribute attribute0 = new Attribute("'", (List<String>) null);
      attribute0.addStringValue("'");
      attribute0.delete(0);
      assertEquals(1, attribute0.numValues());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6098821155436491
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attribute attribute0 = new Attribute("1\"GH@ [#kh(Ru(ySAA", (List<String>) null);
      attribute0.forceAddValue("c#_i@_k.45a_^\"2u");
      attribute0.indexOfValue("1\"GH@ [#kh(Ru(ySAA");
      attribute0.addStringValue("c#_i@_k.45a_^\"2u");
      Attribute attribute1 = new Attribute("1\"GH@ [#kh(Ru(ySAA");
      attribute0.equalsMsg(attribute1);
      assertEquals(2, attribute0.numValues());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(1180);
      Instances instances0 = new Instances("A nominal attribute (", arrayList0, 1180);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1180);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("A nominal attribute (", instances0, protectedProperties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header for relation-valued attribute should not contain any instances
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("not a vlid date format", arrayList0, 1198);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("not a vlid date format", instances0, protectedProperties0);
      // Undeclared exception!
      try { 
        attribute0.delete(1198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attribute attribute0 = new Attribute("%");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, Locale.LanguageRange> biFunction0 = (BiFunction<Object, Object, Locale.LanguageRange>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.merge("`v+?`5dKBPIu", properties0, biFunction0);
      Attribute attribute1 = new Attribute("`v+?`5dKBPIu", protectedProperties0);
      // Undeclared exception!
      try { 
        attribute1.setWeight(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "Wq@3Z;&b$LiH-!q|";
      Instances instances0 = new Instances("Wq@3Z;&b$LiH-!q|", arrayList0, 1475);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", instances0, protectedProperties0);
      // Undeclared exception!
      try { 
        attribute0.setValue(1475, instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1475, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0237842771157732
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("not a valid date format", arrayList0, 1137);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", instances0, protectedProperties0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        attribute0.addRelation(instances0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8627574074262231
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Object has wrong cass", arrayList0, 17);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      MockRandom mockRandom0 = new MockRandom();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("E)VXdk039;i", instances0, protectedProperties1);
      Attribute attribute1 = attribute0.copy("real");
      attribute0.addRelation(instances0);
      int int0 = attribute1.addRelation(instances0);
      assertEquals(1, attribute1.numValues());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.623848004006291
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Hashtable<Integer, String> hashtable0 = new Hashtable<Integer, String>();
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("fNJ/i%_G].@;Xj", arrayList0, 385);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Attribute attribute0 = new Attribute("T<4|Po%kBzEgr", instances1, protectedProperties0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        attribute0.addRelation(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incompatible value for relation-valued attribute.
         // Different number of attributes: 0 != 1
         //
         verifyException("weka.core.Attribute", e);
      }
  }
}
