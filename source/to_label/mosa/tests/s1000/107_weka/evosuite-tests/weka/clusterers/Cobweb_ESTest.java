/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:23:26 GMT 2018
 */

package weka.clusterers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.Cobweb;
import weka.clusterers.FarthestFirst;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cobweb_ESTest extends Cobweb_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      try { 
        cobweb0.addInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      cobweb0.getAcuity();
      FarthestFirst farthestFirst0 = new FarthestFirst();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.seedTipText();
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals("The random number seed to be used. Use -1 for no randomization.", string0);
      assertEquals(42, cobweb0.getSeed());
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.cutoffTipText();
      assertEquals(42, cobweb0.getSeed());
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals("set the category utility threshold by which to prune nodes", string0);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      double double0 = cobweb0.getCutoff();
      assertEquals(0.0028209479177387815, double0, 0.01);
      
      int int0 = cobweb0.graphType();
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals(1, int0);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      try { 
        cobweb0.graph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.clusterers.Cobweb", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.globalInfo();
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(42, cobweb0.getSeed());
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals("Class implementing the Cobweb and Classit clustering algorithms.\n\nNote: the application of node operators (merging, splitting etc.) in terms of ordering and priority differs (and is somewhat ambiguous) between the original Cobweb and Classit papers. This algorithm always compares the best host, adding a new leaf, merging the two best hosts, and splitting the best host when considering where to place a new instance.\n\nFor more information see:\n\nD. Fisher (1987). Knowledge acquisition via incremental conceptual clustering. Machine Learning. 2(2):139-172.\n\nJ. H. Gennari, P. Langley, D. Fisher (1990). Models of incremental concept formation. Artificial Intelligence. 40:11-61.", string0);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.acuityTipText();
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(42, cobweb0.getSeed());
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals("set the minimum standard deviation for numeric attributes", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      assertFalse(cobweb0.getSaveInstanceData());
      
      cobweb0.setSaveInstanceData(true);
      assertTrue(cobweb0.getSaveInstanceData());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      int int0 = cobweb0.numberOfClusters();
      assertEquals((-1), int0);
      
      String string0 = cobweb0.toString();
      assertEquals("Cobweb hasn't been built yet!", string0);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(42, cobweb0.getSeed());
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertFalse(cobweb0.getSaveInstanceData());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      cobweb0.setOptions((String[]) null);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.getRevision();
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(42, cobweb0.getSeed());
      assertEquals("8034", string0);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String string0 = cobweb0.saveInstanceDataTipText();
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals("save instance information for visualization purposes", string0);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      cobweb0.getSaveInstanceData();
      try { 
        cobweb0.clusterInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.clusterers.Cobweb$CNode", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      Cobweb.CNode cobweb_CNode0 = cobweb0.new CNode(325);
      try { 
        cobweb_CNode0.categoryUtility();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // categoryUtility: No children!
         //
         verifyException("weka.clusterers.Cobweb$CNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      Cobweb.CNode cobweb_CNode0 = cobweb0.new CNode(445);
      cobweb_CNode0.getRevision();
      try { 
        cobweb_CNode0.categoryUtilityChild(cobweb_CNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.clusterers.Cobweb$CNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      String[] stringArray0 = cobweb0.getOptions();
      cobweb0.setOptions(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(363);
      int int0 = cobweb0.numberOfClusters();
      assertEquals((-1), int0);
      
      Cobweb.main(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("r");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 3);
      cobweb0.buildClusterer(instances0);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(42, cobweb0.getSeed());
      assertFalse(cobweb0.getSaveInstanceData());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Vector<String> vector0 = new Vector<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-A", vector0, protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        cobweb0.buildClusterer(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.552085297620967
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      Attribute attribute0 = new Attribute("&rY\"<.?+4U)2 adJa`L");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      cobweb0.buildClusterer(instances0);
      assertFalse(cobweb0.getSaveInstanceData());
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3427001955882654
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      assertEquals(42, cobweb0.getSeed());
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6637321680624404
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(" G");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      cobweb0.setCutoff(0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      Instance instance0 = instances0.firstInstance();
      cobweb0.clusterInstance(instance0);
      Cobweb.CNode cobweb_CNode0 = cobweb0.getTreeRoot();
      cobweb_CNode0.addInstance(instance0);
      cobweb0.toString();
      try { 
        cobweb_CNode0.getProbability(2262, (-2111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2262, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5351062927315273
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      Attribute attribute0 = new Attribute("ST.8xs", 497);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 4);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      cobweb0.setCutoff(0);
      instances0.listIterator();
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      cobweb0.buildClusterer(instances0);
      Cobweb.CNode cobweb_CNode0 = cobweb0.m_cobwebTree;
      StringWriter stringWriter0 = new StringWriter(42);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ".arff");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cobweb_CNode0.dumpTree(1, stringBuffer0);
      assertEquals(0.0, cobweb0.getCutoff(), 0.01);
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6680787022174832
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      
      Attribute attribute0 = new Attribute("ST.8xs");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 4);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      cobweb0.setCutoff(0);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      cobweb0.buildClusterer(instances0);
      assertEquals(42, cobweb0.getSeed());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8133554045006157
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("BUr");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 3);
      cobweb0.setSeed((-1431655765));
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cobweb0.setCutoff(0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      assertEquals(0.0, cobweb0.getCutoff(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5626603403745767
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("BUr");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      cobweb0.setCutoff(0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      Cobweb.CNode cobweb_CNode0 = cobweb0.getTreeRoot();
      StringBuffer stringBuffer0 = new StringBuffer();
      cobweb_CNode0.graphTree(stringBuffer0);
      try { 
        cobweb_CNode0.addInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.175414746454172
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("The format of the date values (see ISO-8601).");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.isMissing((-157));
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.m_saveInstances = true;
      cobweb0.buildClusterer(instances0);
      cobweb0.getTreeRoot();
      Cobweb.CNode cobweb_CNode0 = cobweb0.m_cobwebTree;
      StringBuffer stringBuffer0 = new StringBuffer();
      cobweb_CNode0.graphTree(stringBuffer0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5829504226071522
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      
      Attribute attribute0 = new Attribute("ST.8xs");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      cobweb0.setCutoff(0);
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      Random.setNextRandom(2);
      Cobweb.CNode cobweb_CNode0 = cobweb0.getTreeRoot();
      String string0 = cobweb_CNode0.dumpData();
      assertEquals("@relation 'Cluster 0'\n\n@attribute ST.8xs numeric\n@attribute ST.8xs numeric\n@attribute Cluster {C1,C2}\n\n@data\n{0 1,1 1}\n{0 1,1 1,2 C2}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.76162571219778
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cobweb cobweb0 = new Cobweb();
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 4);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      cobweb0.setCutoff(0);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      cobweb0.buildClusterer(instances0);
      Instance instance0 = instances0.firstInstance();
      int int0 = cobweb0.clusterInstance(instance0);
      assertEquals(0.0, cobweb0.getCutoff(), 0.01);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2671306944111977
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("a~", "a~");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("string", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.setWeight(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      Cobweb cobweb0 = new Cobweb();
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      cobweb0.buildClusterer(instances0);
      assertEquals(42, cobweb0.getSeed());
      assertEquals(0.0028209479177387815, cobweb0.getCutoff(), 0.01);
      assertEquals(1.0, cobweb0.getAcuity(), 0.01);
  }
}
