/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:31:50 GMT 2018
 */

package weka.core.neighboursearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.NearestNeighbourSearch;
import weka.core.neighboursearch.PerformanceStats;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BallTreeConstructor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BallTree_ESTest extends BallTree_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      Enumeration enumeration0 = ballTree0.listOptions();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      try { 
        ballTree0.getDistances();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No distances available. Please call either kNearestNeighbours or nearestNeighbours first.
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.getOptions();
      BallTreeConstructor ballTreeConstructor0 = ballTree0.getBallTreeConstructor();
      assertFalse(ballTreeConstructor0.getContainChildBalls());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      String string0 = ballTree0.globalInfo();
      assertEquals("Class implementing the BallTree/Metric Tree algorithm for nearest neighbour search.\nThe connection to dataset is only a reference. For the tree structure the indexes are stored in an array.\nSee the implementing classes of different construction methods of the trees for details on its construction.\n\nFor more information see also:\n\nStephen M. Omohundro (1989). Five Balltree Construction Algorithms.\n\nJeffrey K. Uhlmann (1991). Satisfying general proximity/similarity queries with metric trees. Information Processing Letters. 40(4):175-179.", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      try { 
        ballTree0.buildTree();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No instances supplied yet. Have to call setInstances(instances) with a set of Instances first.
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setOptions((String[]) null);
      assertFalse(ballTree0.getMeasurePerformance());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      try { 
        ballTree0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BallTree ballTree0 = new BallTree((Instances) null);
      try { 
        ballTree0.setInstances((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No instances supplied yet. Have to call setInstances(instances) with a set of Instances first.
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      double double0 = ballTree0.getMeasure("measureTreeSize");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.getRevision();
      // Undeclared exception!
      try { 
        ballTree0.getMeasure("8034");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8034 not supported (BallTree)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instance instance0 = null;
      BallTree ballTree0 = new BallTree();
      try { 
        ballTree0.update((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      PerformanceStats performanceStats0 = new PerformanceStats();
      ballTree0.m_Stats = performanceStats0;
      DenseInstance denseInstance0 = new DenseInstance(1822);
      try { 
        ballTree0.kNearestNeighbours((Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      String string0 = ballTree0.ballTreeConstructorTipText();
      assertEquals("The tree constructor being used.", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      double double0 = ballTree0.measureMaxDepth();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      String[] stringArray0 = ballTree0.getOptions();
      ballTree0.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(ballTree0.getMeasurePerformance());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setMeasurePerformance(true);
      // Undeclared exception!
      try { 
        ballTree0.getMeasure("No distances available. Please call either kNearestNeighbours or nearestNeighbours first.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No distances available. Please call either kNearestNeighbours or nearestNeighbours first. not supported by PerformanceStats.
         //
         verifyException("weka.core.neighboursearch.PerformanceStats", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BallTree ballTree0 = new BallTree((Instances) null);
      double double0 = ballTree0.getMeasure("measureMaxDepth");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W!UC", arrayList0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BallTree ballTree0 = new BallTree(instances0);
      try { 
        ballTree0.update(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.NormalizableDistance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setMeasurePerformance(true);
      String[] stringArray0 = ballTree0.getOptions();
      ballTree0.setOptions(stringArray0);
      assertTrue(ballTree0.getMeasurePerformance());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      Enumeration enumeration0 = ballTree0.enumerateMeasures();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setMeasurePerformance(true);
      ballTree0.enumerateMeasures();
      assertTrue(ballTree0.getMeasurePerformance());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      String[] stringArray0 = new String[9];
      double double0 = ballTree0.getMeasure("measureNumLeaves");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      ballTree0.m_Distances = doubleArray0;
      double[] doubleArray1 = ballTree0.getDistances();
      assertSame(doubleArray1, doubleArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(1940);
      BallNode ballNode0 = new BallNode(1940, 1940, 1940);
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(1852);
      BallNode ballNode0 = new BallNode(1852, 1141, 1141);
      ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, (Instance) null, 1852);
      assertEquals("Whether to calculate performance statistics for the NN search or not", ballTree0.measurePerformanceTipText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      DenseInstance denseInstance0 = new DenseInstance(689);
      try { 
        ballTree0.kNearestNeighbours(denseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(34);
      BallNode ballNode0 = new BallNode(34, 34, 34);
      ballNode0.m_Right = ballNode0;
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, (Instance) null, 34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error: Only one leaf of the built ball tree is assigned. Please check code.
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.256597943527338
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("M8", arrayList0, 47);
      BallTree ballTree0 = new BallTree(instances0);
      ballTree0.setMeasurePerformance(true);
      ballTree0.buildTree();
      DenseInstance denseInstance0 = new DenseInstance(47);
      ballTree0.kNearestNeighbours(denseInstance0, 47);
      assertTrue(ballTree0.getMeasurePerformance());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setMeasurePerformance(true);
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(54);
      BallNode ballNode0 = new BallNode(54);
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, (Instance) null, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(2456);
      BallNode ballNode0 = new BallNode(2456, 2456, 2456);
      ballNode0.m_Right = ballNode0;
      ballNode0.m_Left = ballNode0;
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, (Instance) null, 2456);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.NormalizableDistance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      ballTree0.setMeasurePerformance(true);
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(1426);
      BallNode ballNode0 = new BallNode(1426, 1426, 1426);
      ballNode0.m_Right = ballNode0;
      ballNode0.m_Right.m_Left = ballNode0.m_Right;
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0.m_Right.m_Left, (Instance) null, 1426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.NormalizableDistance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("uW!UC", arrayList0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BallTree ballTree0 = new BallTree(instances0);
      instances0.add((Instance) denseInstance0);
      instances0.add((Instance) denseInstance0);
      ballTree0.buildTree();
      Instance instance0 = ballTree0.nearestNeighbour(denseInstance0);
      assertEquals(0, instance0.numValues());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(">", arrayList0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      instances0.add((Instance) denseInstance0);
      BallTree ballTree0 = new BallTree(instances0);
      ballTree0.buildTree();
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(0);
      BallNode ballNode0 = ballTree0.m_Root;
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, denseInstance0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("qS('O6\u0000Z=", arrayList0, 115);
      Instance instance0 = BallNode.calcCentroidPivot(115, (-2147483632), (int[]) null, instances0);
      BallTree ballTree0 = new BallTree(instances0);
      ballTree0.buildTree();
      BallNode ballNode0 = new BallNode(115, 115, (-2147483632), instance0, 115);
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(0);
      nearestNeighbourSearch_MyHeap0.put(115, (-2147483632));
      try { 
        ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, instance0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("oKglIcSS-!u2:0yI<W", arrayList0, 1435);
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(1435, 115, intArray0, instances0);
      BallTree ballTree0 = new BallTree(instances0);
      ballTree0.buildTree();
      BallNode ballNode0 = new BallNode((-2147483632), 0, 1435, instance0, (-133.0));
      NearestNeighbourSearch.MyHeap nearestNeighbourSearch_MyHeap0 = ballTree0.new MyHeap(115);
      nearestNeighbourSearch_MyHeap0.put(0, 1435);
      ballTree0.nearestNeighbours(nearestNeighbourSearch_MyHeap0, ballNode0, instance0, 0);
      assertEquals(0, ballNode0.m_End);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BallTree ballTree0 = new BallTree();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-C";
      stringArray0[1] = "\n\n";
      stringArray0[2] = "-C";
      stringArray0[3] = "-C";
      stringArray0[4] = "-C";
      stringArray0[5] = "-C";
      try { 
        ballTree0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid BallTreeConstructor specification string.
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }
}
