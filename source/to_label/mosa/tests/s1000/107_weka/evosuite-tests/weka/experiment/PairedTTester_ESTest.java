/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 14:23:50 GMT 2018
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.experiment.PairedCorrectedTTester;
import weka.experiment.PairedTTester;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PairedTTester_ESTest extends PairedTTester_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      try { 
        pairedCorrectedTTester0.multiResultsetSummary(545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      pairedCorrectedTTester0.assign(pairedCorrectedTTester0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      try { 
        pairedTTester0.multiResultsetRanking(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrixPlainText", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(11, stringArray0.length);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      PairedTTester.main(stringArray0);
      assertEquals(250, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      PairedTTester.DatasetSpecifiers pairedTTester_DatasetSpecifiers0 = pairedCorrectedTTester0.new DatasetSpecifiers();
      pairedTTester_DatasetSpecifiers0.removeAllSpecifiers();
      String string0 = pairedTTester_DatasetSpecifiers0.getRevision();
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("8034", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      
      String string0 = pairedCorrectedTTester0.getSortColumnName();
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", string0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      pairedCorrectedTTester0.getResultsetName((-4290));
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      try { 
        pairedCorrectedTTester0.multiResultsetFull(2325, 2325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getToolTipText();
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", string0);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedTTester0.getRunColumn());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset((Instance) null);
      String string0 = pairedTTester_Resultset0.getRevision();
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("8034", string0);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getRunColumn());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String string0 = pairedTTester0.getRevision();
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals("8034", string0);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      String[] stringArray0 = new String[11];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      PairedTTester.Dataset pairedTTester_Dataset0 = pairedTTester0.new Dataset(binarySparseInstance0);
      String string0 = pairedTTester_Dataset0.getRevision();
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals("8034", string0);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      pairedTTester0.setResultMatrix(resultMatrixHTML0);
      String[] stringArray0 = pairedTTester0.getOptions();
      assertEquals(11, stringArray0.length);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      int[] intArray0 = new int[2];
      intArray0[1] = 114;
      pairedCorrectedTTester0.setDisplayedResultsets(intArray0);
      boolean boolean0 = pairedCorrectedTTester0.displayResultset(114);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertTrue(boolean0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      pairedCorrectedTTester0.setSortColumn((-66));
      String string0 = pairedCorrectedTTester0.header((-66));
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("No instances have been set", string0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(string0);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7516666169315167
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      pairedCorrectedTTester0.initResultMatrix();
      Locale.getISOLanguages();
      pairedCorrectedTTester0.getOptions();
      pairedCorrectedTTester0.setSortColumn(5);
      // Undeclared exception!
      try { 
        pairedCorrectedTTester0.getSortColumnName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6806617236749397
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("n");
      assertEquals("n", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("n", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.size());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.index());
      assertEquals("n", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[0];
      pairedCorrectedTTester0.m_DisplayedResultsets = intArray0;
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.size());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Dataset                   (1)          \n---------------------------------------\n                           (1)   0.00 |\n---------------------------------------\n(v/ /*)                               |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7325520881169432
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.setShowStdDevs(true);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.m_ResultsetsValid = true;
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      
      String string0 = pairedCorrectedTTester0.resultsetKey();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7184734013300127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      pairedCorrectedTTester0.m_ResultMatrix = (ResultMatrix) resultMatrixSignificance0;
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.rowNameWidthTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.countWidthTipText());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getDefaultStdDevPrec());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultSignificanceWidth());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", pairedCorrectedTTester0.m_ResultMatrix.printRowNamesTipText());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getDefaultMeanPrec());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultShowStdDev());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", pairedCorrectedTTester0.m_ResultMatrix.enumerateRowNamesTipText());
      assertEquals(5, pairedCorrectedTTester0.m_ResultMatrix.getCountWidth());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultShowAverage());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultMeanWidth());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getColCount());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getEnumerateColNames());
      assertEquals(40, pairedCorrectedTTester0.m_ResultMatrix.getDefaultRowNameWidth());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getEnumerateRowNames());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getVisibleRowCount());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getRemoveFilterName());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getDefaultEnumerateColNames());
      assertEquals("Whether to show the row with averages.", pairedCorrectedTTester0.m_ResultMatrix.showAverageTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getStdDevWidth());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.colNameWidthTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultCountWidth());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", pairedCorrectedTTester0.m_ResultMatrix.meanPrecTipText());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getStdDevPrec());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.stdDevWidthTipText());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.meanWidthTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getShowStdDev());
      assertEquals(25, pairedCorrectedTTester0.m_ResultMatrix.getRowNameWidth());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", pairedCorrectedTTester0.m_ResultMatrix.showStdDevTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", pairedCorrectedTTester0.m_ResultMatrix.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", pairedCorrectedTTester0.m_ResultMatrix.stdDevPrecTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", pairedCorrectedTTester0.m_ResultMatrix.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", pairedCorrectedTTester0.m_ResultMatrix.enumerateColNamesTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultStdDevWidth());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getMeanPrec());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getSignificanceWidth());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getPrintRowNames());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.significanceWidthTipText());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertNotNull(pairedTTester0);
      
      String string0 = pairedTTester0.getDisplayName();
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertNotNull(pairedTTester0);
      
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(335.8265528036542, doubleArray0);
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(binarySparseInstance0);
      
      int[] intArray0 = new int[4];
      pairedTTester0.m_DatasetKeyColumns = intArray0;
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset(binarySparseInstance0);
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pairedTTester_Resultset0);
      
      pairedTTester_Resultset0.add(binarySparseInstance0);
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1383794616756426
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertNotNull(pairedTTester0);
      
      Range range0 = new Range("-1617826439");
      assertFalse(range0.getInvert());
      assertNotNull(range0);
      
      pairedTTester0.m_DatasetKeyColumnsRange = range0;
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertFalse(range0.getInvert());
      assertFalse(pairedTTester0.m_DatasetKeyColumnsRange.getInvert());
      
      pairedTTester0.setRunColumn((-21));
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-21), pairedTTester0.getRunColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      
      String[] stringArray0 = pairedTTester0.getOptions();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-21), pairedTTester0.getRunColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-21), pairedTTester0.getRunColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.m_ResultsetsValid = true;
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      
      // Undeclared exception!
      try { 
        pairedCorrectedTTester0.header(97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8133554045006157
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      pairedCorrectedTTester0.setResultMatrix(resultMatrixCSV0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      
      pairedCorrectedTTester0.setRunColumn(2);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1383794616756426
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertNotNull(pairedCorrectedTTester0);
      
      Range range0 = new Range("W(d/'wQ3LCb-.z%S3Bd");
      assertFalse(range0.getInvert());
      assertNotNull(range0);
      
      pairedCorrectedTTester0.m_ResultsetKeyColumnsRange = range0;
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(range0.getInvert());
      assertFalse(pairedCorrectedTTester0.m_ResultsetKeyColumnsRange.getInvert());
      
      pairedCorrectedTTester0.setRunColumn((-1999));
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1999), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1999), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1999), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7325520881169432
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedCorrectedTTester0);
      
      Range range0 = new Range("6)|=5N<Yy,$*V83");
      assertFalse(range0.getInvert());
      assertNotNull(range0);
      
      pairedCorrectedTTester0.setResultsetKeyColumns(range0);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(range0.getInvert());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2102535776209735
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.experiment.PairedStatsCorrected";
      stringArray0[1] = "-html";
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertNotNull(pairedCorrectedTTester0);
      
      int[] intArray0 = new int[1];
      pairedCorrectedTTester0.m_DatasetKeyColumns = intArray0;
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      
      // Undeclared exception!
      try { 
        pairedCorrectedTTester0.templateString((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      int[] intArray0 = new int[1];
      pairedCorrectedTTester0.m_DatasetKeyColumns = intArray0;
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      
      PairedTTester.DatasetSpecifiers pairedTTester_DatasetSpecifiers0 = pairedCorrectedTTester0.new DatasetSpecifiers();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertNotNull(pairedTTester_DatasetSpecifiers0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(617);
      assertEquals(617, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(617, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      pairedTTester_DatasetSpecifiers0.add(binarySparseInstance0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(617, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(617, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      pairedTTester_DatasetSpecifiers0.add(binarySparseInstance0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(617, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(617, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedCorrectedTTester0);
      
      int[] intArray0 = new int[1];
      pairedCorrectedTTester0.m_DatasetKeyColumns = intArray0;
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      
      PairedTTester.DatasetSpecifiers pairedTTester_DatasetSpecifiers0 = pairedCorrectedTTester0.new DatasetSpecifiers();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedTTester_DatasetSpecifiers0);
      
      SparseInstance sparseInstance0 = new SparseInstance(617);
      assertEquals(617, sparseInstance0.numValues());
      assertEquals(617, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(sparseInstance0);
      
      pairedTTester_DatasetSpecifiers0.add(sparseInstance0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(617, sparseInstance0.numValues());
      assertEquals(617, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      pairedTTester_DatasetSpecifiers0.add(sparseInstance0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(617, sparseInstance0.numValues());
      assertEquals(617, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      String string0 = pairedCorrectedTTester0.resultsetKey();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("No instances have been set", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.215437017792373
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertNotNull(pairedTTester0);
      
      double[] doubleArray0 = new double[18];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(335.8265528036542, doubleArray0);
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(18, binarySparseInstance0.numAttributes());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      int[] intArray0 = new int[4];
      pairedTTester0.m_DatasetKeyColumns = intArray0;
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(18, binarySparseInstance0.numAttributes());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(18, sparseInstance0.numAttributes());
      assertEquals(335.8265528036542, sparseInstance0.weight(), 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(sparseInstance0);
      
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset(sparseInstance0);
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(18, binarySparseInstance0.numAttributes());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(18, sparseInstance0.numAttributes());
      assertEquals(335.8265528036542, sparseInstance0.weight(), 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(pairedTTester_Resultset0);
      
      SparseInstance sparseInstance1 = new SparseInstance(3);
      assertFalse(sparseInstance1.equals((Object)sparseInstance0));
      assertEquals(3, sparseInstance1.numAttributes());
      assertEquals(3, sparseInstance1.numValues());
      assertEquals(1.0, sparseInstance1.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(sparseInstance1);
      
      pairedTTester_Resultset0.add(sparseInstance1);
      assertFalse(sparseInstance0.equals((Object)sparseInstance1));
      assertFalse(sparseInstance1.equals((Object)sparseInstance0));
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(18, binarySparseInstance0.numAttributes());
      assertEquals(335.8265528036542, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(18, sparseInstance0.numAttributes());
      assertEquals(335.8265528036542, sparseInstance0.weight(), 0.01);
      assertEquals(3, sparseInstance1.numAttributes());
      assertEquals(3, sparseInstance1.numValues());
      assertEquals(1.0, sparseInstance1.weight(), 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotSame(sparseInstance0, sparseInstance1);
      assertNotSame(sparseInstance1, sparseInstance0);
      
      String[] stringArray0 = pairedTTester0.getOptions();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1921778535389524
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertNotNull(pairedTTester0);
      
      int[] intArray0 = new int[2];
      pairedTTester0.m_ResultsetKeyColumns = intArray0;
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-150.06300198406126), pairedTTester0.m_ResultsetKeyColumns, 1771);
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1771, binarySparseInstance0.numAttributes());
      assertEquals((-150.06300198406126), binarySparseInstance0.weight(), 0.01);
      assertEquals(2, intArray0.length);
      assertEquals(2, pairedTTester0.m_ResultsetKeyColumns.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, pairedTTester0.m_ResultsetKeyColumns);
      assertNotNull(binarySparseInstance0);
      
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset(binarySparseInstance0);
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1771, binarySparseInstance0.numAttributes());
      assertEquals((-150.06300198406126), binarySparseInstance0.weight(), 0.01);
      assertEquals(2, intArray0.length);
      assertEquals(2, pairedTTester0.m_ResultsetKeyColumns.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, pairedTTester0.m_ResultsetKeyColumns);
      assertNotNull(pairedTTester_Resultset0);
      
      String string0 = pairedTTester_Resultset0.templateString();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1771, binarySparseInstance0.numAttributes());
      assertEquals((-150.06300198406126), binarySparseInstance0.weight(), 0.01);
      assertEquals(2, intArray0.length);
      assertEquals(2, pairedTTester0.m_ResultsetKeyColumns.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, pairedTTester0.m_ResultsetKeyColumns);
      assertSame(pairedTTester0.m_ResultsetKeyColumns, intArray0);
      assertEquals("1 1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      pairedTTester0.setOptions(stringArray0);
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(188, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3";
      stringArray0[1] = "-L";
      stringArray0[2] = "<)<k\"+4=?c~j";
      stringArray0[3] = ".arff";
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 254;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances((String) null, arrayList0, 254);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.m_RunColumnSet = (-2267);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-2267), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-2267), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      try { 
        pairedCorrectedTTester0.multiResultsetSummary(166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.390174224432987
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances((String) null, arrayList0, 245);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      Attribute attribute0 = new Attribute("@data", instances0, 245);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isAveragable());
      assertEquals("@data", attribute0.name());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertEquals(245, attribute0.index());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertNotNull(attribute0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean0 = instances0.add((Instance) binarySparseInstance0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.size());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numInstances());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(4, binarySparseInstance0.numValues());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.size());
      assertNull(instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(4, binarySparseInstance0.numValues());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.size());
      assertNull(instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isAveragable());
      assertEquals("@data", attribute0.name());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isNominal());
      assertEquals(245, attribute0.index());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(boolean2);
      
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.size());
      assertNull(instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      
      String string0 = pairedCorrectedTTester0.resultsetKey();
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("(1) \n\n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2703633171179463
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("?M", "?M");
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals("?M", attribute0.name());
      assertEquals("?M", attribute0.getDateFormat());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isDate());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertNotNull(attribute0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertFalse(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean0 = instances0.add((Instance) binarySparseInstance0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, instances0.numInstances());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.size());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numValues());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals("?M", attribute0.name());
      assertEquals("?M", attribute0.getDateFormat());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isDate());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean1);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances0.numInstances());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      try { 
        pairedCorrectedTTester0.multiResultsetFull(3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.022808529414704
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
      assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
      assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixLatex0);
      
      pairedCorrectedTTester0.m_ResultMatrix = (ResultMatrix) resultMatrixLatex0;
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", pairedCorrectedTTester0.m_ResultMatrix.removeFilterNameTipText());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", pairedCorrectedTTester0.m_ResultMatrix.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", pairedCorrectedTTester0.m_ResultMatrix.stdDevPrecTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultStdDevWidth());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getColCount());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultPrintColNames());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getColNameWidth());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultMeanWidth());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.countWidthTipText());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getDefaultMeanPrec());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getSignificanceWidth());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getPrintRowNames());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getShowStdDev());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getPrintColNames());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.rowNameWidthTipText());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", pairedCorrectedTTester0.m_ResultMatrix.printColNamesTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.significanceWidthTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultEnumerateRowNames());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultRowNameWidth());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", pairedCorrectedTTester0.m_ResultMatrix.enumerateRowNamesTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultShowAverage());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultRemoveFilterName());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", pairedCorrectedTTester0.m_ResultMatrix.showStdDevTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", pairedCorrectedTTester0.m_ResultMatrix.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", pairedCorrectedTTester0.m_ResultMatrix.showAverageTipText());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getShowAverage());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getStdDevPrec());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getRowNameWidth());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getDefaultPrintRowNames());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getRemoveFilterName());
      assertTrue(pairedCorrectedTTester0.m_ResultMatrix.getDefaultEnumerateColNames());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", pairedCorrectedTTester0.m_ResultMatrix.stdDevWidthTipText());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getStdDevWidth());
      assertFalse(pairedCorrectedTTester0.m_ResultMatrix.getEnumerateRowNames());
      assertEquals(1, pairedCorrectedTTester0.m_ResultMatrix.getRowCount());
      assertEquals(2, pairedCorrectedTTester0.m_ResultMatrix.getDefaultStdDevPrec());
      assertEquals(0, pairedCorrectedTTester0.m_ResultMatrix.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", pairedCorrectedTTester0.m_ResultMatrix.meanPrecTipText());
      
      String[] stringArray0 = pairedCorrectedTTester0.getOptions();
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        pairedCorrectedTTester0.calculateStatistics((Instance) null, 1, (-898), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.PairedCorrectedTTester", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.80172383289564
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("?M", "?M");
      assertEquals("?M", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(3, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isDate());
      assertEquals("?M", attribute0.name());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertNotNull(attribute0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean0 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.size());
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals(2, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numInstances());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("?M", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(3, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isDate());
      assertEquals("?M", attribute0.name());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertTrue(boolean2);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(2, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numInstances());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetSummary(0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("     a  (No. of datasets where [col] >> [row])\n     - | a = (1)\n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertNotNull(pairedTTester0);
      
      int[] intArray0 = new int[1];
      pairedTTester0.m_ResultsetKeyColumns = intArray0;
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      assertEquals(14, binarySparseInstance0.numValues());
      assertEquals(14, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset(binarySparseInstance0);
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals(14, binarySparseInstance0.numValues());
      assertEquals(14, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(pairedTTester_Resultset0);
      
      boolean boolean0 = pairedTTester_Resultset0.matchesTemplate(binarySparseInstance0);
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals(14, binarySparseInstance0.numValues());
      assertEquals(14, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5037335882561296
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("\"");
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("\"", attribute0.name());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("\"", attribute0.name());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean0);
      
      pairedCorrectedTTester0.setFoldColumn(3);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(3, pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances0.numInstances());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("\"", attribute0.name());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean2);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(3, pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, instances0.numInstances());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(3, pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Dataset                   (1)          \n---------------------------------------\n                           (1)   0.00 |\n---------------------------------------\n(v/ /*)                               |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("n");
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals("n", attribute0.name());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals("n", attribute0.name());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numInstances());
      assertEquals(1, instances0.size());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      SparseInstance sparseInstance0 = new SparseInstance(2);
      assertEquals(2, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(2, sparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(sparseInstance0);
      
      boolean boolean2 = instances0.add((Instance) sparseInstance0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.size());
      assertEquals(2, sparseInstance0.numAttributes());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(2, sparseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals("n", attribute0.name());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertTrue(boolean3);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.size());
      assertTrue(arrayList0.contains(attribute0));
      
      try { 
        pairedCorrectedTTester0.multiResultsetFull(0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("3", arrayList0, 10);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals("3", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals("3", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      
      pairedCorrectedTTester0.m_ResultsetKeyColumnsRange = null;
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      
      try { 
        pairedCorrectedTTester0.multiResultsetFull(695, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertNotNull(pairedTTester0);
      
      int[] intArray0 = new int[9];
      pairedTTester0.m_ResultsetKeyColumns = intArray0;
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      
      int int0 = 70;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70);
      assertEquals(70, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(70, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      PairedTTester.Resultset pairedTTester_Resultset0 = pairedTTester0.new Resultset(binarySparseInstance0);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals(70, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(70, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(pairedTTester_Resultset0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = 99.1449;
      doubleArray0[3] = (double) 70;
      doubleArray0[5] = (double) 70;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0, pairedTTester0.m_ResultsetKeyColumns, 70);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals(3.0, sparseInstance0.weight(), 0.01);
      assertEquals(70, sparseInstance0.numAttributes());
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new double[] {70.0, 70.0, 99.1449, 70.0, 0.0, 70.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseInstance0);
      
      boolean boolean0 = pairedTTester_Resultset0.matchesTemplate(sparseInstance0);
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertEquals(70, binarySparseInstance0.numAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(70, binarySparseInstance0.numValues());
      assertEquals(3.0, sparseInstance0.weight(), 0.01);
      assertEquals(70, sparseInstance0.numAttributes());
      assertEquals(5, sparseInstance0.numValues());
      assertEquals(7, doubleArray0.length);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertArrayEquals(new double[] {70.0, 70.0, 99.1449, 70.0, 0.0, 70.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      try { 
        pairedTTester0.prepareData();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No instances have been set
         //
         verifyException("weka.experiment.PairedTTester", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.741680251140301
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("?M");
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertEquals("?M", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertNotNull(attribute0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean0 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.size());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertFalse(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertEquals("?M", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertTrue(boolean1);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.size());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 0);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("Dataset                   (1)          \n---------------------------------------\n                           (1)   1.00 |\n---------------------------------------\n(v/ /*)                               |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4587104622927063
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<Attribute> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      Attribute attribute0 = new Attribute(":?");
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(":?", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals(":?", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals(1, instances0.size());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      pairedCorrectedTTester0.m_ShowStdDevs = true;
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertEquals(":?", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertTrue(boolean2);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals(1, instances0.size());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Dataset                   (1)               \n--------------------------------------------\n                           (1)   0.00(Inf) |\n--------------------------------------------\n(v/ /*)                                    |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6142898133750685
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      pairedCorrectedTTester0.m_ShowStdDevs = true;
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      
      Attribute attribute0 = new Attribute("");
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("", attribute0.name());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("", attribute0.name());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numAttributes());
      assertEquals(1, instances0.numInstances());
      assertEquals(1, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(2, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertEquals(2, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2, binarySparseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.name());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(boolean3);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertTrue(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Dataset                   (1)                \n---------------------------------------------\n                           (2)   1.00(0.00) |\n---------------------------------------------\n(v/ /*)                                     |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7999587982097305
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PairedTTester pairedTTester0 = new PairedTTester();
      assertEquals("Paired T-Tester", pairedTTester0.getDisplayName());
      assertEquals("Performs test using t-test statistic", pairedTTester0.getToolTipText());
      assertEquals(0.05, pairedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedTTester0.getFoldColumn());
      assertFalse(pairedTTester0.getShowStdDevs());
      assertEquals("-", pairedTTester0.getSortColumnName());
      assertEquals((-1), pairedTTester0.getSortColumn());
      assertEquals((-1), pairedTTester0.getRunColumn());
      assertNotNull(pairedTTester0);
      
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertNotNull(pairedCorrectedTTester0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-R";
      stringArray0[1] = "first";
      pairedCorrectedTTester0.setOptions(stringArray0);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(0, pairedCorrectedTTester0.getRunColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.720198061069483
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("n");
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals("n", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals("n", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("integer", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numInstances());
      assertEquals("integer", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals("n", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertTrue(boolean2);
      
      pairedCorrectedTTester0.setSortColumn(2);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.numInstances());
      assertEquals("integer", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals(2, pairedCorrectedTTester0.getSortColumn());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals("Dataset                   (1)          \n---------------------------------------\n                           (1)   0.00 |\n---------------------------------------\n(v/ /*)                               |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.496738211036999
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PairedCorrectedTTester pairedCorrectedTTester0 = new PairedCorrectedTTester();
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals(0.05, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertNotNull(pairedCorrectedTTester0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("\"");
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("\"", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("\"", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean0);
      
      Instances instances0 = new Instances("integer", arrayList0, 3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      assertNotNull(instances0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      
      boolean boolean1 = instances0.add((Instance) binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(1, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.size());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(1, binarySparseInstance0.numAttributes());
      assertEquals(1, binarySparseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertTrue(boolean1);
      
      pairedCorrectedTTester0.setSignificanceLevel(1);
      assertEquals(1.0, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("\"", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertTrue(arrayList0.contains(attribute0));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(boolean2);
      
      pairedCorrectedTTester0.setInstances(instances0);
      assertEquals(1.0, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.size());
      assertEquals(1.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals("integer", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      String string0 = pairedCorrectedTTester0.multiResultsetFull(0, 1);
      assertEquals(1.0, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Dataset                   (1)          \n---------------------------------------\n                           (1)   0.00 |\n---------------------------------------\n(v/ /*)                               |\n\n\nKey:\n(1) \n", string0);
      assertNotNull(string0);
      
      String string1 = pairedCorrectedTTester0.multiResultsetFull(0, 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.0, pairedCorrectedTTester0.getSignificanceLevel(), 0.01);
      assertEquals((-1), pairedCorrectedTTester0.getSortColumn());
      assertEquals("-", pairedCorrectedTTester0.getSortColumnName());
      assertEquals((-1), pairedCorrectedTTester0.getFoldColumn());
      assertEquals((-1), pairedCorrectedTTester0.getRunColumn());
      assertFalse(pairedCorrectedTTester0.getShowStdDevs());
      assertEquals("Performs test using corrected resampled t-test statistic (Nadeau and Bengio)", pairedCorrectedTTester0.getToolTipText());
      assertEquals("Paired T-Tester (corrected)", pairedCorrectedTTester0.getDisplayName());
      assertEquals("Dataset                   (1)      \n-----------------------------------\n                           (0)    |\n-----------------------------------\n(v/ /*)                           |\n\n\nKey:\n(1) \n", string1);
      assertNotNull(string1);
  }
}
