/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 07 13:44:09 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Environment;
import weka.core.converters.DatabaseSaver;
import weka.core.converters.SVMLightLoader;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Clusterer;
import weka.gui.beans.FlowRunner;
import weka.gui.beans.Loader;
import weka.gui.beans.Saver;
import weka.gui.beans.Startable;
import weka.gui.beans.TextViewer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FlowRunner_ESTest extends FlowRunner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FlowRunner.main(stringArray0);
      FlowRunner.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlowRunner.SimpleLogger flowRunner_SimpleLogger0 = new FlowRunner.SimpleLogger();
      flowRunner_SimpleLogger0.statusMessage((String) null);
      flowRunner_SimpleLogger0.logMessage("F");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      flowRunner0.setStartSequentially(false);
      flowRunner0.getFlows();
      // Undeclared exception!
      try { 
        flowRunner0.waitUntilFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      try { 
        flowRunner0.load("E5Oo,qxl@gr<U'&=n2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can only load and run binary or xml serialized KnowledgeFlows (*.kf | *.kfml)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      TreeMap<Integer, Startable> treeMap0 = new TreeMap<Integer, Startable>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Loader loader0 = new Loader();
      treeMap0.put(integer0, loader0);
      flowRunner0.runSequentially(treeMap0);
      assertFalse(flowRunner0.getStartSequentially());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      try { 
        flowRunner0.run();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Don't seem to have any beans I can execute.
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      try { 
        flowRunner0.loadXML("CF has to be greater than zero and smaller than one!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File must be an XML flow (*.kfml)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Loader loader0 = new Loader();
      Saver saver0 = new Saver();
      flowRunner0.getStartSequentially();
      flowRunner0.setEnvironment((Environment) null);
      FlowRunner flowRunner1 = new FlowRunner(false, false);
      try { 
        flowRunner1.loadBinary("n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File must be a binary flow (*.kf)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      flowRunner0.getRevision();
      try { 
        flowRunner0.loadBinary("$Revision: 8034 $");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File must be a binary flow (*.kf)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      flowRunner0.decreaseCount();
      Stack<DatabaseSaver> stack0 = new Stack<DatabaseSaver>();
      assertTrue(stack0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      flowRunner0.getEnvironment();
      flowRunner0.m_env = null;
      Vector<ClassValuePicker> vector0 = new Vector<ClassValuePicker>();
      flowRunner0.setFlows(vector0);
      flowRunner0.waitUntilFinished();
      assertFalse(flowRunner0.getStartSequentially());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Stack<TextViewer> stack0 = new Stack<TextViewer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      flowRunner0.setFlows(stack0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      flowRunner0.run();
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FlowRunner.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      
      // Undeclared exception!
      try { 
        flowRunner0.load(".kfml");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.gui.beans.xml.XMLBeans", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VZ";
      stringArray0[1] = "VZ";
      FlowRunner.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      FlowRunner.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Vector<TextViewer> vector0 = new Vector<TextViewer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = vector0.add((TextViewer) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      flowRunner0.setFlows(vector0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      try { 
        flowRunner0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Vector<TextViewer> vector0 = new Vector<TextViewer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add((TextViewer) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      flowRunner0.setFlows(vector0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      // Undeclared exception!
      try { 
        flowRunner0.waitUntilFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      
      TreeMap<Integer, Startable> treeMap0 = new TreeMap<Integer, Startable>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Vector<TextViewer> vector0 = new Vector<TextViewer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      flowRunner0.setFlows(vector0);
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      flowRunner0.stopAllFlows();
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      
      try { 
        flowRunner0.load(".kfml.kf");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Loader loader0 = new Loader();
      assertNotNull(loader0);
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      
      flowRunner0.launchThread(loader0, (-313));
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      
      Vector<Clusterer> vector0 = new Vector<Clusterer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        flowRunner0.waitUntilFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      flowRunner0.m_log = (Logger) sysErrLog0;
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(flowRunner0.getStartSequentially());
      
      Vector<SVMLightLoader> vector0 = new Vector<SVMLightLoader>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        flowRunner0.waitUntilFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.FlowRunner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Vector<Clusterer> vector0 = new Vector<Clusterer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      flowRunner0.setFlows(vector0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, false);
      assertNotNull(logPanel0);
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      assertFalse(logPanel0.getIgnoreRepaint());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      
      flowRunner0.m_log = (Logger) logPanel0;
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      assertFalse(logPanel0.getIgnoreRepaint());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      
      flowRunner0.run();
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FlowRunner flowRunner0 = new FlowRunner(false, false);
      assertNotNull(flowRunner0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      Vector<Clusterer> vector0 = new Vector<Clusterer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      flowRunner0.setFlows(vector0);
      assertFalse(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      flowRunner0.setStartSequentially(true);
      assertTrue(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, false, false, true);
      assertNotNull(logPanel0);
      assertFalse(logPanel0.getIgnoreRepaint());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      
      flowRunner0.run();
      assertTrue(flowRunner0.getStartSequentially());
      assertEquals("$Revision: 8034 $", flowRunner0.getRevision());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%Q c5EuM}=yKRV";
      stringArray0[1] = "z3Rird";
      stringArray0[2] = "lows.";
      stringArray0[3] = "F2?JK6 EjKAK%";
      stringArray0[4] = "E";
      stringArray0[5] = "r:xJ";
      stringArray0[7] = "l?g@ ~'";
      stringArray0[8] = "l?g@ ~'";
      FlowRunner.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }
}
